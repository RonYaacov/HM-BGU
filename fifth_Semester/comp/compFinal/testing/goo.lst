     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "a"
   469 000005DE 0100000000000000        	dq 1
   470 000005E6 61                      	db 0x61
   471                                  	; L_constants + 1511:
   472 000005E7 11                      	db T_integer	; 5
   473 000005E8 0500000000000000        	dq 5
   474                                  free_var_0:	; location of a
   475 000005F0 [F805000000000000]      	dq .undefined_object
   476                                  .undefined_object:
   477 000005F8 05                      	db T_undefined
   478 000005F9 [DD05000000000000]      	dq L_constants + 1501
   479                                  
   480                                  
   481                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   482                                  global main
   483                                  section .text
   484                                  main:
   485 00000000 C8000000                        enter 0, 0
   486 00000004 6A00                            push 0
   487 00000006 6A00                            push 0
   488 00000008 68[2D000000]                    push Lend
   489 0000000D C8000000                        enter 0, 0
   490                                  
   491 00000011 48B8-                   	mov rax, L_constants + 1511
   491 00000013 [E705000000000000] 
   492 0000001B 48890425[F0050000]      	mov qword [free_var_0], rax
   493 00000023 48B8-                   	mov rax, sob_void
   493 00000025 [0000000000000000] 
   494                                  Lend:
   495 0000002D 4889C7                  	mov rdi, rax
   496 00000030 E8B8030000              	call print_sexpr_if_not_void
   497                                  
   498 00000035 48BF-                           mov rdi, fmt_memory_usage
   498 00000037 [9906000000000000] 
   499 0000003F 488B3425[1F070000]              mov rsi, qword [top_of_memory]
   500 00000047 4881EE[00000000]                sub rsi, memory
   501 0000004E B800000000                      mov rax, 0
   502                                          ENTER
    44 00000053 C8000000            <1>  enter 0, 0
    45 00000057 4883E4F0            <1>  and rsp, ~15
   503 0000005B E8(00000000)                    call printf
   504                                          LEAVE
    49 00000060 C9                  <1>  leave
   505 00000061 B800000000                      mov rax, 0
   506 00000066 E8(00000000)                    call exit
   507                                  
   508                                  L_error_fvar_undefined:
   509 0000006B 50                              push rax
   510 0000006C 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   511 00000074 48BE-                           mov rsi, fmt_undefined_free_var_1
   511 00000076 [0106000000000000] 
   512 0000007E B800000000                      mov rax, 0
   513                                          ENTER
    44 00000083 C8000000            <1>  enter 0, 0
    45 00000087 4883E4F0            <1>  and rsp, ~15
   514 0000008B E8(00000000)                    call fprintf
   515                                          LEAVE
    49 00000090 C9                  <1>  leave
   516 00000091 58                              pop rax
   517 00000092 488B4001                        mov rax, qword [rax + 1] ; string
   518 00000096 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   519 0000009A BE01000000                      mov rsi, 1               ; sizeof(char)
   520 0000009F 488B5001                        mov rdx, qword [rax + 1] ; string-length
   521 000000A3 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   522 000000AB B800000000                      mov rax, 0
   523                                          ENTER
    44 000000B0 C8000000            <1>  enter 0, 0
    45 000000B4 4883E4F0            <1>  and rsp, ~15
   524 000000B8 E8(00000000)                    call fwrite
   525                                          LEAVE
    49 000000BD C9                  <1>  leave
   526 000000BE 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   527 000000C6 48BE-                           mov rsi, fmt_undefined_free_var_2
   527 000000C8 [1806000000000000] 
   528 000000D0 B800000000                      mov rax, 0
   529                                          ENTER
    44 000000D5 C8000000            <1>  enter 0, 0
    45 000000D9 4883E4F0            <1>  and rsp, ~15
   530 000000DD E8(00000000)                    call fprintf
   531                                          LEAVE
    49 000000E2 C9                  <1>  leave
   532 000000E3 48C7C0F6FFFFFF                  mov rax, -10
   533 000000EA E8(00000000)                    call exit
   534                                  
   535                                  L_error_non_closure:
   536 000000EF 488B3C25[00000000]              mov rdi, qword [stderr]
   537 000000F7 48BE-                           mov rsi, fmt_non_closure
   537 000000F9 [CF06000000000000] 
   538 00000101 B800000000                      mov rax, 0
   539                                          ENTER
    44 00000106 C8000000            <1>  enter 0, 0
    45 0000010A 4883E4F0            <1>  and rsp, ~15
   540 0000010E E8(00000000)                    call fprintf
   541                                          LEAVE
    49 00000113 C9                  <1>  leave
   542 00000114 48C7C0FEFFFFFF                  mov rax, -2
   543 0000011B E8(00000000)                    call exit
   544                                  
   545                                  L_error_improper_list:
   546 00000120 488B3C25[00000000]      	mov rdi, qword [stderr]
   547 00000128 48BE-                   	mov rsi, fmt_error_improper_list
   547 0000012A [F706000000000000] 
   548 00000132 B800000000              	mov rax, 0
   549                                          ENTER
    44 00000137 C8000000            <1>  enter 0, 0
    45 0000013B 4883E4F0            <1>  and rsp, ~15
   550 0000013F E8(00000000)            	call fprintf
   551                                          LEAVE
    49 00000144 C9                  <1>  leave
   552 00000145 48C7C0F9FFFFFF          	mov rax, -7
   553 0000014C E8(00000000)            	call exit
   554                                  
   555                                  L_error_incorrect_arity_simple:
   556 00000151 488B3C25[00000000]              mov rdi, qword [stderr]
   557 00000159 48BE-                           mov rsi, fmt_incorrect_arity_simple
   557 0000015B [3A06000000000000] 
   558 00000163 EB12                            jmp L_error_incorrect_arity_common
   559                                  L_error_incorrect_arity_opt:
   560 00000165 488B3C25[00000000]              mov rdi, qword [stderr]
   561 0000016D 48BE-                           mov rsi, fmt_incorrect_arity_opt
   561 0000016F [6506000000000000] 
   562                                  L_error_incorrect_arity_common:
   563 00000177 5A                              pop rdx
   564 00000178 59                              pop rcx
   565 00000179 B800000000                      mov rax, 0
   566                                          ENTER
    44 0000017E C8000000            <1>  enter 0, 0
    45 00000182 4883E4F0            <1>  and rsp, ~15
   567 00000186 E8(00000000)                    call fprintf
   568                                          LEAVE
    49 0000018B C9                  <1>  leave
   569 0000018C 48C7C0FAFFFFFF                  mov rax, -6
   570 00000193 E8(00000000)                    call exit
   571                                  
   572                                  section .data
   573                                  fmt_undefined_free_var_1:
   574 00000601 212121205468652066-             db `!!! The free variable \0`
   574 0000060A 726565207661726961-
   574 00000613 626C652000         
   575                                  fmt_undefined_free_var_2:
   576 00000618 207761732075736564-             db ` was used before it was defined.\n\0`
   576 00000621 206265666F72652069-
   576 0000062A 742077617320646566-
   576 00000633 696E65642E0A00     
   577                                  fmt_incorrect_arity_simple:
   578 0000063A 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   578 00000643 74656420256C642061-
   578 0000064C 7267756D656E74732C-
   578 00000655 206275742067697665-
   578 0000065E 6E20256C640A00     
   579                                  fmt_incorrect_arity_opt:
   580 00000665 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   580 0000066E 746564206174206C65-
   580 00000677 61737420256C642061-
   580 00000680 7267756D656E74732C-
   580 00000689 206275742067697665-
   580 00000692 6E20256C640A00     
   581                                  fmt_memory_usage:
   582 00000699 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   582 000006A2 20256C642062797465-
   582 000006AB 73206F662064796E61-
   582 000006B4 6D6963616C6C792D61-
   582 000006BD 6C6C6F636174656420-
   582 000006C6 6D656D6F72790A0A00 
   583                                  fmt_non_closure:
   584 000006CF 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   584 000006D8 7074696E6720746F20-
   584 000006E1 6170706C792061206E-
   584 000006EA 6F6E2D636C6F737572-
   584 000006F3 65210A00           
   585                                  fmt_error_improper_list:
   586 000006F7 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   586 00000700 7267756D656E742069-
   586 00000709 73206E6F7420612070-
   586 00000712 726F706572206C6973-
   586 0000071B 74210A00           
   587                                  
   588                                  section .bss
   589                                  memory:
   590 00000000 <res 40000000h>         	resb gbytes(1)
   591                                  
   592                                  section .data
   593                                  top_of_memory:
   594 0000071F [0000000000000000]              dq memory
   595                                  
   596                                  section .text
   597                                  malloc:
   598 00000198 488B0425[1F070000]              mov rax, qword [top_of_memory]
   599 000001A0 48013C25[1F070000]              add qword [top_of_memory], rdi
   600 000001A8 C3                              ret
   601                                  
   602                                  L_code_ptr_return:
   603 000001A9 48837C241002            	cmp qword [rsp + 8*2], 2
   604 000001AF 0F85A61C0000            	jne L_error_arg_count_2
   605 000001B5 488B4C2418              	mov rcx, qword [rsp + 8*3]
   606                                  	assert_integer(rcx)
    53 000001BA 803911              <1>  cmp byte [%1], %2
    54 000001BD 0F85371D0000        <1>  jne L_error_incorrect_type
   607 000001C3 488B4901                	mov rcx, qword [rcx + 1]
   608 000001C7 4883F900                	cmp rcx, 0
   609 000001CB 0F8CBE1B0000            	jl L_error_integer_range
   610 000001D1 488B442420              	mov rax, qword [rsp + 8*4]
   611                                  .L0:
   612 000001D6 4883F900                        cmp rcx, 0
   613 000001DA 7409                            je .L1
   614 000001DC 488B6D00                	mov rbp, qword [rbp]
   615 000001E0 48FFC9                  	dec rcx
   616 000001E3 7FF1                    	jg .L0
   617                                  .L1:
   618 000001E5 4889EC                  	mov rsp, rbp
   619 000001E8 5D                      	pop rbp
   620 000001E9 5B                              pop rbx
   621 000001EA 488B4C2408                      mov rcx, qword [rsp + 8*1]
   622 000001EF 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   623 000001F4 FFE3                    	jmp rbx
   624                                  
   625                                  L_code_ptr_make_list:
   626 000001F6 C8000000                	enter 0, 0
   627 000001FA 48837D1801                      cmp COUNT, 1
   628 000001FF 740C                            je .L0
   629 00000201 48837D1802                      cmp COUNT, 2
   630 00000206 7411                            je .L1
   631 00000208 E9831C0000                      jmp L_error_arg_count_12
   632                                  .L0:
   633 0000020D 49B9-                           mov r9, sob_void
   633 0000020F [0000000000000000] 
   634 00000217 EB04                            jmp .L2
   635                                  .L1:
   636 00000219 4C8B4D28                        mov r9, PARAM(1)
   637                                  .L2:
   638 0000021D 488B4D20                        mov rcx, PARAM(0)
   639                                          assert_integer(rcx)
    53 00000221 803911              <1>  cmp byte [%1], %2
    54 00000224 0F85D01C0000        <1>  jne L_error_incorrect_type
   640 0000022A 488B4901                        mov rcx, qword [rcx + 1]
   641 0000022E 4883F900                        cmp rcx, 0
   642 00000232 0F8C881B0000                    jl L_error_arg_negative
   643 00000238 49B8-                           mov r8, sob_nil
   643 0000023A [0100000000000000] 
   644                                  .L3:
   645 00000242 4883F900                        cmp rcx, 0
   646 00000246 7E1D                            jle .L4
   647 00000248 BF11000000                      mov rdi, 1 + 8 + 8
   648 0000024D E846FFFFFF                      call malloc
   649 00000252 C60021                          mov byte [rax], T_pair
   650 00000255 4C894801                        mov qword [rax + 1], r9
   651 00000259 4C894009                        mov qword [rax + 1 + 8], r8
   652 0000025D 4989C0                          mov r8, rax
   653 00000260 48FFC9                          dec rcx
   654 00000263 EBDD                            jmp .L3
   655                                  .L4:
   656 00000265 4C89C0                          mov rax, r8
   657 00000268 48837D1802                      cmp COUNT, 2
   658 0000026D 7404                            je .L5
   659 0000026F C9                              leave
   660 00000270 C21800                          ret AND_KILL_FRAME(1)
   661                                  .L5:
   662 00000273 C9                      	leave
   663 00000274 C22000                  	ret AND_KILL_FRAME(2)
   664                                  
   665                                  L_code_ptr_is_primitive:
   666 00000277 C8000000                	enter 0, 0
   667 0000027B 48837D1801              	cmp COUNT, 1
   668 00000280 0F85A01B0000            	jne L_error_arg_count_1
   669 00000286 488B4520                	mov rax, PARAM(0)
   670                                  	assert_closure(rax)
    53 0000028A 803804              <1>  cmp byte [%1], %2
    54 0000028D 0F85671C0000        <1>  jne L_error_incorrect_type
   671 00000293 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   672 00000298 750C                    	jne .L_false
   673 0000029A 48B8-                   	mov rax, sob_boolean_true
   673 0000029C [0300000000000000] 
   674 000002A4 EB0A                    	jmp .L_end
   675                                  .L_false:
   676 000002A6 48B8-                   	mov rax, sob_boolean_false
   676 000002A8 [0200000000000000] 
   677                                  .L_end:
   678 000002B0 C9                      	leave
   679 000002B1 C21800                  	ret AND_KILL_FRAME(1)
   680                                  
   681                                  L_code_ptr_length:
   682 000002B4 C8000000                	enter 0, 0
   683 000002B8 48837D1801              	cmp COUNT, 1
   684 000002BD 0F85631B0000            	jne L_error_arg_count_1
   685 000002C3 488B5D20                	mov rbx, PARAM(0)
   686 000002C7 BF00000000              	mov rdi, 0
   687                                  .L:
   688 000002CC 803B01                  	cmp byte [rbx], T_nil
   689 000002CF 7412                    	je .L_end
   690                                  	assert_pair(rbx)
    53 000002D1 803B21              <1>  cmp byte [%1], %2
    54 000002D4 0F85201C0000        <1>  jne L_error_incorrect_type
   691 000002DA 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   692 000002DE 48FFC7                  	inc rdi
   693 000002E1 EBE9                    	jmp .L
   694                                  .L_end:
   695 000002E3 E88D1A0000              	call make_integer
   696 000002E8 C9                      	leave
   697 000002E9 C21800                  	ret AND_KILL_FRAME(1)
   698                                  
   699                                  L_code_ptr_break:
   700 000002EC 48837C241000                    cmp qword [rsp + 8 * 2], 0
   701 000002F2 0F85F91A0000                    jne L_error_arg_count_0
   702 000002F8 CC                              int3
   703 000002F9 48B8-                           mov rax, sob_void
   703 000002FB [0000000000000000] 
   704 00000303 C21000                          ret AND_KILL_FRAME(0)        
   705                                  
   706                                  L_code_ptr_frame:
   707 00000306 C8000000                        enter 0, 0
   708 0000030A 48837D1800                      cmp COUNT, 0
   709 0000030F 0F85DC1A0000                    jne L_error_arg_count_0
   710                                  
   711 00000315 48BF-                           mov rdi, fmt_frame
   711 00000317 [2707000000000000] 
   712 0000031F 488B7500                        mov rsi, qword [rbp]    ; old rbp
   713 00000323 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   714 00000327 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   715 0000032B 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   716 0000032F 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   717 00000333 6A00                            push 0
   718 00000335 4151                            push r9
   719 00000337 4150                            push r8                   ; we'll use it when printing the params
   720 00000339 B800000000                      mov rax, 0
   721                                          
   722                                          ENTER
    44 0000033E C8000000            <1>  enter 0, 0
    45 00000342 4883E4F0            <1>  and rsp, ~15
   723 00000346 E8(00000000)                    call printf
   724                                          LEAVE
    49 0000034B C9                  <1>  leave
   725                                  
   726                                  .L:
   727 0000034C 488B0C24                        mov rcx, qword [rsp]
   728 00000350 4883F900                        cmp rcx, 0
   729 00000354 7467                            je .L_out
   730 00000356 48BF-                           mov rdi, fmt_frame_param_prefix
   730 00000358 [6007000000000000] 
   731 00000360 488B742410                      mov rsi, qword [rsp + 8*2]
   732 00000365 B800000000                      mov rax, 0
   733                                          
   734                                          ENTER
    44 0000036A C8000000            <1>  enter 0, 0
    45 0000036E 4883E4F0            <1>  and rsp, ~15
   735 00000372 E8(00000000)                    call printf
   736                                          LEAVE
    49 00000377 C9                  <1>  leave
   737                                  
   738 00000378 488B0C24                        mov rcx, qword [rsp]
   739 0000037C 48FFC9                          dec rcx
   740 0000037F 48890C24                        mov qword [rsp], rcx    ; dec arg count
   741 00000383 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   742 00000388 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   743 0000038D 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   744 00000391 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   745 00000396 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   746 00000399 E87B000000                      call print_sexpr
   747 0000039E 48BF-                           mov rdi, fmt_newline
   747 000003A0 [8C07000000000000] 
   748 000003A8 B800000000                      mov rax, 0
   749                                          ENTER
    44 000003AD C8000000            <1>  enter 0, 0
    45 000003B1 4883E4F0            <1>  and rsp, ~15
   750 000003B5 E8(00000000)                    call printf
   751                                          LEAVE
    49 000003BA C9                  <1>  leave
   752 000003BB EB8F                            jmp .L
   753                                  .L_out:
   754 000003BD 48BF-                           mov rdi, fmt_frame_continue
   754 000003BF [7107000000000000] 
   755 000003C7 B800000000                      mov rax, 0
   756                                          ENTER
    44 000003CC C8000000            <1>  enter 0, 0
    45 000003D0 4883E4F0            <1>  and rsp, ~15
   757 000003D4 E8(00000000)                    call printf
   758 000003D9 E8(00000000)                    call getchar
   759                                          LEAVE
    49 000003DE C9                  <1>  leave
   760                                          
   761 000003DF 48B8-                           mov rax, sob_void
   761 000003E1 [0000000000000000] 
   762 000003E9 C9                              leave
   763 000003EA C21000                          ret AND_KILL_FRAME(0)
   764                                          
   765                                  print_sexpr_if_not_void:
   766 000003ED 4881FF[00000000]        	cmp rdi, sob_void
   767 000003F4 7422                    	je .done
   768 000003F6 E81E000000              	call print_sexpr
   769 000003FB 48BF-                   	mov rdi, fmt_newline
   769 000003FD [8C07000000000000] 
   770 00000405 B800000000              	mov rax, 0
   771                                  	ENTER
    44 0000040A C8000000            <1>  enter 0, 0
    45 0000040E 4883E4F0            <1>  and rsp, ~15
   772 00000412 E8(00000000)            	call printf
   773                                  	LEAVE
    49 00000417 C9                  <1>  leave
   774                                  .done:
   775 00000418 C3                      	ret
   776                                  
   777                                  section .data
   778                                  fmt_frame:
   779 00000727 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   779 00000730 207265742061646472-
   779 00000739 203D2025703B206C65-
   779 00000742 7820656E76203D2025-
   779 0000074B 703B20706172616D20-
   779 00000754 636F756E74203D2025-
   779 0000075D 640A00             
   780                                  fmt_frame_param_prefix:
   781 00000760 3D3D5B706172616D20-             db `==[param %d]==> \0`
   781 00000769 25645D3D3D3E2000   
   782                                  fmt_frame_continue:
   783 00000771 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   783 0000077A 723E20746F20636F6E-
   783 00000783 74696E75652E2E2E00 
   784                                  fmt_newline:
   785 0000078C 0A00                    	db `\n\0`
   786                                  fmt_void:
   787 0000078E 233C766F69643E00        	db `#<void>\0`
   788                                  fmt_nil:
   789 00000796 282900                  	db `()\0`
   790                                  fmt_boolean_false:
   791 00000799 236600                  	db `#f\0`
   792                                  fmt_boolean_true:
   793 0000079C 237400                  	db `#t\0`
   794                                  fmt_char_backslash:
   795 0000079F 235C5C00                	db `#\\\\\0`
   796                                  fmt_char_dquote:
   797 000007A3 235C2200                	db `#\\"\0`
   798                                  fmt_char_simple:
   799 000007A7 235C256300              	db `#\\%c\0`
   800                                  fmt_char_null:
   801 000007AC 235C6E756C00            	db `#\\nul\0`
   802                                  fmt_char_bell:
   803 000007B2 235C62656C6C00          	db `#\\bell\0`
   804                                  fmt_char_backspace:
   805 000007B9 235C6261636B737061-     	db `#\\backspace\0`
   805 000007C2 636500             
   806                                  fmt_char_tab:
   807 000007C5 235C74616200            	db `#\\tab\0`
   808                                  fmt_char_newline:
   809 000007CB 235C6E65776C696E65-     	db `#\\newline\0`
   809 000007D4 00                 
   810                                  fmt_char_formfeed:
   811 000007D5 235C7061676500          	db `#\\page\0`
   812                                  fmt_char_return:
   813 000007DC 235C72657475726E00      	db `#\\return\0`
   814                                  fmt_char_escape:
   815 000007E5 235C65736300            	db `#\\esc\0`
   816                                  fmt_char_space:
   817 000007EB 235C737061636500        	db `#\\space\0`
   818                                  fmt_char_hex:
   819 000007F3 235C782530325800        	db `#\\x%02X\0`
   820                                  fmt_gensym:
   821 000007FB 47256C6400                      db `G%ld\0`
   822                                  fmt_closure:
   823 00000800 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   823 00000809 206174203078253038-
   823 00000812 5820656E763D307825-
   823 0000081B 30385820636F64653D-
   823 00000824 3078253038583E00   
   824                                  fmt_lparen:
   825 0000082C 2800                    	db `(\0`
   826                                  fmt_dotted_pair:
   827 0000082E 202E2000                	db ` . \0`
   828                                  fmt_rparen:
   829 00000832 2900                    	db `)\0`
   830                                  fmt_space:
   831 00000834 2000                    	db ` \0`
   832                                  fmt_empty_vector:
   833 00000836 23282900                	db `#()\0`
   834                                  fmt_vector:
   835 0000083A 232800                  	db `#(\0`
   836                                  fmt_real:
   837 0000083D 256600                  	db `%f\0`
   838                                  fmt_fraction:
   839 00000840 256C642F256C6400        	db `%ld/%ld\0`
   840                                  fmt_zero:
   841 00000848 3000                    	db `0\0`
   842                                  fmt_int:
   843 0000084A 256C6400                	db `%ld\0`
   844                                  fmt_unknown_scheme_object_error:
   845 0000084E 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   845 00000857 6F723A20556E6B6E6F-
   845 00000860 776E20536368656D65-
   845 00000869 2D6F626A6563742028-
   845 00000872 525454492030782530-
   845 0000087B 32582920           
   846 0000087F 617420616464726573-     	db `at address 0x%08X\n\n\0`
   846 00000888 73203078253038580A-
   846 00000891 0A00               
   847                                  fmt_dquote:
   848 00000893 2200                    	db `\"\0`
   849                                  fmt_string_char:
   850 00000895 256300                          db `%c\0`
   851                                  fmt_string_char_7:
   852 00000898 5C6100                          db `\\a\0`
   853                                  fmt_string_char_8:
   854 0000089B 5C6200                          db `\\b\0`
   855                                  fmt_string_char_9:
   856 0000089E 5C7400                          db `\\t\0`
   857                                  fmt_string_char_10:
   858 000008A1 5C6E00                          db `\\n\0`
   859                                  fmt_string_char_11:
   860 000008A4 5C7600                          db `\\v\0`
   861                                  fmt_string_char_12:
   862 000008A7 5C6600                          db `\\f\0`
   863                                  fmt_string_char_13:
   864 000008AA 5C7200                          db `\\r\0`
   865                                  fmt_string_char_34:
   866 000008AD 5C2200                          db `\\"\0`
   867                                  fmt_string_char_92:
   868 000008B0 5C5C00                          db `\\\\\0`
   869                                  fmt_string_char_hex:
   870 000008B3 5C7825583B00                    db `\\x%X;\0`
   871                                  
   872                                  section .text
   873                                  
   874                                  print_sexpr:
   875 00000419 C8000000                	enter 0, 0
   876 0000041D 8A07                    	mov al, byte [rdi]
   877 0000041F 3C00                    	cmp al, T_void
   878 00000421 7465                    	je .Lvoid
   879 00000423 3C01                    	cmp al, T_nil
   880 00000425 7470                    	je .Lnil
   881 00000427 3C09                    	cmp al, T_boolean_false
   882 00000429 747B                    	je .Lboolean_false
   883 0000042B 3C0A                    	cmp al, T_boolean_true
   884 0000042D 0F8482000000            	je .Lboolean_true
   885 00000433 3C02                    	cmp al, T_char
   886 00000435 0F8489000000            	je .Lchar
   887 0000043B 3C41                    	cmp al, T_interned_symbol
   888 0000043D 0F84BF010000            	je .Linterned_symbol
   889 00000443 3C42                            cmp al, T_uninterned_symbol
   890 00000445 0F84E3010000                    je .Luninterned_symbol
   891 0000044B 3C21                    	cmp al, T_pair
   892 0000044D 0F84EE010000            	je .Lpair
   893 00000453 3C22                    	cmp al, T_vector
   894 00000455 0F84B7020000            	je .Lvector
   895 0000045B 3C04                    	cmp al, T_closure
   896 0000045D 0F8485010000            	je .Lclosure
   897 00000463 3C13                    	cmp al, T_real
   898 00000465 0F8448030000            	je .Lreal
   899 0000046B 3C12                    	cmp al, T_fraction
   900 0000046D 0F846E030000            	je .Lfraction
   901 00000473 3C11                    	cmp al, T_integer
   902 00000475 0F84A7030000            	je .Linteger
   903 0000047B 3C03                    	cmp al, T_string
   904 0000047D 0F84B2030000            	je .Lstring
   905                                  
   906 00000483 E9DC040000              	jmp .Lunknown_sexpr_type
   907                                  
   908                                  .Lvoid:
   909 00000488 48BF-                   	mov rdi, fmt_void
   909 0000048A [8E07000000000000] 
   910 00000492 E900050000              	jmp .Lemit
   911                                  
   912                                  .Lnil:
   913 00000497 48BF-                   	mov rdi, fmt_nil
   913 00000499 [9607000000000000] 
   914 000004A1 E9F1040000              	jmp .Lemit
   915                                  
   916                                  .Lboolean_false:
   917 000004A6 48BF-                   	mov rdi, fmt_boolean_false
   917 000004A8 [9907000000000000] 
   918 000004B0 E9E2040000              	jmp .Lemit
   919                                  
   920                                  .Lboolean_true:
   921 000004B5 48BF-                   	mov rdi, fmt_boolean_true
   921 000004B7 [9C07000000000000] 
   922 000004BF E9D3040000              	jmp .Lemit
   923                                  
   924                                  .Lchar:
   925 000004C4 8A4701                  	mov al, byte [rdi + 1]
   926 000004C7 3C20                    	cmp al, ' '
   927 000004C9 7E20                    	jle .Lchar_whitespace
   928 000004CB 3C5C                    	cmp al, 92 		; backslash
   929 000004CD 7474                    	je .Lchar_backslash
   930 000004CF 3C22                    	cmp al, '"'
   931 000004D1 747F                    	je .Lchar_dquote
   932 000004D3 4825FF000000            	and rax, 255
   933 000004D9 48BF-                   	mov rdi, fmt_char_simple
   933 000004DB [A707000000000000] 
   934 000004E3 4889C6                  	mov rsi, rax
   935 000004E6 E9AC040000              	jmp .Lemit
   936                                  
   937                                  .Lchar_whitespace:
   938 000004EB 3C00                    	cmp al, 0
   939 000004ED 7472                    	je .Lchar_null
   940 000004EF 3C07                    	cmp al, 7
   941 000004F1 747D                    	je .Lchar_bell
   942 000004F3 3C08                    	cmp al, 8
   943 000004F5 0F8484000000            	je .Lchar_backspace
   944 000004FB 3C09                    	cmp al, 9
   945 000004FD 0F848B000000            	je .Lchar_tab
   946 00000503 3C0A                    	cmp al, 10
   947 00000505 0F8492000000            	je .Lchar_newline
   948 0000050B 3C0C                    	cmp al, 12
   949 0000050D 0F8499000000            	je .Lchar_formfeed
   950 00000513 3C0D                    	cmp al, 13
   951 00000515 0F84A0000000            	je .Lchar_return
   952 0000051B 3C1B                    	cmp al, 27
   953 0000051D 0F84A7000000            	je .Lchar_escape
   954 00000523 4825FF000000            	and rax, 255
   955 00000529 3C20                    	cmp al, ' '
   956 0000052B 0F84A8000000            	je .Lchar_space
   957 00000531 48BF-                   	mov rdi, fmt_char_hex
   957 00000533 [F307000000000000] 
   958 0000053B 4889C6                  	mov rsi, rax
   959 0000053E E954040000              	jmp .Lemit	
   960                                  
   961                                  .Lchar_backslash:
   962 00000543 48BF-                   	mov rdi, fmt_char_backslash
   962 00000545 [9F07000000000000] 
   963 0000054D E945040000              	jmp .Lemit
   964                                  
   965                                  .Lchar_dquote:
   966 00000552 48BF-                   	mov rdi, fmt_char_dquote
   966 00000554 [A307000000000000] 
   967 0000055C E936040000              	jmp .Lemit
   968                                  
   969                                  .Lchar_null:
   970 00000561 48BF-                   	mov rdi, fmt_char_null
   970 00000563 [AC07000000000000] 
   971 0000056B E927040000              	jmp .Lemit
   972                                  
   973                                  .Lchar_bell:
   974 00000570 48BF-                   	mov rdi, fmt_char_bell
   974 00000572 [B207000000000000] 
   975 0000057A E918040000              	jmp .Lemit
   976                                  
   977                                  .Lchar_backspace:
   978 0000057F 48BF-                   	mov rdi, fmt_char_backspace
   978 00000581 [B907000000000000] 
   979 00000589 E909040000              	jmp .Lemit
   980                                  
   981                                  .Lchar_tab:
   982 0000058E 48BF-                   	mov rdi, fmt_char_tab
   982 00000590 [C507000000000000] 
   983 00000598 E9FA030000              	jmp .Lemit
   984                                  
   985                                  .Lchar_newline:
   986 0000059D 48BF-                   	mov rdi, fmt_char_newline
   986 0000059F [CB07000000000000] 
   987 000005A7 E9EB030000              	jmp .Lemit
   988                                  
   989                                  .Lchar_formfeed:
   990 000005AC 48BF-                   	mov rdi, fmt_char_formfeed
   990 000005AE [D507000000000000] 
   991 000005B6 E9DC030000              	jmp .Lemit
   992                                  
   993                                  .Lchar_return:
   994 000005BB 48BF-                   	mov rdi, fmt_char_return
   994 000005BD [DC07000000000000] 
   995 000005C5 E9CD030000              	jmp .Lemit
   996                                  
   997                                  .Lchar_escape:
   998 000005CA 48BF-                   	mov rdi, fmt_char_escape
   998 000005CC [E507000000000000] 
   999 000005D4 E9BE030000              	jmp .Lemit
  1000                                  
  1001                                  .Lchar_space:
  1002 000005D9 48BF-                   	mov rdi, fmt_char_space
  1002 000005DB [EB07000000000000] 
  1003 000005E3 E9AF030000              	jmp .Lemit
  1004                                  
  1005                                  .Lclosure:
  1006 000005E8 4889FE                  	mov rsi, qword rdi
  1007 000005EB 48BF-                   	mov rdi, fmt_closure
  1007 000005ED [0008000000000000] 
  1008 000005F5 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  1009 000005F9 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  1010 000005FD E995030000              	jmp .Lemit
  1011                                  
  1012                                  .Linterned_symbol:
  1013 00000602 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  1014 00000606 BE01000000              	mov rsi, 1		 ; size = 1 byte
  1015 0000060B 488B5701                	mov rdx, qword [rdi + 1] ; length
  1016 0000060F 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  1017 00000613 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  1018                                  	ENTER
    44 0000061B C8000000            <1>  enter 0, 0
    45 0000061F 4883E4F0            <1>  and rsp, ~15
  1019 00000623 E8(00000000)            	call fwrite
  1020                                  	LEAVE
    49 00000628 C9                  <1>  leave
  1021 00000629 E97E030000              	jmp .Lend
  1022                                  
  1023                                  .Luninterned_symbol:
  1024 0000062E 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  1025 00000632 48BF-                           mov rdi, fmt_gensym
  1025 00000634 [FB07000000000000] 
  1026 0000063C E956030000                      jmp .Lemit
  1027                                  	
  1028                                  .Lpair:
  1029 00000641 57                      	push rdi
  1030 00000642 48BF-                   	mov rdi, fmt_lparen
  1030 00000644 [2C08000000000000] 
  1031 0000064C B800000000              	mov rax, 0
  1032                                          ENTER
    44 00000651 C8000000            <1>  enter 0, 0
    45 00000655 4883E4F0            <1>  and rsp, ~15
  1033 00000659 E8(00000000)            	call printf
  1034                                          LEAVE
    49 0000065E C9                  <1>  leave
  1035 0000065F 488B3C24                	mov rdi, qword [rsp] 	; pair
  1036 00000663 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1037 00000667 E8ADFDFFFF              	call print_sexpr
  1038 0000066C 5F                      	pop rdi 		; pair
  1039 0000066D 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1040                                  .Lcdr:
  1041 00000671 8A07                    	mov al, byte [rdi]
  1042 00000673 3C01                    	cmp al, T_nil
  1043 00000675 7447                    	je .Lcdr_nil
  1044 00000677 3C21                    	cmp al, T_pair
  1045 00000679 7462                    	je .Lcdr_pair
  1046 0000067B 57                      	push rdi
  1047 0000067C 48BF-                   	mov rdi, fmt_dotted_pair
  1047 0000067E [2E08000000000000] 
  1048 00000686 B800000000              	mov rax, 0
  1049                                          ENTER
    44 0000068B C8000000            <1>  enter 0, 0
    45 0000068F 4883E4F0            <1>  and rsp, ~15
  1050 00000693 E8(00000000)            	call printf
  1051                                          LEAVE
    49 00000698 C9                  <1>  leave
  1052 00000699 5F                      	pop rdi
  1053 0000069A E87AFDFFFF              	call print_sexpr
  1054 0000069F 48BF-                   	mov rdi, fmt_rparen
  1054 000006A1 [3208000000000000] 
  1055 000006A9 B800000000              	mov rax, 0
  1056                                          ENTER
    44 000006AE C8000000            <1>  enter 0, 0
    45 000006B2 4883E4F0            <1>  and rsp, ~15
  1057 000006B6 E8(00000000)            	call printf
  1058                                          LEAVE
    49 000006BB C9                  <1>  leave
  1059 000006BC C9                      	leave
  1060 000006BD C3                      	ret
  1061                                  
  1062                                  .Lcdr_nil:
  1063 000006BE 48BF-                   	mov rdi, fmt_rparen
  1063 000006C0 [3208000000000000] 
  1064 000006C8 B800000000              	mov rax, 0
  1065                                          ENTER
    44 000006CD C8000000            <1>  enter 0, 0
    45 000006D1 4883E4F0            <1>  and rsp, ~15
  1066 000006D5 E8(00000000)            	call printf
  1067                                          LEAVE
    49 000006DA C9                  <1>  leave
  1068 000006DB C9                      	leave
  1069 000006DC C3                      	ret
  1070                                  
  1071                                  .Lcdr_pair:
  1072 000006DD 57                      	push rdi
  1073 000006DE 48BF-                   	mov rdi, fmt_space
  1073 000006E0 [3408000000000000] 
  1074 000006E8 B800000000              	mov rax, 0
  1075                                          ENTER
    44 000006ED C8000000            <1>  enter 0, 0
    45 000006F1 4883E4F0            <1>  and rsp, ~15
  1076 000006F5 E8(00000000)            	call printf
  1077                                          LEAVE
    49 000006FA C9                  <1>  leave
  1078 000006FB 488B3C24                	mov rdi, qword [rsp]
  1079 000006FF 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1080 00000703 E811FDFFFF              	call print_sexpr
  1081 00000708 5F                      	pop rdi
  1082 00000709 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1083 0000070D E95FFFFFFF              	jmp .Lcdr
  1084                                  
  1085                                  .Lvector:
  1086 00000712 488B4701                	mov rax, qword [rdi + 1] ; length
  1087 00000716 4883F800                	cmp rax, 0
  1088 0000071A 0F8484000000            	je .Lvector_empty
  1089 00000720 57                      	push rdi
  1090 00000721 48BF-                   	mov rdi, fmt_vector
  1090 00000723 [3A08000000000000] 
  1091 0000072B B800000000              	mov rax, 0
  1092                                          ENTER
    44 00000730 C8000000            <1>  enter 0, 0
    45 00000734 4883E4F0            <1>  and rsp, ~15
  1093 00000738 E8(00000000)            	call printf
  1094                                          LEAVE
    49 0000073D C9                  <1>  leave
  1095 0000073E 488B3C24                	mov rdi, qword [rsp]
  1096 00000742 FF7701                  	push qword [rdi + 1]
  1097 00000745 6A01                    	push 1
  1098 00000747 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1099 0000074B E8C9FCFFFF              	call print_sexpr
  1100                                  .Lvector_loop:
  1101                                  	; [rsp] index
  1102                                  	; [rsp + 8*1] limit
  1103                                  	; [rsp + 8*2] vector
  1104 00000750 488B0424                	mov rax, qword [rsp]
  1105 00000754 483B442408              	cmp rax, qword [rsp + 8*1]
  1106 00000759 7436                    	je .Lvector_end
  1107 0000075B 48BF-                   	mov rdi, fmt_space
  1107 0000075D [3408000000000000] 
  1108 00000765 B800000000              	mov rax, 0
  1109                                          ENTER
    44 0000076A C8000000            <1>  enter 0, 0
    45 0000076E 4883E4F0            <1>  and rsp, ~15
  1110 00000772 E8(00000000)            	call printf
  1111                                          LEAVE
    49 00000777 C9                  <1>  leave
  1112 00000778 488B0424                	mov rax, qword [rsp]
  1113 0000077C 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1114 00000781 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1115 00000786 E88EFCFFFF              	call print_sexpr
  1116 0000078B 48FF0424                	inc qword [rsp]
  1117 0000078F EBBF                    	jmp .Lvector_loop
  1118                                  
  1119                                  .Lvector_end:
  1120 00000791 4883C418                	add rsp, 8*3
  1121 00000795 48BF-                   	mov rdi, fmt_rparen
  1121 00000797 [3208000000000000] 
  1122 0000079F E9F3010000              	jmp .Lemit	
  1123                                  
  1124                                  .Lvector_empty:
  1125 000007A4 48BF-                   	mov rdi, fmt_empty_vector
  1125 000007A6 [3608000000000000] 
  1126 000007AE E9E4010000              	jmp .Lemit
  1127                                  
  1128                                  .Lreal:
  1129 000007B3 FF7701                  	push qword [rdi + 1]
  1130 000007B6 F20F100424              	movsd xmm0, qword [rsp]
  1131 000007BB 4883C408                	add rsp, 8*1
  1132 000007BF 48BF-                   	mov rdi, fmt_real
  1132 000007C1 [3D08000000000000] 
  1133 000007C9 B801000000              	mov rax, 1
  1134                                  	ENTER
    44 000007CE C8000000            <1>  enter 0, 0
    45 000007D2 4883E4F0            <1>  and rsp, ~15
  1135 000007D6 E8(00000000)            	call printf
  1136                                  	LEAVE
    49 000007DB C9                  <1>  leave
  1137 000007DC E9CB010000              	jmp .Lend
  1138                                  
  1139                                  .Lfraction:
  1140 000007E1 488B7701                	mov rsi, qword [rdi + 1]
  1141 000007E5 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1142 000007E9 4883FE00                	cmp rsi, 0
  1143 000007ED 7415                    	je .Lrat_zero
  1144 000007EF 4883FA01                	cmp rdx, 1
  1145 000007F3 741E                    	je .Lrat_int
  1146 000007F5 48BF-                   	mov rdi, fmt_fraction
  1146 000007F7 [4008000000000000] 
  1147 000007FF E993010000              	jmp .Lemit
  1148                                  
  1149                                  .Lrat_zero:
  1150 00000804 48BF-                   	mov rdi, fmt_zero
  1150 00000806 [4808000000000000] 
  1151 0000080E E984010000              	jmp .Lemit
  1152                                  
  1153                                  .Lrat_int:
  1154 00000813 48BF-                   	mov rdi, fmt_int
  1154 00000815 [4A08000000000000] 
  1155 0000081D E975010000              	jmp .Lemit
  1156                                  
  1157                                  .Linteger:
  1158 00000822 488B7701                	mov rsi, qword [rdi + 1]
  1159 00000826 48BF-                   	mov rdi, fmt_int
  1159 00000828 [4A08000000000000] 
  1160 00000830 E962010000              	jmp .Lemit
  1161                                  
  1162                                  .Lstring:
  1163 00000835 488D4709                	lea rax, [rdi + 1 + 8]
  1164 00000839 50                      	push rax
  1165 0000083A FF7701                  	push qword [rdi + 1]
  1166 0000083D 48BF-                   	mov rdi, fmt_dquote
  1166 0000083F [9308000000000000] 
  1167 00000847 B800000000              	mov rax, 0
  1168                                  	ENTER
    44 0000084C C8000000            <1>  enter 0, 0
    45 00000850 4883E4F0            <1>  and rsp, ~15
  1169 00000854 E8(00000000)            	call printf
  1170                                  	LEAVE
    49 00000859 C9                  <1>  leave
  1171                                  .Lstring_loop:
  1172                                  	; qword [rsp]: limit
  1173                                  	; qword [rsp + 8*1]: char *
  1174 0000085A 48833C2400              	cmp qword [rsp], 0
  1175 0000085F 0F84EF000000            	je .Lstring_end
  1176 00000865 488B442408              	mov rax, qword [rsp + 8*1]
  1177 0000086A 8A00                    	mov al, byte [rax]
  1178 0000086C 4825FF000000            	and rax, 255
  1179 00000872 3C07                    	cmp al, 7
  1180 00000874 745D                            je .Lstring_char_7
  1181 00000876 3C08                            cmp al, 8
  1182 00000878 7465                            je .Lstring_char_8
  1183 0000087A 3C09                            cmp al, 9
  1184 0000087C 746D                            je .Lstring_char_9
  1185 0000087E 3C0A                            cmp al, 10
  1186 00000880 7475                            je .Lstring_char_10
  1187 00000882 3C0B                            cmp al, 11
  1188 00000884 747D                            je .Lstring_char_11
  1189 00000886 3C0C                            cmp al, 12
  1190 00000888 0F8481000000                    je .Lstring_char_12
  1191 0000088E 3C0D                            cmp al, 13
  1192 00000890 0F8485000000                    je .Lstring_char_13
  1193 00000896 3C22                            cmp al, 34
  1194 00000898 0F8489000000                    je .Lstring_char_34
  1195 0000089E 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1197 000008A0 3C20                            cmp al, ' '
  1198 000008A2 0F8C9A000000                    jl .Lstring_char_hex
  1199 000008A8 48BF-                           mov rdi, fmt_string_char
  1199 000008AA [9508000000000000] 
  1200 000008B2 4889C6                          mov rsi, rax
  1201                                  .Lstring_char_emit:
  1202 000008B5 B800000000                      mov rax, 0
  1203                                          ENTER
    44 000008BA C8000000            <1>  enter 0, 0
    45 000008BE 4883E4F0            <1>  and rsp, ~15
  1204 000008C2 E8(00000000)                    call printf
  1205                                          LEAVE
    49 000008C7 C9                  <1>  leave
  1206 000008C8 48FF0C24                        dec qword [rsp]
  1207 000008CC 48FF442408                      inc qword [rsp + 8*1]
  1208 000008D1 EB87                            jmp .Lstring_loop
  1209                                  
  1210                                  .Lstring_char_7:
  1211 000008D3 48BF-                           mov rdi, fmt_string_char_7
  1211 000008D5 [9808000000000000] 
  1212 000008DD EBD6                            jmp .Lstring_char_emit
  1213                                  
  1214                                  .Lstring_char_8:
  1215 000008DF 48BF-                           mov rdi, fmt_string_char_8
  1215 000008E1 [9B08000000000000] 
  1216 000008E9 EBCA                            jmp .Lstring_char_emit
  1217                                          
  1218                                  .Lstring_char_9:
  1219 000008EB 48BF-                           mov rdi, fmt_string_char_9
  1219 000008ED [9E08000000000000] 
  1220 000008F5 EBBE                            jmp .Lstring_char_emit
  1221                                  
  1222                                  .Lstring_char_10:
  1223 000008F7 48BF-                           mov rdi, fmt_string_char_10
  1223 000008F9 [A108000000000000] 
  1224 00000901 EBB2                            jmp .Lstring_char_emit
  1225                                  
  1226                                  .Lstring_char_11:
  1227 00000903 48BF-                           mov rdi, fmt_string_char_11
  1227 00000905 [A408000000000000] 
  1228 0000090D EBA6                            jmp .Lstring_char_emit
  1229                                  
  1230                                  .Lstring_char_12:
  1231 0000090F 48BF-                           mov rdi, fmt_string_char_12
  1231 00000911 [A708000000000000] 
  1232 00000919 EB9A                            jmp .Lstring_char_emit
  1233                                  
  1234                                  .Lstring_char_13:
  1235 0000091B 48BF-                           mov rdi, fmt_string_char_13
  1235 0000091D [AA08000000000000] 
  1236 00000925 EB8E                            jmp .Lstring_char_emit
  1237                                  
  1238                                  .Lstring_char_34:
  1239 00000927 48BF-                           mov rdi, fmt_string_char_34
  1239 00000929 [AD08000000000000] 
  1240 00000931 EB82                            jmp .Lstring_char_emit
  1241                                  
  1242                                  .Lstring_char_92:
  1243 00000933 48BF-                           mov rdi, fmt_string_char_92
  1243 00000935 [B008000000000000] 
  1244 0000093D E973FFFFFF                      jmp .Lstring_char_emit
  1245                                  
  1246                                  .Lstring_char_hex:
  1247 00000942 48BF-                           mov rdi, fmt_string_char_hex
  1247 00000944 [B308000000000000] 
  1248 0000094C 4889C6                          mov rsi, rax
  1249 0000094F E961FFFFFF                      jmp .Lstring_char_emit        
  1250                                  
  1251                                  .Lstring_end:
  1252 00000954 4883C410                	add rsp, 8 * 2
  1253 00000958 48BF-                   	mov rdi, fmt_dquote
  1253 0000095A [9308000000000000] 
  1254 00000962 EB33                    	jmp .Lemit
  1255                                  
  1256                                  .Lunknown_sexpr_type:
  1257 00000964 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1257 00000966 [4E08000000000000] 
  1258 0000096E 4825FF000000            	and rax, 255
  1259 00000974 4889C2                  	mov rdx, rax
  1260 00000977 4889F9                  	mov rcx, rdi
  1261 0000097A 488B3C25[00000000]      	mov rdi, qword [stderr]
  1262 00000982 B800000000              	mov rax, 0
  1263                                          ENTER
    44 00000987 C8000000            <1>  enter 0, 0
    45 0000098B 4883E4F0            <1>  and rsp, ~15
  1264 0000098F E8(00000000)            	call fprintf
  1265                                          LEAVE
    49 00000994 C9                  <1>  leave
  1266 00000995 C9                              leave
  1267 00000996 C3                              ret
  1268                                  
  1269                                  .Lemit:
  1270 00000997 B800000000              	mov rax, 0
  1271                                          ENTER
    44 0000099C C8000000            <1>  enter 0, 0
    45 000009A0 4883E4F0            <1>  and rsp, ~15
  1272 000009A4 E8(00000000)            	call printf
  1273                                          LEAVE
    49 000009A9 C9                  <1>  leave
  1274 000009AA EB00                    	jmp .Lend
  1275                                  
  1276                                  .Lend:
  1277                                  	LEAVE
    49 000009AC C9                  <1>  leave
  1278 000009AD C3                      	ret
  1279                                  
  1280                                  ;;; rdi: address of free variable
  1281                                  ;;; rsi: address of code-pointer
  1282                                  bind_primitive:
  1283 000009AE C8000000                        enter 0, 0
  1284 000009B2 57                              push rdi
  1285 000009B3 BF11000000                      mov rdi, (1 + 8 + 8)
  1286 000009B8 E8DBF7FFFF                      call malloc
  1287 000009BD 5F                              pop rdi
  1288 000009BE C60004                          mov byte [rax], T_closure
  1289 000009C1 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1290 000009C9 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1291 000009CD 488907                          mov qword [rdi], rax
  1292 000009D0 48B8-                           mov rax, sob_void
  1292 000009D2 [0000000000000000] 
  1293 000009DA C9                              leave
  1294 000009DB C3                              ret
  1295                                  
  1296                                  L_code_ptr_ash:
  1297 000009DC C8000000                        enter 0, 0
  1298 000009E0 48837D1802                      cmp COUNT, 2
  1299 000009E5 0F8570140000                    jne L_error_arg_count_2
  1300 000009EB 488B7D20                        mov rdi, PARAM(0)
  1301                                          assert_integer(rdi)
    53 000009EF 803F11              <1>  cmp byte [%1], %2
    54 000009F2 0F8502150000        <1>  jne L_error_incorrect_type
  1302 000009F8 488B4D28                        mov rcx, PARAM(1)
  1303                                          assert_integer(rcx)
    53 000009FC 803911              <1>  cmp byte [%1], %2
    54 000009FF 0F85F5140000        <1>  jne L_error_incorrect_type
  1304 00000A05 488B7F01                        mov rdi, qword [rdi + 1]
  1305 00000A09 488B4901                        mov rcx, qword [rcx + 1]
  1306 00000A0D 4883F900                        cmp rcx, 0
  1307 00000A11 7C0F                            jl .L_negative
  1308                                  .L_loop_positive:
  1309 00000A13 4883F900                        cmp rcx, 0
  1310 00000A17 741B                            je .L_exit
  1311 00000A19 48D3E7                          sal rdi, cl
  1312 00000A1C 48C1E908                        shr rcx, 8
  1313 00000A20 EBF1                            jmp .L_loop_positive
  1314                                  .L_negative:
  1315 00000A22 48F7D9                          neg rcx
  1316                                  .L_loop_negative:
  1317 00000A25 4883F900                        cmp rcx, 0
  1318 00000A29 7409                            je .L_exit
  1319 00000A2B 48D3FF                          sar rdi, cl
  1320 00000A2E 48C1E908                        shr rcx, 8
  1321 00000A32 EBF1                            jmp .L_loop_negative
  1322                                  .L_exit:
  1323 00000A34 E83C130000                      call make_integer
  1324 00000A39 C9                              leave
  1325 00000A3A C22000                          ret AND_KILL_FRAME(2)
  1326                                  
  1327                                  L_code_ptr_logand:
  1328 00000A3D C8000000                        enter 0, 0
  1329 00000A41 48837D1802                      cmp COUNT, 2
  1330 00000A46 0F850F140000                    jne L_error_arg_count_2
  1331 00000A4C 4C8B4520                        mov r8, PARAM(0)
  1332                                          assert_integer(r8)
    53 00000A50 41803811            <1>  cmp byte [%1], %2
    54 00000A54 0F85A0140000        <1>  jne L_error_incorrect_type
  1333 00000A5A 4C8B4D28                        mov r9, PARAM(1)
  1334                                          assert_integer(r9)
    53 00000A5E 41803911            <1>  cmp byte [%1], %2
    54 00000A62 0F8592140000        <1>  jne L_error_incorrect_type
  1335 00000A68 498B7801                        mov rdi, qword [r8 + 1]
  1336 00000A6C 49237901                        and rdi, qword [r9 + 1]
  1337 00000A70 E800130000                      call make_integer
  1338 00000A75 C9                              leave
  1339 00000A76 C22000                          ret AND_KILL_FRAME(2)
  1340                                  
  1341                                  L_code_ptr_logor:
  1342 00000A79 C8000000                        enter 0, 0
  1343 00000A7D 48837D1802                      cmp COUNT, 2
  1344 00000A82 0F85D3130000                    jne L_error_arg_count_2
  1345 00000A88 4C8B4520                        mov r8, PARAM(0)
  1346                                          assert_integer(r8)
    53 00000A8C 41803811            <1>  cmp byte [%1], %2
    54 00000A90 0F8564140000        <1>  jne L_error_incorrect_type
  1347 00000A96 4C8B4D28                        mov r9, PARAM(1)
  1348                                          assert_integer(r9)
    53 00000A9A 41803911            <1>  cmp byte [%1], %2
    54 00000A9E 0F8556140000        <1>  jne L_error_incorrect_type
  1349 00000AA4 498B7801                        mov rdi, qword [r8 + 1]
  1350 00000AA8 490B7901                        or rdi, qword [r9 + 1]
  1351 00000AAC E8C4120000                      call make_integer
  1352 00000AB1 C9                              leave
  1353 00000AB2 C22000                          ret AND_KILL_FRAME(2)
  1354                                  
  1355                                  L_code_ptr_logxor:
  1356 00000AB5 C8000000                        enter 0, 0
  1357 00000AB9 48837D1802                      cmp COUNT, 2
  1358 00000ABE 0F8597130000                    jne L_error_arg_count_2
  1359 00000AC4 4C8B4520                        mov r8, PARAM(0)
  1360                                          assert_integer(r8)
    53 00000AC8 41803811            <1>  cmp byte [%1], %2
    54 00000ACC 0F8528140000        <1>  jne L_error_incorrect_type
  1361 00000AD2 4C8B4D28                        mov r9, PARAM(1)
  1362                                          assert_integer(r9)
    53 00000AD6 41803911            <1>  cmp byte [%1], %2
    54 00000ADA 0F851A140000        <1>  jne L_error_incorrect_type
  1363 00000AE0 498B7801                        mov rdi, qword [r8 + 1]
  1364 00000AE4 49337901                        xor rdi, qword [r9 + 1]
  1365 00000AE8 E888120000                      call make_integer
  1366                                          LEAVE
    49 00000AED C9                  <1>  leave
  1367 00000AEE C22000                          ret AND_KILL_FRAME(2)
  1368                                  
  1369                                  L_code_ptr_lognot:
  1370 00000AF1 C8000000                        enter 0, 0
  1371 00000AF5 48837D1801                      cmp COUNT, 1
  1372 00000AFA 0F8526130000                    jne L_error_arg_count_1
  1373 00000B00 4C8B4520                        mov r8, PARAM(0)
  1374                                          assert_integer(r8)
    53 00000B04 41803811            <1>  cmp byte [%1], %2
    54 00000B08 0F85EC130000        <1>  jne L_error_incorrect_type
  1375 00000B0E 498B7801                        mov rdi, qword [r8 + 1]
  1376 00000B12 48F7D7                          not rdi
  1377 00000B15 E85B120000                      call make_integer
  1378 00000B1A C9                              leave
  1379 00000B1B C21800                          ret AND_KILL_FRAME(1)
  1380                                  
  1381                                  L_code_ptr_bin_apply:
  1382                                  ;;; fill in for final project!
  1383 00000B1E C8000000                enter 0, 0
  1384 00000B22 48837D1803              cmp COUNT, 3
  1385 00000B27 0F8598130000            jne L_error_arg_count_3
  1386 00000B2D 488B7D20                mov rdi, PARAM(0)
  1387                                  assert_closure(rdi)
    53 00000B31 803F04              <1>  cmp byte [%1], %2
    54 00000B34 0F85C0130000        <1>  jne L_error_incorrect_type
  1388 00000B3A 488B7528                mov rsi, PARAM(1)
  1389                                  assert_integer(rsi)
    53 00000B3E 803E11              <1>  cmp byte [%1], %2
    54 00000B41 0F85B3130000        <1>  jne L_error_incorrect_type
  1390 00000B47 488B5530                mov rdx, PARAM(2)
  1391                                  assert_vector(rdx)
    53 00000B4B 803A22              <1>  cmp byte [%1], %2
    54 00000B4E 0F85A6130000        <1>  jne L_error_incorrect_type
  1392 00000B54 488B4E01                mov rcx, qword [rsi + 1]
  1393 00000B58 4883F900                cmp rcx, 0
  1394 00000B5C 0F8C2D120000            jl L_error_integer_range
  1395 00000B62 4C8B4201                mov r8, qword [rdx + 1]
  1396 00000B66 4C39C1                  cmp rcx, r8
  1397 00000B69 0F8D20120000            jge L_error_integer_range
  1398 00000B6F 4C8B4CCA09              mov r9, qword [rdx + 1 + 8 + 8 * rcx]
  1399 00000B74 488B7F09                mov rdi, qword [rdi + 1 + 8]
  1400 00000B78 FFD7                    call rdi
  1401 00000B7A C9                      leave
  1402 00000B7B C22800                  ret AND_KILL_FRAME(3)
  1403                                  
  1404                                  L_code_ptr_is_null:
  1405 00000B7E C8000000                        enter 0, 0
  1406 00000B82 48837D1801                      cmp COUNT, 1
  1407 00000B87 0F8599120000                    jne L_error_arg_count_1
  1408 00000B8D 488B4520                        mov rax, PARAM(0)
  1409 00000B91 803801                          cmp byte [rax], T_nil
  1410 00000B94 750C                            jne .L_false
  1411 00000B96 48B8-                           mov rax, sob_boolean_true
  1411 00000B98 [0300000000000000] 
  1412 00000BA0 EB0A                            jmp .L_end
  1413                                  .L_false:
  1414 00000BA2 48B8-                           mov rax, sob_boolean_false
  1414 00000BA4 [0200000000000000] 
  1415                                  .L_end:
  1416 00000BAC C9                              leave
  1417 00000BAD C21800                          ret AND_KILL_FRAME(1)
  1418                                  
  1419                                  L_code_ptr_is_pair:
  1420 00000BB0 C8000000                        enter 0, 0
  1421 00000BB4 48837D1801                      cmp COUNT, 1
  1422 00000BB9 0F8567120000                    jne L_error_arg_count_1
  1423 00000BBF 488B4520                        mov rax, PARAM(0)
  1424 00000BC3 803821                          cmp byte [rax], T_pair
  1425 00000BC6 750C                            jne .L_false
  1426 00000BC8 48B8-                           mov rax, sob_boolean_true
  1426 00000BCA [0300000000000000] 
  1427 00000BD2 EB0A                            jmp .L_end
  1428                                  .L_false:
  1429 00000BD4 48B8-                           mov rax, sob_boolean_false
  1429 00000BD6 [0200000000000000] 
  1430                                  .L_end:
  1431 00000BDE C9                              leave
  1432 00000BDF C21800                          ret AND_KILL_FRAME(1)
  1433                                          
  1434                                  L_code_ptr_is_void:
  1435 00000BE2 C8000000                        enter 0, 0
  1436 00000BE6 48837D1801                      cmp COUNT, 1
  1437 00000BEB 0F8535120000                    jne L_error_arg_count_1
  1438 00000BF1 488B4520                        mov rax, PARAM(0)
  1439 00000BF5 803800                          cmp byte [rax], T_void
  1440 00000BF8 750C                            jne .L_false
  1441 00000BFA 48B8-                           mov rax, sob_boolean_true
  1441 00000BFC [0300000000000000] 
  1442 00000C04 EB0A                            jmp .L_end
  1443                                  .L_false:
  1444 00000C06 48B8-                           mov rax, sob_boolean_false
  1444 00000C08 [0200000000000000] 
  1445                                  .L_end:
  1446 00000C10 C9                              leave
  1447 00000C11 C21800                          ret AND_KILL_FRAME(1)
  1448                                  
  1449                                  L_code_ptr_is_char:
  1450 00000C14 C8000000                        enter 0, 0
  1451 00000C18 48837D1801                      cmp COUNT, 1
  1452 00000C1D 0F8503120000                    jne L_error_arg_count_1
  1453 00000C23 488B4520                        mov rax, PARAM(0)
  1454 00000C27 803802                          cmp byte [rax], T_char
  1455 00000C2A 750C                            jne .L_false
  1456 00000C2C 48B8-                           mov rax, sob_boolean_true
  1456 00000C2E [0300000000000000] 
  1457 00000C36 EB0A                            jmp .L_end
  1458                                  .L_false:
  1459 00000C38 48B8-                           mov rax, sob_boolean_false
  1459 00000C3A [0200000000000000] 
  1460                                  .L_end:
  1461 00000C42 C9                              leave
  1462 00000C43 C21800                          ret AND_KILL_FRAME(1)
  1463                                  
  1464                                  L_code_ptr_is_string:
  1465 00000C46 C8000000                        enter 0, 0
  1466 00000C4A 48837D1801                      cmp COUNT, 1
  1467 00000C4F 0F85D1110000                    jne L_error_arg_count_1
  1468 00000C55 488B4520                        mov rax, PARAM(0)
  1469 00000C59 803803                          cmp byte [rax], T_string
  1470 00000C5C 750C                            jne .L_false
  1471 00000C5E 48B8-                           mov rax, sob_boolean_true
  1471 00000C60 [0300000000000000] 
  1472 00000C68 EB0A                            jmp .L_end
  1473                                  .L_false:
  1474 00000C6A 48B8-                           mov rax, sob_boolean_false
  1474 00000C6C [0200000000000000] 
  1475                                  .L_end:
  1476 00000C74 C9                              leave
  1477 00000C75 C21800                          ret AND_KILL_FRAME(1)
  1478                                  
  1479                                  L_code_ptr_is_symbol:
  1480 00000C78 C8000000                        enter 0, 0
  1481 00000C7C 48837D1801                      cmp COUNT, 1
  1482 00000C81 0F859F110000                    jne L_error_arg_count_1
  1483 00000C87 4C8B4520                        mov r8, PARAM(0)
  1484 00000C8B 41802040                        and byte [r8], T_symbol
  1485 00000C8F 740C                            jz .L_false
  1486 00000C91 48B8-                           mov rax, sob_boolean_true
  1486 00000C93 [0300000000000000] 
  1487 00000C9B EB0A                            jmp .L_exit
  1488                                  .L_false:
  1489 00000C9D 48B8-                           mov rax, sob_boolean_false
  1489 00000C9F [0200000000000000] 
  1490                                  .L_exit:
  1491 00000CA7 C9                              leave
  1492 00000CA8 C21800                          ret AND_KILL_FRAME(1)
  1493                                  
  1494                                  L_code_ptr_is_uninterned_symbol:
  1495 00000CAB C8000000                        enter 0, 0
  1496 00000CAF 48837D1801                      cmp COUNT, 1
  1497 00000CB4 0F856C110000                    jne L_error_arg_count_1
  1498 00000CBA 4C8B4520                        mov r8, PARAM(0)
  1499 00000CBE 41803842                        cmp byte [r8], T_uninterned_symbol
  1500 00000CC2 750C                            jne .L_false
  1501 00000CC4 48B8-                           mov rax, sob_boolean_true
  1501 00000CC6 [0300000000000000] 
  1502 00000CCE EB0A                            jmp .L_exit
  1503                                  .L_false:
  1504 00000CD0 48B8-                           mov rax, sob_boolean_false
  1504 00000CD2 [0200000000000000] 
  1505                                  .L_exit:
  1506 00000CDA C9                              leave
  1507 00000CDB C21800                          ret AND_KILL_FRAME(1)
  1508                                  
  1509                                  L_code_ptr_is_interned_symbol:
  1510 00000CDE C8000000                        enter 0, 0
  1511 00000CE2 48837D1801                      cmp COUNT, 1
  1512 00000CE7 0F8539110000                    jne L_error_arg_count_1
  1513 00000CED 488B4520                        mov rax, PARAM(0)
  1514 00000CF1 803841                          cmp byte [rax], T_interned_symbol
  1515 00000CF4 750C                            jne .L_false
  1516 00000CF6 48B8-                           mov rax, sob_boolean_true
  1516 00000CF8 [0300000000000000] 
  1517 00000D00 EB0A                            jmp .L_end
  1518                                  .L_false:
  1519 00000D02 48B8-                           mov rax, sob_boolean_false
  1519 00000D04 [0200000000000000] 
  1520                                  .L_end:
  1521 00000D0C C9                              leave
  1522 00000D0D C21800                          ret AND_KILL_FRAME(1)
  1523                                  
  1524                                  L_code_ptr_gensym:
  1525 00000D10 C8000000                        enter 0, 0
  1526 00000D14 48837D1800                      cmp COUNT, 0
  1527 00000D19 0F85D2100000                    jne L_error_arg_count_0
  1528 00000D1F 48FF0425[B9080000]              inc qword [gensym_count]
  1529 00000D27 BF09000000                      mov rdi, (1 + 8)
  1530 00000D2C E867F4FFFF                      call malloc
  1531 00000D31 C60042                          mov byte [rax], T_uninterned_symbol
  1532 00000D34 488B0C25[B9080000]              mov rcx, qword [gensym_count]
  1533 00000D3C 48894801                        mov qword [rax + 1], rcx
  1534 00000D40 C9                              leave
  1535 00000D41 C21000                          ret AND_KILL_FRAME(0)
  1536                                  
  1537                                  L_code_ptr_is_vector:
  1538 00000D44 C8000000                        enter 0, 0
  1539 00000D48 48837D1801                      cmp COUNT, 1
  1540 00000D4D 0F85D3100000                    jne L_error_arg_count_1
  1541 00000D53 488B4520                        mov rax, PARAM(0)
  1542 00000D57 803822                          cmp byte [rax], T_vector
  1543 00000D5A 750C                            jne .L_false
  1544 00000D5C 48B8-                           mov rax, sob_boolean_true
  1544 00000D5E [0300000000000000] 
  1545 00000D66 EB0A                            jmp .L_end
  1546                                  .L_false:
  1547 00000D68 48B8-                           mov rax, sob_boolean_false
  1547 00000D6A [0200000000000000] 
  1548                                  .L_end:
  1549 00000D72 C9                              leave
  1550 00000D73 C21800                          ret AND_KILL_FRAME(1)
  1551                                  
  1552                                  L_code_ptr_is_closure:
  1553 00000D76 C8000000                        enter 0, 0
  1554 00000D7A 48837D1801                      cmp COUNT, 1
  1555 00000D7F 0F85A1100000                    jne L_error_arg_count_1
  1556 00000D85 488B4520                        mov rax, PARAM(0)
  1557 00000D89 803804                          cmp byte [rax], T_closure
  1558 00000D8C 750C                            jne .L_false
  1559 00000D8E 48B8-                           mov rax, sob_boolean_true
  1559 00000D90 [0300000000000000] 
  1560 00000D98 EB0A                            jmp .L_end
  1561                                  .L_false:
  1562 00000D9A 48B8-                           mov rax, sob_boolean_false
  1562 00000D9C [0200000000000000] 
  1563                                  .L_end:
  1564 00000DA4 C9                              leave
  1565 00000DA5 C21800                          ret AND_KILL_FRAME(1)
  1566                                  
  1567                                  L_code_ptr_is_real:
  1568 00000DA8 C8000000                        enter 0, 0
  1569 00000DAC 48837D1801                      cmp COUNT, 1
  1570 00000DB1 0F856F100000                    jne L_error_arg_count_1
  1571 00000DB7 488B4520                        mov rax, PARAM(0)
  1572 00000DBB 803813                          cmp byte [rax], T_real
  1573 00000DBE 750C                            jne .L_false
  1574 00000DC0 48B8-                           mov rax, sob_boolean_true
  1574 00000DC2 [0300000000000000] 
  1575 00000DCA EB0A                            jmp .L_end
  1576                                  .L_false:
  1577 00000DCC 48B8-                           mov rax, sob_boolean_false
  1577 00000DCE [0200000000000000] 
  1578                                  .L_end:
  1579 00000DD6 C9                              leave
  1580 00000DD7 C21800                          ret AND_KILL_FRAME(1)
  1581                                  
  1582                                  L_code_ptr_is_fraction:
  1583 00000DDA C8000000                        enter 0, 0
  1584 00000DDE 48837D1801                      cmp COUNT, 1
  1585 00000DE3 0F853D100000                    jne L_error_arg_count_1
  1586 00000DE9 488B4520                        mov rax, PARAM(0)
  1587 00000DED 803812                          cmp byte [rax], T_fraction
  1588 00000DF0 750C                            jne .L_false
  1589 00000DF2 48B8-                           mov rax, sob_boolean_true
  1589 00000DF4 [0300000000000000] 
  1590 00000DFC EB0A                            jmp .L_end
  1591                                  .L_false:
  1592 00000DFE 48B8-                           mov rax, sob_boolean_false
  1592 00000E00 [0200000000000000] 
  1593                                  .L_end:
  1594 00000E08 C9                              leave
  1595 00000E09 C21800                          ret AND_KILL_FRAME(1)
  1596                                  
  1597                                  L_code_ptr_is_boolean:
  1598 00000E0C C8000000                        enter 0, 0
  1599 00000E10 48837D1801                      cmp COUNT, 1
  1600 00000E15 0F850B100000                    jne L_error_arg_count_1
  1601 00000E1B 488B4520                        mov rax, PARAM(0)
  1602 00000E1F 8A18                            mov bl, byte [rax]
  1603 00000E21 80E308                          and bl, T_boolean
  1604 00000E24 740C                            je .L_false
  1605 00000E26 48B8-                           mov rax, sob_boolean_true
  1605 00000E28 [0300000000000000] 
  1606 00000E30 EB0A                            jmp .L_end
  1607                                  .L_false:
  1608 00000E32 48B8-                           mov rax, sob_boolean_false
  1608 00000E34 [0200000000000000] 
  1609                                  .L_end:
  1610 00000E3C C9                              leave
  1611 00000E3D C21800                          ret AND_KILL_FRAME(1)
  1612                                          
  1613                                  L_code_ptr_is_boolean_false:
  1614 00000E40 C8000000                        enter 0, 0
  1615 00000E44 48837D1801                      cmp COUNT, 1
  1616 00000E49 0F85D70F0000                    jne L_error_arg_count_1
  1617 00000E4F 488B4520                        mov rax, PARAM(0)
  1618 00000E53 8A18                            mov bl, byte [rax]
  1619 00000E55 80FB09                          cmp bl, T_boolean_false
  1620 00000E58 750C                            jne .L_false
  1621 00000E5A 48B8-                           mov rax, sob_boolean_true
  1621 00000E5C [0300000000000000] 
  1622 00000E64 EB0A                            jmp .L_end
  1623                                  .L_false:
  1624 00000E66 48B8-                           mov rax, sob_boolean_false
  1624 00000E68 [0200000000000000] 
  1625                                  .L_end:
  1626 00000E70 C9                              leave
  1627 00000E71 C21800                          ret AND_KILL_FRAME(1)
  1628                                  
  1629                                  L_code_ptr_is_boolean_true:
  1630 00000E74 C8000000                        enter 0, 0
  1631 00000E78 48837D1801                      cmp COUNT, 1
  1632 00000E7D 0F85A30F0000                    jne L_error_arg_count_1
  1633 00000E83 488B4520                        mov rax, PARAM(0)
  1634 00000E87 8A18                            mov bl, byte [rax]
  1635 00000E89 80FB0A                          cmp bl, T_boolean_true
  1636 00000E8C 750C                            jne .L_false
  1637 00000E8E 48B8-                           mov rax, sob_boolean_true
  1637 00000E90 [0300000000000000] 
  1638 00000E98 EB0A                            jmp .L_end
  1639                                  .L_false:
  1640 00000E9A 48B8-                           mov rax, sob_boolean_false
  1640 00000E9C [0200000000000000] 
  1641                                  .L_end:
  1642 00000EA4 C9                              leave
  1643 00000EA5 C21800                          ret AND_KILL_FRAME(1)
  1644                                  
  1645                                  L_code_ptr_is_number:
  1646 00000EA8 C8000000                        enter 0, 0
  1647 00000EAC 48837D1801                      cmp COUNT, 1
  1648 00000EB1 0F856F0F0000                    jne L_error_arg_count_1
  1649 00000EB7 488B4520                        mov rax, PARAM(0)
  1650 00000EBB 8A18                            mov bl, byte [rax]
  1651 00000EBD 80E310                          and bl, T_number
  1652 00000EC0 740C                            jz .L_false
  1653 00000EC2 48B8-                           mov rax, sob_boolean_true
  1653 00000EC4 [0300000000000000] 
  1654 00000ECC EB0A                            jmp .L_end
  1655                                  .L_false:
  1656 00000ECE 48B8-                           mov rax, sob_boolean_false
  1656 00000ED0 [0200000000000000] 
  1657                                  .L_end:
  1658 00000ED8 C9                              leave
  1659 00000ED9 C21800                          ret AND_KILL_FRAME(1)
  1660                                          
  1661                                  L_code_ptr_is_collection:
  1662 00000EDC C8000000                        enter 0, 0
  1663 00000EE0 48837D1801                      cmp COUNT, 1
  1664 00000EE5 0F853B0F0000                    jne L_error_arg_count_1
  1665 00000EEB 488B4520                        mov rax, PARAM(0)
  1666 00000EEF 8A18                            mov bl, byte [rax]
  1667 00000EF1 80E320                          and bl, T_collection
  1668 00000EF4 740C                            je .L_false
  1669 00000EF6 48B8-                           mov rax, sob_boolean_true
  1669 00000EF8 [0300000000000000] 
  1670 00000F00 EB0A                            jmp .L_end
  1671                                  .L_false:
  1672 00000F02 48B8-                           mov rax, sob_boolean_false
  1672 00000F04 [0200000000000000] 
  1673                                  .L_end:
  1674 00000F0C C9                              leave
  1675 00000F0D C21800                          ret AND_KILL_FRAME(1)
  1676                                  
  1677                                  L_code_ptr_cons:
  1678 00000F10 C8000000                        enter 0, 0
  1679 00000F14 48837D1802                      cmp COUNT, 2
  1680 00000F19 0F853C0F0000                    jne L_error_arg_count_2
  1681 00000F1F BF11000000                      mov rdi, (1 + 8 + 8)
  1682 00000F24 E86FF2FFFF                      call malloc
  1683 00000F29 C60021                          mov byte [rax], T_pair
  1684 00000F2C 488B5D20                        mov rbx, PARAM(0)
  1685 00000F30 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1686 00000F34 488B5D28                        mov rbx, PARAM(1)
  1687 00000F38 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1688 00000F3C C9                              leave
  1689 00000F3D C22000                          ret AND_KILL_FRAME(2)
  1690                                  
  1691                                  L_code_ptr_display_sexpr:
  1692 00000F40 C8000000                        enter 0, 0
  1693 00000F44 48837D1801                      cmp COUNT, 1
  1694 00000F49 0F85D70E0000                    jne L_error_arg_count_1
  1695 00000F4F 488B7D20                        mov rdi, PARAM(0)
  1696 00000F53 E8C1F4FFFF                      call print_sexpr
  1697 00000F58 48B8-                           mov rax, sob_void
  1697 00000F5A [0000000000000000] 
  1698 00000F62 C9                              leave
  1699 00000F63 C21800                          ret AND_KILL_FRAME(1)
  1700                                  
  1701                                  L_code_ptr_write_char:
  1702 00000F66 C8000000                        enter 0, 0
  1703 00000F6A 48837D1801                      cmp COUNT, 1
  1704 00000F6F 0F85B10E0000                    jne L_error_arg_count_1
  1705 00000F75 488B4520                        mov rax, PARAM(0)
  1706                                          assert_char(rax)
    53 00000F79 803802              <1>  cmp byte [%1], %2
    54 00000F7C 0F85780F0000        <1>  jne L_error_incorrect_type
  1707 00000F82 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1708 00000F85 4825FF000000                    and rax, 255
  1709 00000F8B 48BF-                           mov rdi, fmt_char
  1709 00000F8D [C108000000000000] 
  1710 00000F95 4889C6                          mov rsi, rax
  1711 00000F98 B800000000                      mov rax, 0
  1712                                          ENTER
    44 00000F9D C8000000            <1>  enter 0, 0
    45 00000FA1 4883E4F0            <1>  and rsp, ~15
  1713 00000FA5 E8(00000000)                    call printf
  1714                                          LEAVE
    49 00000FAA C9                  <1>  leave
  1715 00000FAB 48B8-                           mov rax, sob_void
  1715 00000FAD [0000000000000000] 
  1716 00000FB5 C9                              leave
  1717 00000FB6 C21800                          ret AND_KILL_FRAME(1)
  1718                                  
  1719                                  L_code_ptr_car:
  1720 00000FB9 C8000000                        enter 0, 0
  1721 00000FBD 48837D1801                      cmp COUNT, 1
  1722 00000FC2 0F855E0E0000                    jne L_error_arg_count_1
  1723 00000FC8 488B4520                        mov rax, PARAM(0)
  1724                                          assert_pair(rax)
    53 00000FCC 803821              <1>  cmp byte [%1], %2
    54 00000FCF 0F85250F0000        <1>  jne L_error_incorrect_type
  1725 00000FD5 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1726 00000FD9 C9                              leave
  1727 00000FDA C21800                          ret AND_KILL_FRAME(1)
  1728                                          
  1729                                  L_code_ptr_cdr:
  1730 00000FDD C8000000                        enter 0, 0
  1731 00000FE1 48837D1801                      cmp COUNT, 1
  1732 00000FE6 0F853A0E0000                    jne L_error_arg_count_1
  1733 00000FEC 488B4520                        mov rax, PARAM(0)
  1734                                          assert_pair(rax)
    53 00000FF0 803821              <1>  cmp byte [%1], %2
    54 00000FF3 0F85010F0000        <1>  jne L_error_incorrect_type
  1735 00000FF9 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1736 00000FFD C9                              leave
  1737 00000FFE C21800                          ret AND_KILL_FRAME(1)
  1738                                          
  1739                                  L_code_ptr_string_length:
  1740 00001001 C8000000                        enter 0, 0
  1741 00001005 48837D1801                      cmp COUNT, 1
  1742 0000100A 0F85160E0000                    jne L_error_arg_count_1
  1743 00001010 488B4520                        mov rax, PARAM(0)
  1744                                          assert_string(rax)
    53 00001014 803803              <1>  cmp byte [%1], %2
    54 00001017 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1745 0000101D 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1746 00001021 E84F0D0000                      call make_integer
  1747 00001026 C9                              leave
  1748 00001027 C21800                          ret AND_KILL_FRAME(1)
  1749                                  
  1750                                  L_code_ptr_vector_length:
  1751 0000102A C8000000                        enter 0, 0
  1752 0000102E 48837D1801                      cmp COUNT, 1
  1753 00001033 0F85ED0D0000                    jne L_error_arg_count_1
  1754 00001039 488B4520                        mov rax, PARAM(0)
  1755                                          assert_vector(rax)
    53 0000103D 803822              <1>  cmp byte [%1], %2
    54 00001040 0F85B40E0000        <1>  jne L_error_incorrect_type
  1756 00001046 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1757 0000104A E8260D0000                      call make_integer
  1758 0000104F C9                              leave
  1759 00001050 C21800                          ret AND_KILL_FRAME(1)
  1760                                  
  1761                                  L_code_ptr_real_to_integer:
  1762 00001053 C8000000                        enter 0, 0
  1763 00001057 48837D1801                      cmp COUNT, 1
  1764 0000105C 0F85C40D0000                    jne L_error_arg_count_1
  1765 00001062 488B5D20                        mov rbx, PARAM(0)
  1766                                          assert_real(rbx)
    53 00001066 803B13              <1>  cmp byte [%1], %2
    54 00001069 0F858B0E0000        <1>  jne L_error_incorrect_type
  1767 0000106F F20F104301                      movsd xmm0, qword [rbx + 1]
  1768 00001074 F2480F2CF8                      cvttsd2si rdi, xmm0
  1769 00001079 E8F70C0000                      call make_integer
  1770 0000107E C9                              leave
  1771 0000107F C21800                          ret AND_KILL_FRAME(1)
  1772                                  
  1773                                  L_code_ptr_exit:
  1774 00001082 C8000000                        enter 0, 0
  1775 00001086 48837D1800                      cmp COUNT, 0
  1776 0000108B 0F85600D0000                    jne L_error_arg_count_0
  1777 00001091 B800000000                      mov rax, 0
  1778 00001096 E8(00000000)                    call exit
  1779                                  
  1780                                  L_code_ptr_integer_to_real:
  1781 0000109B C8000000                        enter 0, 0
  1782 0000109F 48837D1801                      cmp COUNT, 1
  1783 000010A4 0F857C0D0000                    jne L_error_arg_count_1
  1784 000010AA 488B4520                        mov rax, PARAM(0)
  1785                                          assert_integer(rax)
    53 000010AE 803811              <1>  cmp byte [%1], %2
    54 000010B1 0F85430E0000        <1>  jne L_error_incorrect_type
  1786 000010B7 FF7001                          push qword [rax + 1]
  1787 000010BA F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1788 000010C0 E8980C0000                      call make_real
  1789 000010C5 C9                              leave
  1790 000010C6 C21800                          ret AND_KILL_FRAME(1)
  1791                                  
  1792                                  L_code_ptr_fraction_to_real:
  1793 000010C9 C8000000                        enter 0, 0
  1794 000010CD 48837D1801                      cmp COUNT, 1
  1795 000010D2 0F854E0D0000                    jne L_error_arg_count_1
  1796 000010D8 488B4520                        mov rax, PARAM(0)
  1797                                          assert_fraction(rax)
    53 000010DC 803812              <1>  cmp byte [%1], %2
    54 000010DF 0F85150E0000        <1>  jne L_error_incorrect_type
  1798 000010E5 FF7001                          push qword [rax + 1]
  1799 000010E8 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1800 000010EE FF7009                          push qword [rax + 1 + 8]
  1801 000010F1 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1802 000010F7 F20F5EC1                        divsd xmm0, xmm1
  1803 000010FB E85D0C0000                      call make_real
  1804 00001100 C9                              leave
  1805 00001101 C21800                          ret AND_KILL_FRAME(1)
  1806                                  
  1807                                  L_code_ptr_char_to_integer:
  1808 00001104 C8000000                        enter 0, 0
  1809 00001108 48837D1801                      cmp COUNT, 1
  1810 0000110D 0F85130D0000                    jne L_error_arg_count_1
  1811 00001113 488B4520                        mov rax, PARAM(0)
  1812                                          assert_char(rax)
    53 00001117 803802              <1>  cmp byte [%1], %2
    54 0000111A 0F85DA0D0000        <1>  jne L_error_incorrect_type
  1813 00001120 8A4001                          mov al, byte [rax + 1]
  1814 00001123 4825FF000000                    and rax, 255
  1815 00001129 4889C7                          mov rdi, rax
  1816 0000112C E8440C0000                      call make_integer
  1817 00001131 C9                              leave
  1818 00001132 C21800                          ret AND_KILL_FRAME(1)
  1819                                  
  1820                                  L_code_ptr_integer_to_fraction:
  1821 00001135 C8000000                        enter 0, 0
  1822 00001139 48837D1801                      cmp COUNT, 1
  1823 0000113E 0F85E20C0000                    jne L_error_arg_count_1
  1824 00001144 4C8B4520                        mov r8, PARAM(0)
  1825                                          assert_integer(r8)
    53 00001148 41803811            <1>  cmp byte [%1], %2
    54 0000114C 0F85A80D0000        <1>  jne L_error_incorrect_type
  1826 00001152 BF11000000                      mov rdi, (1 + 8 + 8)
  1827 00001157 E83CF0FFFF                      call malloc
  1828 0000115C 498B5801                        mov rbx, qword [r8 + 1]
  1829 00001160 C60012                          mov byte [rax], T_fraction
  1830 00001163 48895801                        mov qword [rax + 1], rbx
  1831 00001167 48C7400901000000                mov qword [rax + 1 + 8], 1
  1832 0000116F C9                              leave
  1833 00001170 C21800                          ret AND_KILL_FRAME(1)
  1834                                  
  1835                                  L_code_ptr_integer_to_char:
  1836 00001173 C8000000                        enter 0, 0
  1837 00001177 48837D1801                      cmp COUNT, 1
  1838 0000117C 0F85A40C0000                    jne L_error_arg_count_1
  1839 00001182 488B4520                        mov rax, PARAM(0)
  1840                                          assert_integer(rax)
    53 00001186 803811              <1>  cmp byte [%1], %2
    54 00001189 0F856B0D0000        <1>  jne L_error_incorrect_type
  1841 0000118F 488B5801                        mov rbx, qword [rax + 1]
  1842 00001193 4883FB00                        cmp rbx, 0
  1843 00001197 0F8EF20B0000                    jle L_error_integer_range
  1844 0000119D 4881FB00010000                  cmp rbx, 256
  1845 000011A4 0F8DE50B0000                    jge L_error_integer_range
  1846 000011AA BF02000000                      mov rdi, (1 + 1)
  1847 000011AF E8E4EFFFFF                      call malloc
  1848 000011B4 C60002                          mov byte [rax], T_char
  1849 000011B7 885801                          mov byte [rax + 1], bl
  1850 000011BA C9                              leave
  1851 000011BB C21800                          ret AND_KILL_FRAME(1)
  1852                                  
  1853                                  L_code_ptr_trng:
  1854 000011BE C8000000                        enter 0, 0
  1855 000011C2 48837D1800                      cmp COUNT, 0
  1856 000011C7 0F85240C0000                    jne L_error_arg_count_0
  1857 000011CD 480FC7F7                        rdrand rdi
  1858 000011D1 48D1EF                          shr rdi, 1
  1859 000011D4 E89C0B0000                      call make_integer
  1860 000011D9 C9                              leave
  1861 000011DA C21000                          ret AND_KILL_FRAME(0)
  1862                                  
  1863                                  L_code_ptr_is_zero:
  1864 000011DD C8000000                        enter 0, 0
  1865 000011E1 48837D1801                      cmp COUNT, 1
  1866 000011E6 0F853A0C0000                    jne L_error_arg_count_1
  1867 000011EC 488B4520                        mov rax, PARAM(0)
  1868 000011F0 803811                          cmp byte [rax], T_integer
  1869 000011F3 740F                            je .L_integer
  1870 000011F5 803812                          cmp byte [rax], T_fraction
  1871 000011F8 7413                            je .L_fraction
  1872 000011FA 803813                          cmp byte [rax], T_real
  1873 000011FD 7417                            je .L_real
  1874 000011FF E9F60C0000                      jmp L_error_incorrect_type
  1875                                  .L_integer:
  1876 00001204 4883780100                      cmp qword [rax + 1], 0
  1877 00001209 7429                            je .L_zero
  1878 0000120B EB1B                            jmp .L_not_zero
  1879                                  .L_fraction:
  1880 0000120D 4883780100                      cmp qword [rax + 1], 0
  1881 00001212 7420                            je .L_zero
  1882 00001214 EB12                            jmp .L_not_zero
  1883                                  .L_real:
  1884 00001216 660FEFC0                        pxor xmm0, xmm0
  1885 0000121A FF7001                          push qword [rax + 1]
  1886 0000121D F20F100C24                      movsd xmm1, qword [rsp]
  1887 00001222 660F2EC1                        ucomisd xmm0, xmm1
  1888 00001226 740C                            je .L_zero
  1889                                  .L_not_zero:
  1890 00001228 48B8-                           mov rax, sob_boolean_false
  1890 0000122A [0200000000000000] 
  1891 00001232 EB0A                            jmp .L_end
  1892                                  .L_zero:
  1893 00001234 48B8-                           mov rax, sob_boolean_true
  1893 00001236 [0300000000000000] 
  1894                                  .L_end:
  1895 0000123E C9                              leave
  1896 0000123F C21800                          ret AND_KILL_FRAME(1)
  1897                                  
  1898                                  L_code_ptr_is_integer:
  1899 00001242 C8000000                        enter 0, 0
  1900 00001246 48837D1801                      cmp COUNT, 1
  1901 0000124B 0F85D50B0000                    jne L_error_arg_count_1
  1902 00001251 488B4520                        mov rax, PARAM(0)
  1903 00001255 803811                          cmp byte [rax], T_integer
  1904 00001258 750C                            jne .L_false
  1905 0000125A 48B8-                           mov rax, sob_boolean_true
  1905 0000125C [0300000000000000] 
  1906 00001264 EB0A                            jmp .L_exit
  1907                                  .L_false:
  1908 00001266 48B8-                           mov rax, sob_boolean_false
  1908 00001268 [0200000000000000] 
  1909                                  .L_exit:
  1910 00001270 C9                              leave
  1911 00001271 C21800                          ret AND_KILL_FRAME(1)
  1912                                  
  1913                                  L_code_ptr_raw_bin_add_rr:
  1914 00001274 C8000000                        enter 0, 0
  1915 00001278 48837D1802                      cmp COUNT, 2
  1916 0000127D 0F85D80B0000                    jne L_error_arg_count_2
  1917 00001283 488B5D20                        mov rbx, PARAM(0)
  1918                                          assert_real(rbx)
    53 00001287 803B13              <1>  cmp byte [%1], %2
    54 0000128A 0F856A0C0000        <1>  jne L_error_incorrect_type
  1919 00001290 488B4D28                        mov rcx, PARAM(1)
  1920                                          assert_real(rcx)
    53 00001294 803913              <1>  cmp byte [%1], %2
    54 00001297 0F855D0C0000        <1>  jne L_error_incorrect_type
  1921 0000129D F20F104301                      movsd xmm0, qword [rbx + 1]
  1922 000012A2 F20F104901                      movsd xmm1, qword [rcx + 1]
  1923 000012A7 F20F58C1                        addsd xmm0, xmm1
  1924 000012AB E8AD0A0000                      call make_real
  1925 000012B0 C9                              leave
  1926 000012B1 C22000                          ret AND_KILL_FRAME(2)
  1927                                  
  1928                                  L_code_ptr_raw_bin_sub_rr:
  1929 000012B4 C8000000                        enter 0, 0
  1930 000012B8 48837D1802                      cmp COUNT, 2
  1931 000012BD 0F85980B0000                    jne L_error_arg_count_2
  1932 000012C3 488B5D20                        mov rbx, PARAM(0)
  1933                                          assert_real(rbx)
    53 000012C7 803B13              <1>  cmp byte [%1], %2
    54 000012CA 0F852A0C0000        <1>  jne L_error_incorrect_type
  1934 000012D0 488B4D28                        mov rcx, PARAM(1)
  1935                                          assert_real(rcx)
    53 000012D4 803913              <1>  cmp byte [%1], %2
    54 000012D7 0F851D0C0000        <1>  jne L_error_incorrect_type
  1936 000012DD F20F104301                      movsd xmm0, qword [rbx + 1]
  1937 000012E2 F20F104901                      movsd xmm1, qword [rcx + 1]
  1938 000012E7 F20F5CC1                        subsd xmm0, xmm1
  1939 000012EB E86D0A0000                      call make_real
  1940 000012F0 C9                              leave
  1941 000012F1 C22000                          ret AND_KILL_FRAME(2)
  1942                                  
  1943                                  L_code_ptr_raw_bin_mul_rr:
  1944 000012F4 C8000000                        enter 0, 0
  1945 000012F8 48837D1802                      cmp COUNT, 2
  1946 000012FD 0F85580B0000                    jne L_error_arg_count_2
  1947 00001303 488B5D20                        mov rbx, PARAM(0)
  1948                                          assert_real(rbx)
    53 00001307 803B13              <1>  cmp byte [%1], %2
    54 0000130A 0F85EA0B0000        <1>  jne L_error_incorrect_type
  1949 00001310 488B4D28                        mov rcx, PARAM(1)
  1950                                          assert_real(rcx)
    53 00001314 803913              <1>  cmp byte [%1], %2
    54 00001317 0F85DD0B0000        <1>  jne L_error_incorrect_type
  1951 0000131D F20F104301                      movsd xmm0, qword [rbx + 1]
  1952 00001322 F20F104901                      movsd xmm1, qword [rcx + 1]
  1953 00001327 F20F59C1                        mulsd xmm0, xmm1
  1954 0000132B E82D0A0000                      call make_real
  1955 00001330 C9                              leave
  1956 00001331 C22000                          ret AND_KILL_FRAME(2)
  1957                                  
  1958                                  L_code_ptr_raw_bin_div_rr:
  1959 00001334 C8000000                        enter 0, 0
  1960 00001338 48837D1802                      cmp COUNT, 2
  1961 0000133D 0F85180B0000                    jne L_error_arg_count_2
  1962 00001343 488B5D20                        mov rbx, PARAM(0)
  1963                                          assert_real(rbx)
    53 00001347 803B13              <1>  cmp byte [%1], %2
    54 0000134A 0F85AA0B0000        <1>  jne L_error_incorrect_type
  1964 00001350 488B4D28                        mov rcx, PARAM(1)
  1965                                          assert_real(rcx)
    53 00001354 803913              <1>  cmp byte [%1], %2
    54 00001357 0F859D0B0000        <1>  jne L_error_incorrect_type
  1966 0000135D F20F104301                      movsd xmm0, qword [rbx + 1]
  1967 00001362 F20F104901                      movsd xmm1, qword [rcx + 1]
  1968 00001367 660FEFD2                        pxor xmm2, xmm2
  1969 0000136B 660F2ECA                        ucomisd xmm1, xmm2
  1970 0000136F 0F84B60B0000                    je L_error_division_by_zero
  1971 00001375 F20F5EC1                        divsd xmm0, xmm1
  1972 00001379 E8DF090000                      call make_real
  1973 0000137E C9                              leave
  1974 0000137F C22000                          ret AND_KILL_FRAME(2)
  1975                                  
  1976                                  L_code_ptr_raw_bin_add_zz:
  1977 00001382 C8000000                	enter 0, 0
  1978 00001386 48837D1802              	cmp COUNT, 2
  1979 0000138B 0F85CA0A0000            	jne L_error_arg_count_2
  1980 00001391 4C8B4520                	mov r8, PARAM(0)
  1981                                  	assert_integer(r8)
    53 00001395 41803811            <1>  cmp byte [%1], %2
    54 00001399 0F855B0B0000        <1>  jne L_error_incorrect_type
  1982 0000139F 4C8B4D28                	mov r9, PARAM(1)
  1983                                  	assert_integer(r9)
    53 000013A3 41803911            <1>  cmp byte [%1], %2
    54 000013A7 0F854D0B0000        <1>  jne L_error_incorrect_type
  1984 000013AD 498B7801                	mov rdi, qword [r8 + 1]
  1985 000013B1 49037901                	add rdi, qword [r9 + 1]
  1986 000013B5 E8BB090000              	call make_integer
  1987 000013BA C9                      	leave
  1988 000013BB C22000                  	ret AND_KILL_FRAME(2)
  1989                                  
  1990                                  L_code_ptr_raw_bin_add_qq:
  1991 000013BE C8000000                        enter 0, 0
  1992 000013C2 48837D1802                      cmp COUNT, 2
  1993 000013C7 0F858E0A0000                    jne L_error_arg_count_2
  1994 000013CD 4C8B4520                        mov r8, PARAM(0)
  1995                                          assert_fraction(r8)
    53 000013D1 41803812            <1>  cmp byte [%1], %2
    54 000013D5 0F851F0B0000        <1>  jne L_error_incorrect_type
  1996 000013DB 4C8B4D28                        mov r9, PARAM(1)
  1997                                          assert_fraction(r9)
    53 000013DF 41803912            <1>  cmp byte [%1], %2
    54 000013E3 0F85110B0000        <1>  jne L_error_incorrect_type
  1998 000013E9 498B4001                        mov rax, qword [r8 + 1] ; num1
  1999 000013ED 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2000 000013F1 4899                            cqo
  2001 000013F3 48F7EB                          imul rbx
  2002 000013F6 4889C6                          mov rsi, rax
  2003 000013F9 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2004 000013FD 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2005 00001401 4899                            cqo
  2006 00001403 48F7EB                          imul rbx
  2007 00001406 4801C6                          add rsi, rax
  2008 00001409 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2009 0000140D 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2010 00001411 4899                            cqo
  2011 00001413 48F7EB                          imul rbx
  2012 00001416 4889C7                          mov rdi, rax
  2013 00001419 E8DE010000                      call normalize_fraction
  2014 0000141E C9                              leave
  2015 0000141F C22000                          ret AND_KILL_FRAME(2)
  2016                                  
  2017                                  L_code_ptr_raw_bin_sub_zz:
  2018 00001422 C8000000                	enter 0, 0
  2019 00001426 48837D1802              	cmp COUNT, 2
  2020 0000142B 0F852A0A0000            	jne L_error_arg_count_2
  2021 00001431 4C8B4520                	mov r8, PARAM(0)
  2022                                  	assert_integer(r8)
    53 00001435 41803811            <1>  cmp byte [%1], %2
    54 00001439 0F85BB0A0000        <1>  jne L_error_incorrect_type
  2023 0000143F 4C8B4D28                	mov r9, PARAM(1)
  2024                                  	assert_integer(r9)
    53 00001443 41803911            <1>  cmp byte [%1], %2
    54 00001447 0F85AD0A0000        <1>  jne L_error_incorrect_type
  2025 0000144D 498B7801                	mov rdi, qword [r8 + 1]
  2026 00001451 492B7901                	sub rdi, qword [r9 + 1]
  2027 00001455 E81B090000              	call make_integer
  2028 0000145A C9                      	leave
  2029 0000145B C22000                  	ret AND_KILL_FRAME(2)
  2030                                  
  2031                                  L_code_ptr_raw_bin_sub_qq:
  2032 0000145E C8000000                        enter 0, 0
  2033 00001462 48837D1802                      cmp COUNT, 2
  2034 00001467 0F85EE090000                    jne L_error_arg_count_2
  2035 0000146D 4C8B4520                        mov r8, PARAM(0)
  2036                                          assert_fraction(r8)
    53 00001471 41803812            <1>  cmp byte [%1], %2
    54 00001475 0F857F0A0000        <1>  jne L_error_incorrect_type
  2037 0000147B 4C8B4D28                        mov r9, PARAM(1)
  2038                                          assert_fraction(r9)
    53 0000147F 41803912            <1>  cmp byte [%1], %2
    54 00001483 0F85710A0000        <1>  jne L_error_incorrect_type
  2039 00001489 498B4001                        mov rax, qword [r8 + 1] ; num1
  2040 0000148D 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2041 00001491 4899                            cqo
  2042 00001493 48F7EB                          imul rbx
  2043 00001496 4889C6                          mov rsi, rax
  2044 00001499 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2045 0000149D 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2046 000014A1 4899                            cqo
  2047 000014A3 48F7EB                          imul rbx
  2048 000014A6 4829C6                          sub rsi, rax
  2049 000014A9 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2050 000014AD 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2051 000014B1 4899                            cqo
  2052 000014B3 48F7EB                          imul rbx
  2053 000014B6 4889C7                          mov rdi, rax
  2054 000014B9 E83E010000                      call normalize_fraction
  2055 000014BE C9                              leave
  2056 000014BF C22000                          ret AND_KILL_FRAME(2)
  2057                                  
  2058                                  L_code_ptr_raw_bin_mul_zz:
  2059 000014C2 C8000000                	enter 0, 0
  2060 000014C6 48837D1802              	cmp COUNT, 2
  2061 000014CB 0F858A090000            	jne L_error_arg_count_2
  2062 000014D1 4C8B4520                	mov r8, PARAM(0)
  2063                                  	assert_integer(r8)
    53 000014D5 41803811            <1>  cmp byte [%1], %2
    54 000014D9 0F851B0A0000        <1>  jne L_error_incorrect_type
  2064 000014DF 4C8B4D28                	mov r9, PARAM(1)
  2065                                  	assert_integer(r9)
    53 000014E3 41803911            <1>  cmp byte [%1], %2
    54 000014E7 0F850D0A0000        <1>  jne L_error_incorrect_type
  2066 000014ED 4899                    	cqo
  2067 000014EF 498B4001                	mov rax, qword [r8 + 1]
  2068 000014F3 49F76101                	mul qword [r9 + 1]
  2069 000014F7 4889C7                  	mov rdi, rax
  2070 000014FA E876080000              	call make_integer
  2071 000014FF C9                      	leave
  2072 00001500 C22000                  	ret AND_KILL_FRAME(2)
  2073                                  
  2074                                  L_code_ptr_raw_bin_mul_qq:
  2075 00001503 C8000000                        enter 0, 0
  2076 00001507 48837D1802                      cmp COUNT, 2
  2077 0000150C 0F8549090000                    jne L_error_arg_count_2
  2078 00001512 4C8B4520                        mov r8, PARAM(0)
  2079                                          assert_fraction(r8)
    53 00001516 41803812            <1>  cmp byte [%1], %2
    54 0000151A 0F85DA090000        <1>  jne L_error_incorrect_type
  2080 00001520 4C8B4D28                        mov r9, PARAM(1)
  2081                                          assert_fraction(r9)
    53 00001524 41803912            <1>  cmp byte [%1], %2
    54 00001528 0F85CC090000        <1>  jne L_error_incorrect_type
  2082 0000152E 498B4001                        mov rax, qword [r8 + 1] ; num1
  2083 00001532 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2084 00001536 4899                            cqo
  2085 00001538 48F7EB                          imul rbx
  2086 0000153B 4889C6                          mov rsi, rax
  2087 0000153E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2088 00001542 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2089 00001546 4899                            cqo
  2090 00001548 48F7EB                          imul rbx
  2091 0000154B 4889C7                          mov rdi, rax
  2092 0000154E E8A9000000                      call normalize_fraction
  2093 00001553 C9                              leave
  2094 00001554 C22000                          ret AND_KILL_FRAME(2)
  2095                                          
  2096                                  L_code_ptr_raw_bin_div_zz:
  2097 00001557 C8000000                	enter 0, 0
  2098 0000155B 48837D1802              	cmp COUNT, 2
  2099 00001560 0F85F5080000            	jne L_error_arg_count_2
  2100 00001566 4C8B4520                	mov r8, PARAM(0)
  2101                                  	assert_integer(r8)
    53 0000156A 41803811            <1>  cmp byte [%1], %2
    54 0000156E 0F8586090000        <1>  jne L_error_incorrect_type
  2102 00001574 4C8B4D28                	mov r9, PARAM(1)
  2103                                  	assert_integer(r9)
    53 00001578 41803911            <1>  cmp byte [%1], %2
    54 0000157C 0F8578090000        <1>  jne L_error_incorrect_type
  2104 00001582 498B7901                	mov rdi, qword [r9 + 1]
  2105 00001586 4883FF00                	cmp rdi, 0
  2106 0000158A 0F849B090000            	je L_error_division_by_zero
  2107 00001590 498B7001                	mov rsi, qword [r8 + 1]
  2108 00001594 E863000000              	call normalize_fraction
  2109 00001599 C9                      	leave
  2110 0000159A C22000                  	ret AND_KILL_FRAME(2)
  2111                                  
  2112                                  L_code_ptr_raw_bin_div_qq:
  2113 0000159D C8000000                        enter 0, 0
  2114 000015A1 48837D1802                      cmp COUNT, 2
  2115 000015A6 0F85AF080000                    jne L_error_arg_count_2
  2116 000015AC 4C8B4520                        mov r8, PARAM(0)
  2117                                          assert_fraction(r8)
    53 000015B0 41803812            <1>  cmp byte [%1], %2
    54 000015B4 0F8540090000        <1>  jne L_error_incorrect_type
  2118 000015BA 4C8B4D28                        mov r9, PARAM(1)
  2119                                          assert_fraction(r9)
    53 000015BE 41803912            <1>  cmp byte [%1], %2
    54 000015C2 0F8532090000        <1>  jne L_error_incorrect_type
  2120 000015C8 4983790100                      cmp qword [r9 + 1], 0
  2121 000015CD 0F8458090000                    je L_error_division_by_zero
  2122 000015D3 498B4001                        mov rax, qword [r8 + 1] ; num1
  2123 000015D7 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2124 000015DB 4899                            cqo
  2125 000015DD 48F7EB                          imul rbx
  2126 000015E0 4889C6                          mov rsi, rax
  2127 000015E3 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2128 000015E7 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2129 000015EB 4899                            cqo
  2130 000015ED 48F7EB                          imul rbx
  2131 000015F0 4889C7                          mov rdi, rax
  2132 000015F3 E804000000                      call normalize_fraction
  2133 000015F8 C9                              leave
  2134 000015F9 C22000                          ret AND_KILL_FRAME(2)
  2135                                          
  2136                                  normalize_fraction:
  2137 000015FC 56                              push rsi
  2138 000015FD 57                              push rdi
  2139 000015FE E859000000                      call gcd
  2140 00001603 4889C3                          mov rbx, rax
  2141 00001606 58                              pop rax
  2142 00001607 4899                            cqo
  2143 00001609 48F7FB                          idiv rbx
  2144 0000160C 4989C0                          mov r8, rax
  2145 0000160F 58                              pop rax
  2146 00001610 4899                            cqo
  2147 00001612 48F7FB                          idiv rbx
  2148 00001615 4989C1                          mov r9, rax
  2149 00001618 4983F900                        cmp r9, 0
  2150 0000161C 741C                            je .L_zero
  2151 0000161E 4983F801                        cmp r8, 1
  2152 00001622 7421                            je .L_int
  2153 00001624 BF11000000                      mov rdi, (1 + 8 + 8)
  2154 00001629 E86AEBFFFF                      call malloc
  2155 0000162E C60012                          mov byte [rax], T_fraction
  2156 00001631 4C894801                        mov qword [rax + 1], r9
  2157 00001635 4C894009                        mov qword [rax + 1 + 8], r8
  2158 00001639 C3                              ret
  2159                                  .L_zero:
  2160 0000163A BF00000000                      mov rdi, 0
  2161 0000163F E831070000                      call make_integer
  2162 00001644 C3                              ret
  2163                                  .L_int:
  2164 00001645 4C89CF                          mov rdi, r9
  2165 00001648 E828070000                      call make_integer
  2166 0000164D C3                              ret
  2167                                  
  2168                                  iabs:
  2169 0000164E 4889F8                          mov rax, rdi
  2170 00001651 4883F800                        cmp rax, 0
  2171 00001655 7C01                            jl .Lneg
  2172 00001657 C3                              ret
  2173                                  .Lneg:
  2174 00001658 48F7D8                          neg rax
  2175 0000165B C3                              ret
  2176                                  
  2177                                  gcd:
  2178 0000165C E8EDFFFFFF                      call iabs
  2179 00001661 4889C3                          mov rbx, rax
  2180 00001664 4889F7                          mov rdi, rsi
  2181 00001667 E8E2FFFFFF                      call iabs
  2182 0000166C 4883F800                        cmp rax, 0
  2183 00001670 7502                            jne .L0
  2184 00001672 4893                            xchg rax, rbx
  2185                                  .L0:
  2186 00001674 4883FB00                        cmp rbx, 0
  2187 00001678 740C                            je .L1
  2188 0000167A 4899                            cqo
  2189 0000167C 48F7F3                          div rbx
  2190 0000167F 4889D0                          mov rax, rdx
  2191 00001682 4893                            xchg rax, rbx
  2192 00001684 EBEE                            jmp .L0
  2193                                  .L1:
  2194 00001686 C3                              ret
  2195                                  
  2196                                  L_code_ptr_error:
  2197 00001687 C8000000                        enter 0, 0
  2198 0000168B 48837D1802                      cmp COUNT, 2
  2199 00001690 0F85C5070000                    jne L_error_arg_count_2
  2200 00001696 488B7520                        mov rsi, PARAM(0)
  2201                                          assert_interned_symbol(rsi)
    53 0000169A 803E41              <1>  cmp byte [%1], %2
    54 0000169D 0F8557080000        <1>  jne L_error_incorrect_type
  2202 000016A3 488B7528                        mov rsi, PARAM(1)
  2203                                          assert_string(rsi)
    53 000016A7 803E03              <1>  cmp byte [%1], %2
    54 000016AA 0F854A080000        <1>  jne L_error_incorrect_type
  2204 000016B0 48BF-                           mov rdi, fmt_scheme_error_part_1
  2204 000016B2 [1F0A000000000000] 
  2205 000016BA B800000000                      mov rax, 0
  2206                                          ENTER
    44 000016BF C8000000            <1>  enter 0, 0
    45 000016C3 4883E4F0            <1>  and rsp, ~15
  2207 000016C7 E8(00000000)                    call printf
  2208                                          LEAVE
    49 000016CC C9                  <1>  leave
  2209 000016CD 488B7D20                        mov rdi, PARAM(0)
  2210 000016D1 E843EDFFFF                      call print_sexpr
  2211 000016D6 48BF-                           mov rdi, fmt_scheme_error_part_2
  2211 000016D8 [330A000000000000] 
  2212 000016E0 B800000000                      mov rax, 0
  2213                                          ENTER
    44 000016E5 C8000000            <1>  enter 0, 0
    45 000016E9 4883E4F0            <1>  and rsp, ~15
  2214 000016ED E8(00000000)                    call printf
  2215                                          LEAVE
    49 000016F2 C9                  <1>  leave
  2216 000016F3 488B4528                        mov rax, PARAM(1)       ; sob_string
  2217 000016F7 BE01000000                      mov rsi, 1              ; size = 1 byte
  2218 000016FC 488B5001                        mov rdx, qword [rax + 1] ; length
  2219 00001700 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2220 00001704 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2221                                  	ENTER
    44 0000170C C8000000            <1>  enter 0, 0
    45 00001710 4883E4F0            <1>  and rsp, ~15
  2222 00001714 E8(00000000)                    call fwrite
  2223                                  	LEAVE
    49 00001719 C9                  <1>  leave
  2224 0000171A 48BF-                           mov rdi, fmt_scheme_error_part_3
  2224 0000171C [750A000000000000] 
  2225 00001724 B800000000                      mov rax, 0
  2226                                          ENTER
    44 00001729 C8000000            <1>  enter 0, 0
    45 0000172D 4883E4F0            <1>  and rsp, ~15
  2227 00001731 E8(00000000)                    call printf
  2228                                          LEAVE
    49 00001736 C9                  <1>  leave
  2229 00001737 48C7C0F7FFFFFF                  mov rax, -9
  2230 0000173E E8(00000000)                    call exit
  2231                                  
  2232                                  L_code_ptr_raw_less_than_rr:
  2233 00001743 C8000000                        enter 0, 0
  2234 00001747 48837D1802                      cmp COUNT, 2
  2235 0000174C 0F8509070000                    jne L_error_arg_count_2
  2236 00001752 488B7520                        mov rsi, PARAM(0)
  2237                                          assert_real(rsi)
    53 00001756 803E13              <1>  cmp byte [%1], %2
    54 00001759 0F859B070000        <1>  jne L_error_incorrect_type
  2238 0000175F 488B7D28                        mov rdi, PARAM(1)
  2239                                          assert_real(rdi)
    53 00001763 803F13              <1>  cmp byte [%1], %2
    54 00001766 0F858E070000        <1>  jne L_error_incorrect_type
  2240 0000176C F20F104601                      movsd xmm0, qword [rsi + 1]
  2241 00001771 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2242 00001776 660F2FC1                        comisd xmm0, xmm1
  2243 0000177A 730C                            jae .L_false
  2244 0000177C 48B8-                           mov rax, sob_boolean_true
  2244 0000177E [0300000000000000] 
  2245 00001786 EB0A                            jmp .L_exit
  2246                                  .L_false:
  2247 00001788 48B8-                           mov rax, sob_boolean_false
  2247 0000178A [0200000000000000] 
  2248                                  .L_exit:
  2249 00001792 C9                              leave
  2250 00001793 C22000                          ret AND_KILL_FRAME(2)
  2251                                          
  2252                                  L_code_ptr_raw_less_than_zz:
  2253 00001796 C8000000                	enter 0, 0
  2254 0000179A 48837D1802              	cmp COUNT, 2
  2255 0000179F 0F85B6060000            	jne L_error_arg_count_2
  2256 000017A5 4C8B4520                	mov r8, PARAM(0)
  2257                                  	assert_integer(r8)
    53 000017A9 41803811            <1>  cmp byte [%1], %2
    54 000017AD 0F8547070000        <1>  jne L_error_incorrect_type
  2258 000017B3 4C8B4D28                	mov r9, PARAM(1)
  2259                                  	assert_integer(r9)
    53 000017B7 41803911            <1>  cmp byte [%1], %2
    54 000017BB 0F8539070000        <1>  jne L_error_incorrect_type
  2260 000017C1 498B7801                	mov rdi, qword [r8 + 1]
  2261 000017C5 493B7901                	cmp rdi, qword [r9 + 1]
  2262 000017C9 7D0C                    	jge .L_false
  2263 000017CB 48B8-                   	mov rax, sob_boolean_true
  2263 000017CD [0300000000000000] 
  2264 000017D5 EB0A                    	jmp .L_exit
  2265                                  .L_false:
  2266 000017D7 48B8-                   	mov rax, sob_boolean_false
  2266 000017D9 [0200000000000000] 
  2267                                  .L_exit:
  2268 000017E1 C9                      	leave
  2269 000017E2 C22000                  	ret AND_KILL_FRAME(2)
  2270                                  
  2271                                  L_code_ptr_raw_less_than_qq:
  2272 000017E5 C8000000                        enter 0, 0
  2273 000017E9 48837D1802                      cmp COUNT, 2
  2274 000017EE 0F8567060000                    jne L_error_arg_count_2
  2275 000017F4 488B7520                        mov rsi, PARAM(0)
  2276                                          assert_fraction(rsi)
    53 000017F8 803E12              <1>  cmp byte [%1], %2
    54 000017FB 0F85F9060000        <1>  jne L_error_incorrect_type
  2277 00001801 488B7D28                        mov rdi, PARAM(1)
  2278                                          assert_fraction(rdi)
    53 00001805 803F12              <1>  cmp byte [%1], %2
    54 00001808 0F85EC060000        <1>  jne L_error_incorrect_type
  2279 0000180E 488B4601                        mov rax, qword [rsi + 1] ; num1
  2280 00001812 4899                            cqo
  2281 00001814 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2282 00001818 4889C1                          mov rcx, rax
  2283 0000181B 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2284 0000181F 4899                            cqo
  2285 00001821 48F76F01                        imul qword [rdi + 1]          ; num2
  2286 00001825 4829C1                          sub rcx, rax
  2287 00001828 7D0C                            jge .L_false
  2288 0000182A 48B8-                           mov rax, sob_boolean_true
  2288 0000182C [0300000000000000] 
  2289 00001834 EB0A                            jmp .L_exit
  2290                                  .L_false:
  2291 00001836 48B8-                           mov rax, sob_boolean_false
  2291 00001838 [0200000000000000] 
  2292                                  .L_exit:
  2293 00001840 C9                              leave
  2294 00001841 C22000                          ret AND_KILL_FRAME(2)
  2295                                  
  2296                                  L_code_ptr_raw_equal_rr:
  2297 00001844 C8000000                        enter 0, 0
  2298 00001848 48837D1802                      cmp COUNT, 2
  2299 0000184D 0F8508060000                    jne L_error_arg_count_2
  2300 00001853 488B7520                        mov rsi, PARAM(0)
  2301                                          assert_real(rsi)
    53 00001857 803E13              <1>  cmp byte [%1], %2
    54 0000185A 0F859A060000        <1>  jne L_error_incorrect_type
  2302 00001860 488B7D28                        mov rdi, PARAM(1)
  2303                                          assert_real(rdi)
    53 00001864 803F13              <1>  cmp byte [%1], %2
    54 00001867 0F858D060000        <1>  jne L_error_incorrect_type
  2304 0000186D F20F104601                      movsd xmm0, qword [rsi + 1]
  2305 00001872 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2306 00001877 660F2FC1                        comisd xmm0, xmm1
  2307 0000187B 750C                            jne .L_false
  2308 0000187D 48B8-                           mov rax, sob_boolean_true
  2308 0000187F [0300000000000000] 
  2309 00001887 EB0A                            jmp .L_exit
  2310                                  .L_false:
  2311 00001889 48B8-                           mov rax, sob_boolean_false
  2311 0000188B [0200000000000000] 
  2312                                  .L_exit:
  2313 00001893 C9                              leave
  2314 00001894 C22000                          ret AND_KILL_FRAME(2)
  2315                                          
  2316                                  L_code_ptr_raw_equal_zz:
  2317 00001897 C8000000                	enter 0, 0
  2318 0000189B 48837D1802              	cmp COUNT, 2
  2319 000018A0 0F85B5050000            	jne L_error_arg_count_2
  2320 000018A6 4C8B4520                	mov r8, PARAM(0)
  2321                                  	assert_integer(r8)
    53 000018AA 41803811            <1>  cmp byte [%1], %2
    54 000018AE 0F8546060000        <1>  jne L_error_incorrect_type
  2322 000018B4 4C8B4D28                	mov r9, PARAM(1)
  2323                                  	assert_integer(r9)
    53 000018B8 41803911            <1>  cmp byte [%1], %2
    54 000018BC 0F8538060000        <1>  jne L_error_incorrect_type
  2324 000018C2 498B7801                	mov rdi, qword [r8 + 1]
  2325 000018C6 493B7901                	cmp rdi, qword [r9 + 1]
  2326 000018CA 750C                    	jne .L_false
  2327 000018CC 48B8-                   	mov rax, sob_boolean_true
  2327 000018CE [0300000000000000] 
  2328 000018D6 EB0A                    	jmp .L_exit
  2329                                  .L_false:
  2330 000018D8 48B8-                   	mov rax, sob_boolean_false
  2330 000018DA [0200000000000000] 
  2331                                  .L_exit:
  2332 000018E2 C9                      	leave
  2333 000018E3 C22000                  	ret AND_KILL_FRAME(2)
  2334                                  
  2335                                  L_code_ptr_raw_equal_qq:
  2336 000018E6 C8000000                        enter 0, 0
  2337 000018EA 48837D1802                      cmp COUNT, 2
  2338 000018EF 0F8566050000                    jne L_error_arg_count_2
  2339 000018F5 488B7520                        mov rsi, PARAM(0)
  2340                                          assert_fraction(rsi)
    53 000018F9 803E12              <1>  cmp byte [%1], %2
    54 000018FC 0F85F8050000        <1>  jne L_error_incorrect_type
  2341 00001902 488B7D28                        mov rdi, PARAM(1)
  2342                                          assert_fraction(rdi)
    53 00001906 803F12              <1>  cmp byte [%1], %2
    54 00001909 0F85EB050000        <1>  jne L_error_incorrect_type
  2343 0000190F 488B4601                        mov rax, qword [rsi + 1] ; num1
  2344 00001913 4899                            cqo
  2345 00001915 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2346 00001919 4889C1                          mov rcx, rax
  2347 0000191C 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2348 00001920 4899                            cqo
  2349 00001922 48F76F01                        imul qword [rdi + 1]          ; num2
  2350 00001926 4829C1                          sub rcx, rax
  2351 00001929 750C                            jne .L_false
  2352 0000192B 48B8-                           mov rax, sob_boolean_true
  2352 0000192D [0300000000000000] 
  2353 00001935 EB0A                            jmp .L_exit
  2354                                  .L_false:
  2355 00001937 48B8-                           mov rax, sob_boolean_false
  2355 00001939 [0200000000000000] 
  2356                                  .L_exit:
  2357 00001941 C9                              leave
  2358 00001942 C22000                          ret AND_KILL_FRAME(2)
  2359                                  
  2360                                  L_code_ptr_quotient:
  2361 00001945 C8000000                        enter 0, 0
  2362 00001949 48837D1802                      cmp COUNT, 2
  2363 0000194E 0F8507050000                    jne L_error_arg_count_2
  2364 00001954 488B7520                        mov rsi, PARAM(0)
  2365                                          assert_integer(rsi)
    53 00001958 803E11              <1>  cmp byte [%1], %2
    54 0000195B 0F8599050000        <1>  jne L_error_incorrect_type
  2366 00001961 488B7D28                        mov rdi, PARAM(1)
  2367                                          assert_integer(rdi)
    53 00001965 803F11              <1>  cmp byte [%1], %2
    54 00001968 0F858C050000        <1>  jne L_error_incorrect_type
  2368 0000196E 488B4601                        mov rax, qword [rsi + 1]
  2369 00001972 488B5F01                        mov rbx, qword [rdi + 1]
  2370 00001976 4883FB00                        cmp rbx, 0
  2371 0000197A 0F84AB050000                    je L_error_division_by_zero
  2372 00001980 4899                            cqo
  2373 00001982 48F7FB                          idiv rbx
  2374 00001985 4889C7                          mov rdi, rax
  2375 00001988 E8E8030000                      call make_integer
  2376 0000198D C9                              leave
  2377 0000198E C22000                          ret AND_KILL_FRAME(2)
  2378                                          
  2379                                  L_code_ptr_remainder:
  2380 00001991 C8000000                        enter 0, 0
  2381 00001995 48837D1802                      cmp COUNT, 2
  2382 0000199A 0F85BB040000                    jne L_error_arg_count_2
  2383 000019A0 488B7520                        mov rsi, PARAM(0)
  2384                                          assert_integer(rsi)
    53 000019A4 803E11              <1>  cmp byte [%1], %2
    54 000019A7 0F854D050000        <1>  jne L_error_incorrect_type
  2385 000019AD 488B7D28                        mov rdi, PARAM(1)
  2386                                          assert_integer(rdi)
    53 000019B1 803F11              <1>  cmp byte [%1], %2
    54 000019B4 0F8540050000        <1>  jne L_error_incorrect_type
  2387 000019BA 488B4601                        mov rax, qword [rsi + 1]
  2388 000019BE 488B5F01                        mov rbx, qword [rdi + 1]
  2389 000019C2 4883FB00                        cmp rbx, 0
  2390 000019C6 0F845F050000                    je L_error_division_by_zero
  2391 000019CC 4899                            cqo
  2392 000019CE 48F7FB                          idiv rbx
  2393 000019D1 4889D7                          mov rdi, rdx
  2394 000019D4 E89C030000                      call make_integer
  2395 000019D9 C9                              leave
  2396 000019DA C22000                          ret AND_KILL_FRAME(2)
  2397                                  
  2398                                  L_code_ptr_set_car:
  2399 000019DD C8000000                        enter 0, 0
  2400 000019E1 48837D1802                      cmp COUNT, 2
  2401 000019E6 0F856F040000                    jne L_error_arg_count_2
  2402 000019EC 488B4520                        mov rax, PARAM(0)
  2403                                          assert_pair(rax)
    53 000019F0 803821              <1>  cmp byte [%1], %2
    54 000019F3 0F8501050000        <1>  jne L_error_incorrect_type
  2404 000019F9 488B5D28                        mov rbx, PARAM(1)
  2405 000019FD 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2406 00001A01 48B8-                           mov rax, sob_void
  2406 00001A03 [0000000000000000] 
  2407 00001A0B C9                              leave
  2408 00001A0C C22000                          ret AND_KILL_FRAME(2)
  2409                                  
  2410                                  L_code_ptr_set_cdr:
  2411 00001A0F C8000000                        enter 0, 0
  2412 00001A13 48837D1802                      cmp COUNT, 2
  2413 00001A18 0F853D040000                    jne L_error_arg_count_2
  2414 00001A1E 488B4520                        mov rax, PARAM(0)
  2415                                          assert_pair(rax)
    53 00001A22 803821              <1>  cmp byte [%1], %2
    54 00001A25 0F85CF040000        <1>  jne L_error_incorrect_type
  2416 00001A2B 488B5D28                        mov rbx, PARAM(1)
  2417 00001A2F 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2418 00001A33 48B8-                           mov rax, sob_void
  2418 00001A35 [0000000000000000] 
  2419 00001A3D C9                              leave
  2420 00001A3E C22000                          ret AND_KILL_FRAME(2)
  2421                                  
  2422                                  L_code_ptr_string_ref:
  2423 00001A41 C8000000                        enter 0, 0
  2424 00001A45 48837D1802                      cmp COUNT, 2
  2425 00001A4A 0F850B040000                    jne L_error_arg_count_2
  2426 00001A50 488B7D20                        mov rdi, PARAM(0)
  2427                                          assert_string(rdi)
    53 00001A54 803F03              <1>  cmp byte [%1], %2
    54 00001A57 0F859D040000        <1>  jne L_error_incorrect_type
  2428 00001A5D 488B7528                        mov rsi, PARAM(1)
  2429                                          assert_integer(rsi)
    53 00001A61 803E11              <1>  cmp byte [%1], %2
    54 00001A64 0F8590040000        <1>  jne L_error_incorrect_type
  2430 00001A6A 488B5701                        mov rdx, qword [rdi + 1]
  2431 00001A6E 488B4E01                        mov rcx, qword [rsi + 1]
  2432 00001A72 4839D1                          cmp rcx, rdx
  2433 00001A75 0F8D14030000                    jge L_error_integer_range
  2434 00001A7B 4883F900                        cmp rcx, 0
  2435 00001A7F 0F8C0A030000                    jl L_error_integer_range
  2436 00001A85 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2437 00001A89 BF02000000                      mov rdi, 2
  2438 00001A8E E805E7FFFF                      call malloc
  2439 00001A93 C60002                          mov byte [rax], T_char
  2440 00001A96 885801                          mov byte [rax + 1], bl
  2441 00001A99 C9                              leave
  2442 00001A9A C22000                          ret AND_KILL_FRAME(2)
  2443                                  
  2444                                  L_code_ptr_vector_ref:
  2445 00001A9D C8000000                        enter 0, 0
  2446 00001AA1 48837D1802                      cmp COUNT, 2
  2447 00001AA6 0F85AF030000                    jne L_error_arg_count_2
  2448 00001AAC 488B7D20                        mov rdi, PARAM(0)
  2449                                          assert_vector(rdi)
    53 00001AB0 803F22              <1>  cmp byte [%1], %2
    54 00001AB3 0F8541040000        <1>  jne L_error_incorrect_type
  2450 00001AB9 488B7528                        mov rsi, PARAM(1)
  2451                                          assert_integer(rsi)
    53 00001ABD 803E11              <1>  cmp byte [%1], %2
    54 00001AC0 0F8534040000        <1>  jne L_error_incorrect_type
  2452 00001AC6 488B5701                        mov rdx, qword [rdi + 1]
  2453 00001ACA 488B4E01                        mov rcx, qword [rsi + 1]
  2454 00001ACE 4839D1                          cmp rcx, rdx
  2455 00001AD1 0F8DB8020000                    jge L_error_integer_range
  2456 00001AD7 4883F900                        cmp rcx, 0
  2457 00001ADB 0F8CAE020000                    jl L_error_integer_range
  2458 00001AE1 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2459 00001AE6 C9                              leave
  2460 00001AE7 C22000                          ret AND_KILL_FRAME(2)
  2461                                  
  2462                                  L_code_ptr_vector_set:
  2463 00001AEA C8000000                        enter 0, 0
  2464 00001AEE 48837D1803                      cmp COUNT, 3
  2465 00001AF3 0F85CC030000                    jne L_error_arg_count_3
  2466 00001AF9 488B7D20                        mov rdi, PARAM(0)
  2467                                          assert_vector(rdi)
    53 00001AFD 803F22              <1>  cmp byte [%1], %2
    54 00001B00 0F85F4030000        <1>  jne L_error_incorrect_type
  2468 00001B06 488B7528                        mov rsi, PARAM(1)
  2469                                          assert_integer(rsi)
    53 00001B0A 803E11              <1>  cmp byte [%1], %2
    54 00001B0D 0F85E7030000        <1>  jne L_error_incorrect_type
  2470 00001B13 488B5701                        mov rdx, qword [rdi + 1]
  2471 00001B17 488B4E01                        mov rcx, qword [rsi + 1]
  2472 00001B1B 4839D1                          cmp rcx, rdx
  2473 00001B1E 0F8D6B020000                    jge L_error_integer_range
  2474 00001B24 4883F900                        cmp rcx, 0
  2475 00001B28 0F8C61020000                    jl L_error_integer_range
  2476 00001B2E 488B4530                        mov rax, PARAM(2)
  2477 00001B32 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2478 00001B37 48B8-                           mov rax, sob_void
  2478 00001B39 [0000000000000000] 
  2479 00001B41 C9                              leave
  2480 00001B42 C22800                          ret AND_KILL_FRAME(3)
  2481                                  
  2482                                  L_code_ptr_string_set:
  2483 00001B45 C8000000                        enter 0, 0
  2484 00001B49 48837D1803                      cmp COUNT, 3
  2485 00001B4E 0F8571030000                    jne L_error_arg_count_3
  2486 00001B54 488B7D20                        mov rdi, PARAM(0)
  2487                                          assert_string(rdi)
    53 00001B58 803F03              <1>  cmp byte [%1], %2
    54 00001B5B 0F8599030000        <1>  jne L_error_incorrect_type
  2488 00001B61 488B7528                        mov rsi, PARAM(1)
  2489                                          assert_integer(rsi)
    53 00001B65 803E11              <1>  cmp byte [%1], %2
    54 00001B68 0F858C030000        <1>  jne L_error_incorrect_type
  2490 00001B6E 488B5701                        mov rdx, qword [rdi + 1]
  2491 00001B72 488B4E01                        mov rcx, qword [rsi + 1]
  2492 00001B76 4839D1                          cmp rcx, rdx
  2493 00001B79 0F8D10020000                    jge L_error_integer_range
  2494 00001B7F 4883F900                        cmp rcx, 0
  2495 00001B83 0F8C06020000                    jl L_error_integer_range
  2496 00001B89 488B4530                        mov rax, PARAM(2)
  2497                                          assert_char(rax)
    53 00001B8D 803802              <1>  cmp byte [%1], %2
    54 00001B90 0F8564030000        <1>  jne L_error_incorrect_type
  2498 00001B96 8A4001                          mov al, byte [rax + 1]
  2499 00001B99 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2500 00001B9D 48B8-                           mov rax, sob_void
  2500 00001B9F [0000000000000000] 
  2501 00001BA7 C9                              leave
  2502 00001BA8 C22800                          ret AND_KILL_FRAME(3)
  2503                                  
  2504                                  L_code_ptr_make_vector:
  2505 00001BAB C8000000                        enter 0, 0
  2506 00001BAF 48837D1802                      cmp COUNT, 2
  2507 00001BB4 0F85A1020000                    jne L_error_arg_count_2
  2508 00001BBA 488B4D20                        mov rcx, PARAM(0)
  2509                                          assert_integer(rcx)
    53 00001BBE 803911              <1>  cmp byte [%1], %2
    54 00001BC1 0F8533030000        <1>  jne L_error_incorrect_type
  2510 00001BC7 488B4901                        mov rcx, qword [rcx + 1]
  2511 00001BCB 4883F900                        cmp rcx, 0
  2512 00001BCF 0F8CBA010000                    jl L_error_integer_range
  2513 00001BD5 488B5528                        mov rdx, PARAM(1)
  2514 00001BD9 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2515 00001BE1 E8B2E5FFFF                      call malloc
  2516 00001BE6 C60022                          mov byte [rax], T_vector
  2517 00001BE9 48894801                        mov qword [rax + 1], rcx
  2518 00001BED 41B800000000                    mov r8, 0
  2519                                  .L0:
  2520 00001BF3 4939C8                          cmp r8, rcx
  2521 00001BF6 740A                            je .L1
  2522 00001BF8 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2523 00001BFD 49FFC0                          inc r8
  2524 00001C00 EBF1                            jmp .L0
  2525                                  .L1:
  2526 00001C02 C9                              leave
  2527 00001C03 C22000                          ret AND_KILL_FRAME(2)
  2528                                          
  2529                                  L_code_ptr_make_string:
  2530 00001C06 C8000000                        enter 0, 0
  2531 00001C0A 48837D1802                      cmp COUNT, 2
  2532 00001C0F 0F8546020000                    jne L_error_arg_count_2
  2533 00001C15 488B4D20                        mov rcx, PARAM(0)
  2534                                          assert_integer(rcx)
    53 00001C19 803911              <1>  cmp byte [%1], %2
    54 00001C1C 0F85D8020000        <1>  jne L_error_incorrect_type
  2535 00001C22 488B4901                        mov rcx, qword [rcx + 1]
  2536 00001C26 4883F900                        cmp rcx, 0
  2537 00001C2A 0F8C5F010000                    jl L_error_integer_range
  2538 00001C30 488B5528                        mov rdx, PARAM(1)
  2539                                          assert_char(rdx)
    53 00001C34 803A02              <1>  cmp byte [%1], %2
    54 00001C37 0F85BD020000        <1>  jne L_error_incorrect_type
  2540 00001C3D 8A5201                          mov dl, byte [rdx + 1]
  2541 00001C40 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2542 00001C44 E84FE5FFFF                      call malloc
  2543 00001C49 C60003                          mov byte [rax], T_string
  2544 00001C4C 48894801                        mov qword [rax + 1], rcx
  2545 00001C50 41B800000000                    mov r8, 0
  2546                                  .L0:
  2547 00001C56 4939C8                          cmp r8, rcx
  2548 00001C59 740A                            je .L1
  2549 00001C5B 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2550 00001C60 49FFC0                          inc r8
  2551 00001C63 EBF1                            jmp .L0
  2552                                  .L1:
  2553 00001C65 C9                              leave
  2554 00001C66 C22000                          ret AND_KILL_FRAME(2)
  2555                                  
  2556                                  L_code_ptr_numerator:
  2557 00001C69 C8000000                        enter 0, 0
  2558 00001C6D 48837D1801                      cmp COUNT, 1
  2559 00001C72 0F85AE010000                    jne L_error_arg_count_1
  2560 00001C78 488B4520                        mov rax, PARAM(0)
  2561                                          assert_fraction(rax)
    53 00001C7C 803812              <1>  cmp byte [%1], %2
    54 00001C7F 0F8575020000        <1>  jne L_error_incorrect_type
  2562 00001C85 488B7801                        mov rdi, qword [rax + 1]
  2563 00001C89 E8E7000000                      call make_integer
  2564 00001C8E C9                              leave
  2565 00001C8F C21800                          ret AND_KILL_FRAME(1)
  2566                                          
  2567                                  L_code_ptr_denominator:
  2568 00001C92 C8000000                        enter 0, 0
  2569 00001C96 48837D1801                      cmp COUNT, 1
  2570 00001C9B 0F8585010000                    jne L_error_arg_count_1
  2571 00001CA1 488B4520                        mov rax, PARAM(0)
  2572                                          assert_fraction(rax)
    53 00001CA5 803812              <1>  cmp byte [%1], %2
    54 00001CA8 0F854C020000        <1>  jne L_error_incorrect_type
  2573 00001CAE 488B7809                        mov rdi, qword [rax + 1 + 8]
  2574 00001CB2 E8BE000000                      call make_integer
  2575 00001CB7 C9                              leave
  2576 00001CB8 C21800                          ret AND_KILL_FRAME(1)
  2577                                  
  2578                                  L_code_ptr_is_eq:
  2579 00001CBB C8000000                	enter 0, 0
  2580 00001CBF 48837D1802              	cmp COUNT, 2
  2581 00001CC4 0F8591010000            	jne L_error_arg_count_2
  2582 00001CCA 488B7D20                	mov rdi, PARAM(0)
  2583 00001CCE 488B7528                	mov rsi, PARAM(1)
  2584 00001CD2 4839F7                  	cmp rdi, rsi
  2585 00001CD5 746C                    	je .L_eq_true
  2586 00001CD7 8A17                    	mov dl, byte [rdi]
  2587 00001CD9 3A16                    	cmp dl, byte [rsi]
  2588 00001CDB 7572                    	jne .L_eq_false
  2589 00001CDD 80FA02                  	cmp dl, T_char
  2590 00001CE0 7459                    	je .L_char
  2591 00001CE2 80FA41                  	cmp dl, T_interned_symbol
  2592 00001CE5 7440                    	je .L_interned_symbol
  2593 00001CE7 80FA42                          cmp dl, T_uninterned_symbol
  2594 00001CEA 7443                            je .L_uninterned_symbol
  2595 00001CEC 80FA13                  	cmp dl, T_real
  2596 00001CEF 742E                    	je .L_real
  2597 00001CF1 80FA12                  	cmp dl, T_fraction
  2598 00001CF4 7413                    	je .L_fraction
  2599 00001CF6 80FA11                          cmp dl, T_integer
  2600 00001CF9 7402                            je .L_integer
  2601 00001CFB EB52                    	jmp .L_eq_false
  2602                                  .L_integer:
  2603 00001CFD 488B4601                        mov rax, qword [rsi + 1]
  2604 00001D01 483B4701                        cmp rax, qword [rdi + 1]
  2605 00001D05 7548                            jne .L_eq_false
  2606 00001D07 EB3A                            jmp .L_eq_true
  2607                                  .L_fraction:
  2608 00001D09 488B4601                	mov rax, qword [rsi + 1]
  2609 00001D0D 483B4701                	cmp rax, qword [rdi + 1]
  2610 00001D11 753C                    	jne .L_eq_false
  2611 00001D13 488B4609                	mov rax, qword [rsi + 1 + 8]
  2612 00001D17 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2613 00001D1B 7532                    	jne .L_eq_false
  2614 00001D1D EB24                    	jmp .L_eq_true
  2615                                  .L_real:
  2616 00001D1F 488B4601                	mov rax, qword [rsi + 1]
  2617 00001D23 483B4701                	cmp rax, qword [rdi + 1]
  2618                                  .L_interned_symbol:
  2619                                  	; never reached, because interned_symbols are static!
  2620                                  	; but I'm keeping it in case, I'll ever change
  2621                                  	; the implementation
  2622 00001D27 488B4601                	mov rax, qword [rsi + 1]
  2623 00001D2B 483B4701                	cmp rax, qword [rdi + 1]
  2624                                  .L_uninterned_symbol:
  2625 00001D2F 4C8B4701                        mov r8, qword [rdi + 1]
  2626 00001D33 4C3B4601                        cmp r8, qword [rsi + 1]
  2627 00001D37 7516                            jne .L_eq_false
  2628 00001D39 EB08                            jmp .L_eq_true
  2629                                  .L_char:
  2630 00001D3B 8A5E01                  	mov bl, byte [rsi + 1]
  2631 00001D3E 3A5F01                  	cmp bl, byte [rdi + 1]
  2632 00001D41 750C                    	jne .L_eq_false
  2633                                  .L_eq_true:
  2634 00001D43 48B8-                   	mov rax, sob_boolean_true
  2634 00001D45 [0300000000000000] 
  2635 00001D4D EB0A                    	jmp .L_eq_exit
  2636                                  .L_eq_false:
  2637 00001D4F 48B8-                   	mov rax, sob_boolean_false
  2637 00001D51 [0200000000000000] 
  2638                                  .L_eq_exit:
  2639 00001D59 C9                      	leave
  2640 00001D5A C22000                  	ret AND_KILL_FRAME(2)
  2641                                  
  2642                                  make_real:
  2643 00001D5D C8000000                        enter 0, 0
  2644 00001D61 BF09000000                      mov rdi, (1 + 8)
  2645 00001D66 E82DE4FFFF                      call malloc
  2646 00001D6B C60013                          mov byte [rax], T_real
  2647 00001D6E F20F114001                      movsd qword [rax + 1], xmm0
  2648 00001D73 C9                              leave 
  2649 00001D74 C3                              ret
  2650                                          
  2651                                  make_integer:
  2652 00001D75 C8000000                        enter 0, 0
  2653 00001D79 4889FE                          mov rsi, rdi
  2654 00001D7C BF09000000                      mov rdi, (1 + 8)
  2655 00001D81 E812E4FFFF                      call malloc
  2656 00001D86 C60011                          mov byte [rax], T_integer
  2657 00001D89 48897001                        mov qword [rax + 1], rsi
  2658 00001D8D C9                              leave
  2659 00001D8E C3                              ret
  2660                                          
  2661                                  L_error_integer_range:
  2662 00001D8F 488B3C25[00000000]              mov rdi, qword [stderr]
  2663 00001D97 48BE-                           mov rsi, fmt_integer_range
  2663 00001D99 [EC09000000000000] 
  2664 00001DA1 B800000000                      mov rax, 0
  2665                                          ENTER
    44 00001DA6 C8000000            <1>  enter 0, 0
    45 00001DAA 4883E4F0            <1>  and rsp, ~15
  2666 00001DAE E8(00000000)                    call fprintf
  2667                                          LEAVE
    49 00001DB3 C9                  <1>  leave
  2668 00001DB4 48C7C0FBFFFFFF                  mov rax, -5
  2669 00001DBB E8(00000000)                    call exit
  2670                                  
  2671                                  L_error_arg_negative:
  2672 00001DC0 488B3C25[00000000]              mov rdi, qword [stderr]
  2673 00001DC8 48BE-                           mov rsi, fmt_arg_negative
  2673 00001DCA [C408000000000000] 
  2674 00001DD2 B800000000                      mov rax, 0
  2675                                          ENTER
    44 00001DD7 C8000000            <1>  enter 0, 0
    45 00001DDB 4883E4F0            <1>  and rsp, ~15
  2676 00001DDF E8(00000000)                    call fprintf
  2677                                          LEAVE
    49 00001DE4 C9                  <1>  leave
  2678 00001DE5 48C7C0FDFFFFFF                  mov rax, -3
  2679 00001DEC E8(00000000)                    call exit
  2680                                  
  2681                                  L_error_arg_count_0:
  2682 00001DF1 488B3C25[00000000]              mov rdi, qword [stderr]
  2683 00001DF9 48BE-                           mov rsi, fmt_arg_count_0
  2683 00001DFB [EA08000000000000] 
  2684 00001E03 488B5518                        mov rdx, COUNT
  2685 00001E07 B800000000                      mov rax, 0
  2686                                          ENTER
    44 00001E0C C8000000            <1>  enter 0, 0
    45 00001E10 4883E4F0            <1>  and rsp, ~15
  2687 00001E14 E8(00000000)                    call fprintf
  2688                                          LEAVE
    49 00001E19 C9                  <1>  leave
  2689 00001E1A 48C7C0FDFFFFFF                  mov rax, -3
  2690 00001E21 E8(00000000)                    call exit
  2691                                  
  2692                                  L_error_arg_count_1:
  2693 00001E26 488B3C25[00000000]              mov rdi, qword [stderr]
  2694 00001E2E 48BE-                           mov rsi, fmt_arg_count_1
  2694 00001E30 [1209000000000000] 
  2695 00001E38 488B5518                        mov rdx, COUNT
  2696 00001E3C B800000000                      mov rax, 0
  2697                                          ENTER
    44 00001E41 C8000000            <1>  enter 0, 0
    45 00001E45 4883E4F0            <1>  and rsp, ~15
  2698 00001E49 E8(00000000)                    call fprintf
  2699                                          LEAVE
    49 00001E4E C9                  <1>  leave
  2700 00001E4F 48C7C0FDFFFFFF                  mov rax, -3
  2701 00001E56 E8(00000000)                    call exit
  2702                                  
  2703                                  L_error_arg_count_2:
  2704 00001E5B 488B3C25[00000000]              mov rdi, qword [stderr]
  2705 00001E63 48BE-                           mov rsi, fmt_arg_count_2
  2705 00001E65 [7809000000000000] 
  2706 00001E6D 488B5518                        mov rdx, COUNT
  2707 00001E71 B800000000                      mov rax, 0
  2708                                          ENTER
    44 00001E76 C8000000            <1>  enter 0, 0
    45 00001E7A 4883E4F0            <1>  and rsp, ~15
  2709 00001E7E E8(00000000)                    call fprintf
  2710                                          LEAVE
    49 00001E83 C9                  <1>  leave
  2711 00001E84 48C7C0FDFFFFFF                  mov rax, -3
  2712 00001E8B E8(00000000)                    call exit
  2713                                  
  2714                                  L_error_arg_count_12:
  2715 00001E90 488B3C25[00000000]              mov rdi, qword [stderr]
  2716 00001E98 48BE-                           mov rsi, fmt_arg_count_12
  2716 00001E9A [3809000000000000] 
  2717 00001EA2 488B5518                        mov rdx, COUNT
  2718 00001EA6 B800000000                      mov rax, 0
  2719                                          ENTER
    44 00001EAB C8000000            <1>  enter 0, 0
    45 00001EAF 4883E4F0            <1>  and rsp, ~15
  2720 00001EB3 E8(00000000)                    call fprintf
  2721                                          LEAVE
    49 00001EB8 C9                  <1>  leave
  2722 00001EB9 48C7C0FDFFFFFF                  mov rax, -3
  2723 00001EC0 E8(00000000)                    call exit
  2724                                  
  2725                                  L_error_arg_count_3:
  2726 00001EC5 488B3C25[00000000]              mov rdi, qword [stderr]
  2727 00001ECD 48BE-                           mov rsi, fmt_arg_count_3
  2727 00001ECF [9F09000000000000] 
  2728 00001ED7 488B5518                        mov rdx, COUNT
  2729 00001EDB B800000000                      mov rax, 0
  2730                                          ENTER
    44 00001EE0 C8000000            <1>  enter 0, 0
    45 00001EE4 4883E4F0            <1>  and rsp, ~15
  2731 00001EE8 E8(00000000)                    call fprintf
  2732                                          LEAVE
    49 00001EED C9                  <1>  leave
  2733 00001EEE 48C7C0FDFFFFFF                  mov rax, -3
  2734 00001EF5 E8(00000000)                    call exit
  2735                                          
  2736                                  L_error_incorrect_type:
  2737 00001EFA 488B3C25[00000000]              mov rdi, qword [stderr]
  2738 00001F02 48BE-                           mov rsi, fmt_type
  2738 00001F04 [C809000000000000] 
  2739 00001F0C B800000000                      mov rax, 0
  2740                                          ENTER
    44 00001F11 C8000000            <1>  enter 0, 0
    45 00001F15 4883E4F0            <1>  and rsp, ~15
  2741 00001F19 E8(00000000)                    call fprintf
  2742                                          LEAVE
    49 00001F1E C9                  <1>  leave
  2743 00001F1F 48C7C0FCFFFFFF                  mov rax, -4
  2744 00001F26 E8(00000000)                    call exit
  2745                                  
  2746                                  L_error_division_by_zero:
  2747 00001F2B 488B3C25[00000000]              mov rdi, qword [stderr]
  2748 00001F33 48BE-                           mov rsi, fmt_division_by_zero
  2748 00001F35 [090A000000000000] 
  2749 00001F3D B800000000                      mov rax, 0
  2750                                          ENTER
    44 00001F42 C8000000            <1>  enter 0, 0
    45 00001F46 4883E4F0            <1>  and rsp, ~15
  2751 00001F4A E8(00000000)                    call fprintf
  2752                                          LEAVE
    49 00001F4F C9                  <1>  leave
  2753 00001F50 48C7C0F8FFFFFF                  mov rax, -8
  2754 00001F57 E8(00000000)                    call exit
  2755                                  
  2756                                  section .data
  2757                                  gensym_count:
  2758 000008B9 0000000000000000                dq 0
  2759                                  fmt_char:
  2760 000008C1 256300                          db `%c\0`
  2761                                  fmt_arg_negative:
  2762 000008C4 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2762 000008CD 7267756D656E742063-
  2762 000008D6 616E6E6F7420626520-
  2762 000008DF 6E656761746976652E-
  2762 000008E8 0A00               
  2763                                  fmt_arg_count_0:
  2764 000008EA 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2764 000008F3 74696E67207A65726F-
  2764 000008FC 20617267756D656E74-
  2764 00000905 732E20466F756E6420-
  2764 0000090E 25640A00           
  2765                                  fmt_arg_count_1:
  2766 00000912 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2766 0000091B 74696E67206F6E6520-
  2766 00000924 617267756D656E742E-
  2766 0000092D 20466F756E64202564-
  2766 00000936 0A00               
  2767                                  fmt_arg_count_12:
  2768 00000938 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2768 00000941 74696E67206F6E6520-
  2768 0000094A 726571756972656420-
  2768 00000953 616E64206F6E65206F-
  2768 0000095C 7074696F6E616C2061-
  2768 00000965 7267756D656E742E20-
  2768 0000096E 466F756E642025640A-
  2768 00000977 00                 
  2769                                  fmt_arg_count_2:
  2770 00000978 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2770 00000981 74696E672074776F20-
  2770 0000098A 617267756D656E7473-
  2770 00000993 2E20466F756E642025-
  2770 0000099C 640A00             
  2771                                  fmt_arg_count_3:
  2772 0000099F 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2772 000009A8 74696E672074687265-
  2772 000009B1 6520617267756D656E-
  2772 000009BA 74732E20466F756E64-
  2772 000009C3 2025640A00         
  2773                                  fmt_type:
  2774 000009C8 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2774 000009D1 696F6E207061737365-
  2774 000009DA 6420696E636F727265-
  2774 000009E3 637420747970650A00 
  2775                                  fmt_integer_range:
  2776 000009EC 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2776 000009F5 7265637420696E7465-
  2776 000009FE 6765722072616E6765-
  2776 00000A07 0A00               
  2777                                  fmt_division_by_zero:
  2778 00000A09 212121204469766973-             db `!!! Division by zero\n\0`
  2778 00000A12 696F6E206279207A65-
  2778 00000A1B 726F0A00           
  2779                                  fmt_scheme_error_part_1:
  2780 00000A1F 0A2121212054686520-             db `\n!!! The procedure \0`
  2780 00000A28 70726F636564757265-
  2780 00000A31 2000               
  2781                                  fmt_scheme_error_part_2:
  2782 00000A33 2061736B656420746F-             db ` asked to terminate the program\n`
  2782 00000A3C 207465726D696E6174-
  2782 00000A45 65207468652070726F-
  2782 00000A4E 6772616D0A         
  2783 00000A53 202020207769746820-             db `    with the following message:\n\n\0`
  2783 00000A5C 74686520666F6C6C6F-
  2783 00000A65 77696E67206D657373-
  2783 00000A6E 6167653A0A0A00     
  2784                                  fmt_scheme_error_part_3:
  2785 00000A75 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2785 00000A7E 210A0A00           
