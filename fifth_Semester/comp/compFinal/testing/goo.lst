     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "caar"
   469 000005DE 0400000000000000        	dq 4
   470 000005E6 63616172                	db 0x63, 0x61, 0x61, 0x72
   471                                  	; L_constants + 1514:
   472 000005EA 03                      	db T_string	; "cadr"
   473 000005EB 0400000000000000        	dq 4
   474 000005F3 63616472                	db 0x63, 0x61, 0x64, 0x72
   475                                  	; L_constants + 1527:
   476 000005F7 03                      	db T_string	; "cdar"
   477 000005F8 0400000000000000        	dq 4
   478 00000600 63646172                	db 0x63, 0x64, 0x61, 0x72
   479                                  	; L_constants + 1540:
   480 00000604 03                      	db T_string	; "cddr"
   481 00000605 0400000000000000        	dq 4
   482 0000060D 63646472                	db 0x63, 0x64, 0x64, 0x72
   483                                  	; L_constants + 1553:
   484 00000611 03                      	db T_string	; "caaar"
   485 00000612 0500000000000000        	dq 5
   486 0000061A 6361616172              	db 0x63, 0x61, 0x61, 0x61, 0x72
   487                                  	; L_constants + 1567:
   488 0000061F 03                      	db T_string	; "caadr"
   489 00000620 0500000000000000        	dq 5
   490 00000628 6361616472              	db 0x63, 0x61, 0x61, 0x64, 0x72
   491                                  	; L_constants + 1581:
   492 0000062D 03                      	db T_string	; "cadar"
   493 0000062E 0500000000000000        	dq 5
   494 00000636 6361646172              	db 0x63, 0x61, 0x64, 0x61, 0x72
   495                                  	; L_constants + 1595:
   496 0000063B 03                      	db T_string	; "caddr"
   497 0000063C 0500000000000000        	dq 5
   498 00000644 6361646472              	db 0x63, 0x61, 0x64, 0x64, 0x72
   499                                  	; L_constants + 1609:
   500 00000649 03                      	db T_string	; "cdaar"
   501 0000064A 0500000000000000        	dq 5
   502 00000652 6364616172              	db 0x63, 0x64, 0x61, 0x61, 0x72
   503                                  	; L_constants + 1623:
   504 00000657 03                      	db T_string	; "cdadr"
   505 00000658 0500000000000000        	dq 5
   506 00000660 6364616472              	db 0x63, 0x64, 0x61, 0x64, 0x72
   507                                  	; L_constants + 1637:
   508 00000665 03                      	db T_string	; "cddar"
   509 00000666 0500000000000000        	dq 5
   510 0000066E 6364646172              	db 0x63, 0x64, 0x64, 0x61, 0x72
   511                                  	; L_constants + 1651:
   512 00000673 03                      	db T_string	; "cdddr"
   513 00000674 0500000000000000        	dq 5
   514 0000067C 6364646472              	db 0x63, 0x64, 0x64, 0x64, 0x72
   515                                  	; L_constants + 1665:
   516 00000681 03                      	db T_string	; "caaaar"
   517 00000682 0600000000000000        	dq 6
   518 0000068A 636161616172            	db 0x63, 0x61, 0x61, 0x61, 0x61, 0x72
   519                                  	; L_constants + 1680:
   520 00000690 03                      	db T_string	; "caaadr"
   521 00000691 0600000000000000        	dq 6
   522 00000699 636161616472            	db 0x63, 0x61, 0x61, 0x61, 0x64, 0x72
   523                                  	; L_constants + 1695:
   524 0000069F 03                      	db T_string	; "caadar"
   525 000006A0 0600000000000000        	dq 6
   526 000006A8 636161646172            	db 0x63, 0x61, 0x61, 0x64, 0x61, 0x72
   527                                  	; L_constants + 1710:
   528 000006AE 03                      	db T_string	; "caaddr"
   529 000006AF 0600000000000000        	dq 6
   530 000006B7 636161646472            	db 0x63, 0x61, 0x61, 0x64, 0x64, 0x72
   531                                  	; L_constants + 1725:
   532 000006BD 03                      	db T_string	; "cadaar"
   533 000006BE 0600000000000000        	dq 6
   534 000006C6 636164616172            	db 0x63, 0x61, 0x64, 0x61, 0x61, 0x72
   535                                  	; L_constants + 1740:
   536 000006CC 03                      	db T_string	; "cadadr"
   537 000006CD 0600000000000000        	dq 6
   538 000006D5 636164616472            	db 0x63, 0x61, 0x64, 0x61, 0x64, 0x72
   539                                  	; L_constants + 1755:
   540 000006DB 03                      	db T_string	; "caddar"
   541 000006DC 0600000000000000        	dq 6
   542 000006E4 636164646172            	db 0x63, 0x61, 0x64, 0x64, 0x61, 0x72
   543                                  	; L_constants + 1770:
   544 000006EA 03                      	db T_string	; "cadddr"
   545 000006EB 0600000000000000        	dq 6
   546 000006F3 636164646472            	db 0x63, 0x61, 0x64, 0x64, 0x64, 0x72
   547                                  	; L_constants + 1785:
   548 000006F9 03                      	db T_string	; "cdaaar"
   549 000006FA 0600000000000000        	dq 6
   550 00000702 636461616172            	db 0x63, 0x64, 0x61, 0x61, 0x61, 0x72
   551                                  	; L_constants + 1800:
   552 00000708 03                      	db T_string	; "cdaadr"
   553 00000709 0600000000000000        	dq 6
   554 00000711 636461616472            	db 0x63, 0x64, 0x61, 0x61, 0x64, 0x72
   555                                  	; L_constants + 1815:
   556 00000717 03                      	db T_string	; "cdadar"
   557 00000718 0600000000000000        	dq 6
   558 00000720 636461646172            	db 0x63, 0x64, 0x61, 0x64, 0x61, 0x72
   559                                  	; L_constants + 1830:
   560 00000726 03                      	db T_string	; "cdaddr"
   561 00000727 0600000000000000        	dq 6
   562 0000072F 636461646472            	db 0x63, 0x64, 0x61, 0x64, 0x64, 0x72
   563                                  	; L_constants + 1845:
   564 00000735 03                      	db T_string	; "cddaar"
   565 00000736 0600000000000000        	dq 6
   566 0000073E 636464616172            	db 0x63, 0x64, 0x64, 0x61, 0x61, 0x72
   567                                  	; L_constants + 1860:
   568 00000744 03                      	db T_string	; "cddadr"
   569 00000745 0600000000000000        	dq 6
   570 0000074D 636464616472            	db 0x63, 0x64, 0x64, 0x61, 0x64, 0x72
   571                                  	; L_constants + 1875:
   572 00000753 03                      	db T_string	; "cdddar"
   573 00000754 0600000000000000        	dq 6
   574 0000075C 636464646172            	db 0x63, 0x64, 0x64, 0x64, 0x61, 0x72
   575                                  	; L_constants + 1890:
   576 00000762 03                      	db T_string	; "cddddr"
   577 00000763 0600000000000000        	dq 6
   578 0000076B 636464646472            	db 0x63, 0x64, 0x64, 0x64, 0x64, 0x72
   579                                  	; L_constants + 1905:
   580 00000771 03                      	db T_string	; "list?"
   581 00000772 0500000000000000        	dq 5
   582 0000077A 6C6973743F              	db 0x6C, 0x69, 0x73, 0x74, 0x3F
   583                                  	; L_constants + 1919:
   584 0000077F 03                      	db T_string	; "list"
   585 00000780 0400000000000000        	dq 4
   586 00000788 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   587                                  	; L_constants + 1932:
   588 0000078C 03                      	db T_string	; "not"
   589 0000078D 0300000000000000        	dq 3
   590 00000795 6E6F74                  	db 0x6E, 0x6F, 0x74
   591                                  	; L_constants + 1944:
   592 00000798 03                      	db T_string	; "rational?"
   593 00000799 0900000000000000        	dq 9
   594 000007A1 726174696F6E616C        	db 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C
   595 000007A9 3F                      	db 0x3F
   596                                  	; L_constants + 1962:
   597 000007AA 03                      	db T_string	; "list*"
   598 000007AB 0500000000000000        	dq 5
   599 000007B3 6C6973742A              	db 0x6C, 0x69, 0x73, 0x74, 0x2A
   600                                  	; L_constants + 1976:
   601 000007B8 03                      	db T_string	; "whatever"
   602 000007B9 0800000000000000        	dq 8
   603 000007C1 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   604                                  	; L_constants + 1993:
   605 000007C9 41                      	db T_interned_symbol	; whatever
   606 000007CA [B807000000000000]      	dq L_constants + 1976
   607                                  	; L_constants + 2002:
   608 000007D2 03                      	db T_string	; "apply"
   609 000007D3 0500000000000000        	dq 5
   610 000007DB 6170706C79              	db 0x61, 0x70, 0x70, 0x6C, 0x79
   611                                  	; L_constants + 2016:
   612 000007E0 03                      	db T_string	; "ormap"
   613 000007E1 0500000000000000        	dq 5
   614 000007E9 6F726D6170              	db 0x6F, 0x72, 0x6D, 0x61, 0x70
   615                                  	; L_constants + 2030:
   616 000007EE 03                      	db T_string	; "map"
   617 000007EF 0300000000000000        	dq 3
   618 000007F7 6D6170                  	db 0x6D, 0x61, 0x70
   619                                  	; L_constants + 2042:
   620 000007FA 03                      	db T_string	; "andmap"
   621 000007FB 0600000000000000        	dq 6
   622 00000803 616E646D6170            	db 0x61, 0x6E, 0x64, 0x6D, 0x61, 0x70
   623                                  	; L_constants + 2057:
   624 00000809 03                      	db T_string	; "reverse"
   625 0000080A 0700000000000000        	dq 7
   626 00000812 72657665727365          	db 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   627                                  	; L_constants + 2073:
   628 00000819 03                      	db T_string	; "fold-left"
   629 0000081A 0900000000000000        	dq 9
   630 00000822 666F6C642D6C6566        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x6C, 0x65, 0x66
   631 0000082A 74                      	db 0x74
   632                                  	; L_constants + 2091:
   633 0000082B 03                      	db T_string	; "append"
   634 0000082C 0600000000000000        	dq 6
   635 00000834 617070656E64            	db 0x61, 0x70, 0x70, 0x65, 0x6E, 0x64
   636                                  	; L_constants + 2106:
   637 0000083A 03                      	db T_string	; "fold-right"
   638 0000083B 0A00000000000000        	dq 10
   639 00000843 666F6C642D726967        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x72, 0x69, 0x67
   640 0000084B 6874                    	db 0x68, 0x74
   641                                  free_var_0:	; location of __bin-apply
   642 0000084D [5508000000000000]      	dq .undefined_object
   643                                  .undefined_object:
   644 00000855 05                      	db T_undefined
   645 00000856 [0102000000000000]      	dq L_constants + 513
   646                                  
   647                                  free_var_1:	; location of andmap
   648 0000085E [6608000000000000]      	dq .undefined_object
   649                                  .undefined_object:
   650 00000866 05                      	db T_undefined
   651 00000867 [FA07000000000000]      	dq L_constants + 2042
   652                                  
   653                                  free_var_2:	; location of append
   654 0000086F [7708000000000000]      	dq .undefined_object
   655                                  .undefined_object:
   656 00000877 05                      	db T_undefined
   657 00000878 [2B08000000000000]      	dq L_constants + 2091
   658                                  
   659                                  free_var_3:	; location of apply
   660 00000880 [8808000000000000]      	dq .undefined_object
   661                                  .undefined_object:
   662 00000888 05                      	db T_undefined
   663 00000889 [D207000000000000]      	dq L_constants + 2002
   664                                  
   665                                  free_var_4:	; location of caaaar
   666 00000891 [9908000000000000]      	dq .undefined_object
   667                                  .undefined_object:
   668 00000899 05                      	db T_undefined
   669 0000089A [8106000000000000]      	dq L_constants + 1665
   670                                  
   671                                  free_var_5:	; location of caaadr
   672 000008A2 [AA08000000000000]      	dq .undefined_object
   673                                  .undefined_object:
   674 000008AA 05                      	db T_undefined
   675 000008AB [9006000000000000]      	dq L_constants + 1680
   676                                  
   677                                  free_var_6:	; location of caaar
   678 000008B3 [BB08000000000000]      	dq .undefined_object
   679                                  .undefined_object:
   680 000008BB 05                      	db T_undefined
   681 000008BC [1106000000000000]      	dq L_constants + 1553
   682                                  
   683                                  free_var_7:	; location of caadar
   684 000008C4 [CC08000000000000]      	dq .undefined_object
   685                                  .undefined_object:
   686 000008CC 05                      	db T_undefined
   687 000008CD [9F06000000000000]      	dq L_constants + 1695
   688                                  
   689                                  free_var_8:	; location of caaddr
   690 000008D5 [DD08000000000000]      	dq .undefined_object
   691                                  .undefined_object:
   692 000008DD 05                      	db T_undefined
   693 000008DE [AE06000000000000]      	dq L_constants + 1710
   694                                  
   695                                  free_var_9:	; location of caadr
   696 000008E6 [EE08000000000000]      	dq .undefined_object
   697                                  .undefined_object:
   698 000008EE 05                      	db T_undefined
   699 000008EF [1F06000000000000]      	dq L_constants + 1567
   700                                  
   701                                  free_var_10:	; location of caar
   702 000008F7 [FF08000000000000]      	dq .undefined_object
   703                                  .undefined_object:
   704 000008FF 05                      	db T_undefined
   705 00000900 [DD05000000000000]      	dq L_constants + 1501
   706                                  
   707                                  free_var_11:	; location of cadaar
   708 00000908 [1009000000000000]      	dq .undefined_object
   709                                  .undefined_object:
   710 00000910 05                      	db T_undefined
   711 00000911 [BD06000000000000]      	dq L_constants + 1725
   712                                  
   713                                  free_var_12:	; location of cadadr
   714 00000919 [2109000000000000]      	dq .undefined_object
   715                                  .undefined_object:
   716 00000921 05                      	db T_undefined
   717 00000922 [CC06000000000000]      	dq L_constants + 1740
   718                                  
   719                                  free_var_13:	; location of cadar
   720 0000092A [3209000000000000]      	dq .undefined_object
   721                                  .undefined_object:
   722 00000932 05                      	db T_undefined
   723 00000933 [2D06000000000000]      	dq L_constants + 1581
   724                                  
   725                                  free_var_14:	; location of caddar
   726 0000093B [4309000000000000]      	dq .undefined_object
   727                                  .undefined_object:
   728 00000943 05                      	db T_undefined
   729 00000944 [DB06000000000000]      	dq L_constants + 1755
   730                                  
   731                                  free_var_15:	; location of cadddr
   732 0000094C [5409000000000000]      	dq .undefined_object
   733                                  .undefined_object:
   734 00000954 05                      	db T_undefined
   735 00000955 [EA06000000000000]      	dq L_constants + 1770
   736                                  
   737                                  free_var_16:	; location of caddr
   738 0000095D [6509000000000000]      	dq .undefined_object
   739                                  .undefined_object:
   740 00000965 05                      	db T_undefined
   741 00000966 [3B06000000000000]      	dq L_constants + 1595
   742                                  
   743                                  free_var_17:	; location of cadr
   744 0000096E [7609000000000000]      	dq .undefined_object
   745                                  .undefined_object:
   746 00000976 05                      	db T_undefined
   747 00000977 [EA05000000000000]      	dq L_constants + 1514
   748                                  
   749                                  free_var_18:	; location of car
   750 0000097F [8709000000000000]      	dq .undefined_object
   751                                  .undefined_object:
   752 00000987 05                      	db T_undefined
   753 00000988 [1501000000000000]      	dq L_constants + 277
   754                                  
   755                                  free_var_19:	; location of cdaaar
   756 00000990 [9809000000000000]      	dq .undefined_object
   757                                  .undefined_object:
   758 00000998 05                      	db T_undefined
   759 00000999 [F906000000000000]      	dq L_constants + 1785
   760                                  
   761                                  free_var_20:	; location of cdaadr
   762 000009A1 [A909000000000000]      	dq .undefined_object
   763                                  .undefined_object:
   764 000009A9 05                      	db T_undefined
   765 000009AA [0807000000000000]      	dq L_constants + 1800
   766                                  
   767                                  free_var_21:	; location of cdaar
   768 000009B2 [BA09000000000000]      	dq .undefined_object
   769                                  .undefined_object:
   770 000009BA 05                      	db T_undefined
   771 000009BB [4906000000000000]      	dq L_constants + 1609
   772                                  
   773                                  free_var_22:	; location of cdadar
   774 000009C3 [CB09000000000000]      	dq .undefined_object
   775                                  .undefined_object:
   776 000009CB 05                      	db T_undefined
   777 000009CC [1707000000000000]      	dq L_constants + 1815
   778                                  
   779                                  free_var_23:	; location of cdaddr
   780 000009D4 [DC09000000000000]      	dq .undefined_object
   781                                  .undefined_object:
   782 000009DC 05                      	db T_undefined
   783 000009DD [2607000000000000]      	dq L_constants + 1830
   784                                  
   785                                  free_var_24:	; location of cdadr
   786 000009E5 [ED09000000000000]      	dq .undefined_object
   787                                  .undefined_object:
   788 000009ED 05                      	db T_undefined
   789 000009EE [5706000000000000]      	dq L_constants + 1623
   790                                  
   791                                  free_var_25:	; location of cdar
   792 000009F6 [FE09000000000000]      	dq .undefined_object
   793                                  .undefined_object:
   794 000009FE 05                      	db T_undefined
   795 000009FF [F705000000000000]      	dq L_constants + 1527
   796                                  
   797                                  free_var_26:	; location of cddaar
   798 00000A07 [0F0A000000000000]      	dq .undefined_object
   799                                  .undefined_object:
   800 00000A0F 05                      	db T_undefined
   801 00000A10 [3507000000000000]      	dq L_constants + 1845
   802                                  
   803                                  free_var_27:	; location of cddadr
   804 00000A18 [200A000000000000]      	dq .undefined_object
   805                                  .undefined_object:
   806 00000A20 05                      	db T_undefined
   807 00000A21 [4407000000000000]      	dq L_constants + 1860
   808                                  
   809                                  free_var_28:	; location of cddar
   810 00000A29 [310A000000000000]      	dq .undefined_object
   811                                  .undefined_object:
   812 00000A31 05                      	db T_undefined
   813 00000A32 [6506000000000000]      	dq L_constants + 1637
   814                                  
   815                                  free_var_29:	; location of cdddar
   816 00000A3A [420A000000000000]      	dq .undefined_object
   817                                  .undefined_object:
   818 00000A42 05                      	db T_undefined
   819 00000A43 [5307000000000000]      	dq L_constants + 1875
   820                                  
   821                                  free_var_30:	; location of cddddr
   822 00000A4B [530A000000000000]      	dq .undefined_object
   823                                  .undefined_object:
   824 00000A53 05                      	db T_undefined
   825 00000A54 [6207000000000000]      	dq L_constants + 1890
   826                                  
   827                                  free_var_31:	; location of cdddr
   828 00000A5C [640A000000000000]      	dq .undefined_object
   829                                  .undefined_object:
   830 00000A64 05                      	db T_undefined
   831 00000A65 [7306000000000000]      	dq L_constants + 1651
   832                                  
   833                                  free_var_32:	; location of cddr
   834 00000A6D [750A000000000000]      	dq .undefined_object
   835                                  .undefined_object:
   836 00000A75 05                      	db T_undefined
   837 00000A76 [0406000000000000]      	dq L_constants + 1540
   838                                  
   839                                  free_var_33:	; location of cdr
   840 00000A7E [860A000000000000]      	dq .undefined_object
   841                                  .undefined_object:
   842 00000A86 05                      	db T_undefined
   843 00000A87 [2101000000000000]      	dq L_constants + 289
   844                                  
   845                                  free_var_34:	; location of cons
   846 00000A8F [970A000000000000]      	dq .undefined_object
   847                                  .undefined_object:
   848 00000A97 05                      	db T_undefined
   849 00000A98 [DF00000000000000]      	dq L_constants + 223
   850                                  
   851                                  free_var_35:	; location of fold-left
   852 00000AA0 [A80A000000000000]      	dq .undefined_object
   853                                  .undefined_object:
   854 00000AA8 05                      	db T_undefined
   855 00000AA9 [1908000000000000]      	dq L_constants + 2073
   856                                  
   857                                  free_var_36:	; location of fold-right
   858 00000AB1 [B90A000000000000]      	dq .undefined_object
   859                                  .undefined_object:
   860 00000AB9 05                      	db T_undefined
   861 00000ABA [3A08000000000000]      	dq L_constants + 2106
   862                                  
   863                                  free_var_37:	; location of fraction?
   864 00000AC2 [CA0A000000000000]      	dq .undefined_object
   865                                  .undefined_object:
   866 00000ACA 05                      	db T_undefined
   867 00000ACB [9800000000000000]      	dq L_constants + 152
   868                                  
   869                                  free_var_38:	; location of integer?
   870 00000AD3 [DB0A000000000000]      	dq .undefined_object
   871                                  .undefined_object:
   872 00000ADB 05                      	db T_undefined
   873 00000ADC [F001000000000000]      	dq L_constants + 496
   874                                  
   875                                  free_var_39:	; location of list
   876 00000AE4 [EC0A000000000000]      	dq .undefined_object
   877                                  .undefined_object:
   878 00000AEC 05                      	db T_undefined
   879 00000AED [7F07000000000000]      	dq L_constants + 1919
   880                                  
   881                                  free_var_40:	; location of list*
   882 00000AF5 [FD0A000000000000]      	dq .undefined_object
   883                                  .undefined_object:
   884 00000AFD 05                      	db T_undefined
   885 00000AFE [AA07000000000000]      	dq L_constants + 1962
   886                                  
   887                                  free_var_41:	; location of list?
   888 00000B06 [0E0B000000000000]      	dq .undefined_object
   889                                  .undefined_object:
   890 00000B0E 05                      	db T_undefined
   891 00000B0F [7107000000000000]      	dq L_constants + 1905
   892                                  
   893                                  free_var_42:	; location of map
   894 00000B17 [1F0B000000000000]      	dq .undefined_object
   895                                  .undefined_object:
   896 00000B1F 05                      	db T_undefined
   897 00000B20 [EE07000000000000]      	dq L_constants + 2030
   898                                  
   899                                  free_var_43:	; location of not
   900 00000B28 [300B000000000000]      	dq .undefined_object
   901                                  .undefined_object:
   902 00000B30 05                      	db T_undefined
   903 00000B31 [8C07000000000000]      	dq L_constants + 1932
   904                                  
   905                                  free_var_44:	; location of null?
   906 00000B39 [410B000000000000]      	dq .undefined_object
   907                                  .undefined_object:
   908 00000B41 05                      	db T_undefined
   909 00000B42 [0600000000000000]      	dq L_constants + 6
   910                                  
   911                                  free_var_45:	; location of ormap
   912 00000B4A [520B000000000000]      	dq .undefined_object
   913                                  .undefined_object:
   914 00000B52 05                      	db T_undefined
   915 00000B53 [E007000000000000]      	dq L_constants + 2016
   916                                  
   917                                  free_var_46:	; location of pair?
   918 00000B5B [630B000000000000]      	dq .undefined_object
   919                                  .undefined_object:
   920 00000B63 05                      	db T_undefined
   921 00000B64 [1400000000000000]      	dq L_constants + 20
   922                                  
   923                                  free_var_47:	; location of rational?
   924 00000B6C [740B000000000000]      	dq .undefined_object
   925                                  .undefined_object:
   926 00000B74 05                      	db T_undefined
   927 00000B75 [9807000000000000]      	dq L_constants + 1944
   928                                  
   929                                  free_var_48:	; location of reverse
   930 00000B7D [850B000000000000]      	dq .undefined_object
   931                                  .undefined_object:
   932 00000B85 05                      	db T_undefined
   933 00000B86 [0908000000000000]      	dq L_constants + 2057
   934                                  
   935                                  
   936                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   937                                  global main
   938                                  section .text
   939                                  main:
   940 00000000 C8000000                        enter 0, 0
   941 00000004 6A00                            push 0
   942 00000006 6A00                            push 0
   943 00000008 68[31560000]                    push Lend
   944 0000000D C8000000                        enter 0, 0
   945                                  	; building closure for null?
   946 00000011 48BF-                   	mov rdi, free_var_44
   946 00000013 [390B000000000000] 
   947 0000001B 48BE-                   	mov rsi, L_code_ptr_is_null
   947 0000001D [C361000000000000] 
   948 00000025 E8A25F0000              	call bind_primitive
   949                                  
   950                                  	; building closure for pair?
   951 0000002A 48BF-                   	mov rdi, free_var_46
   951 0000002C [5B0B000000000000] 
   952 00000034 48BE-                   	mov rsi, L_code_ptr_is_pair
   952 00000036 [F561000000000000] 
   953 0000003E E8895F0000              	call bind_primitive
   954                                  
   955                                  	; building closure for fraction?
   956 00000043 48BF-                   	mov rdi, free_var_37
   956 00000045 [C20A000000000000] 
   957 0000004D 48BE-                   	mov rsi, L_code_ptr_is_fraction
   957 0000004F [1F64000000000000] 
   958 00000057 E8705F0000              	call bind_primitive
   959                                  
   960                                  	; building closure for cons
   961 0000005C 48BF-                   	mov rdi, free_var_34
   961 0000005E [8F0A000000000000] 
   962 00000066 48BE-                   	mov rsi, L_code_ptr_cons
   962 00000068 [5565000000000000] 
   963 00000070 E8575F0000              	call bind_primitive
   964                                  
   965                                  	; building closure for car
   966 00000075 48BF-                   	mov rdi, free_var_18
   966 00000077 [7F09000000000000] 
   967 0000007F 48BE-                   	mov rsi, L_code_ptr_car
   967 00000081 [FE65000000000000] 
   968 00000089 E83E5F0000              	call bind_primitive
   969                                  
   970                                  	; building closure for cdr
   971 0000008E 48BF-                   	mov rdi, free_var_33
   971 00000090 [7E0A000000000000] 
   972 00000098 48BE-                   	mov rsi, L_code_ptr_cdr
   972 0000009A [2266000000000000] 
   973 000000A2 E8255F0000              	call bind_primitive
   974                                  
   975                                  	; building closure for integer?
   976 000000A7 48BF-                   	mov rdi, free_var_38
   976 000000A9 [D30A000000000000] 
   977 000000B1 48BE-                   	mov rsi, L_code_ptr_is_integer
   977 000000B3 [8768000000000000] 
   978 000000BB E80C5F0000              	call bind_primitive
   979                                  
   980                                  	; building closure for __bin-apply
   981 000000C0 48BF-                   	mov rdi, free_var_0
   981 000000C2 [4D08000000000000] 
   982 000000CA 48BE-                   	mov rsi, L_code_ptr_bin_apply
   982 000000CC [3C61000000000000] 
   983 000000D4 E8F35E0000              	call bind_primitive
   984                                  
   985 000000D9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   986 000000DE E8B9560000              	call malloc
   987 000000E3 50                      	push rax
   988 000000E4 BF00000000              	mov rdi, 8 * 0	; new rib
   989 000000E9 E8AE560000              	call malloc
   990 000000EE 50                      	push rax
   991 000000EF BF08000000              	mov rdi, 8 * 1	; extended env
   992 000000F4 E8A3560000              	call malloc
   993 000000F9 488B7D10                	mov rdi, ENV
   994 000000FD BE00000000              	mov rsi, 0
   995 00000102 BA01000000              	mov rdx, 1
   996                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   997 00000107 4883FE00                	cmp rsi, 0
   998 0000010B 7410                    	je .L_lambda_simple_env_end_0001
   999 0000010D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1000 00000111 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1001 00000115 48FFC6                  	inc rsi
  1002 00000118 48FFC2                  	inc rdx
  1003 0000011B EBEA                    	jmp .L_lambda_simple_env_loop_0001
  1004                                  .L_lambda_simple_env_end_0001:
  1005 0000011D 5B                      	pop rbx
  1006 0000011E BE00000000              	mov rsi, 0
  1007                                  .L_lambda_simple_params_loop_0001:	; copy params
  1008 00000123 4883FE00                	cmp rsi, 0
  1009 00000127 740E                    	je .L_lambda_simple_params_end_0001
  1010 00000129 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1011 0000012E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1012 00000132 48FFC6                  	inc rsi
  1013 00000135 EBEC                    	jmp .L_lambda_simple_params_loop_0001
  1014                                  .L_lambda_simple_params_end_0001:
  1015 00000137 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1016 0000013A 4889C3                  	mov rbx, rax
  1017 0000013D 58                      	pop rax
  1018 0000013E C60004                  	mov byte [rax], T_closure
  1019 00000141 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1020 00000145 48C74009[52010000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
  1021 0000014D E9A4000000              	jmp .L_lambda_simple_end_0001
  1022                                  .L_lambda_simple_code_0001:	; lambda-simple body
  1023 00000152 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1024 00000158 740B                    	je .L_lambda_simple_arity_check_ok_0001
  1025 0000015A FF742410                	push qword [rsp + 8 * 2]
  1026 0000015E 6A01                    	push 1
  1027 00000160 E9F0550000              	jmp L_error_incorrect_arity_simple
  1028                                  .L_lambda_simple_arity_check_ok_0001:
  1029 00000165 C8000000                	enter 0, 0
  1030                                  	; preparing a tail-call
  1031                                  	; preparing a non-tail-call
  1032 00000169 488B4520                	mov rax, PARAM(0)	; param x
  1033 0000016D 50                      	push rax
  1034 0000016E 6A01                    	push 1	; arg count
  1035 00000170 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  1036 00000178 803805                  	cmp byte [rax], T_undefined
  1037 0000017B 0F84EE540000            	je L_error_fvar_undefined
  1038 00000181 803804                  	cmp byte [rax], T_closure
  1039 00000184 0F8569550000            	jne L_error_non_closure
  1040 0000018A FF7001                  	push SOB_CLOSURE_ENV(rax)
  1041 0000018D FF5009                  	call SOB_CLOSURE_CODE(rax)
  1042 00000190 50                      	push rax
  1043 00000191 6A01                    	push 1	; arg count
  1044 00000193 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  1045 0000019B 803805                  	cmp byte [rax], T_undefined
  1046 0000019E 0F84CB540000            	je L_error_fvar_undefined
  1047 000001A4 803804                  	cmp byte [rax], T_closure
  1048 000001A7 0F8546550000            	jne L_error_non_closure
  1049 000001AD FF7001                  	push SOB_CLOSURE_ENV(rax)
  1050 000001B0 FF7508                  	push qword [rbp + 8 * 1]
  1051                                   ; old ret addr
  1052 000001B3 FF7500                  	push qword [rbp]
  1053                                   ; restore the old rbp
  1054 000001B6 BB01000000              	mov rbx, 1
  1055 000001BB 4883C303                	add rbx, 3
  1056 000001BF 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1057 000001C3 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1058 000001C8 4C8D4DF8                	lea r9, [rbp - 8]
  1059 000001CC B905000000              	mov rcx, 5
  1060                                  .L_tc_recycle_frame_loop_0001:
  1061 000001D1 4883F900                	cmp rcx, 0
  1062 000001D5 7413                    	je .L_tc_recycle_frame_done_0001
  1063 000001D7 4D8B11                  	mov r10, qword [r9]
  1064 000001DA 4D8910                  	mov qword [r8], r10
  1065 000001DD 4983E808                	sub r8, 8
  1066 000001E1 4983E908                	sub r9, 8
  1067 000001E5 48FFC9                  	dec rcx
  1068 000001E8 EBE7                    	jmp .L_tc_recycle_frame_loop_0001
  1069                                  .L_tc_recycle_frame_done_0001:
  1070 000001EA 498D6008                	lea rsp, [r8 + 8]
  1071 000001EE 5D                      	pop rbp ; restore the old rbp
  1072 000001EF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1073 000001F2 C9                      	leave
  1074 000001F3 C21800                  	ret AND_KILL_FRAME(1)
  1075                                  .L_lambda_simple_end_0001:	; new closure is in rax
  1076 000001F6 48890425[F7080000]      	mov qword [free_var_10], rax
  1077 000001FE 48B8-                   	mov rax, sob_void
  1077 00000200 [0000000000000000] 
  1078                                  
  1079 00000208 4889C7                  	mov rdi, rax
  1080 0000020B E8E1570000              	call print_sexpr_if_not_void
  1081 00000210 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1082 00000215 E882550000              	call malloc
  1083 0000021A 50                      	push rax
  1084 0000021B BF00000000              	mov rdi, 8 * 0	; new rib
  1085 00000220 E877550000              	call malloc
  1086 00000225 50                      	push rax
  1087 00000226 BF08000000              	mov rdi, 8 * 1	; extended env
  1088 0000022B E86C550000              	call malloc
  1089 00000230 488B7D10                	mov rdi, ENV
  1090 00000234 BE00000000              	mov rsi, 0
  1091 00000239 BA01000000              	mov rdx, 1
  1092                                  .L_lambda_simple_env_loop_0002:	; ext_env[i + 1] <-- env[i]
  1093 0000023E 4883FE00                	cmp rsi, 0
  1094 00000242 7410                    	je .L_lambda_simple_env_end_0002
  1095 00000244 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1096 00000248 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1097 0000024C 48FFC6                  	inc rsi
  1098 0000024F 48FFC2                  	inc rdx
  1099 00000252 EBEA                    	jmp .L_lambda_simple_env_loop_0002
  1100                                  .L_lambda_simple_env_end_0002:
  1101 00000254 5B                      	pop rbx
  1102 00000255 BE00000000              	mov rsi, 0
  1103                                  .L_lambda_simple_params_loop_0002:	; copy params
  1104 0000025A 4883FE00                	cmp rsi, 0
  1105 0000025E 740E                    	je .L_lambda_simple_params_end_0002
  1106 00000260 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1107 00000265 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1108 00000269 48FFC6                  	inc rsi
  1109 0000026C EBEC                    	jmp .L_lambda_simple_params_loop_0002
  1110                                  .L_lambda_simple_params_end_0002:
  1111 0000026E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1112 00000271 4889C3                  	mov rbx, rax
  1113 00000274 58                      	pop rax
  1114 00000275 C60004                  	mov byte [rax], T_closure
  1115 00000278 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1116 0000027C 48C74009[89020000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0002
  1117 00000284 E9A4000000              	jmp .L_lambda_simple_end_0002
  1118                                  .L_lambda_simple_code_0002:	; lambda-simple body
  1119 00000289 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1120 0000028F 740B                    	je .L_lambda_simple_arity_check_ok_0002
  1121 00000291 FF742410                	push qword [rsp + 8 * 2]
  1122 00000295 6A01                    	push 1
  1123 00000297 E9B9540000              	jmp L_error_incorrect_arity_simple
  1124                                  .L_lambda_simple_arity_check_ok_0002:
  1125 0000029C C8000000                	enter 0, 0
  1126                                  	; preparing a tail-call
  1127                                  	; preparing a non-tail-call
  1128 000002A0 488B4520                	mov rax, PARAM(0)	; param x
  1129 000002A4 50                      	push rax
  1130 000002A5 6A01                    	push 1	; arg count
  1131 000002A7 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  1132 000002AF 803805                  	cmp byte [rax], T_undefined
  1133 000002B2 0F84B7530000            	je L_error_fvar_undefined
  1134 000002B8 803804                  	cmp byte [rax], T_closure
  1135 000002BB 0F8532540000            	jne L_error_non_closure
  1136 000002C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1137 000002C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1138 000002C7 50                      	push rax
  1139 000002C8 6A01                    	push 1	; arg count
  1140 000002CA 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  1141 000002D2 803805                  	cmp byte [rax], T_undefined
  1142 000002D5 0F8494530000            	je L_error_fvar_undefined
  1143 000002DB 803804                  	cmp byte [rax], T_closure
  1144 000002DE 0F850F540000            	jne L_error_non_closure
  1145 000002E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1146 000002E7 FF7508                  	push qword [rbp + 8 * 1]
  1147                                   ; old ret addr
  1148 000002EA FF7500                  	push qword [rbp]
  1149                                   ; restore the old rbp
  1150 000002ED BB01000000              	mov rbx, 1
  1151 000002F2 4883C303                	add rbx, 3
  1152 000002F6 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1153 000002FA 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1154 000002FF 4C8D4DF8                	lea r9, [rbp - 8]
  1155 00000303 B905000000              	mov rcx, 5
  1156                                  .L_tc_recycle_frame_loop_0002:
  1157 00000308 4883F900                	cmp rcx, 0
  1158 0000030C 7413                    	je .L_tc_recycle_frame_done_0002
  1159 0000030E 4D8B11                  	mov r10, qword [r9]
  1160 00000311 4D8910                  	mov qword [r8], r10
  1161 00000314 4983E808                	sub r8, 8
  1162 00000318 4983E908                	sub r9, 8
  1163 0000031C 48FFC9                  	dec rcx
  1164 0000031F EBE7                    	jmp .L_tc_recycle_frame_loop_0002
  1165                                  .L_tc_recycle_frame_done_0002:
  1166 00000321 498D6008                	lea rsp, [r8 + 8]
  1167 00000325 5D                      	pop rbp ; restore the old rbp
  1168 00000326 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1169 00000329 C9                      	leave
  1170 0000032A C21800                  	ret AND_KILL_FRAME(1)
  1171                                  .L_lambda_simple_end_0002:	; new closure is in rax
  1172 0000032D 48890425[6E090000]      	mov qword [free_var_17], rax
  1173 00000335 48B8-                   	mov rax, sob_void
  1173 00000337 [0000000000000000] 
  1174                                  
  1175 0000033F 4889C7                  	mov rdi, rax
  1176 00000342 E8AA560000              	call print_sexpr_if_not_void
  1177 00000347 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1178 0000034C E84B540000              	call malloc
  1179 00000351 50                      	push rax
  1180 00000352 BF00000000              	mov rdi, 8 * 0	; new rib
  1181 00000357 E840540000              	call malloc
  1182 0000035C 50                      	push rax
  1183 0000035D BF08000000              	mov rdi, 8 * 1	; extended env
  1184 00000362 E835540000              	call malloc
  1185 00000367 488B7D10                	mov rdi, ENV
  1186 0000036B BE00000000              	mov rsi, 0
  1187 00000370 BA01000000              	mov rdx, 1
  1188                                  .L_lambda_simple_env_loop_0003:	; ext_env[i + 1] <-- env[i]
  1189 00000375 4883FE00                	cmp rsi, 0
  1190 00000379 7410                    	je .L_lambda_simple_env_end_0003
  1191 0000037B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1192 0000037F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1193 00000383 48FFC6                  	inc rsi
  1194 00000386 48FFC2                  	inc rdx
  1195 00000389 EBEA                    	jmp .L_lambda_simple_env_loop_0003
  1196                                  .L_lambda_simple_env_end_0003:
  1197 0000038B 5B                      	pop rbx
  1198 0000038C BE00000000              	mov rsi, 0
  1199                                  .L_lambda_simple_params_loop_0003:	; copy params
  1200 00000391 4883FE00                	cmp rsi, 0
  1201 00000395 740E                    	je .L_lambda_simple_params_end_0003
  1202 00000397 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1203 0000039C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1204 000003A0 48FFC6                  	inc rsi
  1205 000003A3 EBEC                    	jmp .L_lambda_simple_params_loop_0003
  1206                                  .L_lambda_simple_params_end_0003:
  1207 000003A5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1208 000003A8 4889C3                  	mov rbx, rax
  1209 000003AB 58                      	pop rax
  1210 000003AC C60004                  	mov byte [rax], T_closure
  1211 000003AF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1212 000003B3 48C74009[C0030000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0003
  1213 000003BB E9A4000000              	jmp .L_lambda_simple_end_0003
  1214                                  .L_lambda_simple_code_0003:	; lambda-simple body
  1215 000003C0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1216 000003C6 740B                    	je .L_lambda_simple_arity_check_ok_0003
  1217 000003C8 FF742410                	push qword [rsp + 8 * 2]
  1218 000003CC 6A01                    	push 1
  1219 000003CE E982530000              	jmp L_error_incorrect_arity_simple
  1220                                  .L_lambda_simple_arity_check_ok_0003:
  1221 000003D3 C8000000                	enter 0, 0
  1222                                  	; preparing a tail-call
  1223                                  	; preparing a non-tail-call
  1224 000003D7 488B4520                	mov rax, PARAM(0)	; param x
  1225 000003DB 50                      	push rax
  1226 000003DC 6A01                    	push 1	; arg count
  1227 000003DE 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  1228 000003E6 803805                  	cmp byte [rax], T_undefined
  1229 000003E9 0F8480520000            	je L_error_fvar_undefined
  1230 000003EF 803804                  	cmp byte [rax], T_closure
  1231 000003F2 0F85FB520000            	jne L_error_non_closure
  1232 000003F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1233 000003FB FF5009                  	call SOB_CLOSURE_CODE(rax)
  1234 000003FE 50                      	push rax
  1235 000003FF 6A01                    	push 1	; arg count
  1236 00000401 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  1237 00000409 803805                  	cmp byte [rax], T_undefined
  1238 0000040C 0F845D520000            	je L_error_fvar_undefined
  1239 00000412 803804                  	cmp byte [rax], T_closure
  1240 00000415 0F85D8520000            	jne L_error_non_closure
  1241 0000041B FF7001                  	push SOB_CLOSURE_ENV(rax)
  1242 0000041E FF7508                  	push qword [rbp + 8 * 1]
  1243                                   ; old ret addr
  1244 00000421 FF7500                  	push qword [rbp]
  1245                                   ; restore the old rbp
  1246 00000424 BB01000000              	mov rbx, 1
  1247 00000429 4883C303                	add rbx, 3
  1248 0000042D 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1249 00000431 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1250 00000436 4C8D4DF8                	lea r9, [rbp - 8]
  1251 0000043A B905000000              	mov rcx, 5
  1252                                  .L_tc_recycle_frame_loop_0003:
  1253 0000043F 4883F900                	cmp rcx, 0
  1254 00000443 7413                    	je .L_tc_recycle_frame_done_0003
  1255 00000445 4D8B11                  	mov r10, qword [r9]
  1256 00000448 4D8910                  	mov qword [r8], r10
  1257 0000044B 4983E808                	sub r8, 8
  1258 0000044F 4983E908                	sub r9, 8
  1259 00000453 48FFC9                  	dec rcx
  1260 00000456 EBE7                    	jmp .L_tc_recycle_frame_loop_0003
  1261                                  .L_tc_recycle_frame_done_0003:
  1262 00000458 498D6008                	lea rsp, [r8 + 8]
  1263 0000045C 5D                      	pop rbp ; restore the old rbp
  1264 0000045D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1265 00000460 C9                      	leave
  1266 00000461 C21800                  	ret AND_KILL_FRAME(1)
  1267                                  .L_lambda_simple_end_0003:	; new closure is in rax
  1268 00000464 48890425[F6090000]      	mov qword [free_var_25], rax
  1269 0000046C 48B8-                   	mov rax, sob_void
  1269 0000046E [0000000000000000] 
  1270                                  
  1271 00000476 4889C7                  	mov rdi, rax
  1272 00000479 E873550000              	call print_sexpr_if_not_void
  1273 0000047E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1274 00000483 E814530000              	call malloc
  1275 00000488 50                      	push rax
  1276 00000489 BF00000000              	mov rdi, 8 * 0	; new rib
  1277 0000048E E809530000              	call malloc
  1278 00000493 50                      	push rax
  1279 00000494 BF08000000              	mov rdi, 8 * 1	; extended env
  1280 00000499 E8FE520000              	call malloc
  1281 0000049E 488B7D10                	mov rdi, ENV
  1282 000004A2 BE00000000              	mov rsi, 0
  1283 000004A7 BA01000000              	mov rdx, 1
  1284                                  .L_lambda_simple_env_loop_0004:	; ext_env[i + 1] <-- env[i]
  1285 000004AC 4883FE00                	cmp rsi, 0
  1286 000004B0 7410                    	je .L_lambda_simple_env_end_0004
  1287 000004B2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1288 000004B6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1289 000004BA 48FFC6                  	inc rsi
  1290 000004BD 48FFC2                  	inc rdx
  1291 000004C0 EBEA                    	jmp .L_lambda_simple_env_loop_0004
  1292                                  .L_lambda_simple_env_end_0004:
  1293 000004C2 5B                      	pop rbx
  1294 000004C3 BE00000000              	mov rsi, 0
  1295                                  .L_lambda_simple_params_loop_0004:	; copy params
  1296 000004C8 4883FE00                	cmp rsi, 0
  1297 000004CC 740E                    	je .L_lambda_simple_params_end_0004
  1298 000004CE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1299 000004D3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1300 000004D7 48FFC6                  	inc rsi
  1301 000004DA EBEC                    	jmp .L_lambda_simple_params_loop_0004
  1302                                  .L_lambda_simple_params_end_0004:
  1303 000004DC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1304 000004DF 4889C3                  	mov rbx, rax
  1305 000004E2 58                      	pop rax
  1306 000004E3 C60004                  	mov byte [rax], T_closure
  1307 000004E6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1308 000004EA 48C74009[F7040000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0004
  1309 000004F2 E9A4000000              	jmp .L_lambda_simple_end_0004
  1310                                  .L_lambda_simple_code_0004:	; lambda-simple body
  1311 000004F7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1312 000004FD 740B                    	je .L_lambda_simple_arity_check_ok_0004
  1313 000004FF FF742410                	push qword [rsp + 8 * 2]
  1314 00000503 6A01                    	push 1
  1315 00000505 E94B520000              	jmp L_error_incorrect_arity_simple
  1316                                  .L_lambda_simple_arity_check_ok_0004:
  1317 0000050A C8000000                	enter 0, 0
  1318                                  	; preparing a tail-call
  1319                                  	; preparing a non-tail-call
  1320 0000050E 488B4520                	mov rax, PARAM(0)	; param x
  1321 00000512 50                      	push rax
  1322 00000513 6A01                    	push 1	; arg count
  1323 00000515 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  1324 0000051D 803805                  	cmp byte [rax], T_undefined
  1325 00000520 0F8449510000            	je L_error_fvar_undefined
  1326 00000526 803804                  	cmp byte [rax], T_closure
  1327 00000529 0F85C4510000            	jne L_error_non_closure
  1328 0000052F FF7001                  	push SOB_CLOSURE_ENV(rax)
  1329 00000532 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1330 00000535 50                      	push rax
  1331 00000536 6A01                    	push 1	; arg count
  1332 00000538 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  1333 00000540 803805                  	cmp byte [rax], T_undefined
  1334 00000543 0F8426510000            	je L_error_fvar_undefined
  1335 00000549 803804                  	cmp byte [rax], T_closure
  1336 0000054C 0F85A1510000            	jne L_error_non_closure
  1337 00000552 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1338 00000555 FF7508                  	push qword [rbp + 8 * 1]
  1339                                   ; old ret addr
  1340 00000558 FF7500                  	push qword [rbp]
  1341                                   ; restore the old rbp
  1342 0000055B BB01000000              	mov rbx, 1
  1343 00000560 4883C303                	add rbx, 3
  1344 00000564 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1345 00000568 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1346 0000056D 4C8D4DF8                	lea r9, [rbp - 8]
  1347 00000571 B905000000              	mov rcx, 5
  1348                                  .L_tc_recycle_frame_loop_0004:
  1349 00000576 4883F900                	cmp rcx, 0
  1350 0000057A 7413                    	je .L_tc_recycle_frame_done_0004
  1351 0000057C 4D8B11                  	mov r10, qword [r9]
  1352 0000057F 4D8910                  	mov qword [r8], r10
  1353 00000582 4983E808                	sub r8, 8
  1354 00000586 4983E908                	sub r9, 8
  1355 0000058A 48FFC9                  	dec rcx
  1356 0000058D EBE7                    	jmp .L_tc_recycle_frame_loop_0004
  1357                                  .L_tc_recycle_frame_done_0004:
  1358 0000058F 498D6008                	lea rsp, [r8 + 8]
  1359 00000593 5D                      	pop rbp ; restore the old rbp
  1360 00000594 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1361 00000597 C9                      	leave
  1362 00000598 C21800                  	ret AND_KILL_FRAME(1)
  1363                                  .L_lambda_simple_end_0004:	; new closure is in rax
  1364 0000059B 48890425[6D0A0000]      	mov qword [free_var_32], rax
  1365 000005A3 48B8-                   	mov rax, sob_void
  1365 000005A5 [0000000000000000] 
  1366                                  
  1367 000005AD 4889C7                  	mov rdi, rax
  1368 000005B0 E83C540000              	call print_sexpr_if_not_void
  1369 000005B5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1370 000005BA E8DD510000              	call malloc
  1371 000005BF 50                      	push rax
  1372 000005C0 BF00000000              	mov rdi, 8 * 0	; new rib
  1373 000005C5 E8D2510000              	call malloc
  1374 000005CA 50                      	push rax
  1375 000005CB BF08000000              	mov rdi, 8 * 1	; extended env
  1376 000005D0 E8C7510000              	call malloc
  1377 000005D5 488B7D10                	mov rdi, ENV
  1378 000005D9 BE00000000              	mov rsi, 0
  1379 000005DE BA01000000              	mov rdx, 1
  1380                                  .L_lambda_simple_env_loop_0005:	; ext_env[i + 1] <-- env[i]
  1381 000005E3 4883FE00                	cmp rsi, 0
  1382 000005E7 7410                    	je .L_lambda_simple_env_end_0005
  1383 000005E9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1384 000005ED 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1385 000005F1 48FFC6                  	inc rsi
  1386 000005F4 48FFC2                  	inc rdx
  1387 000005F7 EBEA                    	jmp .L_lambda_simple_env_loop_0005
  1388                                  .L_lambda_simple_env_end_0005:
  1389 000005F9 5B                      	pop rbx
  1390 000005FA BE00000000              	mov rsi, 0
  1391                                  .L_lambda_simple_params_loop_0005:	; copy params
  1392 000005FF 4883FE00                	cmp rsi, 0
  1393 00000603 740E                    	je .L_lambda_simple_params_end_0005
  1394 00000605 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1395 0000060A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1396 0000060E 48FFC6                  	inc rsi
  1397 00000611 EBEC                    	jmp .L_lambda_simple_params_loop_0005
  1398                                  .L_lambda_simple_params_end_0005:
  1399 00000613 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1400 00000616 4889C3                  	mov rbx, rax
  1401 00000619 58                      	pop rax
  1402 0000061A C60004                  	mov byte [rax], T_closure
  1403 0000061D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1404 00000621 48C74009[2E060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0005
  1405 00000629 E9A4000000              	jmp .L_lambda_simple_end_0005
  1406                                  .L_lambda_simple_code_0005:	; lambda-simple body
  1407 0000062E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1408 00000634 740B                    	je .L_lambda_simple_arity_check_ok_0005
  1409 00000636 FF742410                	push qword [rsp + 8 * 2]
  1410 0000063A 6A01                    	push 1
  1411 0000063C E914510000              	jmp L_error_incorrect_arity_simple
  1412                                  .L_lambda_simple_arity_check_ok_0005:
  1413 00000641 C8000000                	enter 0, 0
  1414                                  	; preparing a tail-call
  1415                                  	; preparing a non-tail-call
  1416 00000645 488B4520                	mov rax, PARAM(0)	; param x
  1417 00000649 50                      	push rax
  1418 0000064A 6A01                    	push 1	; arg count
  1419 0000064C 488B0425[F7080000]      	mov rax, qword [free_var_10]	; free var caar
  1420 00000654 803805                  	cmp byte [rax], T_undefined
  1421 00000657 0F8412500000            	je L_error_fvar_undefined
  1422 0000065D 803804                  	cmp byte [rax], T_closure
  1423 00000660 0F858D500000            	jne L_error_non_closure
  1424 00000666 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1425 00000669 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1426 0000066C 50                      	push rax
  1427 0000066D 6A01                    	push 1	; arg count
  1428 0000066F 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  1429 00000677 803805                  	cmp byte [rax], T_undefined
  1430 0000067A 0F84EF4F0000            	je L_error_fvar_undefined
  1431 00000680 803804                  	cmp byte [rax], T_closure
  1432 00000683 0F856A500000            	jne L_error_non_closure
  1433 00000689 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1434 0000068C FF7508                  	push qword [rbp + 8 * 1]
  1435                                   ; old ret addr
  1436 0000068F FF7500                  	push qword [rbp]
  1437                                   ; restore the old rbp
  1438 00000692 BB01000000              	mov rbx, 1
  1439 00000697 4883C303                	add rbx, 3
  1440 0000069B 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1441 0000069F 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1442 000006A4 4C8D4DF8                	lea r9, [rbp - 8]
  1443 000006A8 B905000000              	mov rcx, 5
  1444                                  .L_tc_recycle_frame_loop_0005:
  1445 000006AD 4883F900                	cmp rcx, 0
  1446 000006B1 7413                    	je .L_tc_recycle_frame_done_0005
  1447 000006B3 4D8B11                  	mov r10, qword [r9]
  1448 000006B6 4D8910                  	mov qword [r8], r10
  1449 000006B9 4983E808                	sub r8, 8
  1450 000006BD 4983E908                	sub r9, 8
  1451 000006C1 48FFC9                  	dec rcx
  1452 000006C4 EBE7                    	jmp .L_tc_recycle_frame_loop_0005
  1453                                  .L_tc_recycle_frame_done_0005:
  1454 000006C6 498D6008                	lea rsp, [r8 + 8]
  1455 000006CA 5D                      	pop rbp ; restore the old rbp
  1456 000006CB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1457 000006CE C9                      	leave
  1458 000006CF C21800                  	ret AND_KILL_FRAME(1)
  1459                                  .L_lambda_simple_end_0005:	; new closure is in rax
  1460 000006D2 48890425[B3080000]      	mov qword [free_var_6], rax
  1461 000006DA 48B8-                   	mov rax, sob_void
  1461 000006DC [0000000000000000] 
  1462                                  
  1463 000006E4 4889C7                  	mov rdi, rax
  1464 000006E7 E805530000              	call print_sexpr_if_not_void
  1465 000006EC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1466 000006F1 E8A6500000              	call malloc
  1467 000006F6 50                      	push rax
  1468 000006F7 BF00000000              	mov rdi, 8 * 0	; new rib
  1469 000006FC E89B500000              	call malloc
  1470 00000701 50                      	push rax
  1471 00000702 BF08000000              	mov rdi, 8 * 1	; extended env
  1472 00000707 E890500000              	call malloc
  1473 0000070C 488B7D10                	mov rdi, ENV
  1474 00000710 BE00000000              	mov rsi, 0
  1475 00000715 BA01000000              	mov rdx, 1
  1476                                  .L_lambda_simple_env_loop_0006:	; ext_env[i + 1] <-- env[i]
  1477 0000071A 4883FE00                	cmp rsi, 0
  1478 0000071E 7410                    	je .L_lambda_simple_env_end_0006
  1479 00000720 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1480 00000724 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1481 00000728 48FFC6                  	inc rsi
  1482 0000072B 48FFC2                  	inc rdx
  1483 0000072E EBEA                    	jmp .L_lambda_simple_env_loop_0006
  1484                                  .L_lambda_simple_env_end_0006:
  1485 00000730 5B                      	pop rbx
  1486 00000731 BE00000000              	mov rsi, 0
  1487                                  .L_lambda_simple_params_loop_0006:	; copy params
  1488 00000736 4883FE00                	cmp rsi, 0
  1489 0000073A 740E                    	je .L_lambda_simple_params_end_0006
  1490 0000073C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1491 00000741 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1492 00000745 48FFC6                  	inc rsi
  1493 00000748 EBEC                    	jmp .L_lambda_simple_params_loop_0006
  1494                                  .L_lambda_simple_params_end_0006:
  1495 0000074A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1496 0000074D 4889C3                  	mov rbx, rax
  1497 00000750 58                      	pop rax
  1498 00000751 C60004                  	mov byte [rax], T_closure
  1499 00000754 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1500 00000758 48C74009[65070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0006
  1501 00000760 E9A4000000              	jmp .L_lambda_simple_end_0006
  1502                                  .L_lambda_simple_code_0006:	; lambda-simple body
  1503 00000765 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1504 0000076B 740B                    	je .L_lambda_simple_arity_check_ok_0006
  1505 0000076D FF742410                	push qword [rsp + 8 * 2]
  1506 00000771 6A01                    	push 1
  1507 00000773 E9DD4F0000              	jmp L_error_incorrect_arity_simple
  1508                                  .L_lambda_simple_arity_check_ok_0006:
  1509 00000778 C8000000                	enter 0, 0
  1510                                  	; preparing a tail-call
  1511                                  	; preparing a non-tail-call
  1512 0000077C 488B4520                	mov rax, PARAM(0)	; param x
  1513 00000780 50                      	push rax
  1514 00000781 6A01                    	push 1	; arg count
  1515 00000783 488B0425[6E090000]      	mov rax, qword [free_var_17]	; free var cadr
  1516 0000078B 803805                  	cmp byte [rax], T_undefined
  1517 0000078E 0F84DB4E0000            	je L_error_fvar_undefined
  1518 00000794 803804                  	cmp byte [rax], T_closure
  1519 00000797 0F85564F0000            	jne L_error_non_closure
  1520 0000079D FF7001                  	push SOB_CLOSURE_ENV(rax)
  1521 000007A0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1522 000007A3 50                      	push rax
  1523 000007A4 6A01                    	push 1	; arg count
  1524 000007A6 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  1525 000007AE 803805                  	cmp byte [rax], T_undefined
  1526 000007B1 0F84B84E0000            	je L_error_fvar_undefined
  1527 000007B7 803804                  	cmp byte [rax], T_closure
  1528 000007BA 0F85334F0000            	jne L_error_non_closure
  1529 000007C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1530 000007C3 FF7508                  	push qword [rbp + 8 * 1]
  1531                                   ; old ret addr
  1532 000007C6 FF7500                  	push qword [rbp]
  1533                                   ; restore the old rbp
  1534 000007C9 BB01000000              	mov rbx, 1
  1535 000007CE 4883C303                	add rbx, 3
  1536 000007D2 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1537 000007D6 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1538 000007DB 4C8D4DF8                	lea r9, [rbp - 8]
  1539 000007DF B905000000              	mov rcx, 5
  1540                                  .L_tc_recycle_frame_loop_0006:
  1541 000007E4 4883F900                	cmp rcx, 0
  1542 000007E8 7413                    	je .L_tc_recycle_frame_done_0006
  1543 000007EA 4D8B11                  	mov r10, qword [r9]
  1544 000007ED 4D8910                  	mov qword [r8], r10
  1545 000007F0 4983E808                	sub r8, 8
  1546 000007F4 4983E908                	sub r9, 8
  1547 000007F8 48FFC9                  	dec rcx
  1548 000007FB EBE7                    	jmp .L_tc_recycle_frame_loop_0006
  1549                                  .L_tc_recycle_frame_done_0006:
  1550 000007FD 498D6008                	lea rsp, [r8 + 8]
  1551 00000801 5D                      	pop rbp ; restore the old rbp
  1552 00000802 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1553 00000805 C9                      	leave
  1554 00000806 C21800                  	ret AND_KILL_FRAME(1)
  1555                                  .L_lambda_simple_end_0006:	; new closure is in rax
  1556 00000809 48890425[E6080000]      	mov qword [free_var_9], rax
  1557 00000811 48B8-                   	mov rax, sob_void
  1557 00000813 [0000000000000000] 
  1558                                  
  1559 0000081B 4889C7                  	mov rdi, rax
  1560 0000081E E8CE510000              	call print_sexpr_if_not_void
  1561 00000823 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1562 00000828 E86F4F0000              	call malloc
  1563 0000082D 50                      	push rax
  1564 0000082E BF00000000              	mov rdi, 8 * 0	; new rib
  1565 00000833 E8644F0000              	call malloc
  1566 00000838 50                      	push rax
  1567 00000839 BF08000000              	mov rdi, 8 * 1	; extended env
  1568 0000083E E8594F0000              	call malloc
  1569 00000843 488B7D10                	mov rdi, ENV
  1570 00000847 BE00000000              	mov rsi, 0
  1571 0000084C BA01000000              	mov rdx, 1
  1572                                  .L_lambda_simple_env_loop_0007:	; ext_env[i + 1] <-- env[i]
  1573 00000851 4883FE00                	cmp rsi, 0
  1574 00000855 7410                    	je .L_lambda_simple_env_end_0007
  1575 00000857 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1576 0000085B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1577 0000085F 48FFC6                  	inc rsi
  1578 00000862 48FFC2                  	inc rdx
  1579 00000865 EBEA                    	jmp .L_lambda_simple_env_loop_0007
  1580                                  .L_lambda_simple_env_end_0007:
  1581 00000867 5B                      	pop rbx
  1582 00000868 BE00000000              	mov rsi, 0
  1583                                  .L_lambda_simple_params_loop_0007:	; copy params
  1584 0000086D 4883FE00                	cmp rsi, 0
  1585 00000871 740E                    	je .L_lambda_simple_params_end_0007
  1586 00000873 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1587 00000878 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1588 0000087C 48FFC6                  	inc rsi
  1589 0000087F EBEC                    	jmp .L_lambda_simple_params_loop_0007
  1590                                  .L_lambda_simple_params_end_0007:
  1591 00000881 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1592 00000884 4889C3                  	mov rbx, rax
  1593 00000887 58                      	pop rax
  1594 00000888 C60004                  	mov byte [rax], T_closure
  1595 0000088B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1596 0000088F 48C74009[9C080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0007
  1597 00000897 E9A4000000              	jmp .L_lambda_simple_end_0007
  1598                                  .L_lambda_simple_code_0007:	; lambda-simple body
  1599 0000089C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1600 000008A2 740B                    	je .L_lambda_simple_arity_check_ok_0007
  1601 000008A4 FF742410                	push qword [rsp + 8 * 2]
  1602 000008A8 6A01                    	push 1
  1603 000008AA E9A64E0000              	jmp L_error_incorrect_arity_simple
  1604                                  .L_lambda_simple_arity_check_ok_0007:
  1605 000008AF C8000000                	enter 0, 0
  1606                                  	; preparing a tail-call
  1607                                  	; preparing a non-tail-call
  1608 000008B3 488B4520                	mov rax, PARAM(0)	; param x
  1609 000008B7 50                      	push rax
  1610 000008B8 6A01                    	push 1	; arg count
  1611 000008BA 488B0425[F6090000]      	mov rax, qword [free_var_25]	; free var cdar
  1612 000008C2 803805                  	cmp byte [rax], T_undefined
  1613 000008C5 0F84A44D0000            	je L_error_fvar_undefined
  1614 000008CB 803804                  	cmp byte [rax], T_closure
  1615 000008CE 0F851F4E0000            	jne L_error_non_closure
  1616 000008D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1617 000008D7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1618 000008DA 50                      	push rax
  1619 000008DB 6A01                    	push 1	; arg count
  1620 000008DD 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  1621 000008E5 803805                  	cmp byte [rax], T_undefined
  1622 000008E8 0F84814D0000            	je L_error_fvar_undefined
  1623 000008EE 803804                  	cmp byte [rax], T_closure
  1624 000008F1 0F85FC4D0000            	jne L_error_non_closure
  1625 000008F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1626 000008FA FF7508                  	push qword [rbp + 8 * 1]
  1627                                   ; old ret addr
  1628 000008FD FF7500                  	push qword [rbp]
  1629                                   ; restore the old rbp
  1630 00000900 BB01000000              	mov rbx, 1
  1631 00000905 4883C303                	add rbx, 3
  1632 00000909 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1633 0000090D 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1634 00000912 4C8D4DF8                	lea r9, [rbp - 8]
  1635 00000916 B905000000              	mov rcx, 5
  1636                                  .L_tc_recycle_frame_loop_0007:
  1637 0000091B 4883F900                	cmp rcx, 0
  1638 0000091F 7413                    	je .L_tc_recycle_frame_done_0007
  1639 00000921 4D8B11                  	mov r10, qword [r9]
  1640 00000924 4D8910                  	mov qword [r8], r10
  1641 00000927 4983E808                	sub r8, 8
  1642 0000092B 4983E908                	sub r9, 8
  1643 0000092F 48FFC9                  	dec rcx
  1644 00000932 EBE7                    	jmp .L_tc_recycle_frame_loop_0007
  1645                                  .L_tc_recycle_frame_done_0007:
  1646 00000934 498D6008                	lea rsp, [r8 + 8]
  1647 00000938 5D                      	pop rbp ; restore the old rbp
  1648 00000939 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1649 0000093C C9                      	leave
  1650 0000093D C21800                  	ret AND_KILL_FRAME(1)
  1651                                  .L_lambda_simple_end_0007:	; new closure is in rax
  1652 00000940 48890425[2A090000]      	mov qword [free_var_13], rax
  1653 00000948 48B8-                   	mov rax, sob_void
  1653 0000094A [0000000000000000] 
  1654                                  
  1655 00000952 4889C7                  	mov rdi, rax
  1656 00000955 E897500000              	call print_sexpr_if_not_void
  1657 0000095A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1658 0000095F E8384E0000              	call malloc
  1659 00000964 50                      	push rax
  1660 00000965 BF00000000              	mov rdi, 8 * 0	; new rib
  1661 0000096A E82D4E0000              	call malloc
  1662 0000096F 50                      	push rax
  1663 00000970 BF08000000              	mov rdi, 8 * 1	; extended env
  1664 00000975 E8224E0000              	call malloc
  1665 0000097A 488B7D10                	mov rdi, ENV
  1666 0000097E BE00000000              	mov rsi, 0
  1667 00000983 BA01000000              	mov rdx, 1
  1668                                  .L_lambda_simple_env_loop_0008:	; ext_env[i + 1] <-- env[i]
  1669 00000988 4883FE00                	cmp rsi, 0
  1670 0000098C 7410                    	je .L_lambda_simple_env_end_0008
  1671 0000098E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1672 00000992 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1673 00000996 48FFC6                  	inc rsi
  1674 00000999 48FFC2                  	inc rdx
  1675 0000099C EBEA                    	jmp .L_lambda_simple_env_loop_0008
  1676                                  .L_lambda_simple_env_end_0008:
  1677 0000099E 5B                      	pop rbx
  1678 0000099F BE00000000              	mov rsi, 0
  1679                                  .L_lambda_simple_params_loop_0008:	; copy params
  1680 000009A4 4883FE00                	cmp rsi, 0
  1681 000009A8 740E                    	je .L_lambda_simple_params_end_0008
  1682 000009AA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1683 000009AF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1684 000009B3 48FFC6                  	inc rsi
  1685 000009B6 EBEC                    	jmp .L_lambda_simple_params_loop_0008
  1686                                  .L_lambda_simple_params_end_0008:
  1687 000009B8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1688 000009BB 4889C3                  	mov rbx, rax
  1689 000009BE 58                      	pop rax
  1690 000009BF C60004                  	mov byte [rax], T_closure
  1691 000009C2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1692 000009C6 48C74009[D3090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0008
  1693 000009CE E9A4000000              	jmp .L_lambda_simple_end_0008
  1694                                  .L_lambda_simple_code_0008:	; lambda-simple body
  1695 000009D3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1696 000009D9 740B                    	je .L_lambda_simple_arity_check_ok_0008
  1697 000009DB FF742410                	push qword [rsp + 8 * 2]
  1698 000009DF 6A01                    	push 1
  1699 000009E1 E96F4D0000              	jmp L_error_incorrect_arity_simple
  1700                                  .L_lambda_simple_arity_check_ok_0008:
  1701 000009E6 C8000000                	enter 0, 0
  1702                                  	; preparing a tail-call
  1703                                  	; preparing a non-tail-call
  1704 000009EA 488B4520                	mov rax, PARAM(0)	; param x
  1705 000009EE 50                      	push rax
  1706 000009EF 6A01                    	push 1	; arg count
  1707 000009F1 488B0425[6D0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  1708 000009F9 803805                  	cmp byte [rax], T_undefined
  1709 000009FC 0F846D4C0000            	je L_error_fvar_undefined
  1710 00000A02 803804                  	cmp byte [rax], T_closure
  1711 00000A05 0F85E84C0000            	jne L_error_non_closure
  1712 00000A0B FF7001                  	push SOB_CLOSURE_ENV(rax)
  1713 00000A0E FF5009                  	call SOB_CLOSURE_CODE(rax)
  1714 00000A11 50                      	push rax
  1715 00000A12 6A01                    	push 1	; arg count
  1716 00000A14 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  1717 00000A1C 803805                  	cmp byte [rax], T_undefined
  1718 00000A1F 0F844A4C0000            	je L_error_fvar_undefined
  1719 00000A25 803804                  	cmp byte [rax], T_closure
  1720 00000A28 0F85C54C0000            	jne L_error_non_closure
  1721 00000A2E FF7001                  	push SOB_CLOSURE_ENV(rax)
  1722 00000A31 FF7508                  	push qword [rbp + 8 * 1]
  1723                                   ; old ret addr
  1724 00000A34 FF7500                  	push qword [rbp]
  1725                                   ; restore the old rbp
  1726 00000A37 BB01000000              	mov rbx, 1
  1727 00000A3C 4883C303                	add rbx, 3
  1728 00000A40 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1729 00000A44 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1730 00000A49 4C8D4DF8                	lea r9, [rbp - 8]
  1731 00000A4D B905000000              	mov rcx, 5
  1732                                  .L_tc_recycle_frame_loop_0008:
  1733 00000A52 4883F900                	cmp rcx, 0
  1734 00000A56 7413                    	je .L_tc_recycle_frame_done_0008
  1735 00000A58 4D8B11                  	mov r10, qword [r9]
  1736 00000A5B 4D8910                  	mov qword [r8], r10
  1737 00000A5E 4983E808                	sub r8, 8
  1738 00000A62 4983E908                	sub r9, 8
  1739 00000A66 48FFC9                  	dec rcx
  1740 00000A69 EBE7                    	jmp .L_tc_recycle_frame_loop_0008
  1741                                  .L_tc_recycle_frame_done_0008:
  1742 00000A6B 498D6008                	lea rsp, [r8 + 8]
  1743 00000A6F 5D                      	pop rbp ; restore the old rbp
  1744 00000A70 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1745 00000A73 C9                      	leave
  1746 00000A74 C21800                  	ret AND_KILL_FRAME(1)
  1747                                  .L_lambda_simple_end_0008:	; new closure is in rax
  1748 00000A77 48890425[5D090000]      	mov qword [free_var_16], rax
  1749 00000A7F 48B8-                   	mov rax, sob_void
  1749 00000A81 [0000000000000000] 
  1750                                  
  1751 00000A89 4889C7                  	mov rdi, rax
  1752 00000A8C E8604F0000              	call print_sexpr_if_not_void
  1753 00000A91 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1754 00000A96 E8014D0000              	call malloc
  1755 00000A9B 50                      	push rax
  1756 00000A9C BF00000000              	mov rdi, 8 * 0	; new rib
  1757 00000AA1 E8F64C0000              	call malloc
  1758 00000AA6 50                      	push rax
  1759 00000AA7 BF08000000              	mov rdi, 8 * 1	; extended env
  1760 00000AAC E8EB4C0000              	call malloc
  1761 00000AB1 488B7D10                	mov rdi, ENV
  1762 00000AB5 BE00000000              	mov rsi, 0
  1763 00000ABA BA01000000              	mov rdx, 1
  1764                                  .L_lambda_simple_env_loop_0009:	; ext_env[i + 1] <-- env[i]
  1765 00000ABF 4883FE00                	cmp rsi, 0
  1766 00000AC3 7410                    	je .L_lambda_simple_env_end_0009
  1767 00000AC5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1768 00000AC9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1769 00000ACD 48FFC6                  	inc rsi
  1770 00000AD0 48FFC2                  	inc rdx
  1771 00000AD3 EBEA                    	jmp .L_lambda_simple_env_loop_0009
  1772                                  .L_lambda_simple_env_end_0009:
  1773 00000AD5 5B                      	pop rbx
  1774 00000AD6 BE00000000              	mov rsi, 0
  1775                                  .L_lambda_simple_params_loop_0009:	; copy params
  1776 00000ADB 4883FE00                	cmp rsi, 0
  1777 00000ADF 740E                    	je .L_lambda_simple_params_end_0009
  1778 00000AE1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1779 00000AE6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1780 00000AEA 48FFC6                  	inc rsi
  1781 00000AED EBEC                    	jmp .L_lambda_simple_params_loop_0009
  1782                                  .L_lambda_simple_params_end_0009:
  1783 00000AEF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1784 00000AF2 4889C3                  	mov rbx, rax
  1785 00000AF5 58                      	pop rax
  1786 00000AF6 C60004                  	mov byte [rax], T_closure
  1787 00000AF9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1788 00000AFD 48C74009[0A0B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0009
  1789 00000B05 E9A4000000              	jmp .L_lambda_simple_end_0009
  1790                                  .L_lambda_simple_code_0009:	; lambda-simple body
  1791 00000B0A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1792 00000B10 740B                    	je .L_lambda_simple_arity_check_ok_0009
  1793 00000B12 FF742410                	push qword [rsp + 8 * 2]
  1794 00000B16 6A01                    	push 1
  1795 00000B18 E9384C0000              	jmp L_error_incorrect_arity_simple
  1796                                  .L_lambda_simple_arity_check_ok_0009:
  1797 00000B1D C8000000                	enter 0, 0
  1798                                  	; preparing a tail-call
  1799                                  	; preparing a non-tail-call
  1800 00000B21 488B4520                	mov rax, PARAM(0)	; param x
  1801 00000B25 50                      	push rax
  1802 00000B26 6A01                    	push 1	; arg count
  1803 00000B28 488B0425[F7080000]      	mov rax, qword [free_var_10]	; free var caar
  1804 00000B30 803805                  	cmp byte [rax], T_undefined
  1805 00000B33 0F84364B0000            	je L_error_fvar_undefined
  1806 00000B39 803804                  	cmp byte [rax], T_closure
  1807 00000B3C 0F85B14B0000            	jne L_error_non_closure
  1808 00000B42 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1809 00000B45 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1810 00000B48 50                      	push rax
  1811 00000B49 6A01                    	push 1	; arg count
  1812 00000B4B 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  1813 00000B53 803805                  	cmp byte [rax], T_undefined
  1814 00000B56 0F84134B0000            	je L_error_fvar_undefined
  1815 00000B5C 803804                  	cmp byte [rax], T_closure
  1816 00000B5F 0F858E4B0000            	jne L_error_non_closure
  1817 00000B65 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1818 00000B68 FF7508                  	push qword [rbp + 8 * 1]
  1819                                   ; old ret addr
  1820 00000B6B FF7500                  	push qword [rbp]
  1821                                   ; restore the old rbp
  1822 00000B6E BB01000000              	mov rbx, 1
  1823 00000B73 4883C303                	add rbx, 3
  1824 00000B77 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1825 00000B7B 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1826 00000B80 4C8D4DF8                	lea r9, [rbp - 8]
  1827 00000B84 B905000000              	mov rcx, 5
  1828                                  .L_tc_recycle_frame_loop_0009:
  1829 00000B89 4883F900                	cmp rcx, 0
  1830 00000B8D 7413                    	je .L_tc_recycle_frame_done_0009
  1831 00000B8F 4D8B11                  	mov r10, qword [r9]
  1832 00000B92 4D8910                  	mov qword [r8], r10
  1833 00000B95 4983E808                	sub r8, 8
  1834 00000B99 4983E908                	sub r9, 8
  1835 00000B9D 48FFC9                  	dec rcx
  1836 00000BA0 EBE7                    	jmp .L_tc_recycle_frame_loop_0009
  1837                                  .L_tc_recycle_frame_done_0009:
  1838 00000BA2 498D6008                	lea rsp, [r8 + 8]
  1839 00000BA6 5D                      	pop rbp ; restore the old rbp
  1840 00000BA7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1841 00000BAA C9                      	leave
  1842 00000BAB C21800                  	ret AND_KILL_FRAME(1)
  1843                                  .L_lambda_simple_end_0009:	; new closure is in rax
  1844 00000BAE 48890425[B2090000]      	mov qword [free_var_21], rax
  1845 00000BB6 48B8-                   	mov rax, sob_void
  1845 00000BB8 [0000000000000000] 
  1846                                  
  1847 00000BC0 4889C7                  	mov rdi, rax
  1848 00000BC3 E8294E0000              	call print_sexpr_if_not_void
  1849 00000BC8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1850 00000BCD E8CA4B0000              	call malloc
  1851 00000BD2 50                      	push rax
  1852 00000BD3 BF00000000              	mov rdi, 8 * 0	; new rib
  1853 00000BD8 E8BF4B0000              	call malloc
  1854 00000BDD 50                      	push rax
  1855 00000BDE BF08000000              	mov rdi, 8 * 1	; extended env
  1856 00000BE3 E8B44B0000              	call malloc
  1857 00000BE8 488B7D10                	mov rdi, ENV
  1858 00000BEC BE00000000              	mov rsi, 0
  1859 00000BF1 BA01000000              	mov rdx, 1
  1860                                  .L_lambda_simple_env_loop_000a:	; ext_env[i + 1] <-- env[i]
  1861 00000BF6 4883FE00                	cmp rsi, 0
  1862 00000BFA 7410                    	je .L_lambda_simple_env_end_000a
  1863 00000BFC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1864 00000C00 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1865 00000C04 48FFC6                  	inc rsi
  1866 00000C07 48FFC2                  	inc rdx
  1867 00000C0A EBEA                    	jmp .L_lambda_simple_env_loop_000a
  1868                                  .L_lambda_simple_env_end_000a:
  1869 00000C0C 5B                      	pop rbx
  1870 00000C0D BE00000000              	mov rsi, 0
  1871                                  .L_lambda_simple_params_loop_000a:	; copy params
  1872 00000C12 4883FE00                	cmp rsi, 0
  1873 00000C16 740E                    	je .L_lambda_simple_params_end_000a
  1874 00000C18 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1875 00000C1D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1876 00000C21 48FFC6                  	inc rsi
  1877 00000C24 EBEC                    	jmp .L_lambda_simple_params_loop_000a
  1878                                  .L_lambda_simple_params_end_000a:
  1879 00000C26 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1880 00000C29 4889C3                  	mov rbx, rax
  1881 00000C2C 58                      	pop rax
  1882 00000C2D C60004                  	mov byte [rax], T_closure
  1883 00000C30 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1884 00000C34 48C74009[410C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000a
  1885 00000C3C E9A4000000              	jmp .L_lambda_simple_end_000a
  1886                                  .L_lambda_simple_code_000a:	; lambda-simple body
  1887 00000C41 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1888 00000C47 740B                    	je .L_lambda_simple_arity_check_ok_000a
  1889 00000C49 FF742410                	push qword [rsp + 8 * 2]
  1890 00000C4D 6A01                    	push 1
  1891 00000C4F E9014B0000              	jmp L_error_incorrect_arity_simple
  1892                                  .L_lambda_simple_arity_check_ok_000a:
  1893 00000C54 C8000000                	enter 0, 0
  1894                                  	; preparing a tail-call
  1895                                  	; preparing a non-tail-call
  1896 00000C58 488B4520                	mov rax, PARAM(0)	; param x
  1897 00000C5C 50                      	push rax
  1898 00000C5D 6A01                    	push 1	; arg count
  1899 00000C5F 488B0425[6E090000]      	mov rax, qword [free_var_17]	; free var cadr
  1900 00000C67 803805                  	cmp byte [rax], T_undefined
  1901 00000C6A 0F84FF490000            	je L_error_fvar_undefined
  1902 00000C70 803804                  	cmp byte [rax], T_closure
  1903 00000C73 0F857A4A0000            	jne L_error_non_closure
  1904 00000C79 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1905 00000C7C FF5009                  	call SOB_CLOSURE_CODE(rax)
  1906 00000C7F 50                      	push rax
  1907 00000C80 6A01                    	push 1	; arg count
  1908 00000C82 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  1909 00000C8A 803805                  	cmp byte [rax], T_undefined
  1910 00000C8D 0F84DC490000            	je L_error_fvar_undefined
  1911 00000C93 803804                  	cmp byte [rax], T_closure
  1912 00000C96 0F85574A0000            	jne L_error_non_closure
  1913 00000C9C FF7001                  	push SOB_CLOSURE_ENV(rax)
  1914 00000C9F FF7508                  	push qword [rbp + 8 * 1]
  1915                                   ; old ret addr
  1916 00000CA2 FF7500                  	push qword [rbp]
  1917                                   ; restore the old rbp
  1918 00000CA5 BB01000000              	mov rbx, 1
  1919 00000CAA 4883C303                	add rbx, 3
  1920 00000CAE 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1921 00000CB2 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1922 00000CB7 4C8D4DF8                	lea r9, [rbp - 8]
  1923 00000CBB B905000000              	mov rcx, 5
  1924                                  .L_tc_recycle_frame_loop_000a:
  1925 00000CC0 4883F900                	cmp rcx, 0
  1926 00000CC4 7413                    	je .L_tc_recycle_frame_done_000a
  1927 00000CC6 4D8B11                  	mov r10, qword [r9]
  1928 00000CC9 4D8910                  	mov qword [r8], r10
  1929 00000CCC 4983E808                	sub r8, 8
  1930 00000CD0 4983E908                	sub r9, 8
  1931 00000CD4 48FFC9                  	dec rcx
  1932 00000CD7 EBE7                    	jmp .L_tc_recycle_frame_loop_000a
  1933                                  .L_tc_recycle_frame_done_000a:
  1934 00000CD9 498D6008                	lea rsp, [r8 + 8]
  1935 00000CDD 5D                      	pop rbp ; restore the old rbp
  1936 00000CDE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1937 00000CE1 C9                      	leave
  1938 00000CE2 C21800                  	ret AND_KILL_FRAME(1)
  1939                                  .L_lambda_simple_end_000a:	; new closure is in rax
  1940 00000CE5 48890425[E5090000]      	mov qword [free_var_24], rax
  1941 00000CED 48B8-                   	mov rax, sob_void
  1941 00000CEF [0000000000000000] 
  1942                                  
  1943 00000CF7 4889C7                  	mov rdi, rax
  1944 00000CFA E8F24C0000              	call print_sexpr_if_not_void
  1945 00000CFF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1946 00000D04 E8934A0000              	call malloc
  1947 00000D09 50                      	push rax
  1948 00000D0A BF00000000              	mov rdi, 8 * 0	; new rib
  1949 00000D0F E8884A0000              	call malloc
  1950 00000D14 50                      	push rax
  1951 00000D15 BF08000000              	mov rdi, 8 * 1	; extended env
  1952 00000D1A E87D4A0000              	call malloc
  1953 00000D1F 488B7D10                	mov rdi, ENV
  1954 00000D23 BE00000000              	mov rsi, 0
  1955 00000D28 BA01000000              	mov rdx, 1
  1956                                  .L_lambda_simple_env_loop_000b:	; ext_env[i + 1] <-- env[i]
  1957 00000D2D 4883FE00                	cmp rsi, 0
  1958 00000D31 7410                    	je .L_lambda_simple_env_end_000b
  1959 00000D33 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1960 00000D37 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1961 00000D3B 48FFC6                  	inc rsi
  1962 00000D3E 48FFC2                  	inc rdx
  1963 00000D41 EBEA                    	jmp .L_lambda_simple_env_loop_000b
  1964                                  .L_lambda_simple_env_end_000b:
  1965 00000D43 5B                      	pop rbx
  1966 00000D44 BE00000000              	mov rsi, 0
  1967                                  .L_lambda_simple_params_loop_000b:	; copy params
  1968 00000D49 4883FE00                	cmp rsi, 0
  1969 00000D4D 740E                    	je .L_lambda_simple_params_end_000b
  1970 00000D4F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1971 00000D54 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1972 00000D58 48FFC6                  	inc rsi
  1973 00000D5B EBEC                    	jmp .L_lambda_simple_params_loop_000b
  1974                                  .L_lambda_simple_params_end_000b:
  1975 00000D5D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1976 00000D60 4889C3                  	mov rbx, rax
  1977 00000D63 58                      	pop rax
  1978 00000D64 C60004                  	mov byte [rax], T_closure
  1979 00000D67 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1980 00000D6B 48C74009[780D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000b
  1981 00000D73 E9A4000000              	jmp .L_lambda_simple_end_000b
  1982                                  .L_lambda_simple_code_000b:	; lambda-simple body
  1983 00000D78 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1984 00000D7E 740B                    	je .L_lambda_simple_arity_check_ok_000b
  1985 00000D80 FF742410                	push qword [rsp + 8 * 2]
  1986 00000D84 6A01                    	push 1
  1987 00000D86 E9CA490000              	jmp L_error_incorrect_arity_simple
  1988                                  .L_lambda_simple_arity_check_ok_000b:
  1989 00000D8B C8000000                	enter 0, 0
  1990                                  	; preparing a tail-call
  1991                                  	; preparing a non-tail-call
  1992 00000D8F 488B4520                	mov rax, PARAM(0)	; param x
  1993 00000D93 50                      	push rax
  1994 00000D94 6A01                    	push 1	; arg count
  1995 00000D96 488B0425[F6090000]      	mov rax, qword [free_var_25]	; free var cdar
  1996 00000D9E 803805                  	cmp byte [rax], T_undefined
  1997 00000DA1 0F84C8480000            	je L_error_fvar_undefined
  1998 00000DA7 803804                  	cmp byte [rax], T_closure
  1999 00000DAA 0F8543490000            	jne L_error_non_closure
  2000 00000DB0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2001 00000DB3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2002 00000DB6 50                      	push rax
  2003 00000DB7 6A01                    	push 1	; arg count
  2004 00000DB9 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  2005 00000DC1 803805                  	cmp byte [rax], T_undefined
  2006 00000DC4 0F84A5480000            	je L_error_fvar_undefined
  2007 00000DCA 803804                  	cmp byte [rax], T_closure
  2008 00000DCD 0F8520490000            	jne L_error_non_closure
  2009 00000DD3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2010 00000DD6 FF7508                  	push qword [rbp + 8 * 1]
  2011                                   ; old ret addr
  2012 00000DD9 FF7500                  	push qword [rbp]
  2013                                   ; restore the old rbp
  2014 00000DDC BB01000000              	mov rbx, 1
  2015 00000DE1 4883C303                	add rbx, 3
  2016 00000DE5 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2017 00000DE9 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2018 00000DEE 4C8D4DF8                	lea r9, [rbp - 8]
  2019 00000DF2 B905000000              	mov rcx, 5
  2020                                  .L_tc_recycle_frame_loop_000b:
  2021 00000DF7 4883F900                	cmp rcx, 0
  2022 00000DFB 7413                    	je .L_tc_recycle_frame_done_000b
  2023 00000DFD 4D8B11                  	mov r10, qword [r9]
  2024 00000E00 4D8910                  	mov qword [r8], r10
  2025 00000E03 4983E808                	sub r8, 8
  2026 00000E07 4983E908                	sub r9, 8
  2027 00000E0B 48FFC9                  	dec rcx
  2028 00000E0E EBE7                    	jmp .L_tc_recycle_frame_loop_000b
  2029                                  .L_tc_recycle_frame_done_000b:
  2030 00000E10 498D6008                	lea rsp, [r8 + 8]
  2031 00000E14 5D                      	pop rbp ; restore the old rbp
  2032 00000E15 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2033 00000E18 C9                      	leave
  2034 00000E19 C21800                  	ret AND_KILL_FRAME(1)
  2035                                  .L_lambda_simple_end_000b:	; new closure is in rax
  2036 00000E1C 48890425[290A0000]      	mov qword [free_var_28], rax
  2037 00000E24 48B8-                   	mov rax, sob_void
  2037 00000E26 [0000000000000000] 
  2038                                  
  2039 00000E2E 4889C7                  	mov rdi, rax
  2040 00000E31 E8BB4B0000              	call print_sexpr_if_not_void
  2041 00000E36 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2042 00000E3B E85C490000              	call malloc
  2043 00000E40 50                      	push rax
  2044 00000E41 BF00000000              	mov rdi, 8 * 0	; new rib
  2045 00000E46 E851490000              	call malloc
  2046 00000E4B 50                      	push rax
  2047 00000E4C BF08000000              	mov rdi, 8 * 1	; extended env
  2048 00000E51 E846490000              	call malloc
  2049 00000E56 488B7D10                	mov rdi, ENV
  2050 00000E5A BE00000000              	mov rsi, 0
  2051 00000E5F BA01000000              	mov rdx, 1
  2052                                  .L_lambda_simple_env_loop_000c:	; ext_env[i + 1] <-- env[i]
  2053 00000E64 4883FE00                	cmp rsi, 0
  2054 00000E68 7410                    	je .L_lambda_simple_env_end_000c
  2055 00000E6A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2056 00000E6E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2057 00000E72 48FFC6                  	inc rsi
  2058 00000E75 48FFC2                  	inc rdx
  2059 00000E78 EBEA                    	jmp .L_lambda_simple_env_loop_000c
  2060                                  .L_lambda_simple_env_end_000c:
  2061 00000E7A 5B                      	pop rbx
  2062 00000E7B BE00000000              	mov rsi, 0
  2063                                  .L_lambda_simple_params_loop_000c:	; copy params
  2064 00000E80 4883FE00                	cmp rsi, 0
  2065 00000E84 740E                    	je .L_lambda_simple_params_end_000c
  2066 00000E86 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2067 00000E8B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2068 00000E8F 48FFC6                  	inc rsi
  2069 00000E92 EBEC                    	jmp .L_lambda_simple_params_loop_000c
  2070                                  .L_lambda_simple_params_end_000c:
  2071 00000E94 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2072 00000E97 4889C3                  	mov rbx, rax
  2073 00000E9A 58                      	pop rax
  2074 00000E9B C60004                  	mov byte [rax], T_closure
  2075 00000E9E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2076 00000EA2 48C74009[AF0E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000c
  2077 00000EAA E9A4000000              	jmp .L_lambda_simple_end_000c
  2078                                  .L_lambda_simple_code_000c:	; lambda-simple body
  2079 00000EAF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2080 00000EB5 740B                    	je .L_lambda_simple_arity_check_ok_000c
  2081 00000EB7 FF742410                	push qword [rsp + 8 * 2]
  2082 00000EBB 6A01                    	push 1
  2083 00000EBD E993480000              	jmp L_error_incorrect_arity_simple
  2084                                  .L_lambda_simple_arity_check_ok_000c:
  2085 00000EC2 C8000000                	enter 0, 0
  2086                                  	; preparing a tail-call
  2087                                  	; preparing a non-tail-call
  2088 00000EC6 488B4520                	mov rax, PARAM(0)	; param x
  2089 00000ECA 50                      	push rax
  2090 00000ECB 6A01                    	push 1	; arg count
  2091 00000ECD 488B0425[6D0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  2092 00000ED5 803805                  	cmp byte [rax], T_undefined
  2093 00000ED8 0F8491470000            	je L_error_fvar_undefined
  2094 00000EDE 803804                  	cmp byte [rax], T_closure
  2095 00000EE1 0F850C480000            	jne L_error_non_closure
  2096 00000EE7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2097 00000EEA FF5009                  	call SOB_CLOSURE_CODE(rax)
  2098 00000EED 50                      	push rax
  2099 00000EEE 6A01                    	push 1	; arg count
  2100 00000EF0 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  2101 00000EF8 803805                  	cmp byte [rax], T_undefined
  2102 00000EFB 0F846E470000            	je L_error_fvar_undefined
  2103 00000F01 803804                  	cmp byte [rax], T_closure
  2104 00000F04 0F85E9470000            	jne L_error_non_closure
  2105 00000F0A FF7001                  	push SOB_CLOSURE_ENV(rax)
  2106 00000F0D FF7508                  	push qword [rbp + 8 * 1]
  2107                                   ; old ret addr
  2108 00000F10 FF7500                  	push qword [rbp]
  2109                                   ; restore the old rbp
  2110 00000F13 BB01000000              	mov rbx, 1
  2111 00000F18 4883C303                	add rbx, 3
  2112 00000F1C 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2113 00000F20 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2114 00000F25 4C8D4DF8                	lea r9, [rbp - 8]
  2115 00000F29 B905000000              	mov rcx, 5
  2116                                  .L_tc_recycle_frame_loop_000c:
  2117 00000F2E 4883F900                	cmp rcx, 0
  2118 00000F32 7413                    	je .L_tc_recycle_frame_done_000c
  2119 00000F34 4D8B11                  	mov r10, qword [r9]
  2120 00000F37 4D8910                  	mov qword [r8], r10
  2121 00000F3A 4983E808                	sub r8, 8
  2122 00000F3E 4983E908                	sub r9, 8
  2123 00000F42 48FFC9                  	dec rcx
  2124 00000F45 EBE7                    	jmp .L_tc_recycle_frame_loop_000c
  2125                                  .L_tc_recycle_frame_done_000c:
  2126 00000F47 498D6008                	lea rsp, [r8 + 8]
  2127 00000F4B 5D                      	pop rbp ; restore the old rbp
  2128 00000F4C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2129 00000F4F C9                      	leave
  2130 00000F50 C21800                  	ret AND_KILL_FRAME(1)
  2131                                  .L_lambda_simple_end_000c:	; new closure is in rax
  2132 00000F53 48890425[5C0A0000]      	mov qword [free_var_31], rax
  2133 00000F5B 48B8-                   	mov rax, sob_void
  2133 00000F5D [0000000000000000] 
  2134                                  
  2135 00000F65 4889C7                  	mov rdi, rax
  2136 00000F68 E8844A0000              	call print_sexpr_if_not_void
  2137 00000F6D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2138 00000F72 E825480000              	call malloc
  2139 00000F77 50                      	push rax
  2140 00000F78 BF00000000              	mov rdi, 8 * 0	; new rib
  2141 00000F7D E81A480000              	call malloc
  2142 00000F82 50                      	push rax
  2143 00000F83 BF08000000              	mov rdi, 8 * 1	; extended env
  2144 00000F88 E80F480000              	call malloc
  2145 00000F8D 488B7D10                	mov rdi, ENV
  2146 00000F91 BE00000000              	mov rsi, 0
  2147 00000F96 BA01000000              	mov rdx, 1
  2148                                  .L_lambda_simple_env_loop_000d:	; ext_env[i + 1] <-- env[i]
  2149 00000F9B 4883FE00                	cmp rsi, 0
  2150 00000F9F 7410                    	je .L_lambda_simple_env_end_000d
  2151 00000FA1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2152 00000FA5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2153 00000FA9 48FFC6                  	inc rsi
  2154 00000FAC 48FFC2                  	inc rdx
  2155 00000FAF EBEA                    	jmp .L_lambda_simple_env_loop_000d
  2156                                  .L_lambda_simple_env_end_000d:
  2157 00000FB1 5B                      	pop rbx
  2158 00000FB2 BE00000000              	mov rsi, 0
  2159                                  .L_lambda_simple_params_loop_000d:	; copy params
  2160 00000FB7 4883FE00                	cmp rsi, 0
  2161 00000FBB 740E                    	je .L_lambda_simple_params_end_000d
  2162 00000FBD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2163 00000FC2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2164 00000FC6 48FFC6                  	inc rsi
  2165 00000FC9 EBEC                    	jmp .L_lambda_simple_params_loop_000d
  2166                                  .L_lambda_simple_params_end_000d:
  2167 00000FCB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2168 00000FCE 4889C3                  	mov rbx, rax
  2169 00000FD1 58                      	pop rax
  2170 00000FD2 C60004                  	mov byte [rax], T_closure
  2171 00000FD5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2172 00000FD9 48C74009[E60F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000d
  2173 00000FE1 E9A4000000              	jmp .L_lambda_simple_end_000d
  2174                                  .L_lambda_simple_code_000d:	; lambda-simple body
  2175 00000FE6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2176 00000FEC 740B                    	je .L_lambda_simple_arity_check_ok_000d
  2177 00000FEE FF742410                	push qword [rsp + 8 * 2]
  2178 00000FF2 6A01                    	push 1
  2179 00000FF4 E95C470000              	jmp L_error_incorrect_arity_simple
  2180                                  .L_lambda_simple_arity_check_ok_000d:
  2181 00000FF9 C8000000                	enter 0, 0
  2182                                  	; preparing a tail-call
  2183                                  	; preparing a non-tail-call
  2184 00000FFD 488B4520                	mov rax, PARAM(0)	; param x
  2185 00001001 50                      	push rax
  2186 00001002 6A01                    	push 1	; arg count
  2187 00001004 488B0425[F7080000]      	mov rax, qword [free_var_10]	; free var caar
  2188 0000100C 803805                  	cmp byte [rax], T_undefined
  2189 0000100F 0F845A460000            	je L_error_fvar_undefined
  2190 00001015 803804                  	cmp byte [rax], T_closure
  2191 00001018 0F85D5460000            	jne L_error_non_closure
  2192 0000101E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2193 00001021 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2194 00001024 50                      	push rax
  2195 00001025 6A01                    	push 1	; arg count
  2196 00001027 488B0425[F7080000]      	mov rax, qword [free_var_10]	; free var caar
  2197 0000102F 803805                  	cmp byte [rax], T_undefined
  2198 00001032 0F8437460000            	je L_error_fvar_undefined
  2199 00001038 803804                  	cmp byte [rax], T_closure
  2200 0000103B 0F85B2460000            	jne L_error_non_closure
  2201 00001041 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2202 00001044 FF7508                  	push qword [rbp + 8 * 1]
  2203                                   ; old ret addr
  2204 00001047 FF7500                  	push qword [rbp]
  2205                                   ; restore the old rbp
  2206 0000104A BB01000000              	mov rbx, 1
  2207 0000104F 4883C303                	add rbx, 3
  2208 00001053 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2209 00001057 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2210 0000105C 4C8D4DF8                	lea r9, [rbp - 8]
  2211 00001060 B905000000              	mov rcx, 5
  2212                                  .L_tc_recycle_frame_loop_000d:
  2213 00001065 4883F900                	cmp rcx, 0
  2214 00001069 7413                    	je .L_tc_recycle_frame_done_000d
  2215 0000106B 4D8B11                  	mov r10, qword [r9]
  2216 0000106E 4D8910                  	mov qword [r8], r10
  2217 00001071 4983E808                	sub r8, 8
  2218 00001075 4983E908                	sub r9, 8
  2219 00001079 48FFC9                  	dec rcx
  2220 0000107C EBE7                    	jmp .L_tc_recycle_frame_loop_000d
  2221                                  .L_tc_recycle_frame_done_000d:
  2222 0000107E 498D6008                	lea rsp, [r8 + 8]
  2223 00001082 5D                      	pop rbp ; restore the old rbp
  2224 00001083 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2225 00001086 C9                      	leave
  2226 00001087 C21800                  	ret AND_KILL_FRAME(1)
  2227                                  .L_lambda_simple_end_000d:	; new closure is in rax
  2228 0000108A 48890425[91080000]      	mov qword [free_var_4], rax
  2229 00001092 48B8-                   	mov rax, sob_void
  2229 00001094 [0000000000000000] 
  2230                                  
  2231 0000109C 4889C7                  	mov rdi, rax
  2232 0000109F E84D490000              	call print_sexpr_if_not_void
  2233 000010A4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2234 000010A9 E8EE460000              	call malloc
  2235 000010AE 50                      	push rax
  2236 000010AF BF00000000              	mov rdi, 8 * 0	; new rib
  2237 000010B4 E8E3460000              	call malloc
  2238 000010B9 50                      	push rax
  2239 000010BA BF08000000              	mov rdi, 8 * 1	; extended env
  2240 000010BF E8D8460000              	call malloc
  2241 000010C4 488B7D10                	mov rdi, ENV
  2242 000010C8 BE00000000              	mov rsi, 0
  2243 000010CD BA01000000              	mov rdx, 1
  2244                                  .L_lambda_simple_env_loop_000e:	; ext_env[i + 1] <-- env[i]
  2245 000010D2 4883FE00                	cmp rsi, 0
  2246 000010D6 7410                    	je .L_lambda_simple_env_end_000e
  2247 000010D8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2248 000010DC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2249 000010E0 48FFC6                  	inc rsi
  2250 000010E3 48FFC2                  	inc rdx
  2251 000010E6 EBEA                    	jmp .L_lambda_simple_env_loop_000e
  2252                                  .L_lambda_simple_env_end_000e:
  2253 000010E8 5B                      	pop rbx
  2254 000010E9 BE00000000              	mov rsi, 0
  2255                                  .L_lambda_simple_params_loop_000e:	; copy params
  2256 000010EE 4883FE00                	cmp rsi, 0
  2257 000010F2 740E                    	je .L_lambda_simple_params_end_000e
  2258 000010F4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2259 000010F9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2260 000010FD 48FFC6                  	inc rsi
  2261 00001100 EBEC                    	jmp .L_lambda_simple_params_loop_000e
  2262                                  .L_lambda_simple_params_end_000e:
  2263 00001102 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2264 00001105 4889C3                  	mov rbx, rax
  2265 00001108 58                      	pop rax
  2266 00001109 C60004                  	mov byte [rax], T_closure
  2267 0000110C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2268 00001110 48C74009[1D110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000e
  2269 00001118 E9A4000000              	jmp .L_lambda_simple_end_000e
  2270                                  .L_lambda_simple_code_000e:	; lambda-simple body
  2271 0000111D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2272 00001123 740B                    	je .L_lambda_simple_arity_check_ok_000e
  2273 00001125 FF742410                	push qword [rsp + 8 * 2]
  2274 00001129 6A01                    	push 1
  2275 0000112B E925460000              	jmp L_error_incorrect_arity_simple
  2276                                  .L_lambda_simple_arity_check_ok_000e:
  2277 00001130 C8000000                	enter 0, 0
  2278                                  	; preparing a tail-call
  2279                                  	; preparing a non-tail-call
  2280 00001134 488B4520                	mov rax, PARAM(0)	; param x
  2281 00001138 50                      	push rax
  2282 00001139 6A01                    	push 1	; arg count
  2283 0000113B 488B0425[6E090000]      	mov rax, qword [free_var_17]	; free var cadr
  2284 00001143 803805                  	cmp byte [rax], T_undefined
  2285 00001146 0F8423450000            	je L_error_fvar_undefined
  2286 0000114C 803804                  	cmp byte [rax], T_closure
  2287 0000114F 0F859E450000            	jne L_error_non_closure
  2288 00001155 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2289 00001158 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2290 0000115B 50                      	push rax
  2291 0000115C 6A01                    	push 1	; arg count
  2292 0000115E 488B0425[F7080000]      	mov rax, qword [free_var_10]	; free var caar
  2293 00001166 803805                  	cmp byte [rax], T_undefined
  2294 00001169 0F8400450000            	je L_error_fvar_undefined
  2295 0000116F 803804                  	cmp byte [rax], T_closure
  2296 00001172 0F857B450000            	jne L_error_non_closure
  2297 00001178 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2298 0000117B FF7508                  	push qword [rbp + 8 * 1]
  2299                                   ; old ret addr
  2300 0000117E FF7500                  	push qword [rbp]
  2301                                   ; restore the old rbp
  2302 00001181 BB01000000              	mov rbx, 1
  2303 00001186 4883C303                	add rbx, 3
  2304 0000118A 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2305 0000118E 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2306 00001193 4C8D4DF8                	lea r9, [rbp - 8]
  2307 00001197 B905000000              	mov rcx, 5
  2308                                  .L_tc_recycle_frame_loop_000e:
  2309 0000119C 4883F900                	cmp rcx, 0
  2310 000011A0 7413                    	je .L_tc_recycle_frame_done_000e
  2311 000011A2 4D8B11                  	mov r10, qword [r9]
  2312 000011A5 4D8910                  	mov qword [r8], r10
  2313 000011A8 4983E808                	sub r8, 8
  2314 000011AC 4983E908                	sub r9, 8
  2315 000011B0 48FFC9                  	dec rcx
  2316 000011B3 EBE7                    	jmp .L_tc_recycle_frame_loop_000e
  2317                                  .L_tc_recycle_frame_done_000e:
  2318 000011B5 498D6008                	lea rsp, [r8 + 8]
  2319 000011B9 5D                      	pop rbp ; restore the old rbp
  2320 000011BA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2321 000011BD C9                      	leave
  2322 000011BE C21800                  	ret AND_KILL_FRAME(1)
  2323                                  .L_lambda_simple_end_000e:	; new closure is in rax
  2324 000011C1 48890425[A2080000]      	mov qword [free_var_5], rax
  2325 000011C9 48B8-                   	mov rax, sob_void
  2325 000011CB [0000000000000000] 
  2326                                  
  2327 000011D3 4889C7                  	mov rdi, rax
  2328 000011D6 E816480000              	call print_sexpr_if_not_void
  2329 000011DB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2330 000011E0 E8B7450000              	call malloc
  2331 000011E5 50                      	push rax
  2332 000011E6 BF00000000              	mov rdi, 8 * 0	; new rib
  2333 000011EB E8AC450000              	call malloc
  2334 000011F0 50                      	push rax
  2335 000011F1 BF08000000              	mov rdi, 8 * 1	; extended env
  2336 000011F6 E8A1450000              	call malloc
  2337 000011FB 488B7D10                	mov rdi, ENV
  2338 000011FF BE00000000              	mov rsi, 0
  2339 00001204 BA01000000              	mov rdx, 1
  2340                                  .L_lambda_simple_env_loop_000f:	; ext_env[i + 1] <-- env[i]
  2341 00001209 4883FE00                	cmp rsi, 0
  2342 0000120D 7410                    	je .L_lambda_simple_env_end_000f
  2343 0000120F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2344 00001213 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2345 00001217 48FFC6                  	inc rsi
  2346 0000121A 48FFC2                  	inc rdx
  2347 0000121D EBEA                    	jmp .L_lambda_simple_env_loop_000f
  2348                                  .L_lambda_simple_env_end_000f:
  2349 0000121F 5B                      	pop rbx
  2350 00001220 BE00000000              	mov rsi, 0
  2351                                  .L_lambda_simple_params_loop_000f:	; copy params
  2352 00001225 4883FE00                	cmp rsi, 0
  2353 00001229 740E                    	je .L_lambda_simple_params_end_000f
  2354 0000122B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2355 00001230 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2356 00001234 48FFC6                  	inc rsi
  2357 00001237 EBEC                    	jmp .L_lambda_simple_params_loop_000f
  2358                                  .L_lambda_simple_params_end_000f:
  2359 00001239 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2360 0000123C 4889C3                  	mov rbx, rax
  2361 0000123F 58                      	pop rax
  2362 00001240 C60004                  	mov byte [rax], T_closure
  2363 00001243 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2364 00001247 48C74009[54120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000f
  2365 0000124F E9A4000000              	jmp .L_lambda_simple_end_000f
  2366                                  .L_lambda_simple_code_000f:	; lambda-simple body
  2367 00001254 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2368 0000125A 740B                    	je .L_lambda_simple_arity_check_ok_000f
  2369 0000125C FF742410                	push qword [rsp + 8 * 2]
  2370 00001260 6A01                    	push 1
  2371 00001262 E9EE440000              	jmp L_error_incorrect_arity_simple
  2372                                  .L_lambda_simple_arity_check_ok_000f:
  2373 00001267 C8000000                	enter 0, 0
  2374                                  	; preparing a tail-call
  2375                                  	; preparing a non-tail-call
  2376 0000126B 488B4520                	mov rax, PARAM(0)	; param x
  2377 0000126F 50                      	push rax
  2378 00001270 6A01                    	push 1	; arg count
  2379 00001272 488B0425[F6090000]      	mov rax, qword [free_var_25]	; free var cdar
  2380 0000127A 803805                  	cmp byte [rax], T_undefined
  2381 0000127D 0F84EC430000            	je L_error_fvar_undefined
  2382 00001283 803804                  	cmp byte [rax], T_closure
  2383 00001286 0F8567440000            	jne L_error_non_closure
  2384 0000128C FF7001                  	push SOB_CLOSURE_ENV(rax)
  2385 0000128F FF5009                  	call SOB_CLOSURE_CODE(rax)
  2386 00001292 50                      	push rax
  2387 00001293 6A01                    	push 1	; arg count
  2388 00001295 488B0425[F7080000]      	mov rax, qword [free_var_10]	; free var caar
  2389 0000129D 803805                  	cmp byte [rax], T_undefined
  2390 000012A0 0F84C9430000            	je L_error_fvar_undefined
  2391 000012A6 803804                  	cmp byte [rax], T_closure
  2392 000012A9 0F8544440000            	jne L_error_non_closure
  2393 000012AF FF7001                  	push SOB_CLOSURE_ENV(rax)
  2394 000012B2 FF7508                  	push qword [rbp + 8 * 1]
  2395                                   ; old ret addr
  2396 000012B5 FF7500                  	push qword [rbp]
  2397                                   ; restore the old rbp
  2398 000012B8 BB01000000              	mov rbx, 1
  2399 000012BD 4883C303                	add rbx, 3
  2400 000012C1 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2401 000012C5 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2402 000012CA 4C8D4DF8                	lea r9, [rbp - 8]
  2403 000012CE B905000000              	mov rcx, 5
  2404                                  .L_tc_recycle_frame_loop_000f:
  2405 000012D3 4883F900                	cmp rcx, 0
  2406 000012D7 7413                    	je .L_tc_recycle_frame_done_000f
  2407 000012D9 4D8B11                  	mov r10, qword [r9]
  2408 000012DC 4D8910                  	mov qword [r8], r10
  2409 000012DF 4983E808                	sub r8, 8
  2410 000012E3 4983E908                	sub r9, 8
  2411 000012E7 48FFC9                  	dec rcx
  2412 000012EA EBE7                    	jmp .L_tc_recycle_frame_loop_000f
  2413                                  .L_tc_recycle_frame_done_000f:
  2414 000012EC 498D6008                	lea rsp, [r8 + 8]
  2415 000012F0 5D                      	pop rbp ; restore the old rbp
  2416 000012F1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2417 000012F4 C9                      	leave
  2418 000012F5 C21800                  	ret AND_KILL_FRAME(1)
  2419                                  .L_lambda_simple_end_000f:	; new closure is in rax
  2420 000012F8 48890425[C4080000]      	mov qword [free_var_7], rax
  2421 00001300 48B8-                   	mov rax, sob_void
  2421 00001302 [0000000000000000] 
  2422                                  
  2423 0000130A 4889C7                  	mov rdi, rax
  2424 0000130D E8DF460000              	call print_sexpr_if_not_void
  2425 00001312 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2426 00001317 E880440000              	call malloc
  2427 0000131C 50                      	push rax
  2428 0000131D BF00000000              	mov rdi, 8 * 0	; new rib
  2429 00001322 E875440000              	call malloc
  2430 00001327 50                      	push rax
  2431 00001328 BF08000000              	mov rdi, 8 * 1	; extended env
  2432 0000132D E86A440000              	call malloc
  2433 00001332 488B7D10                	mov rdi, ENV
  2434 00001336 BE00000000              	mov rsi, 0
  2435 0000133B BA01000000              	mov rdx, 1
  2436                                  .L_lambda_simple_env_loop_0010:	; ext_env[i + 1] <-- env[i]
  2437 00001340 4883FE00                	cmp rsi, 0
  2438 00001344 7410                    	je .L_lambda_simple_env_end_0010
  2439 00001346 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2440 0000134A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2441 0000134E 48FFC6                  	inc rsi
  2442 00001351 48FFC2                  	inc rdx
  2443 00001354 EBEA                    	jmp .L_lambda_simple_env_loop_0010
  2444                                  .L_lambda_simple_env_end_0010:
  2445 00001356 5B                      	pop rbx
  2446 00001357 BE00000000              	mov rsi, 0
  2447                                  .L_lambda_simple_params_loop_0010:	; copy params
  2448 0000135C 4883FE00                	cmp rsi, 0
  2449 00001360 740E                    	je .L_lambda_simple_params_end_0010
  2450 00001362 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2451 00001367 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2452 0000136B 48FFC6                  	inc rsi
  2453 0000136E EBEC                    	jmp .L_lambda_simple_params_loop_0010
  2454                                  .L_lambda_simple_params_end_0010:
  2455 00001370 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2456 00001373 4889C3                  	mov rbx, rax
  2457 00001376 58                      	pop rax
  2458 00001377 C60004                  	mov byte [rax], T_closure
  2459 0000137A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2460 0000137E 48C74009[8B130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0010
  2461 00001386 E9A4000000              	jmp .L_lambda_simple_end_0010
  2462                                  .L_lambda_simple_code_0010:	; lambda-simple body
  2463 0000138B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2464 00001391 740B                    	je .L_lambda_simple_arity_check_ok_0010
  2465 00001393 FF742410                	push qword [rsp + 8 * 2]
  2466 00001397 6A01                    	push 1
  2467 00001399 E9B7430000              	jmp L_error_incorrect_arity_simple
  2468                                  .L_lambda_simple_arity_check_ok_0010:
  2469 0000139E C8000000                	enter 0, 0
  2470                                  	; preparing a tail-call
  2471                                  	; preparing a non-tail-call
  2472 000013A2 488B4520                	mov rax, PARAM(0)	; param x
  2473 000013A6 50                      	push rax
  2474 000013A7 6A01                    	push 1	; arg count
  2475 000013A9 488B0425[6D0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  2476 000013B1 803805                  	cmp byte [rax], T_undefined
  2477 000013B4 0F84B5420000            	je L_error_fvar_undefined
  2478 000013BA 803804                  	cmp byte [rax], T_closure
  2479 000013BD 0F8530430000            	jne L_error_non_closure
  2480 000013C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2481 000013C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2482 000013C9 50                      	push rax
  2483 000013CA 6A01                    	push 1	; arg count
  2484 000013CC 488B0425[F7080000]      	mov rax, qword [free_var_10]	; free var caar
  2485 000013D4 803805                  	cmp byte [rax], T_undefined
  2486 000013D7 0F8492420000            	je L_error_fvar_undefined
  2487 000013DD 803804                  	cmp byte [rax], T_closure
  2488 000013E0 0F850D430000            	jne L_error_non_closure
  2489 000013E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2490 000013E9 FF7508                  	push qword [rbp + 8 * 1]
  2491                                   ; old ret addr
  2492 000013EC FF7500                  	push qword [rbp]
  2493                                   ; restore the old rbp
  2494 000013EF BB01000000              	mov rbx, 1
  2495 000013F4 4883C303                	add rbx, 3
  2496 000013F8 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2497 000013FC 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2498 00001401 4C8D4DF8                	lea r9, [rbp - 8]
  2499 00001405 B905000000              	mov rcx, 5
  2500                                  .L_tc_recycle_frame_loop_0010:
  2501 0000140A 4883F900                	cmp rcx, 0
  2502 0000140E 7413                    	je .L_tc_recycle_frame_done_0010
  2503 00001410 4D8B11                  	mov r10, qword [r9]
  2504 00001413 4D8910                  	mov qword [r8], r10
  2505 00001416 4983E808                	sub r8, 8
  2506 0000141A 4983E908                	sub r9, 8
  2507 0000141E 48FFC9                  	dec rcx
  2508 00001421 EBE7                    	jmp .L_tc_recycle_frame_loop_0010
  2509                                  .L_tc_recycle_frame_done_0010:
  2510 00001423 498D6008                	lea rsp, [r8 + 8]
  2511 00001427 5D                      	pop rbp ; restore the old rbp
  2512 00001428 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2513 0000142B C9                      	leave
  2514 0000142C C21800                  	ret AND_KILL_FRAME(1)
  2515                                  .L_lambda_simple_end_0010:	; new closure is in rax
  2516 0000142F 48890425[D5080000]      	mov qword [free_var_8], rax
  2517 00001437 48B8-                   	mov rax, sob_void
  2517 00001439 [0000000000000000] 
  2518                                  
  2519 00001441 4889C7                  	mov rdi, rax
  2520 00001444 E8A8450000              	call print_sexpr_if_not_void
  2521 00001449 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2522 0000144E E849430000              	call malloc
  2523 00001453 50                      	push rax
  2524 00001454 BF00000000              	mov rdi, 8 * 0	; new rib
  2525 00001459 E83E430000              	call malloc
  2526 0000145E 50                      	push rax
  2527 0000145F BF08000000              	mov rdi, 8 * 1	; extended env
  2528 00001464 E833430000              	call malloc
  2529 00001469 488B7D10                	mov rdi, ENV
  2530 0000146D BE00000000              	mov rsi, 0
  2531 00001472 BA01000000              	mov rdx, 1
  2532                                  .L_lambda_simple_env_loop_0011:	; ext_env[i + 1] <-- env[i]
  2533 00001477 4883FE00                	cmp rsi, 0
  2534 0000147B 7410                    	je .L_lambda_simple_env_end_0011
  2535 0000147D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2536 00001481 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2537 00001485 48FFC6                  	inc rsi
  2538 00001488 48FFC2                  	inc rdx
  2539 0000148B EBEA                    	jmp .L_lambda_simple_env_loop_0011
  2540                                  .L_lambda_simple_env_end_0011:
  2541 0000148D 5B                      	pop rbx
  2542 0000148E BE00000000              	mov rsi, 0
  2543                                  .L_lambda_simple_params_loop_0011:	; copy params
  2544 00001493 4883FE00                	cmp rsi, 0
  2545 00001497 740E                    	je .L_lambda_simple_params_end_0011
  2546 00001499 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2547 0000149E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2548 000014A2 48FFC6                  	inc rsi
  2549 000014A5 EBEC                    	jmp .L_lambda_simple_params_loop_0011
  2550                                  .L_lambda_simple_params_end_0011:
  2551 000014A7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2552 000014AA 4889C3                  	mov rbx, rax
  2553 000014AD 58                      	pop rax
  2554 000014AE C60004                  	mov byte [rax], T_closure
  2555 000014B1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2556 000014B5 48C74009[C2140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0011
  2557 000014BD E9A4000000              	jmp .L_lambda_simple_end_0011
  2558                                  .L_lambda_simple_code_0011:	; lambda-simple body
  2559 000014C2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2560 000014C8 740B                    	je .L_lambda_simple_arity_check_ok_0011
  2561 000014CA FF742410                	push qword [rsp + 8 * 2]
  2562 000014CE 6A01                    	push 1
  2563 000014D0 E980420000              	jmp L_error_incorrect_arity_simple
  2564                                  .L_lambda_simple_arity_check_ok_0011:
  2565 000014D5 C8000000                	enter 0, 0
  2566                                  	; preparing a tail-call
  2567                                  	; preparing a non-tail-call
  2568 000014D9 488B4520                	mov rax, PARAM(0)	; param x
  2569 000014DD 50                      	push rax
  2570 000014DE 6A01                    	push 1	; arg count
  2571 000014E0 488B0425[F7080000]      	mov rax, qword [free_var_10]	; free var caar
  2572 000014E8 803805                  	cmp byte [rax], T_undefined
  2573 000014EB 0F847E410000            	je L_error_fvar_undefined
  2574 000014F1 803804                  	cmp byte [rax], T_closure
  2575 000014F4 0F85F9410000            	jne L_error_non_closure
  2576 000014FA FF7001                  	push SOB_CLOSURE_ENV(rax)
  2577 000014FD FF5009                  	call SOB_CLOSURE_CODE(rax)
  2578 00001500 50                      	push rax
  2579 00001501 6A01                    	push 1	; arg count
  2580 00001503 488B0425[6E090000]      	mov rax, qword [free_var_17]	; free var cadr
  2581 0000150B 803805                  	cmp byte [rax], T_undefined
  2582 0000150E 0F845B410000            	je L_error_fvar_undefined
  2583 00001514 803804                  	cmp byte [rax], T_closure
  2584 00001517 0F85D6410000            	jne L_error_non_closure
  2585 0000151D FF7001                  	push SOB_CLOSURE_ENV(rax)
  2586 00001520 FF7508                  	push qword [rbp + 8 * 1]
  2587                                   ; old ret addr
  2588 00001523 FF7500                  	push qword [rbp]
  2589                                   ; restore the old rbp
  2590 00001526 BB01000000              	mov rbx, 1
  2591 0000152B 4883C303                	add rbx, 3
  2592 0000152F 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2593 00001533 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2594 00001538 4C8D4DF8                	lea r9, [rbp - 8]
  2595 0000153C B905000000              	mov rcx, 5
  2596                                  .L_tc_recycle_frame_loop_0011:
  2597 00001541 4883F900                	cmp rcx, 0
  2598 00001545 7413                    	je .L_tc_recycle_frame_done_0011
  2599 00001547 4D8B11                  	mov r10, qword [r9]
  2600 0000154A 4D8910                  	mov qword [r8], r10
  2601 0000154D 4983E808                	sub r8, 8
  2602 00001551 4983E908                	sub r9, 8
  2603 00001555 48FFC9                  	dec rcx
  2604 00001558 EBE7                    	jmp .L_tc_recycle_frame_loop_0011
  2605                                  .L_tc_recycle_frame_done_0011:
  2606 0000155A 498D6008                	lea rsp, [r8 + 8]
  2607 0000155E 5D                      	pop rbp ; restore the old rbp
  2608 0000155F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2609 00001562 C9                      	leave
  2610 00001563 C21800                  	ret AND_KILL_FRAME(1)
  2611                                  .L_lambda_simple_end_0011:	; new closure is in rax
  2612 00001566 48890425[08090000]      	mov qword [free_var_11], rax
  2613 0000156E 48B8-                   	mov rax, sob_void
  2613 00001570 [0000000000000000] 
  2614                                  
  2615 00001578 4889C7                  	mov rdi, rax
  2616 0000157B E871440000              	call print_sexpr_if_not_void
  2617 00001580 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2618 00001585 E812420000              	call malloc
  2619 0000158A 50                      	push rax
  2620 0000158B BF00000000              	mov rdi, 8 * 0	; new rib
  2621 00001590 E807420000              	call malloc
  2622 00001595 50                      	push rax
  2623 00001596 BF08000000              	mov rdi, 8 * 1	; extended env
  2624 0000159B E8FC410000              	call malloc
  2625 000015A0 488B7D10                	mov rdi, ENV
  2626 000015A4 BE00000000              	mov rsi, 0
  2627 000015A9 BA01000000              	mov rdx, 1
  2628                                  .L_lambda_simple_env_loop_0012:	; ext_env[i + 1] <-- env[i]
  2629 000015AE 4883FE00                	cmp rsi, 0
  2630 000015B2 7410                    	je .L_lambda_simple_env_end_0012
  2631 000015B4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2632 000015B8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2633 000015BC 48FFC6                  	inc rsi
  2634 000015BF 48FFC2                  	inc rdx
  2635 000015C2 EBEA                    	jmp .L_lambda_simple_env_loop_0012
  2636                                  .L_lambda_simple_env_end_0012:
  2637 000015C4 5B                      	pop rbx
  2638 000015C5 BE00000000              	mov rsi, 0
  2639                                  .L_lambda_simple_params_loop_0012:	; copy params
  2640 000015CA 4883FE00                	cmp rsi, 0
  2641 000015CE 740E                    	je .L_lambda_simple_params_end_0012
  2642 000015D0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2643 000015D5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2644 000015D9 48FFC6                  	inc rsi
  2645 000015DC EBEC                    	jmp .L_lambda_simple_params_loop_0012
  2646                                  .L_lambda_simple_params_end_0012:
  2647 000015DE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2648 000015E1 4889C3                  	mov rbx, rax
  2649 000015E4 58                      	pop rax
  2650 000015E5 C60004                  	mov byte [rax], T_closure
  2651 000015E8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2652 000015EC 48C74009[F9150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0012
  2653 000015F4 E9A4000000              	jmp .L_lambda_simple_end_0012
  2654                                  .L_lambda_simple_code_0012:	; lambda-simple body
  2655 000015F9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2656 000015FF 740B                    	je .L_lambda_simple_arity_check_ok_0012
  2657 00001601 FF742410                	push qword [rsp + 8 * 2]
  2658 00001605 6A01                    	push 1
  2659 00001607 E949410000              	jmp L_error_incorrect_arity_simple
  2660                                  .L_lambda_simple_arity_check_ok_0012:
  2661 0000160C C8000000                	enter 0, 0
  2662                                  	; preparing a tail-call
  2663                                  	; preparing a non-tail-call
  2664 00001610 488B4520                	mov rax, PARAM(0)	; param x
  2665 00001614 50                      	push rax
  2666 00001615 6A01                    	push 1	; arg count
  2667 00001617 488B0425[6E090000]      	mov rax, qword [free_var_17]	; free var cadr
  2668 0000161F 803805                  	cmp byte [rax], T_undefined
  2669 00001622 0F8447400000            	je L_error_fvar_undefined
  2670 00001628 803804                  	cmp byte [rax], T_closure
  2671 0000162B 0F85C2400000            	jne L_error_non_closure
  2672 00001631 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2673 00001634 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2674 00001637 50                      	push rax
  2675 00001638 6A01                    	push 1	; arg count
  2676 0000163A 488B0425[6E090000]      	mov rax, qword [free_var_17]	; free var cadr
  2677 00001642 803805                  	cmp byte [rax], T_undefined
  2678 00001645 0F8424400000            	je L_error_fvar_undefined
  2679 0000164B 803804                  	cmp byte [rax], T_closure
  2680 0000164E 0F859F400000            	jne L_error_non_closure
  2681 00001654 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2682 00001657 FF7508                  	push qword [rbp + 8 * 1]
  2683                                   ; old ret addr
  2684 0000165A FF7500                  	push qword [rbp]
  2685                                   ; restore the old rbp
  2686 0000165D BB01000000              	mov rbx, 1
  2687 00001662 4883C303                	add rbx, 3
  2688 00001666 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2689 0000166A 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2690 0000166F 4C8D4DF8                	lea r9, [rbp - 8]
  2691 00001673 B905000000              	mov rcx, 5
  2692                                  .L_tc_recycle_frame_loop_0012:
  2693 00001678 4883F900                	cmp rcx, 0
  2694 0000167C 7413                    	je .L_tc_recycle_frame_done_0012
  2695 0000167E 4D8B11                  	mov r10, qword [r9]
  2696 00001681 4D8910                  	mov qword [r8], r10
  2697 00001684 4983E808                	sub r8, 8
  2698 00001688 4983E908                	sub r9, 8
  2699 0000168C 48FFC9                  	dec rcx
  2700 0000168F EBE7                    	jmp .L_tc_recycle_frame_loop_0012
  2701                                  .L_tc_recycle_frame_done_0012:
  2702 00001691 498D6008                	lea rsp, [r8 + 8]
  2703 00001695 5D                      	pop rbp ; restore the old rbp
  2704 00001696 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2705 00001699 C9                      	leave
  2706 0000169A C21800                  	ret AND_KILL_FRAME(1)
  2707                                  .L_lambda_simple_end_0012:	; new closure is in rax
  2708 0000169D 48890425[19090000]      	mov qword [free_var_12], rax
  2709 000016A5 48B8-                   	mov rax, sob_void
  2709 000016A7 [0000000000000000] 
  2710                                  
  2711 000016AF 4889C7                  	mov rdi, rax
  2712 000016B2 E83A430000              	call print_sexpr_if_not_void
  2713 000016B7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2714 000016BC E8DB400000              	call malloc
  2715 000016C1 50                      	push rax
  2716 000016C2 BF00000000              	mov rdi, 8 * 0	; new rib
  2717 000016C7 E8D0400000              	call malloc
  2718 000016CC 50                      	push rax
  2719 000016CD BF08000000              	mov rdi, 8 * 1	; extended env
  2720 000016D2 E8C5400000              	call malloc
  2721 000016D7 488B7D10                	mov rdi, ENV
  2722 000016DB BE00000000              	mov rsi, 0
  2723 000016E0 BA01000000              	mov rdx, 1
  2724                                  .L_lambda_simple_env_loop_0013:	; ext_env[i + 1] <-- env[i]
  2725 000016E5 4883FE00                	cmp rsi, 0
  2726 000016E9 7410                    	je .L_lambda_simple_env_end_0013
  2727 000016EB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2728 000016EF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2729 000016F3 48FFC6                  	inc rsi
  2730 000016F6 48FFC2                  	inc rdx
  2731 000016F9 EBEA                    	jmp .L_lambda_simple_env_loop_0013
  2732                                  .L_lambda_simple_env_end_0013:
  2733 000016FB 5B                      	pop rbx
  2734 000016FC BE00000000              	mov rsi, 0
  2735                                  .L_lambda_simple_params_loop_0013:	; copy params
  2736 00001701 4883FE00                	cmp rsi, 0
  2737 00001705 740E                    	je .L_lambda_simple_params_end_0013
  2738 00001707 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2739 0000170C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2740 00001710 48FFC6                  	inc rsi
  2741 00001713 EBEC                    	jmp .L_lambda_simple_params_loop_0013
  2742                                  .L_lambda_simple_params_end_0013:
  2743 00001715 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2744 00001718 4889C3                  	mov rbx, rax
  2745 0000171B 58                      	pop rax
  2746 0000171C C60004                  	mov byte [rax], T_closure
  2747 0000171F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2748 00001723 48C74009[30170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0013
  2749 0000172B E9A4000000              	jmp .L_lambda_simple_end_0013
  2750                                  .L_lambda_simple_code_0013:	; lambda-simple body
  2751 00001730 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2752 00001736 740B                    	je .L_lambda_simple_arity_check_ok_0013
  2753 00001738 FF742410                	push qword [rsp + 8 * 2]
  2754 0000173C 6A01                    	push 1
  2755 0000173E E912400000              	jmp L_error_incorrect_arity_simple
  2756                                  .L_lambda_simple_arity_check_ok_0013:
  2757 00001743 C8000000                	enter 0, 0
  2758                                  	; preparing a tail-call
  2759                                  	; preparing a non-tail-call
  2760 00001747 488B4520                	mov rax, PARAM(0)	; param x
  2761 0000174B 50                      	push rax
  2762 0000174C 6A01                    	push 1	; arg count
  2763 0000174E 488B0425[F6090000]      	mov rax, qword [free_var_25]	; free var cdar
  2764 00001756 803805                  	cmp byte [rax], T_undefined
  2765 00001759 0F84103F0000            	je L_error_fvar_undefined
  2766 0000175F 803804                  	cmp byte [rax], T_closure
  2767 00001762 0F858B3F0000            	jne L_error_non_closure
  2768 00001768 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2769 0000176B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2770 0000176E 50                      	push rax
  2771 0000176F 6A01                    	push 1	; arg count
  2772 00001771 488B0425[6E090000]      	mov rax, qword [free_var_17]	; free var cadr
  2773 00001779 803805                  	cmp byte [rax], T_undefined
  2774 0000177C 0F84ED3E0000            	je L_error_fvar_undefined
  2775 00001782 803804                  	cmp byte [rax], T_closure
  2776 00001785 0F85683F0000            	jne L_error_non_closure
  2777 0000178B FF7001                  	push SOB_CLOSURE_ENV(rax)
  2778 0000178E FF7508                  	push qword [rbp + 8 * 1]
  2779                                   ; old ret addr
  2780 00001791 FF7500                  	push qword [rbp]
  2781                                   ; restore the old rbp
  2782 00001794 BB01000000              	mov rbx, 1
  2783 00001799 4883C303                	add rbx, 3
  2784 0000179D 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2785 000017A1 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2786 000017A6 4C8D4DF8                	lea r9, [rbp - 8]
  2787 000017AA B905000000              	mov rcx, 5
  2788                                  .L_tc_recycle_frame_loop_0013:
  2789 000017AF 4883F900                	cmp rcx, 0
  2790 000017B3 7413                    	je .L_tc_recycle_frame_done_0013
  2791 000017B5 4D8B11                  	mov r10, qword [r9]
  2792 000017B8 4D8910                  	mov qword [r8], r10
  2793 000017BB 4983E808                	sub r8, 8
  2794 000017BF 4983E908                	sub r9, 8
  2795 000017C3 48FFC9                  	dec rcx
  2796 000017C6 EBE7                    	jmp .L_tc_recycle_frame_loop_0013
  2797                                  .L_tc_recycle_frame_done_0013:
  2798 000017C8 498D6008                	lea rsp, [r8 + 8]
  2799 000017CC 5D                      	pop rbp ; restore the old rbp
  2800 000017CD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2801 000017D0 C9                      	leave
  2802 000017D1 C21800                  	ret AND_KILL_FRAME(1)
  2803                                  .L_lambda_simple_end_0013:	; new closure is in rax
  2804 000017D4 48890425[3B090000]      	mov qword [free_var_14], rax
  2805 000017DC 48B8-                   	mov rax, sob_void
  2805 000017DE [0000000000000000] 
  2806                                  
  2807 000017E6 4889C7                  	mov rdi, rax
  2808 000017E9 E803420000              	call print_sexpr_if_not_void
  2809 000017EE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2810 000017F3 E8A43F0000              	call malloc
  2811 000017F8 50                      	push rax
  2812 000017F9 BF00000000              	mov rdi, 8 * 0	; new rib
  2813 000017FE E8993F0000              	call malloc
  2814 00001803 50                      	push rax
  2815 00001804 BF08000000              	mov rdi, 8 * 1	; extended env
  2816 00001809 E88E3F0000              	call malloc
  2817 0000180E 488B7D10                	mov rdi, ENV
  2818 00001812 BE00000000              	mov rsi, 0
  2819 00001817 BA01000000              	mov rdx, 1
  2820                                  .L_lambda_simple_env_loop_0014:	; ext_env[i + 1] <-- env[i]
  2821 0000181C 4883FE00                	cmp rsi, 0
  2822 00001820 7410                    	je .L_lambda_simple_env_end_0014
  2823 00001822 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2824 00001826 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2825 0000182A 48FFC6                  	inc rsi
  2826 0000182D 48FFC2                  	inc rdx
  2827 00001830 EBEA                    	jmp .L_lambda_simple_env_loop_0014
  2828                                  .L_lambda_simple_env_end_0014:
  2829 00001832 5B                      	pop rbx
  2830 00001833 BE00000000              	mov rsi, 0
  2831                                  .L_lambda_simple_params_loop_0014:	; copy params
  2832 00001838 4883FE00                	cmp rsi, 0
  2833 0000183C 740E                    	je .L_lambda_simple_params_end_0014
  2834 0000183E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2835 00001843 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2836 00001847 48FFC6                  	inc rsi
  2837 0000184A EBEC                    	jmp .L_lambda_simple_params_loop_0014
  2838                                  .L_lambda_simple_params_end_0014:
  2839 0000184C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2840 0000184F 4889C3                  	mov rbx, rax
  2841 00001852 58                      	pop rax
  2842 00001853 C60004                  	mov byte [rax], T_closure
  2843 00001856 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2844 0000185A 48C74009[67180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0014
  2845 00001862 E9A4000000              	jmp .L_lambda_simple_end_0014
  2846                                  .L_lambda_simple_code_0014:	; lambda-simple body
  2847 00001867 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2848 0000186D 740B                    	je .L_lambda_simple_arity_check_ok_0014
  2849 0000186F FF742410                	push qword [rsp + 8 * 2]
  2850 00001873 6A01                    	push 1
  2851 00001875 E9DB3E0000              	jmp L_error_incorrect_arity_simple
  2852                                  .L_lambda_simple_arity_check_ok_0014:
  2853 0000187A C8000000                	enter 0, 0
  2854                                  	; preparing a tail-call
  2855                                  	; preparing a non-tail-call
  2856 0000187E 488B4520                	mov rax, PARAM(0)	; param x
  2857 00001882 50                      	push rax
  2858 00001883 6A01                    	push 1	; arg count
  2859 00001885 488B0425[6D0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  2860 0000188D 803805                  	cmp byte [rax], T_undefined
  2861 00001890 0F84D93D0000            	je L_error_fvar_undefined
  2862 00001896 803804                  	cmp byte [rax], T_closure
  2863 00001899 0F85543E0000            	jne L_error_non_closure
  2864 0000189F FF7001                  	push SOB_CLOSURE_ENV(rax)
  2865 000018A2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2866 000018A5 50                      	push rax
  2867 000018A6 6A01                    	push 1	; arg count
  2868 000018A8 488B0425[6E090000]      	mov rax, qword [free_var_17]	; free var cadr
  2869 000018B0 803805                  	cmp byte [rax], T_undefined
  2870 000018B3 0F84B63D0000            	je L_error_fvar_undefined
  2871 000018B9 803804                  	cmp byte [rax], T_closure
  2872 000018BC 0F85313E0000            	jne L_error_non_closure
  2873 000018C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2874 000018C5 FF7508                  	push qword [rbp + 8 * 1]
  2875                                   ; old ret addr
  2876 000018C8 FF7500                  	push qword [rbp]
  2877                                   ; restore the old rbp
  2878 000018CB BB01000000              	mov rbx, 1
  2879 000018D0 4883C303                	add rbx, 3
  2880 000018D4 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2881 000018D8 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2882 000018DD 4C8D4DF8                	lea r9, [rbp - 8]
  2883 000018E1 B905000000              	mov rcx, 5
  2884                                  .L_tc_recycle_frame_loop_0014:
  2885 000018E6 4883F900                	cmp rcx, 0
  2886 000018EA 7413                    	je .L_tc_recycle_frame_done_0014
  2887 000018EC 4D8B11                  	mov r10, qword [r9]
  2888 000018EF 4D8910                  	mov qword [r8], r10
  2889 000018F2 4983E808                	sub r8, 8
  2890 000018F6 4983E908                	sub r9, 8
  2891 000018FA 48FFC9                  	dec rcx
  2892 000018FD EBE7                    	jmp .L_tc_recycle_frame_loop_0014
  2893                                  .L_tc_recycle_frame_done_0014:
  2894 000018FF 498D6008                	lea rsp, [r8 + 8]
  2895 00001903 5D                      	pop rbp ; restore the old rbp
  2896 00001904 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2897 00001907 C9                      	leave
  2898 00001908 C21800                  	ret AND_KILL_FRAME(1)
  2899                                  .L_lambda_simple_end_0014:	; new closure is in rax
  2900 0000190B 48890425[4C090000]      	mov qword [free_var_15], rax
  2901 00001913 48B8-                   	mov rax, sob_void
  2901 00001915 [0000000000000000] 
  2902                                  
  2903 0000191D 4889C7                  	mov rdi, rax
  2904 00001920 E8CC400000              	call print_sexpr_if_not_void
  2905 00001925 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2906 0000192A E86D3E0000              	call malloc
  2907 0000192F 50                      	push rax
  2908 00001930 BF00000000              	mov rdi, 8 * 0	; new rib
  2909 00001935 E8623E0000              	call malloc
  2910 0000193A 50                      	push rax
  2911 0000193B BF08000000              	mov rdi, 8 * 1	; extended env
  2912 00001940 E8573E0000              	call malloc
  2913 00001945 488B7D10                	mov rdi, ENV
  2914 00001949 BE00000000              	mov rsi, 0
  2915 0000194E BA01000000              	mov rdx, 1
  2916                                  .L_lambda_simple_env_loop_0015:	; ext_env[i + 1] <-- env[i]
  2917 00001953 4883FE00                	cmp rsi, 0
  2918 00001957 7410                    	je .L_lambda_simple_env_end_0015
  2919 00001959 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2920 0000195D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2921 00001961 48FFC6                  	inc rsi
  2922 00001964 48FFC2                  	inc rdx
  2923 00001967 EBEA                    	jmp .L_lambda_simple_env_loop_0015
  2924                                  .L_lambda_simple_env_end_0015:
  2925 00001969 5B                      	pop rbx
  2926 0000196A BE00000000              	mov rsi, 0
  2927                                  .L_lambda_simple_params_loop_0015:	; copy params
  2928 0000196F 4883FE00                	cmp rsi, 0
  2929 00001973 740E                    	je .L_lambda_simple_params_end_0015
  2930 00001975 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2931 0000197A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2932 0000197E 48FFC6                  	inc rsi
  2933 00001981 EBEC                    	jmp .L_lambda_simple_params_loop_0015
  2934                                  .L_lambda_simple_params_end_0015:
  2935 00001983 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2936 00001986 4889C3                  	mov rbx, rax
  2937 00001989 58                      	pop rax
  2938 0000198A C60004                  	mov byte [rax], T_closure
  2939 0000198D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2940 00001991 48C74009[9E190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0015
  2941 00001999 E9A4000000              	jmp .L_lambda_simple_end_0015
  2942                                  .L_lambda_simple_code_0015:	; lambda-simple body
  2943 0000199E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2944 000019A4 740B                    	je .L_lambda_simple_arity_check_ok_0015
  2945 000019A6 FF742410                	push qword [rsp + 8 * 2]
  2946 000019AA 6A01                    	push 1
  2947 000019AC E9A43D0000              	jmp L_error_incorrect_arity_simple
  2948                                  .L_lambda_simple_arity_check_ok_0015:
  2949 000019B1 C8000000                	enter 0, 0
  2950                                  	; preparing a tail-call
  2951                                  	; preparing a non-tail-call
  2952 000019B5 488B4520                	mov rax, PARAM(0)	; param x
  2953 000019B9 50                      	push rax
  2954 000019BA 6A01                    	push 1	; arg count
  2955 000019BC 488B0425[F7080000]      	mov rax, qword [free_var_10]	; free var caar
  2956 000019C4 803805                  	cmp byte [rax], T_undefined
  2957 000019C7 0F84A23C0000            	je L_error_fvar_undefined
  2958 000019CD 803804                  	cmp byte [rax], T_closure
  2959 000019D0 0F851D3D0000            	jne L_error_non_closure
  2960 000019D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2961 000019D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2962 000019DC 50                      	push rax
  2963 000019DD 6A01                    	push 1	; arg count
  2964 000019DF 488B0425[F6090000]      	mov rax, qword [free_var_25]	; free var cdar
  2965 000019E7 803805                  	cmp byte [rax], T_undefined
  2966 000019EA 0F847F3C0000            	je L_error_fvar_undefined
  2967 000019F0 803804                  	cmp byte [rax], T_closure
  2968 000019F3 0F85FA3C0000            	jne L_error_non_closure
  2969 000019F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2970 000019FC FF7508                  	push qword [rbp + 8 * 1]
  2971                                   ; old ret addr
  2972 000019FF FF7500                  	push qword [rbp]
  2973                                   ; restore the old rbp
  2974 00001A02 BB01000000              	mov rbx, 1
  2975 00001A07 4883C303                	add rbx, 3
  2976 00001A0B 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2977 00001A0F 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2978 00001A14 4C8D4DF8                	lea r9, [rbp - 8]
  2979 00001A18 B905000000              	mov rcx, 5
  2980                                  .L_tc_recycle_frame_loop_0015:
  2981 00001A1D 4883F900                	cmp rcx, 0
  2982 00001A21 7413                    	je .L_tc_recycle_frame_done_0015
  2983 00001A23 4D8B11                  	mov r10, qword [r9]
  2984 00001A26 4D8910                  	mov qword [r8], r10
  2985 00001A29 4983E808                	sub r8, 8
  2986 00001A2D 4983E908                	sub r9, 8
  2987 00001A31 48FFC9                  	dec rcx
  2988 00001A34 EBE7                    	jmp .L_tc_recycle_frame_loop_0015
  2989                                  .L_tc_recycle_frame_done_0015:
  2990 00001A36 498D6008                	lea rsp, [r8 + 8]
  2991 00001A3A 5D                      	pop rbp ; restore the old rbp
  2992 00001A3B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2993 00001A3E C9                      	leave
  2994 00001A3F C21800                  	ret AND_KILL_FRAME(1)
  2995                                  .L_lambda_simple_end_0015:	; new closure is in rax
  2996 00001A42 48890425[90090000]      	mov qword [free_var_19], rax
  2997 00001A4A 48B8-                   	mov rax, sob_void
  2997 00001A4C [0000000000000000] 
  2998                                  
  2999 00001A54 4889C7                  	mov rdi, rax
  3000 00001A57 E8953F0000              	call print_sexpr_if_not_void
  3001 00001A5C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3002 00001A61 E8363D0000              	call malloc
  3003 00001A66 50                      	push rax
  3004 00001A67 BF00000000              	mov rdi, 8 * 0	; new rib
  3005 00001A6C E82B3D0000              	call malloc
  3006 00001A71 50                      	push rax
  3007 00001A72 BF08000000              	mov rdi, 8 * 1	; extended env
  3008 00001A77 E8203D0000              	call malloc
  3009 00001A7C 488B7D10                	mov rdi, ENV
  3010 00001A80 BE00000000              	mov rsi, 0
  3011 00001A85 BA01000000              	mov rdx, 1
  3012                                  .L_lambda_simple_env_loop_0016:	; ext_env[i + 1] <-- env[i]
  3013 00001A8A 4883FE00                	cmp rsi, 0
  3014 00001A8E 7410                    	je .L_lambda_simple_env_end_0016
  3015 00001A90 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3016 00001A94 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3017 00001A98 48FFC6                  	inc rsi
  3018 00001A9B 48FFC2                  	inc rdx
  3019 00001A9E EBEA                    	jmp .L_lambda_simple_env_loop_0016
  3020                                  .L_lambda_simple_env_end_0016:
  3021 00001AA0 5B                      	pop rbx
  3022 00001AA1 BE00000000              	mov rsi, 0
  3023                                  .L_lambda_simple_params_loop_0016:	; copy params
  3024 00001AA6 4883FE00                	cmp rsi, 0
  3025 00001AAA 740E                    	je .L_lambda_simple_params_end_0016
  3026 00001AAC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3027 00001AB1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3028 00001AB5 48FFC6                  	inc rsi
  3029 00001AB8 EBEC                    	jmp .L_lambda_simple_params_loop_0016
  3030                                  .L_lambda_simple_params_end_0016:
  3031 00001ABA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3032 00001ABD 4889C3                  	mov rbx, rax
  3033 00001AC0 58                      	pop rax
  3034 00001AC1 C60004                  	mov byte [rax], T_closure
  3035 00001AC4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3036 00001AC8 48C74009[D51A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0016
  3037 00001AD0 E9A4000000              	jmp .L_lambda_simple_end_0016
  3038                                  .L_lambda_simple_code_0016:	; lambda-simple body
  3039 00001AD5 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3040 00001ADB 740B                    	je .L_lambda_simple_arity_check_ok_0016
  3041 00001ADD FF742410                	push qword [rsp + 8 * 2]
  3042 00001AE1 6A01                    	push 1
  3043 00001AE3 E96D3C0000              	jmp L_error_incorrect_arity_simple
  3044                                  .L_lambda_simple_arity_check_ok_0016:
  3045 00001AE8 C8000000                	enter 0, 0
  3046                                  	; preparing a tail-call
  3047                                  	; preparing a non-tail-call
  3048 00001AEC 488B4520                	mov rax, PARAM(0)	; param x
  3049 00001AF0 50                      	push rax
  3050 00001AF1 6A01                    	push 1	; arg count
  3051 00001AF3 488B0425[6E090000]      	mov rax, qword [free_var_17]	; free var cadr
  3052 00001AFB 803805                  	cmp byte [rax], T_undefined
  3053 00001AFE 0F846B3B0000            	je L_error_fvar_undefined
  3054 00001B04 803804                  	cmp byte [rax], T_closure
  3055 00001B07 0F85E63B0000            	jne L_error_non_closure
  3056 00001B0D FF7001                  	push SOB_CLOSURE_ENV(rax)
  3057 00001B10 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3058 00001B13 50                      	push rax
  3059 00001B14 6A01                    	push 1	; arg count
  3060 00001B16 488B0425[F6090000]      	mov rax, qword [free_var_25]	; free var cdar
  3061 00001B1E 803805                  	cmp byte [rax], T_undefined
  3062 00001B21 0F84483B0000            	je L_error_fvar_undefined
  3063 00001B27 803804                  	cmp byte [rax], T_closure
  3064 00001B2A 0F85C33B0000            	jne L_error_non_closure
  3065 00001B30 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3066 00001B33 FF7508                  	push qword [rbp + 8 * 1]
  3067                                   ; old ret addr
  3068 00001B36 FF7500                  	push qword [rbp]
  3069                                   ; restore the old rbp
  3070 00001B39 BB01000000              	mov rbx, 1
  3071 00001B3E 4883C303                	add rbx, 3
  3072 00001B42 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3073 00001B46 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3074 00001B4B 4C8D4DF8                	lea r9, [rbp - 8]
  3075 00001B4F B905000000              	mov rcx, 5
  3076                                  .L_tc_recycle_frame_loop_0016:
  3077 00001B54 4883F900                	cmp rcx, 0
  3078 00001B58 7413                    	je .L_tc_recycle_frame_done_0016
  3079 00001B5A 4D8B11                  	mov r10, qword [r9]
  3080 00001B5D 4D8910                  	mov qword [r8], r10
  3081 00001B60 4983E808                	sub r8, 8
  3082 00001B64 4983E908                	sub r9, 8
  3083 00001B68 48FFC9                  	dec rcx
  3084 00001B6B EBE7                    	jmp .L_tc_recycle_frame_loop_0016
  3085                                  .L_tc_recycle_frame_done_0016:
  3086 00001B6D 498D6008                	lea rsp, [r8 + 8]
  3087 00001B71 5D                      	pop rbp ; restore the old rbp
  3088 00001B72 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3089 00001B75 C9                      	leave
  3090 00001B76 C21800                  	ret AND_KILL_FRAME(1)
  3091                                  .L_lambda_simple_end_0016:	; new closure is in rax
  3092 00001B79 48890425[A1090000]      	mov qword [free_var_20], rax
  3093 00001B81 48B8-                   	mov rax, sob_void
  3093 00001B83 [0000000000000000] 
  3094                                  
  3095 00001B8B 4889C7                  	mov rdi, rax
  3096 00001B8E E85E3E0000              	call print_sexpr_if_not_void
  3097 00001B93 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3098 00001B98 E8FF3B0000              	call malloc
  3099 00001B9D 50                      	push rax
  3100 00001B9E BF00000000              	mov rdi, 8 * 0	; new rib
  3101 00001BA3 E8F43B0000              	call malloc
  3102 00001BA8 50                      	push rax
  3103 00001BA9 BF08000000              	mov rdi, 8 * 1	; extended env
  3104 00001BAE E8E93B0000              	call malloc
  3105 00001BB3 488B7D10                	mov rdi, ENV
  3106 00001BB7 BE00000000              	mov rsi, 0
  3107 00001BBC BA01000000              	mov rdx, 1
  3108                                  .L_lambda_simple_env_loop_0017:	; ext_env[i + 1] <-- env[i]
  3109 00001BC1 4883FE00                	cmp rsi, 0
  3110 00001BC5 7410                    	je .L_lambda_simple_env_end_0017
  3111 00001BC7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3112 00001BCB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3113 00001BCF 48FFC6                  	inc rsi
  3114 00001BD2 48FFC2                  	inc rdx
  3115 00001BD5 EBEA                    	jmp .L_lambda_simple_env_loop_0017
  3116                                  .L_lambda_simple_env_end_0017:
  3117 00001BD7 5B                      	pop rbx
  3118 00001BD8 BE00000000              	mov rsi, 0
  3119                                  .L_lambda_simple_params_loop_0017:	; copy params
  3120 00001BDD 4883FE00                	cmp rsi, 0
  3121 00001BE1 740E                    	je .L_lambda_simple_params_end_0017
  3122 00001BE3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3123 00001BE8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3124 00001BEC 48FFC6                  	inc rsi
  3125 00001BEF EBEC                    	jmp .L_lambda_simple_params_loop_0017
  3126                                  .L_lambda_simple_params_end_0017:
  3127 00001BF1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3128 00001BF4 4889C3                  	mov rbx, rax
  3129 00001BF7 58                      	pop rax
  3130 00001BF8 C60004                  	mov byte [rax], T_closure
  3131 00001BFB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3132 00001BFF 48C74009[0C1C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0017
  3133 00001C07 E9A4000000              	jmp .L_lambda_simple_end_0017
  3134                                  .L_lambda_simple_code_0017:	; lambda-simple body
  3135 00001C0C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3136 00001C12 740B                    	je .L_lambda_simple_arity_check_ok_0017
  3137 00001C14 FF742410                	push qword [rsp + 8 * 2]
  3138 00001C18 6A01                    	push 1
  3139 00001C1A E9363B0000              	jmp L_error_incorrect_arity_simple
  3140                                  .L_lambda_simple_arity_check_ok_0017:
  3141 00001C1F C8000000                	enter 0, 0
  3142                                  	; preparing a tail-call
  3143                                  	; preparing a non-tail-call
  3144 00001C23 488B4520                	mov rax, PARAM(0)	; param x
  3145 00001C27 50                      	push rax
  3146 00001C28 6A01                    	push 1	; arg count
  3147 00001C2A 488B0425[F6090000]      	mov rax, qword [free_var_25]	; free var cdar
  3148 00001C32 803805                  	cmp byte [rax], T_undefined
  3149 00001C35 0F84343A0000            	je L_error_fvar_undefined
  3150 00001C3B 803804                  	cmp byte [rax], T_closure
  3151 00001C3E 0F85AF3A0000            	jne L_error_non_closure
  3152 00001C44 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3153 00001C47 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3154 00001C4A 50                      	push rax
  3155 00001C4B 6A01                    	push 1	; arg count
  3156 00001C4D 488B0425[F6090000]      	mov rax, qword [free_var_25]	; free var cdar
  3157 00001C55 803805                  	cmp byte [rax], T_undefined
  3158 00001C58 0F84113A0000            	je L_error_fvar_undefined
  3159 00001C5E 803804                  	cmp byte [rax], T_closure
  3160 00001C61 0F858C3A0000            	jne L_error_non_closure
  3161 00001C67 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3162 00001C6A FF7508                  	push qword [rbp + 8 * 1]
  3163                                   ; old ret addr
  3164 00001C6D FF7500                  	push qword [rbp]
  3165                                   ; restore the old rbp
  3166 00001C70 BB01000000              	mov rbx, 1
  3167 00001C75 4883C303                	add rbx, 3
  3168 00001C79 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3169 00001C7D 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3170 00001C82 4C8D4DF8                	lea r9, [rbp - 8]
  3171 00001C86 B905000000              	mov rcx, 5
  3172                                  .L_tc_recycle_frame_loop_0017:
  3173 00001C8B 4883F900                	cmp rcx, 0
  3174 00001C8F 7413                    	je .L_tc_recycle_frame_done_0017
  3175 00001C91 4D8B11                  	mov r10, qword [r9]
  3176 00001C94 4D8910                  	mov qword [r8], r10
  3177 00001C97 4983E808                	sub r8, 8
  3178 00001C9B 4983E908                	sub r9, 8
  3179 00001C9F 48FFC9                  	dec rcx
  3180 00001CA2 EBE7                    	jmp .L_tc_recycle_frame_loop_0017
  3181                                  .L_tc_recycle_frame_done_0017:
  3182 00001CA4 498D6008                	lea rsp, [r8 + 8]
  3183 00001CA8 5D                      	pop rbp ; restore the old rbp
  3184 00001CA9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3185 00001CAC C9                      	leave
  3186 00001CAD C21800                  	ret AND_KILL_FRAME(1)
  3187                                  .L_lambda_simple_end_0017:	; new closure is in rax
  3188 00001CB0 48890425[C3090000]      	mov qword [free_var_22], rax
  3189 00001CB8 48B8-                   	mov rax, sob_void
  3189 00001CBA [0000000000000000] 
  3190                                  
  3191 00001CC2 4889C7                  	mov rdi, rax
  3192 00001CC5 E8273D0000              	call print_sexpr_if_not_void
  3193 00001CCA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3194 00001CCF E8C83A0000              	call malloc
  3195 00001CD4 50                      	push rax
  3196 00001CD5 BF00000000              	mov rdi, 8 * 0	; new rib
  3197 00001CDA E8BD3A0000              	call malloc
  3198 00001CDF 50                      	push rax
  3199 00001CE0 BF08000000              	mov rdi, 8 * 1	; extended env
  3200 00001CE5 E8B23A0000              	call malloc
  3201 00001CEA 488B7D10                	mov rdi, ENV
  3202 00001CEE BE00000000              	mov rsi, 0
  3203 00001CF3 BA01000000              	mov rdx, 1
  3204                                  .L_lambda_simple_env_loop_0018:	; ext_env[i + 1] <-- env[i]
  3205 00001CF8 4883FE00                	cmp rsi, 0
  3206 00001CFC 7410                    	je .L_lambda_simple_env_end_0018
  3207 00001CFE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3208 00001D02 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3209 00001D06 48FFC6                  	inc rsi
  3210 00001D09 48FFC2                  	inc rdx
  3211 00001D0C EBEA                    	jmp .L_lambda_simple_env_loop_0018
  3212                                  .L_lambda_simple_env_end_0018:
  3213 00001D0E 5B                      	pop rbx
  3214 00001D0F BE00000000              	mov rsi, 0
  3215                                  .L_lambda_simple_params_loop_0018:	; copy params
  3216 00001D14 4883FE00                	cmp rsi, 0
  3217 00001D18 740E                    	je .L_lambda_simple_params_end_0018
  3218 00001D1A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3219 00001D1F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3220 00001D23 48FFC6                  	inc rsi
  3221 00001D26 EBEC                    	jmp .L_lambda_simple_params_loop_0018
  3222                                  .L_lambda_simple_params_end_0018:
  3223 00001D28 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3224 00001D2B 4889C3                  	mov rbx, rax
  3225 00001D2E 58                      	pop rax
  3226 00001D2F C60004                  	mov byte [rax], T_closure
  3227 00001D32 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3228 00001D36 48C74009[431D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0018
  3229 00001D3E E9A4000000              	jmp .L_lambda_simple_end_0018
  3230                                  .L_lambda_simple_code_0018:	; lambda-simple body
  3231 00001D43 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3232 00001D49 740B                    	je .L_lambda_simple_arity_check_ok_0018
  3233 00001D4B FF742410                	push qword [rsp + 8 * 2]
  3234 00001D4F 6A01                    	push 1
  3235 00001D51 E9FF390000              	jmp L_error_incorrect_arity_simple
  3236                                  .L_lambda_simple_arity_check_ok_0018:
  3237 00001D56 C8000000                	enter 0, 0
  3238                                  	; preparing a tail-call
  3239                                  	; preparing a non-tail-call
  3240 00001D5A 488B4520                	mov rax, PARAM(0)	; param x
  3241 00001D5E 50                      	push rax
  3242 00001D5F 6A01                    	push 1	; arg count
  3243 00001D61 488B0425[6D0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  3244 00001D69 803805                  	cmp byte [rax], T_undefined
  3245 00001D6C 0F84FD380000            	je L_error_fvar_undefined
  3246 00001D72 803804                  	cmp byte [rax], T_closure
  3247 00001D75 0F8578390000            	jne L_error_non_closure
  3248 00001D7B FF7001                  	push SOB_CLOSURE_ENV(rax)
  3249 00001D7E FF5009                  	call SOB_CLOSURE_CODE(rax)
  3250 00001D81 50                      	push rax
  3251 00001D82 6A01                    	push 1	; arg count
  3252 00001D84 488B0425[F6090000]      	mov rax, qword [free_var_25]	; free var cdar
  3253 00001D8C 803805                  	cmp byte [rax], T_undefined
  3254 00001D8F 0F84DA380000            	je L_error_fvar_undefined
  3255 00001D95 803804                  	cmp byte [rax], T_closure
  3256 00001D98 0F8555390000            	jne L_error_non_closure
  3257 00001D9E FF7001                  	push SOB_CLOSURE_ENV(rax)
  3258 00001DA1 FF7508                  	push qword [rbp + 8 * 1]
  3259                                   ; old ret addr
  3260 00001DA4 FF7500                  	push qword [rbp]
  3261                                   ; restore the old rbp
  3262 00001DA7 BB01000000              	mov rbx, 1
  3263 00001DAC 4883C303                	add rbx, 3
  3264 00001DB0 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3265 00001DB4 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3266 00001DB9 4C8D4DF8                	lea r9, [rbp - 8]
  3267 00001DBD B905000000              	mov rcx, 5
  3268                                  .L_tc_recycle_frame_loop_0018:
  3269 00001DC2 4883F900                	cmp rcx, 0
  3270 00001DC6 7413                    	je .L_tc_recycle_frame_done_0018
  3271 00001DC8 4D8B11                  	mov r10, qword [r9]
  3272 00001DCB 4D8910                  	mov qword [r8], r10
  3273 00001DCE 4983E808                	sub r8, 8
  3274 00001DD2 4983E908                	sub r9, 8
  3275 00001DD6 48FFC9                  	dec rcx
  3276 00001DD9 EBE7                    	jmp .L_tc_recycle_frame_loop_0018
  3277                                  .L_tc_recycle_frame_done_0018:
  3278 00001DDB 498D6008                	lea rsp, [r8 + 8]
  3279 00001DDF 5D                      	pop rbp ; restore the old rbp
  3280 00001DE0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3281 00001DE3 C9                      	leave
  3282 00001DE4 C21800                  	ret AND_KILL_FRAME(1)
  3283                                  .L_lambda_simple_end_0018:	; new closure is in rax
  3284 00001DE7 48890425[D4090000]      	mov qword [free_var_23], rax
  3285 00001DEF 48B8-                   	mov rax, sob_void
  3285 00001DF1 [0000000000000000] 
  3286                                  
  3287 00001DF9 4889C7                  	mov rdi, rax
  3288 00001DFC E8F03B0000              	call print_sexpr_if_not_void
  3289 00001E01 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3290 00001E06 E891390000              	call malloc
  3291 00001E0B 50                      	push rax
  3292 00001E0C BF00000000              	mov rdi, 8 * 0	; new rib
  3293 00001E11 E886390000              	call malloc
  3294 00001E16 50                      	push rax
  3295 00001E17 BF08000000              	mov rdi, 8 * 1	; extended env
  3296 00001E1C E87B390000              	call malloc
  3297 00001E21 488B7D10                	mov rdi, ENV
  3298 00001E25 BE00000000              	mov rsi, 0
  3299 00001E2A BA01000000              	mov rdx, 1
  3300                                  .L_lambda_simple_env_loop_0019:	; ext_env[i + 1] <-- env[i]
  3301 00001E2F 4883FE00                	cmp rsi, 0
  3302 00001E33 7410                    	je .L_lambda_simple_env_end_0019
  3303 00001E35 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3304 00001E39 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3305 00001E3D 48FFC6                  	inc rsi
  3306 00001E40 48FFC2                  	inc rdx
  3307 00001E43 EBEA                    	jmp .L_lambda_simple_env_loop_0019
  3308                                  .L_lambda_simple_env_end_0019:
  3309 00001E45 5B                      	pop rbx
  3310 00001E46 BE00000000              	mov rsi, 0
  3311                                  .L_lambda_simple_params_loop_0019:	; copy params
  3312 00001E4B 4883FE00                	cmp rsi, 0
  3313 00001E4F 740E                    	je .L_lambda_simple_params_end_0019
  3314 00001E51 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3315 00001E56 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3316 00001E5A 48FFC6                  	inc rsi
  3317 00001E5D EBEC                    	jmp .L_lambda_simple_params_loop_0019
  3318                                  .L_lambda_simple_params_end_0019:
  3319 00001E5F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3320 00001E62 4889C3                  	mov rbx, rax
  3321 00001E65 58                      	pop rax
  3322 00001E66 C60004                  	mov byte [rax], T_closure
  3323 00001E69 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3324 00001E6D 48C74009[7A1E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0019
  3325 00001E75 E9A4000000              	jmp .L_lambda_simple_end_0019
  3326                                  .L_lambda_simple_code_0019:	; lambda-simple body
  3327 00001E7A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3328 00001E80 740B                    	je .L_lambda_simple_arity_check_ok_0019
  3329 00001E82 FF742410                	push qword [rsp + 8 * 2]
  3330 00001E86 6A01                    	push 1
  3331 00001E88 E9C8380000              	jmp L_error_incorrect_arity_simple
  3332                                  .L_lambda_simple_arity_check_ok_0019:
  3333 00001E8D C8000000                	enter 0, 0
  3334                                  	; preparing a tail-call
  3335                                  	; preparing a non-tail-call
  3336 00001E91 488B4520                	mov rax, PARAM(0)	; param x
  3337 00001E95 50                      	push rax
  3338 00001E96 6A01                    	push 1	; arg count
  3339 00001E98 488B0425[F7080000]      	mov rax, qword [free_var_10]	; free var caar
  3340 00001EA0 803805                  	cmp byte [rax], T_undefined
  3341 00001EA3 0F84C6370000            	je L_error_fvar_undefined
  3342 00001EA9 803804                  	cmp byte [rax], T_closure
  3343 00001EAC 0F8541380000            	jne L_error_non_closure
  3344 00001EB2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3345 00001EB5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3346 00001EB8 50                      	push rax
  3347 00001EB9 6A01                    	push 1	; arg count
  3348 00001EBB 488B0425[6D0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  3349 00001EC3 803805                  	cmp byte [rax], T_undefined
  3350 00001EC6 0F84A3370000            	je L_error_fvar_undefined
  3351 00001ECC 803804                  	cmp byte [rax], T_closure
  3352 00001ECF 0F851E380000            	jne L_error_non_closure
  3353 00001ED5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3354 00001ED8 FF7508                  	push qword [rbp + 8 * 1]
  3355                                   ; old ret addr
  3356 00001EDB FF7500                  	push qword [rbp]
  3357                                   ; restore the old rbp
  3358 00001EDE BB01000000              	mov rbx, 1
  3359 00001EE3 4883C303                	add rbx, 3
  3360 00001EE7 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3361 00001EEB 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3362 00001EF0 4C8D4DF8                	lea r9, [rbp - 8]
  3363 00001EF4 B905000000              	mov rcx, 5
  3364                                  .L_tc_recycle_frame_loop_0019:
  3365 00001EF9 4883F900                	cmp rcx, 0
  3366 00001EFD 7413                    	je .L_tc_recycle_frame_done_0019
  3367 00001EFF 4D8B11                  	mov r10, qword [r9]
  3368 00001F02 4D8910                  	mov qword [r8], r10
  3369 00001F05 4983E808                	sub r8, 8
  3370 00001F09 4983E908                	sub r9, 8
  3371 00001F0D 48FFC9                  	dec rcx
  3372 00001F10 EBE7                    	jmp .L_tc_recycle_frame_loop_0019
  3373                                  .L_tc_recycle_frame_done_0019:
  3374 00001F12 498D6008                	lea rsp, [r8 + 8]
  3375 00001F16 5D                      	pop rbp ; restore the old rbp
  3376 00001F17 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3377 00001F1A C9                      	leave
  3378 00001F1B C21800                  	ret AND_KILL_FRAME(1)
  3379                                  .L_lambda_simple_end_0019:	; new closure is in rax
  3380 00001F1E 48890425[070A0000]      	mov qword [free_var_26], rax
  3381 00001F26 48B8-                   	mov rax, sob_void
  3381 00001F28 [0000000000000000] 
  3382                                  
  3383 00001F30 4889C7                  	mov rdi, rax
  3384 00001F33 E8B93A0000              	call print_sexpr_if_not_void
  3385 00001F38 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3386 00001F3D E85A380000              	call malloc
  3387 00001F42 50                      	push rax
  3388 00001F43 BF00000000              	mov rdi, 8 * 0	; new rib
  3389 00001F48 E84F380000              	call malloc
  3390 00001F4D 50                      	push rax
  3391 00001F4E BF08000000              	mov rdi, 8 * 1	; extended env
  3392 00001F53 E844380000              	call malloc
  3393 00001F58 488B7D10                	mov rdi, ENV
  3394 00001F5C BE00000000              	mov rsi, 0
  3395 00001F61 BA01000000              	mov rdx, 1
  3396                                  .L_lambda_simple_env_loop_001a:	; ext_env[i + 1] <-- env[i]
  3397 00001F66 4883FE00                	cmp rsi, 0
  3398 00001F6A 7410                    	je .L_lambda_simple_env_end_001a
  3399 00001F6C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3400 00001F70 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3401 00001F74 48FFC6                  	inc rsi
  3402 00001F77 48FFC2                  	inc rdx
  3403 00001F7A EBEA                    	jmp .L_lambda_simple_env_loop_001a
  3404                                  .L_lambda_simple_env_end_001a:
  3405 00001F7C 5B                      	pop rbx
  3406 00001F7D BE00000000              	mov rsi, 0
  3407                                  .L_lambda_simple_params_loop_001a:	; copy params
  3408 00001F82 4883FE00                	cmp rsi, 0
  3409 00001F86 740E                    	je .L_lambda_simple_params_end_001a
  3410 00001F88 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3411 00001F8D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3412 00001F91 48FFC6                  	inc rsi
  3413 00001F94 EBEC                    	jmp .L_lambda_simple_params_loop_001a
  3414                                  .L_lambda_simple_params_end_001a:
  3415 00001F96 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3416 00001F99 4889C3                  	mov rbx, rax
  3417 00001F9C 58                      	pop rax
  3418 00001F9D C60004                  	mov byte [rax], T_closure
  3419 00001FA0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3420 00001FA4 48C74009[B11F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001a
  3421 00001FAC E9A4000000              	jmp .L_lambda_simple_end_001a
  3422                                  .L_lambda_simple_code_001a:	; lambda-simple body
  3423 00001FB1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3424 00001FB7 740B                    	je .L_lambda_simple_arity_check_ok_001a
  3425 00001FB9 FF742410                	push qword [rsp + 8 * 2]
  3426 00001FBD 6A01                    	push 1
  3427 00001FBF E991370000              	jmp L_error_incorrect_arity_simple
  3428                                  .L_lambda_simple_arity_check_ok_001a:
  3429 00001FC4 C8000000                	enter 0, 0
  3430                                  	; preparing a tail-call
  3431                                  	; preparing a non-tail-call
  3432 00001FC8 488B4520                	mov rax, PARAM(0)	; param x
  3433 00001FCC 50                      	push rax
  3434 00001FCD 6A01                    	push 1	; arg count
  3435 00001FCF 488B0425[6E090000]      	mov rax, qword [free_var_17]	; free var cadr
  3436 00001FD7 803805                  	cmp byte [rax], T_undefined
  3437 00001FDA 0F848F360000            	je L_error_fvar_undefined
  3438 00001FE0 803804                  	cmp byte [rax], T_closure
  3439 00001FE3 0F850A370000            	jne L_error_non_closure
  3440 00001FE9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3441 00001FEC FF5009                  	call SOB_CLOSURE_CODE(rax)
  3442 00001FEF 50                      	push rax
  3443 00001FF0 6A01                    	push 1	; arg count
  3444 00001FF2 488B0425[6D0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  3445 00001FFA 803805                  	cmp byte [rax], T_undefined
  3446 00001FFD 0F846C360000            	je L_error_fvar_undefined
  3447 00002003 803804                  	cmp byte [rax], T_closure
  3448 00002006 0F85E7360000            	jne L_error_non_closure
  3449 0000200C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3450 0000200F FF7508                  	push qword [rbp + 8 * 1]
  3451                                   ; old ret addr
  3452 00002012 FF7500                  	push qword [rbp]
  3453                                   ; restore the old rbp
  3454 00002015 BB01000000              	mov rbx, 1
  3455 0000201A 4883C303                	add rbx, 3
  3456 0000201E 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3457 00002022 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3458 00002027 4C8D4DF8                	lea r9, [rbp - 8]
  3459 0000202B B905000000              	mov rcx, 5
  3460                                  .L_tc_recycle_frame_loop_001a:
  3461 00002030 4883F900                	cmp rcx, 0
  3462 00002034 7413                    	je .L_tc_recycle_frame_done_001a
  3463 00002036 4D8B11                  	mov r10, qword [r9]
  3464 00002039 4D8910                  	mov qword [r8], r10
  3465 0000203C 4983E808                	sub r8, 8
  3466 00002040 4983E908                	sub r9, 8
  3467 00002044 48FFC9                  	dec rcx
  3468 00002047 EBE7                    	jmp .L_tc_recycle_frame_loop_001a
  3469                                  .L_tc_recycle_frame_done_001a:
  3470 00002049 498D6008                	lea rsp, [r8 + 8]
  3471 0000204D 5D                      	pop rbp ; restore the old rbp
  3472 0000204E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3473 00002051 C9                      	leave
  3474 00002052 C21800                  	ret AND_KILL_FRAME(1)
  3475                                  .L_lambda_simple_end_001a:	; new closure is in rax
  3476 00002055 48890425[180A0000]      	mov qword [free_var_27], rax
  3477 0000205D 48B8-                   	mov rax, sob_void
  3477 0000205F [0000000000000000] 
  3478                                  
  3479 00002067 4889C7                  	mov rdi, rax
  3480 0000206A E882390000              	call print_sexpr_if_not_void
  3481 0000206F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3482 00002074 E823370000              	call malloc
  3483 00002079 50                      	push rax
  3484 0000207A BF00000000              	mov rdi, 8 * 0	; new rib
  3485 0000207F E818370000              	call malloc
  3486 00002084 50                      	push rax
  3487 00002085 BF08000000              	mov rdi, 8 * 1	; extended env
  3488 0000208A E80D370000              	call malloc
  3489 0000208F 488B7D10                	mov rdi, ENV
  3490 00002093 BE00000000              	mov rsi, 0
  3491 00002098 BA01000000              	mov rdx, 1
  3492                                  .L_lambda_simple_env_loop_001b:	; ext_env[i + 1] <-- env[i]
  3493 0000209D 4883FE00                	cmp rsi, 0
  3494 000020A1 7410                    	je .L_lambda_simple_env_end_001b
  3495 000020A3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3496 000020A7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3497 000020AB 48FFC6                  	inc rsi
  3498 000020AE 48FFC2                  	inc rdx
  3499 000020B1 EBEA                    	jmp .L_lambda_simple_env_loop_001b
  3500                                  .L_lambda_simple_env_end_001b:
  3501 000020B3 5B                      	pop rbx
  3502 000020B4 BE00000000              	mov rsi, 0
  3503                                  .L_lambda_simple_params_loop_001b:	; copy params
  3504 000020B9 4883FE00                	cmp rsi, 0
  3505 000020BD 740E                    	je .L_lambda_simple_params_end_001b
  3506 000020BF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3507 000020C4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3508 000020C8 48FFC6                  	inc rsi
  3509 000020CB EBEC                    	jmp .L_lambda_simple_params_loop_001b
  3510                                  .L_lambda_simple_params_end_001b:
  3511 000020CD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3512 000020D0 4889C3                  	mov rbx, rax
  3513 000020D3 58                      	pop rax
  3514 000020D4 C60004                  	mov byte [rax], T_closure
  3515 000020D7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3516 000020DB 48C74009[E8200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001b
  3517 000020E3 E9A4000000              	jmp .L_lambda_simple_end_001b
  3518                                  .L_lambda_simple_code_001b:	; lambda-simple body
  3519 000020E8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3520 000020EE 740B                    	je .L_lambda_simple_arity_check_ok_001b
  3521 000020F0 FF742410                	push qword [rsp + 8 * 2]
  3522 000020F4 6A01                    	push 1
  3523 000020F6 E95A360000              	jmp L_error_incorrect_arity_simple
  3524                                  .L_lambda_simple_arity_check_ok_001b:
  3525 000020FB C8000000                	enter 0, 0
  3526                                  	; preparing a tail-call
  3527                                  	; preparing a non-tail-call
  3528 000020FF 488B4520                	mov rax, PARAM(0)	; param x
  3529 00002103 50                      	push rax
  3530 00002104 6A01                    	push 1	; arg count
  3531 00002106 488B0425[F6090000]      	mov rax, qword [free_var_25]	; free var cdar
  3532 0000210E 803805                  	cmp byte [rax], T_undefined
  3533 00002111 0F8458350000            	je L_error_fvar_undefined
  3534 00002117 803804                  	cmp byte [rax], T_closure
  3535 0000211A 0F85D3350000            	jne L_error_non_closure
  3536 00002120 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3537 00002123 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3538 00002126 50                      	push rax
  3539 00002127 6A01                    	push 1	; arg count
  3540 00002129 488B0425[6D0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  3541 00002131 803805                  	cmp byte [rax], T_undefined
  3542 00002134 0F8435350000            	je L_error_fvar_undefined
  3543 0000213A 803804                  	cmp byte [rax], T_closure
  3544 0000213D 0F85B0350000            	jne L_error_non_closure
  3545 00002143 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3546 00002146 FF7508                  	push qword [rbp + 8 * 1]
  3547                                   ; old ret addr
  3548 00002149 FF7500                  	push qword [rbp]
  3549                                   ; restore the old rbp
  3550 0000214C BB01000000              	mov rbx, 1
  3551 00002151 4883C303                	add rbx, 3
  3552 00002155 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3553 00002159 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3554 0000215E 4C8D4DF8                	lea r9, [rbp - 8]
  3555 00002162 B905000000              	mov rcx, 5
  3556                                  .L_tc_recycle_frame_loop_001b:
  3557 00002167 4883F900                	cmp rcx, 0
  3558 0000216B 7413                    	je .L_tc_recycle_frame_done_001b
  3559 0000216D 4D8B11                  	mov r10, qword [r9]
  3560 00002170 4D8910                  	mov qword [r8], r10
  3561 00002173 4983E808                	sub r8, 8
  3562 00002177 4983E908                	sub r9, 8
  3563 0000217B 48FFC9                  	dec rcx
  3564 0000217E EBE7                    	jmp .L_tc_recycle_frame_loop_001b
  3565                                  .L_tc_recycle_frame_done_001b:
  3566 00002180 498D6008                	lea rsp, [r8 + 8]
  3567 00002184 5D                      	pop rbp ; restore the old rbp
  3568 00002185 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3569 00002188 C9                      	leave
  3570 00002189 C21800                  	ret AND_KILL_FRAME(1)
  3571                                  .L_lambda_simple_end_001b:	; new closure is in rax
  3572 0000218C 48890425[3A0A0000]      	mov qword [free_var_29], rax
  3573 00002194 48B8-                   	mov rax, sob_void
  3573 00002196 [0000000000000000] 
  3574                                  
  3575 0000219E 4889C7                  	mov rdi, rax
  3576 000021A1 E84B380000              	call print_sexpr_if_not_void
  3577 000021A6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3578 000021AB E8EC350000              	call malloc
  3579 000021B0 50                      	push rax
  3580 000021B1 BF00000000              	mov rdi, 8 * 0	; new rib
  3581 000021B6 E8E1350000              	call malloc
  3582 000021BB 50                      	push rax
  3583 000021BC BF08000000              	mov rdi, 8 * 1	; extended env
  3584 000021C1 E8D6350000              	call malloc
  3585 000021C6 488B7D10                	mov rdi, ENV
  3586 000021CA BE00000000              	mov rsi, 0
  3587 000021CF BA01000000              	mov rdx, 1
  3588                                  .L_lambda_simple_env_loop_001c:	; ext_env[i + 1] <-- env[i]
  3589 000021D4 4883FE00                	cmp rsi, 0
  3590 000021D8 7410                    	je .L_lambda_simple_env_end_001c
  3591 000021DA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3592 000021DE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3593 000021E2 48FFC6                  	inc rsi
  3594 000021E5 48FFC2                  	inc rdx
  3595 000021E8 EBEA                    	jmp .L_lambda_simple_env_loop_001c
  3596                                  .L_lambda_simple_env_end_001c:
  3597 000021EA 5B                      	pop rbx
  3598 000021EB BE00000000              	mov rsi, 0
  3599                                  .L_lambda_simple_params_loop_001c:	; copy params
  3600 000021F0 4883FE00                	cmp rsi, 0
  3601 000021F4 740E                    	je .L_lambda_simple_params_end_001c
  3602 000021F6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3603 000021FB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3604 000021FF 48FFC6                  	inc rsi
  3605 00002202 EBEC                    	jmp .L_lambda_simple_params_loop_001c
  3606                                  .L_lambda_simple_params_end_001c:
  3607 00002204 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3608 00002207 4889C3                  	mov rbx, rax
  3609 0000220A 58                      	pop rax
  3610 0000220B C60004                  	mov byte [rax], T_closure
  3611 0000220E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3612 00002212 48C74009[1F220000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001c
  3613 0000221A E9A4000000              	jmp .L_lambda_simple_end_001c
  3614                                  .L_lambda_simple_code_001c:	; lambda-simple body
  3615 0000221F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3616 00002225 740B                    	je .L_lambda_simple_arity_check_ok_001c
  3617 00002227 FF742410                	push qword [rsp + 8 * 2]
  3618 0000222B 6A01                    	push 1
  3619 0000222D E923350000              	jmp L_error_incorrect_arity_simple
  3620                                  .L_lambda_simple_arity_check_ok_001c:
  3621 00002232 C8000000                	enter 0, 0
  3622                                  	; preparing a tail-call
  3623                                  	; preparing a non-tail-call
  3624 00002236 488B4520                	mov rax, PARAM(0)	; param x
  3625 0000223A 50                      	push rax
  3626 0000223B 6A01                    	push 1	; arg count
  3627 0000223D 488B0425[6D0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  3628 00002245 803805                  	cmp byte [rax], T_undefined
  3629 00002248 0F8421340000            	je L_error_fvar_undefined
  3630 0000224E 803804                  	cmp byte [rax], T_closure
  3631 00002251 0F859C340000            	jne L_error_non_closure
  3632 00002257 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3633 0000225A FF5009                  	call SOB_CLOSURE_CODE(rax)
  3634 0000225D 50                      	push rax
  3635 0000225E 6A01                    	push 1	; arg count
  3636 00002260 488B0425[6D0A0000]      	mov rax, qword [free_var_32]	; free var cddr
  3637 00002268 803805                  	cmp byte [rax], T_undefined
  3638 0000226B 0F84FE330000            	je L_error_fvar_undefined
  3639 00002271 803804                  	cmp byte [rax], T_closure
  3640 00002274 0F8579340000            	jne L_error_non_closure
  3641 0000227A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3642 0000227D FF7508                  	push qword [rbp + 8 * 1]
  3643                                   ; old ret addr
  3644 00002280 FF7500                  	push qword [rbp]
  3645                                   ; restore the old rbp
  3646 00002283 BB01000000              	mov rbx, 1
  3647 00002288 4883C303                	add rbx, 3
  3648 0000228C 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3649 00002290 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3650 00002295 4C8D4DF8                	lea r9, [rbp - 8]
  3651 00002299 B905000000              	mov rcx, 5
  3652                                  .L_tc_recycle_frame_loop_001c:
  3653 0000229E 4883F900                	cmp rcx, 0
  3654 000022A2 7413                    	je .L_tc_recycle_frame_done_001c
  3655 000022A4 4D8B11                  	mov r10, qword [r9]
  3656 000022A7 4D8910                  	mov qword [r8], r10
  3657 000022AA 4983E808                	sub r8, 8
  3658 000022AE 4983E908                	sub r9, 8
  3659 000022B2 48FFC9                  	dec rcx
  3660 000022B5 EBE7                    	jmp .L_tc_recycle_frame_loop_001c
  3661                                  .L_tc_recycle_frame_done_001c:
  3662 000022B7 498D6008                	lea rsp, [r8 + 8]
  3663 000022BB 5D                      	pop rbp ; restore the old rbp
  3664 000022BC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3665 000022BF C9                      	leave
  3666 000022C0 C21800                  	ret AND_KILL_FRAME(1)
  3667                                  .L_lambda_simple_end_001c:	; new closure is in rax
  3668 000022C3 48890425[4B0A0000]      	mov qword [free_var_30], rax
  3669 000022CB 48B8-                   	mov rax, sob_void
  3669 000022CD [0000000000000000] 
  3670                                  
  3671 000022D5 4889C7                  	mov rdi, rax
  3672 000022D8 E814370000              	call print_sexpr_if_not_void
  3673 000022DD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3674 000022E2 E8B5340000              	call malloc
  3675 000022E7 50                      	push rax
  3676 000022E8 BF00000000              	mov rdi, 8 * 0	; new rib
  3677 000022ED E8AA340000              	call malloc
  3678 000022F2 50                      	push rax
  3679 000022F3 BF08000000              	mov rdi, 8 * 1	; extended env
  3680 000022F8 E89F340000              	call malloc
  3681 000022FD 488B7D10                	mov rdi, ENV
  3682 00002301 BE00000000              	mov rsi, 0
  3683 00002306 BA01000000              	mov rdx, 1
  3684                                  .L_lambda_simple_env_loop_001d:	; ext_env[i + 1] <-- env[i]
  3685 0000230B 4883FE00                	cmp rsi, 0
  3686 0000230F 7410                    	je .L_lambda_simple_env_end_001d
  3687 00002311 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3688 00002315 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3689 00002319 48FFC6                  	inc rsi
  3690 0000231C 48FFC2                  	inc rdx
  3691 0000231F EBEA                    	jmp .L_lambda_simple_env_loop_001d
  3692                                  .L_lambda_simple_env_end_001d:
  3693 00002321 5B                      	pop rbx
  3694 00002322 BE00000000              	mov rsi, 0
  3695                                  .L_lambda_simple_params_loop_001d:	; copy params
  3696 00002327 4883FE00                	cmp rsi, 0
  3697 0000232B 740E                    	je .L_lambda_simple_params_end_001d
  3698 0000232D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3699 00002332 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3700 00002336 48FFC6                  	inc rsi
  3701 00002339 EBEC                    	jmp .L_lambda_simple_params_loop_001d
  3702                                  .L_lambda_simple_params_end_001d:
  3703 0000233B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3704 0000233E 4889C3                  	mov rbx, rax
  3705 00002341 58                      	pop rax
  3706 00002342 C60004                  	mov byte [rax], T_closure
  3707 00002345 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3708 00002349 48C74009[56230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001d
  3709 00002351 E91E010000              	jmp .L_lambda_simple_end_001d
  3710                                  .L_lambda_simple_code_001d:	; lambda-simple body
  3711 00002356 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3712 0000235C 740B                    	je .L_lambda_simple_arity_check_ok_001d
  3713 0000235E FF742410                	push qword [rsp + 8 * 2]
  3714 00002362 6A01                    	push 1
  3715 00002364 E9EC330000              	jmp L_error_incorrect_arity_simple
  3716                                  .L_lambda_simple_arity_check_ok_001d:
  3717 00002369 C8000000                	enter 0, 0
  3718                                  	; preparing a non-tail-call
  3719 0000236D 488B4520                	mov rax, PARAM(0)	; param e
  3720 00002371 50                      	push rax
  3721 00002372 6A01                    	push 1	; arg count
  3722 00002374 488B0425[390B0000]      	mov rax, qword [free_var_44]	; free var null?
  3723 0000237C 803805                  	cmp byte [rax], T_undefined
  3724 0000237F 0F84EA320000            	je L_error_fvar_undefined
  3725 00002385 803804                  	cmp byte [rax], T_closure
  3726 00002388 0F8565330000            	jne L_error_non_closure
  3727 0000238E FF7001                  	push SOB_CLOSURE_ENV(rax)
  3728 00002391 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3729 00002394 483D[02000000]          	cmp rax, sob_boolean_false
  3730 0000239A 0F84D0000000            	je .L_or_end_0001
  3731                                  
  3732                                  	; preparing a non-tail-call
  3733 000023A0 488B4520                	mov rax, PARAM(0)	; param e
  3734 000023A4 50                      	push rax
  3735 000023A5 6A01                    	push 1	; arg count
  3736 000023A7 488B0425[5B0B0000]      	mov rax, qword [free_var_46]	; free var pair?
  3737 000023AF 803805                  	cmp byte [rax], T_undefined
  3738 000023B2 0F84B7320000            	je L_error_fvar_undefined
  3739 000023B8 803804                  	cmp byte [rax], T_closure
  3740 000023BB 0F8532330000            	jne L_error_non_closure
  3741 000023C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3742 000023C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3743 000023C7 483D[02000000]          	cmp rax, sob_boolean_false
  3744 000023CD 0F848B000000            	je .L_if_else_0001
  3745                                  	; preparing a tail-call
  3746                                  	; preparing a non-tail-call
  3747 000023D3 488B4520                	mov rax, PARAM(0)	; param e
  3748 000023D7 50                      	push rax
  3749 000023D8 6A01                    	push 1	; arg count
  3750 000023DA 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  3751 000023E2 803805                  	cmp byte [rax], T_undefined
  3752 000023E5 0F8484320000            	je L_error_fvar_undefined
  3753 000023EB 803804                  	cmp byte [rax], T_closure
  3754 000023EE 0F85FF320000            	jne L_error_non_closure
  3755 000023F4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3756 000023F7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3757 000023FA 50                      	push rax
  3758 000023FB 6A01                    	push 1	; arg count
  3759 000023FD 488B0425[060B0000]      	mov rax, qword [free_var_41]	; free var list?
  3760 00002405 803805                  	cmp byte [rax], T_undefined
  3761 00002408 0F8461320000            	je L_error_fvar_undefined
  3762 0000240E 803804                  	cmp byte [rax], T_closure
  3763 00002411 0F85DC320000            	jne L_error_non_closure
  3764 00002417 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3765 0000241A FF7508                  	push qword [rbp + 8 * 1]
  3766                                   ; old ret addr
  3767 0000241D FF7500                  	push qword [rbp]
  3768                                   ; restore the old rbp
  3769 00002420 BB01000000              	mov rbx, 1
  3770 00002425 4883C303                	add rbx, 3
  3771 00002429 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3772 0000242D 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3773 00002432 4C8D4DF8                	lea r9, [rbp - 8]
  3774 00002436 B905000000              	mov rcx, 5
  3775                                  .L_tc_recycle_frame_loop_001d:
  3776 0000243B 4883F900                	cmp rcx, 0
  3777 0000243F 7413                    	je .L_tc_recycle_frame_done_001d
  3778 00002441 4D8B11                  	mov r10, qword [r9]
  3779 00002444 4D8910                  	mov qword [r8], r10
  3780 00002447 4983E808                	sub r8, 8
  3781 0000244B 4983E908                	sub r9, 8
  3782 0000244F 48FFC9                  	dec rcx
  3783 00002452 EBE7                    	jmp .L_tc_recycle_frame_loop_001d
  3784                                  .L_tc_recycle_frame_done_001d:
  3785 00002454 498D6008                	lea rsp, [r8 + 8]
  3786 00002458 5D                      	pop rbp ; restore the old rbp
  3787 00002459 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3788 0000245C EB0A                    	jmp .L_if_end_0001
  3789                                  .L_if_else_0001:
  3790 0000245E 48B8-                   	mov rax, L_constants + 2
  3790 00002460 [0200000000000000] 
  3791                                  .L_if_end_0001:
  3792 00002468 483D[02000000]          	cmp rax, sob_boolean_false
  3793 0000246E 7400                    	je .L_or_end_0001
  3794                                  .L_or_end_0001:
  3795 00002470 C9                      	leave
  3796 00002471 C21800                  	ret AND_KILL_FRAME(1)
  3797                                  .L_lambda_simple_end_001d:	; new closure is in rax
  3798 00002474 48890425[060B0000]      	mov qword [free_var_41], rax
  3799 0000247C 48B8-                   	mov rax, sob_void
  3799 0000247E [0000000000000000] 
  3800                                  
  3801 00002486 4889C7                  	mov rdi, rax
  3802 00002489 E863350000              	call print_sexpr_if_not_void
  3803 0000248E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3804 00002493 E804330000              	call malloc
  3805 00002498 50                      	push rax
  3806 00002499 BF00000000              	mov rdi, 8 * 0	; new rib
  3807 0000249E E8F9320000              	call malloc
  3808 000024A3 50                      	push rax
  3809 000024A4 BF08000000              	mov rdi, 8 * 1	; extended env
  3810 000024A9 E8EE320000              	call malloc
  3811 000024AE 488B7D10                	mov rdi, ENV
  3812 000024B2 4831F6                  	 xor rsi, rsi
  3813 000024B5 4831D2                  	 xor rdx, rdx
  3814 000024B8 48FFC2                  	inc rdx
  3815                                  .L_lambda_opt_env_loop_0001:	; 
  3816 000024BB 4883FE00                	cmp rsi, 0
  3817 000024BF 7410                    	je .L_lambda_opt_env_end_0001
  3818 000024C1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3819 000024C5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3820 000024C9 48FFC6                  	inc rsi
  3821 000024CC 48FFC2                  	inc rdx
  3822 000024CF EBEA                    	jmp .L_lambda_opt_env_loop_0001
  3823                                  .L_lambda_opt_env_end_0001:
  3824 000024D1 5B                      	pop rbx
  3825 000024D2 4831F6                  	xor rsi, rsi
  3826                                  .L_lambda_opt_params_loop_0001:	; copy params
  3827 000024D5 4883FE00                	cmp rsi, 0
  3828 000024D9 740E                    	je .L_lambda_opt_params_end_0001
  3829 000024DB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3830 000024E0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3831 000024E4 48FFC6                  	inc rsi
  3832 000024E7 EBEC                    	jmp .L_lambda_opt_params_loop_0001
  3833                                  .L_lambda_opt_params_end_0001:
  3834 000024E9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3835 000024EC 4889C3                  	mov rbx, rax
  3836 000024EF 58                      	pop rax
  3837 000024F0 C60004                  	mov byte [rax], T_closure
  3838 000024F3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3839 000024F7 48C74009[04250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
  3840 000024FF E9FE000000              	jmp .L_lambda_opt_end_0001
  3841                                  .L_lambda_opt_code_0001:
  3842 00002504 4C8B7C2410              	mov r15, qword [rsp + 8 * 2]
  3843 00002509 4983FF00                	cmp r15, 0
  3844 0000250D 7409                    	je .L_lambda_opt_arity_check_exact_0001
  3845 0000250F 7F57                    	jg .L_lambda_opt_arity_check_more_0001
  3846 00002511 6A00                    	push 0
  3847 00002513 E951320000              	jmp L_error_incorrect_arity_opt
  3848                                  .L_lambda_opt_arity_check_exact_0001: ;Exact case
  3849 00002518 4C8B0424                	mov r8, qword [rsp -8 * 0]
  3850 0000251C 4C894424F8              	mov qword [rsp -8], r8
  3851 00002521 4C8B442408              	mov r8, qword [rsp +8]
  3852 00002526 4C890424                	mov qword [rsp +8 * 0], r8
  3853 0000252A 4C8B442410              	mov r8, qword [rsp +8 * 2]
  3854 0000252F 4C89C1                  	mov rcx, r8
  3855 00002532 49FFC0                  	inc r8
  3856 00002535 4C89442408              	mov qword [rsp +8], r8
  3857 0000253A 4889E2                  	mov rdx, rsp
  3858 0000253D 4883C218                	add rdx, 24
  3859                                  .L_lambda_opt_loop_copy_to_new_frame_exact_0001:
  3860 00002541 4883F900                	cmp rcx, 0
  3861 00002545 7410                    	je .L_lambda_opt_loop_copy_to_new_frame_exact_end_0001
  3862 00002547 4C8B02                  	mov r8, qword [rdx]
  3863 0000254A 4C8942F8                	mov qword [rdx - 8], r8
  3864 0000254E 4883C208                	add rdx, 8
  3865 00002552 48FFC9                  	dec rcx
  3866 00002555 EBEA                    	jmp .L_lambda_opt_loop_copy_to_new_frame_exact_0001
  3867                                  .L_lambda_opt_loop_copy_to_new_frame_exact_end_0001:
  3868 00002557 48C742F8[01000000]      	mov qword [rdx - 8], sob_nil
  3869 0000255F 4883EC08                	sub rsp, 8
  3870 00002563 E985000000              	jmp .L_lambda_opt_stack_adjusted_0001
  3871                                  .L_lambda_opt_arity_check_more_0001:
  3872 00002568 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  3873 0000256D 4D89C4                  	mov r12, r8
  3874 00002570 4C89C1                  	mov rcx, r8
  3875 00002573 4D8D6802                	lea r13, [r8 + 2] 
  3876 00002577 4883E900                	sub rcx, 0
  3877 0000257B 4E8D5CC410              	lea r11, qword [rsp + r8 * 8 + 16]
  3878 00002580 49BE-                   	mov r14, sob_nil
  3878 00002582 [0100000000000000] 
  3879                                  .L_lambda_opt_create_list_of_opt_params_0001:
  3880 0000258A 4883F900                	cmp rcx, 0
  3881 0000258E 7424                    	je .L_lambda_opt_create_list_of_opt_params_end_0001
  3882 00002590 BF11000000              	mov rdi, 17
  3883 00002595 E802320000              	call malloc
  3884 0000259A C60021                  	mov byte [rax], T_pair
  3885 0000259D 498B1B                  	mov rbx, qword [r11]
  3886 000025A0 48895801                	mov qword [rax +1], rbx
  3887 000025A4 4C897009                	mov qword [rax + 1 + 8], r14
  3888 000025A8 4989C6                  	mov r14, rax
  3889 000025AB 48FFC9                  	dec rcx
  3890 000025AE 4983EB08                	sub r11, 8
  3891 000025B2 EBD6                    	jmp .L_lambda_opt_create_list_of_opt_params_0001
  3892                                  .L_lambda_opt_create_list_of_opt_params_end_0001:
  3893 000025B4 4C8D542418              	lea r10, [rsp + 0*8 + 8*3]
  3894 000025B9 4D8932                  	mov qword [r10], r14
  3895 000025BC 4E8D2CED00000000        	lea r13, [8 * r13]
  3896 000025C4 4901E5                  	add r13, rsp
  3897 000025C7 B904000000              	mov rcx, 4 + 0
  3898                                  .L_lambda_opt_stack_shrink_loop_0001:
  3899 000025CC 4883F900                	cmp rcx, 0
  3900 000025D0 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0001
  3901 000025D2 4D8B1A                  	mov r11, qword [r10]
  3902 000025D5 4D895D00                	mov qword [r13], r11
  3903 000025D9 4983EA08                	sub r10, 8
  3904 000025DD 4983ED08                	sub r13, 8
  3905 000025E1 48FFC9                  	dec rcx
  3906 000025E4 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0001
  3907                                  .L_lambda_opt_stack_shrink_loop_exit_0001:
  3908 000025E6 4983C508                	add r13, 8
  3909 000025EA 4C89EC                  	mov rsp, r13
  3910                                  .L_lambda_opt_stack_adjusted_0001:
  3911 000025ED 48C744241001000000      	mov qword [rsp + 8*2], 1
  3912 000025F6 C8000000                	enter 0, 0
  3913 000025FA 488B4520                	mov rax, PARAM(0)	; param args
  3914 000025FE C9                      	leave
  3915 000025FF C21800                  	ret 8 * (2 + 1)
  3916                                  .L_lambda_opt_end_0001:	; new closure is in rax
  3917 00002602 48890425[E40A0000]      	mov qword [free_var_39], rax
  3918 0000260A 48B8-                   	mov rax, sob_void
  3918 0000260C [0000000000000000] 
  3919                                  
  3920 00002614 4889C7                  	mov rdi, rax
  3921 00002617 E8D5330000              	call print_sexpr_if_not_void
  3922 0000261C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3923 00002621 E876310000              	call malloc
  3924 00002626 50                      	push rax
  3925 00002627 BF00000000              	mov rdi, 8 * 0	; new rib
  3926 0000262C E86B310000              	call malloc
  3927 00002631 50                      	push rax
  3928 00002632 BF08000000              	mov rdi, 8 * 1	; extended env
  3929 00002637 E860310000              	call malloc
  3930 0000263C 488B7D10                	mov rdi, ENV
  3931 00002640 BE00000000              	mov rsi, 0
  3932 00002645 BA01000000              	mov rdx, 1
  3933                                  .L_lambda_simple_env_loop_001e:	; ext_env[i + 1] <-- env[i]
  3934 0000264A 4883FE00                	cmp rsi, 0
  3935 0000264E 7410                    	je .L_lambda_simple_env_end_001e
  3936 00002650 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3937 00002654 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3938 00002658 48FFC6                  	inc rsi
  3939 0000265B 48FFC2                  	inc rdx
  3940 0000265E EBEA                    	jmp .L_lambda_simple_env_loop_001e
  3941                                  .L_lambda_simple_env_end_001e:
  3942 00002660 5B                      	pop rbx
  3943 00002661 BE00000000              	mov rsi, 0
  3944                                  .L_lambda_simple_params_loop_001e:	; copy params
  3945 00002666 4883FE00                	cmp rsi, 0
  3946 0000266A 740E                    	je .L_lambda_simple_params_end_001e
  3947 0000266C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3948 00002671 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3949 00002675 48FFC6                  	inc rsi
  3950 00002678 EBEC                    	jmp .L_lambda_simple_params_loop_001e
  3951                                  .L_lambda_simple_params_end_001e:
  3952 0000267A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3953 0000267D 4889C3                  	mov rbx, rax
  3954 00002680 58                      	pop rax
  3955 00002681 C60004                  	mov byte [rax], T_closure
  3956 00002684 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3957 00002688 48C74009[92260000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001e
  3958 00002690 EB3D                    	jmp .L_lambda_simple_end_001e
  3959                                  .L_lambda_simple_code_001e:	; lambda-simple body
  3960 00002692 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3961 00002698 740B                    	je .L_lambda_simple_arity_check_ok_001e
  3962 0000269A FF742410                	push qword [rsp + 8 * 2]
  3963 0000269E 6A01                    	push 1
  3964 000026A0 E9B0300000              	jmp L_error_incorrect_arity_simple
  3965                                  .L_lambda_simple_arity_check_ok_001e:
  3966 000026A5 C8000000                	enter 0, 0
  3967 000026A9 488B4520                	mov rax, PARAM(0)	; param x
  3968 000026AD 483D[02000000]          	cmp rax, sob_boolean_false
  3969 000026B3 740C                    	je .L_if_else_0002
  3970 000026B5 48B8-                   	mov rax, L_constants + 2
  3970 000026B7 [0200000000000000] 
  3971 000026BF EB0A                    	jmp .L_if_end_0002
  3972                                  .L_if_else_0002:
  3973 000026C1 48B8-                   	mov rax, L_constants + 3
  3973 000026C3 [0300000000000000] 
  3974                                  .L_if_end_0002:
  3975 000026CB C9                      	leave
  3976 000026CC C21800                  	ret AND_KILL_FRAME(1)
  3977                                  .L_lambda_simple_end_001e:	; new closure is in rax
  3978 000026CF 48890425[280B0000]      	mov qword [free_var_43], rax
  3979 000026D7 48B8-                   	mov rax, sob_void
  3979 000026D9 [0000000000000000] 
  3980                                  
  3981 000026E1 4889C7                  	mov rdi, rax
  3982 000026E4 E808330000              	call print_sexpr_if_not_void
  3983 000026E9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3984 000026EE E8A9300000              	call malloc
  3985 000026F3 50                      	push rax
  3986 000026F4 BF00000000              	mov rdi, 8 * 0	; new rib
  3987 000026F9 E89E300000              	call malloc
  3988 000026FE 50                      	push rax
  3989 000026FF BF08000000              	mov rdi, 8 * 1	; extended env
  3990 00002704 E893300000              	call malloc
  3991 00002709 488B7D10                	mov rdi, ENV
  3992 0000270D BE00000000              	mov rsi, 0
  3993 00002712 BA01000000              	mov rdx, 1
  3994                                  .L_lambda_simple_env_loop_001f:	; ext_env[i + 1] <-- env[i]
  3995 00002717 4883FE00                	cmp rsi, 0
  3996 0000271B 7410                    	je .L_lambda_simple_env_end_001f
  3997 0000271D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3998 00002721 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3999 00002725 48FFC6                  	inc rsi
  4000 00002728 48FFC2                  	inc rdx
  4001 0000272B EBEA                    	jmp .L_lambda_simple_env_loop_001f
  4002                                  .L_lambda_simple_env_end_001f:
  4003 0000272D 5B                      	pop rbx
  4004 0000272E BE00000000              	mov rsi, 0
  4005                                  .L_lambda_simple_params_loop_001f:	; copy params
  4006 00002733 4883FE00                	cmp rsi, 0
  4007 00002737 740E                    	je .L_lambda_simple_params_end_001f
  4008 00002739 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4009 0000273E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4010 00002742 48FFC6                  	inc rsi
  4011 00002745 EBEC                    	jmp .L_lambda_simple_params_loop_001f
  4012                                  .L_lambda_simple_params_end_001f:
  4013 00002747 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4014 0000274A 4889C3                  	mov rbx, rax
  4015 0000274D 58                      	pop rax
  4016 0000274E C60004                  	mov byte [rax], T_closure
  4017 00002751 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4018 00002755 48C74009[62270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001f
  4019 0000275D E9B8000000              	jmp .L_lambda_simple_end_001f
  4020                                  .L_lambda_simple_code_001f:	; lambda-simple body
  4021 00002762 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4022 00002768 740B                    	je .L_lambda_simple_arity_check_ok_001f
  4023 0000276A FF742410                	push qword [rsp + 8 * 2]
  4024 0000276E 6A01                    	push 1
  4025 00002770 E9E02F0000              	jmp L_error_incorrect_arity_simple
  4026                                  .L_lambda_simple_arity_check_ok_001f:
  4027 00002775 C8000000                	enter 0, 0
  4028                                  	; preparing a non-tail-call
  4029 00002779 488B4520                	mov rax, PARAM(0)	; param q
  4030 0000277D 50                      	push rax
  4031 0000277E 6A01                    	push 1	; arg count
  4032 00002780 488B0425[D30A0000]      	mov rax, qword [free_var_38]	; free var integer?
  4033 00002788 803805                  	cmp byte [rax], T_undefined
  4034 0000278B 0F84DE2E0000            	je L_error_fvar_undefined
  4035 00002791 803804                  	cmp byte [rax], T_closure
  4036 00002794 0F85592F0000            	jne L_error_non_closure
  4037 0000279A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4038 0000279D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4039 000027A0 483D[02000000]          	cmp rax, sob_boolean_false
  4040 000027A6 746E                    	je .L_or_end_0002
  4041                                  
  4042                                  	; preparing a tail-call
  4043 000027A8 488B4520                	mov rax, PARAM(0)	; param q
  4044 000027AC 50                      	push rax
  4045 000027AD 6A01                    	push 1	; arg count
  4046 000027AF 488B0425[C20A0000]      	mov rax, qword [free_var_37]	; free var fraction?
  4047 000027B7 803805                  	cmp byte [rax], T_undefined
  4048 000027BA 0F84AF2E0000            	je L_error_fvar_undefined
  4049 000027C0 803804                  	cmp byte [rax], T_closure
  4050 000027C3 0F852A2F0000            	jne L_error_non_closure
  4051 000027C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4052 000027CC FF7508                  	push qword [rbp + 8 * 1]
  4053                                   ; old ret addr
  4054 000027CF FF7500                  	push qword [rbp]
  4055                                   ; restore the old rbp
  4056 000027D2 BB01000000              	mov rbx, 1
  4057 000027D7 4883C303                	add rbx, 3
  4058 000027DB 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  4059 000027DF 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  4060 000027E4 4C8D4DF8                	lea r9, [rbp - 8]
  4061 000027E8 B905000000              	mov rcx, 5
  4062                                  .L_tc_recycle_frame_loop_001e:
  4063 000027ED 4883F900                	cmp rcx, 0
  4064 000027F1 7413                    	je .L_tc_recycle_frame_done_001e
  4065 000027F3 4D8B11                  	mov r10, qword [r9]
  4066 000027F6 4D8910                  	mov qword [r8], r10
  4067 000027F9 4983E808                	sub r8, 8
  4068 000027FD 4983E908                	sub r9, 8
  4069 00002801 48FFC9                  	dec rcx
  4070 00002804 EBE7                    	jmp .L_tc_recycle_frame_loop_001e
  4071                                  .L_tc_recycle_frame_done_001e:
  4072 00002806 498D6008                	lea rsp, [r8 + 8]
  4073 0000280A 5D                      	pop rbp ; restore the old rbp
  4074 0000280B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4075 0000280E 483D[02000000]          	cmp rax, sob_boolean_false
  4076 00002814 7400                    	je .L_or_end_0002
  4077                                  .L_or_end_0002:
  4078 00002816 C9                      	leave
  4079 00002817 C21800                  	ret AND_KILL_FRAME(1)
  4080                                  .L_lambda_simple_end_001f:	; new closure is in rax
  4081 0000281A 48890425[6C0B0000]      	mov qword [free_var_47], rax
  4082 00002822 48B8-                   	mov rax, sob_void
  4082 00002824 [0000000000000000] 
  4083                                  
  4084 0000282C 4889C7                  	mov rdi, rax
  4085 0000282F E8BD310000              	call print_sexpr_if_not_void
  4086                                  	; preparing a non-tail-call
  4087 00002834 48B8-                   	mov rax, L_constants + 1993
  4087 00002836 [C907000000000000] 
  4088 0000283E 50                      	push rax
  4089 0000283F 6A01                    	push 1	; arg count
  4090 00002841 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4091 00002846 E8512F0000              	call malloc
  4092 0000284B 50                      	push rax
  4093 0000284C BF00000000              	mov rdi, 8 * 0	; new rib
  4094 00002851 E8462F0000              	call malloc
  4095 00002856 50                      	push rax
  4096 00002857 BF08000000              	mov rdi, 8 * 1	; extended env
  4097 0000285C E83B2F0000              	call malloc
  4098 00002861 488B7D10                	mov rdi, ENV
  4099 00002865 BE00000000              	mov rsi, 0
  4100 0000286A BA01000000              	mov rdx, 1
  4101                                  .L_lambda_simple_env_loop_0020:	; ext_env[i + 1] <-- env[i]
  4102 0000286F 4883FE00                	cmp rsi, 0
  4103 00002873 7410                    	je .L_lambda_simple_env_end_0020
  4104 00002875 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4105 00002879 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4106 0000287D 48FFC6                  	inc rsi
  4107 00002880 48FFC2                  	inc rdx
  4108 00002883 EBEA                    	jmp .L_lambda_simple_env_loop_0020
  4109                                  .L_lambda_simple_env_end_0020:
  4110 00002885 5B                      	pop rbx
  4111 00002886 BE00000000              	mov rsi, 0
  4112                                  .L_lambda_simple_params_loop_0020:	; copy params
  4113 0000288B 4883FE00                	cmp rsi, 0
  4114 0000288F 740E                    	je .L_lambda_simple_params_end_0020
  4115 00002891 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4116 00002896 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4117 0000289A 48FFC6                  	inc rsi
  4118 0000289D EBEC                    	jmp .L_lambda_simple_params_loop_0020
  4119                                  .L_lambda_simple_params_end_0020:
  4120 0000289F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4121 000028A2 4889C3                  	mov rbx, rax
  4122 000028A5 58                      	pop rax
  4123 000028A6 C60004                  	mov byte [rax], T_closure
  4124 000028A9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4125 000028AD 48C74009[BA280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0020
  4126 000028B5 E9C3030000              	jmp .L_lambda_simple_end_0020
  4127                                  .L_lambda_simple_code_0020:	; lambda-simple body
  4128 000028BA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4129 000028C0 740B                    	je .L_lambda_simple_arity_check_ok_0020
  4130 000028C2 FF742410                	push qword [rsp + 8 * 2]
  4131 000028C6 6A01                    	push 1
  4132 000028C8 E9882E0000              	jmp L_error_incorrect_arity_simple
  4133                                  .L_lambda_simple_arity_check_ok_0020:
  4134 000028CD C8000000                	enter 0, 0
  4135 000028D1 BF08000000              	mov rdi, 8*1
  4136 000028D6 E8C12E0000              	call malloc
  4137 000028DB 488B5D20                	mov rbx, PARAM(0)
  4138 000028DF 488918                  	mov qword [rax], rbx
  4139 000028E2 48894520                	mov PARAM(0), rax
  4140 000028E6 48B8-                   	mov rax, sob_void
  4140 000028E8 [0000000000000000] 
  4141                                  
  4142 000028F0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4143 000028F5 E8A22E0000              	call malloc
  4144 000028FA 50                      	push rax
  4145 000028FB BF08000000              	mov rdi, 8 * 1	; new rib
  4146 00002900 E8972E0000              	call malloc
  4147 00002905 50                      	push rax
  4148 00002906 BF10000000              	mov rdi, 8 * 2	; extended env
  4149 0000290B E88C2E0000              	call malloc
  4150 00002910 488B7D10                	mov rdi, ENV
  4151 00002914 BE00000000              	mov rsi, 0
  4152 00002919 BA01000000              	mov rdx, 1
  4153                                  .L_lambda_simple_env_loop_0021:	; ext_env[i + 1] <-- env[i]
  4154 0000291E 4883FE01                	cmp rsi, 1
  4155 00002922 7410                    	je .L_lambda_simple_env_end_0021
  4156 00002924 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4157 00002928 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4158 0000292C 48FFC6                  	inc rsi
  4159 0000292F 48FFC2                  	inc rdx
  4160 00002932 EBEA                    	jmp .L_lambda_simple_env_loop_0021
  4161                                  .L_lambda_simple_env_end_0021:
  4162 00002934 5B                      	pop rbx
  4163 00002935 BE00000000              	mov rsi, 0
  4164                                  .L_lambda_simple_params_loop_0021:	; copy params
  4165 0000293A 4883FE01                	cmp rsi, 1
  4166 0000293E 740E                    	je .L_lambda_simple_params_end_0021
  4167 00002940 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4168 00002945 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4169 00002949 48FFC6                  	inc rsi
  4170 0000294C EBEC                    	jmp .L_lambda_simple_params_loop_0021
  4171                                  .L_lambda_simple_params_end_0021:
  4172 0000294E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4173 00002951 4889C3                  	mov rbx, rax
  4174 00002954 58                      	pop rax
  4175 00002955 C60004                  	mov byte [rax], T_closure
  4176 00002958 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4177 0000295C 48C74009[69290000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0021
  4178 00002964 E928010000              	jmp .L_lambda_simple_end_0021
  4179                                  .L_lambda_simple_code_0021:	; lambda-simple body
  4180 00002969 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4181 0000296F 740B                    	je .L_lambda_simple_arity_check_ok_0021
  4182 00002971 FF742410                	push qword [rsp + 8 * 2]
  4183 00002975 6A02                    	push 2
  4184 00002977 E9D92D0000              	jmp L_error_incorrect_arity_simple
  4185                                  .L_lambda_simple_arity_check_ok_0021:
  4186 0000297C C8000000                	enter 0, 0
  4187                                  	; preparing a non-tail-call
  4188 00002980 488B4528                	mov rax, PARAM(1)	; param s
  4189 00002984 50                      	push rax
  4190 00002985 6A01                    	push 1	; arg count
  4191 00002987 488B0425[390B0000]      	mov rax, qword [free_var_44]	; free var null?
  4192 0000298F 803805                  	cmp byte [rax], T_undefined
  4193 00002992 0F84D72C0000            	je L_error_fvar_undefined
  4194 00002998 803804                  	cmp byte [rax], T_closure
  4195 0000299B 0F85522D0000            	jne L_error_non_closure
  4196 000029A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4197 000029A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4198 000029A7 483D[02000000]          	cmp rax, sob_boolean_false
  4199 000029AD 7409                    	je .L_if_else_0003
  4200 000029AF 488B4520                	mov rax, PARAM(0)	; param a
  4201 000029B3 E9D5000000              	jmp .L_if_end_0003
  4202                                  .L_if_else_0003:
  4203                                  	; preparing a tail-call
  4204                                  	; preparing a non-tail-call
  4205                                  	; preparing a non-tail-call
  4206 000029B8 488B4528                	mov rax, PARAM(1)	; param s
  4207 000029BC 50                      	push rax
  4208 000029BD 6A01                    	push 1	; arg count
  4209 000029BF 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  4210 000029C7 803805                  	cmp byte [rax], T_undefined
  4211 000029CA 0F849F2C0000            	je L_error_fvar_undefined
  4212 000029D0 803804                  	cmp byte [rax], T_closure
  4213 000029D3 0F851A2D0000            	jne L_error_non_closure
  4214 000029D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4215 000029DC FF5009                  	call SOB_CLOSURE_CODE(rax)
  4216 000029DF 50                      	push rax
  4217                                  	; preparing a non-tail-call
  4218 000029E0 488B4528                	mov rax, PARAM(1)	; param s
  4219 000029E4 50                      	push rax
  4220 000029E5 6A01                    	push 1	; arg count
  4221 000029E7 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  4222 000029EF 803805                  	cmp byte [rax], T_undefined
  4223 000029F2 0F84772C0000            	je L_error_fvar_undefined
  4224 000029F8 803804                  	cmp byte [rax], T_closure
  4225 000029FB 0F85F22C0000            	jne L_error_non_closure
  4226 00002A01 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4227 00002A04 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4228 00002A07 50                      	push rax
  4229 00002A08 6A02                    	push 2	; arg count
  4230 00002A0A 488B4510                	mov rax, ENV
  4231 00002A0E 488B00                  	mov rax, qword [rax + 8 * 0]
  4232 00002A11 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4233 00002A14 488B00                  	mov rax, qword [rax]
  4234 00002A17 803804                  	cmp byte [rax], T_closure
  4235 00002A1A 0F85D32C0000            	jne L_error_non_closure
  4236 00002A20 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4237 00002A23 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4238 00002A26 50                      	push rax
  4239 00002A27 488B4520                	mov rax, PARAM(0)	; param a
  4240 00002A2B 50                      	push rax
  4241 00002A2C 6A02                    	push 2	; arg count
  4242 00002A2E 488B0425[8F0A0000]      	mov rax, qword [free_var_34]	; free var cons
  4243 00002A36 803805                  	cmp byte [rax], T_undefined
  4244 00002A39 0F84302C0000            	je L_error_fvar_undefined
  4245 00002A3F 803804                  	cmp byte [rax], T_closure
  4246 00002A42 0F85AB2C0000            	jne L_error_non_closure
  4247 00002A48 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4248 00002A4B FF7508                  	push qword [rbp + 8 * 1]
  4249                                   ; old ret addr
  4250 00002A4E FF7500                  	push qword [rbp]
  4251                                   ; restore the old rbp
  4252 00002A51 BB02000000              	mov rbx, 2
  4253 00002A56 4883C303                	add rbx, 3
  4254 00002A5A 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  4255 00002A5E 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  4256 00002A63 4C8D4DF8                	lea r9, [rbp - 8]
  4257 00002A67 B906000000              	mov rcx, 6
  4258                                  .L_tc_recycle_frame_loop_001f:
  4259 00002A6C 4883F900                	cmp rcx, 0
  4260 00002A70 7413                    	je .L_tc_recycle_frame_done_001f
  4261 00002A72 4D8B11                  	mov r10, qword [r9]
  4262 00002A75 4D8910                  	mov qword [r8], r10
  4263 00002A78 4983E808                	sub r8, 8
  4264 00002A7C 4983E908                	sub r9, 8
  4265 00002A80 48FFC9                  	dec rcx
  4266 00002A83 EBE7                    	jmp .L_tc_recycle_frame_loop_001f
  4267                                  .L_tc_recycle_frame_done_001f:
  4268 00002A85 498D6008                	lea rsp, [r8 + 8]
  4269 00002A89 5D                      	pop rbp ; restore the old rbp
  4270 00002A8A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4271                                  .L_if_end_0003:
  4272 00002A8D C9                      	leave
  4273 00002A8E C22000                  	ret AND_KILL_FRAME(2)
  4274                                  .L_lambda_simple_end_0021:	; new closure is in rax
  4275 00002A91 50                      	push rax
  4276 00002A92 488B4520                	mov rax, PARAM(0)	; param run
  4277 00002A96 8F00                    	pop qword [rax]
  4278 00002A98 48B8-                   	mov rax, sob_void
  4278 00002A9A [0000000000000000] 
  4279                                  
  4280 00002AA2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4281 00002AA7 E8F02C0000              	call malloc
  4282 00002AAC 50                      	push rax
  4283 00002AAD BF08000000              	mov rdi, 8 * 1	; new rib
  4284 00002AB2 E8E52C0000              	call malloc
  4285 00002AB7 50                      	push rax
  4286 00002AB8 BF10000000              	mov rdi, 8 * 2	; extended env
  4287 00002ABD E8DA2C0000              	call malloc
  4288 00002AC2 488B7D10                	mov rdi, ENV
  4289 00002AC6 4831F6                  	 xor rsi, rsi
  4290 00002AC9 4831D2                  	 xor rdx, rdx
  4291 00002ACC 48FFC2                  	inc rdx
  4292                                  .L_lambda_opt_env_loop_0002:	; 
  4293 00002ACF 4883FE01                	cmp rsi, 1
  4294 00002AD3 7410                    	je .L_lambda_opt_env_end_0002
  4295 00002AD5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4296 00002AD9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4297 00002ADD 48FFC6                  	inc rsi
  4298 00002AE0 48FFC2                  	inc rdx
  4299 00002AE3 EBEA                    	jmp .L_lambda_opt_env_loop_0002
  4300                                  .L_lambda_opt_env_end_0002:
  4301 00002AE5 5B                      	pop rbx
  4302 00002AE6 4831F6                  	xor rsi, rsi
  4303                                  .L_lambda_opt_params_loop_0002:	; copy params
  4304 00002AE9 4883FE01                	cmp rsi, 1
  4305 00002AED 740E                    	je .L_lambda_opt_params_end_0002
  4306 00002AEF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4307 00002AF4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4308 00002AF8 48FFC6                  	inc rsi
  4309 00002AFB EBEC                    	jmp .L_lambda_opt_params_loop_0002
  4310                                  .L_lambda_opt_params_end_0002:
  4311 00002AFD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4312 00002B00 4889C3                  	mov rbx, rax
  4313 00002B03 58                      	pop rax
  4314 00002B04 C60004                  	mov byte [rax], T_closure
  4315 00002B07 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4316 00002B0B 48C74009[182B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0002
  4317 00002B13 E961010000              	jmp .L_lambda_opt_end_0002
  4318                                  .L_lambda_opt_code_0002:
  4319 00002B18 4C8B7C2410              	mov r15, qword [rsp + 8 * 2]
  4320 00002B1D 4983FF01                	cmp r15, 1
  4321 00002B21 7409                    	je .L_lambda_opt_arity_check_exact_0002
  4322 00002B23 7F57                    	jg .L_lambda_opt_arity_check_more_0002
  4323 00002B25 6A01                    	push 1
  4324 00002B27 E93D2C0000              	jmp L_error_incorrect_arity_opt
  4325                                  .L_lambda_opt_arity_check_exact_0002: ;Exact case
  4326 00002B2C 4C8B0424                	mov r8, qword [rsp -8 * 0]
  4327 00002B30 4C894424F8              	mov qword [rsp -8], r8
  4328 00002B35 4C8B442408              	mov r8, qword [rsp +8]
  4329 00002B3A 4C890424                	mov qword [rsp +8 * 0], r8
  4330 00002B3E 4C8B442410              	mov r8, qword [rsp +8 * 2]
  4331 00002B43 4C89C1                  	mov rcx, r8
  4332 00002B46 49FFC0                  	inc r8
  4333 00002B49 4C89442408              	mov qword [rsp +8], r8
  4334 00002B4E 4889E2                  	mov rdx, rsp
  4335 00002B51 4883C218                	add rdx, 24
  4336                                  .L_lambda_opt_loop_copy_to_new_frame_exact_0002:
  4337 00002B55 4883F900                	cmp rcx, 0
  4338 00002B59 7410                    	je .L_lambda_opt_loop_copy_to_new_frame_exact_end_0002
  4339 00002B5B 4C8B02                  	mov r8, qword [rdx]
  4340 00002B5E 4C8942F8                	mov qword [rdx - 8], r8
  4341 00002B62 4883C208                	add rdx, 8
  4342 00002B66 48FFC9                  	dec rcx
  4343 00002B69 EBEA                    	jmp .L_lambda_opt_loop_copy_to_new_frame_exact_0002
  4344                                  .L_lambda_opt_loop_copy_to_new_frame_exact_end_0002:
  4345 00002B6B 48C742F8[01000000]      	mov qword [rdx - 8], sob_nil
  4346 00002B73 4883EC08                	sub rsp, 8
  4347 00002B77 E985000000              	jmp .L_lambda_opt_stack_adjusted_0002
  4348                                  .L_lambda_opt_arity_check_more_0002:
  4349 00002B7C 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  4350 00002B81 4D89C4                  	mov r12, r8
  4351 00002B84 4C89C1                  	mov rcx, r8
  4352 00002B87 4D8D6802                	lea r13, [r8 + 2] 
  4353 00002B8B 4883E901                	sub rcx, 1
  4354 00002B8F 4E8D5CC410              	lea r11, qword [rsp + r8 * 8 + 16]
  4355 00002B94 49BE-                   	mov r14, sob_nil
  4355 00002B96 [0100000000000000] 
  4356                                  .L_lambda_opt_create_list_of_opt_params_0002:
  4357 00002B9E 4883F900                	cmp rcx, 0
  4358 00002BA2 7424                    	je .L_lambda_opt_create_list_of_opt_params_end_0002
  4359 00002BA4 BF11000000              	mov rdi, 17
  4360 00002BA9 E8EE2B0000              	call malloc
  4361 00002BAE C60021                  	mov byte [rax], T_pair
  4362 00002BB1 498B1B                  	mov rbx, qword [r11]
  4363 00002BB4 48895801                	mov qword [rax +1], rbx
  4364 00002BB8 4C897009                	mov qword [rax + 1 + 8], r14
  4365 00002BBC 4989C6                  	mov r14, rax
  4366 00002BBF 48FFC9                  	dec rcx
  4367 00002BC2 4983EB08                	sub r11, 8
  4368 00002BC6 EBD6                    	jmp .L_lambda_opt_create_list_of_opt_params_0002
  4369                                  .L_lambda_opt_create_list_of_opt_params_end_0002:
  4370 00002BC8 4C8D542420              	lea r10, [rsp + 1*8 + 8*3]
  4371 00002BCD 4D8932                  	mov qword [r10], r14
  4372 00002BD0 4E8D2CED00000000        	lea r13, [8 * r13]
  4373 00002BD8 4901E5                  	add r13, rsp
  4374 00002BDB B905000000              	mov rcx, 4 + 1
  4375                                  .L_lambda_opt_stack_shrink_loop_0002:
  4376 00002BE0 4883F900                	cmp rcx, 0
  4377 00002BE4 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0002
  4378 00002BE6 4D8B1A                  	mov r11, qword [r10]
  4379 00002BE9 4D895D00                	mov qword [r13], r11
  4380 00002BED 4983EA08                	sub r10, 8
  4381 00002BF1 4983ED08                	sub r13, 8
  4382 00002BF5 48FFC9                  	dec rcx
  4383 00002BF8 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0002
  4384                                  .L_lambda_opt_stack_shrink_loop_exit_0002:
  4385 00002BFA 4983C508                	add r13, 8
  4386 00002BFE 4C89EC                  	mov rsp, r13
  4387                                  .L_lambda_opt_stack_adjusted_0002:
  4388 00002C01 48C744241002000000      	mov qword [rsp + 8*2], 2
  4389 00002C0A C8000000                	enter 0, 0
  4390                                  	; preparing a tail-call
  4391 00002C0E 488B4528                	mov rax, PARAM(1)	; param s
  4392 00002C12 50                      	push rax
  4393 00002C13 488B4520                	mov rax, PARAM(0)	; param a
  4394 00002C17 50                      	push rax
  4395 00002C18 6A02                    	push 2	; arg count
  4396 00002C1A 488B4510                	mov rax, ENV
  4397 00002C1E 488B00                  	mov rax, qword [rax + 8 * 0]
  4398 00002C21 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4399 00002C24 488B00                  	mov rax, qword [rax]
  4400 00002C27 803804                  	cmp byte [rax], T_closure
  4401 00002C2A 0F85C32A0000            	jne L_error_non_closure
  4402 00002C30 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4403 00002C33 FF7508                  	push qword [rbp + 8 * 1]
  4404                                   ; old ret addr
  4405 00002C36 FF7500                  	push qword [rbp]
  4406                                   ; restore the old rbp
  4407 00002C39 BB02000000              	mov rbx, 2
  4408 00002C3E 4883C303                	add rbx, 3
  4409 00002C42 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  4410 00002C46 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  4411 00002C4B 4C8D4DF8                	lea r9, [rbp - 8]
  4412 00002C4F B906000000              	mov rcx, 6
  4413                                  .L_tc_recycle_frame_loop_0020:
  4414 00002C54 4883F900                	cmp rcx, 0
  4415 00002C58 7413                    	je .L_tc_recycle_frame_done_0020
  4416 00002C5A 4D8B11                  	mov r10, qword [r9]
  4417 00002C5D 4D8910                  	mov qword [r8], r10
  4418 00002C60 4983E808                	sub r8, 8
  4419 00002C64 4983E908                	sub r9, 8
  4420 00002C68 48FFC9                  	dec rcx
  4421 00002C6B EBE7                    	jmp .L_tc_recycle_frame_loop_0020
  4422                                  .L_tc_recycle_frame_done_0020:
  4423 00002C6D 498D6008                	lea rsp, [r8 + 8]
  4424 00002C71 5D                      	pop rbp ; restore the old rbp
  4425 00002C72 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4426 00002C75 C9                      	leave
  4427 00002C76 C22000                  	ret 8 * (2 + 2)
  4428                                  .L_lambda_opt_end_0002:	; new closure is in rax
  4429 00002C79 C9                      	leave
  4430 00002C7A C21800                  	ret AND_KILL_FRAME(1)
  4431                                  .L_lambda_simple_end_0020:	; new closure is in rax
  4432 00002C7D 803804                  	cmp byte [rax], T_closure
  4433 00002C80 0F856D2A0000            	jne L_error_non_closure
  4434 00002C86 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4435 00002C89 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4436 00002C8C 48890425[F50A0000]      	mov qword [free_var_40], rax
  4437 00002C94 48B8-                   	mov rax, sob_void
  4437 00002C96 [0000000000000000] 
  4438                                  
  4439 00002C9E 4889C7                  	mov rdi, rax
  4440 00002CA1 E84B2D0000              	call print_sexpr_if_not_void
  4441                                  	; preparing a non-tail-call
  4442 00002CA6 48B8-                   	mov rax, L_constants + 1993
  4442 00002CA8 [C907000000000000] 
  4443 00002CB0 50                      	push rax
  4444 00002CB1 6A01                    	push 1	; arg count
  4445 00002CB3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4446 00002CB8 E8DF2A0000              	call malloc
  4447 00002CBD 50                      	push rax
  4448 00002CBE BF00000000              	mov rdi, 8 * 0	; new rib
  4449 00002CC3 E8D42A0000              	call malloc
  4450 00002CC8 50                      	push rax
  4451 00002CC9 BF08000000              	mov rdi, 8 * 1	; extended env
  4452 00002CCE E8C92A0000              	call malloc
  4453 00002CD3 488B7D10                	mov rdi, ENV
  4454 00002CD7 BE00000000              	mov rsi, 0
  4455 00002CDC BA01000000              	mov rdx, 1
  4456                                  .L_lambda_simple_env_loop_0022:	; ext_env[i + 1] <-- env[i]
  4457 00002CE1 4883FE00                	cmp rsi, 0
  4458 00002CE5 7410                    	je .L_lambda_simple_env_end_0022
  4459 00002CE7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4460 00002CEB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4461 00002CEF 48FFC6                  	inc rsi
  4462 00002CF2 48FFC2                  	inc rdx
  4463 00002CF5 EBEA                    	jmp .L_lambda_simple_env_loop_0022
  4464                                  .L_lambda_simple_env_end_0022:
  4465 00002CF7 5B                      	pop rbx
  4466 00002CF8 BE00000000              	mov rsi, 0
  4467                                  .L_lambda_simple_params_loop_0022:	; copy params
  4468 00002CFD 4883FE00                	cmp rsi, 0
  4469 00002D01 740E                    	je .L_lambda_simple_params_end_0022
  4470 00002D03 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4471 00002D08 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4472 00002D0C 48FFC6                  	inc rsi
  4473 00002D0F EBEC                    	jmp .L_lambda_simple_params_loop_0022
  4474                                  .L_lambda_simple_params_end_0022:
  4475 00002D11 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4476 00002D14 4889C3                  	mov rbx, rax
  4477 00002D17 58                      	pop rax
  4478 00002D18 C60004                  	mov byte [rax], T_closure
  4479 00002D1B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4480 00002D1F 48C74009[2C2D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0022
  4481 00002D27 E932040000              	jmp .L_lambda_simple_end_0022
  4482                                  .L_lambda_simple_code_0022:	; lambda-simple body
  4483 00002D2C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4484 00002D32 740B                    	je .L_lambda_simple_arity_check_ok_0022
  4485 00002D34 FF742410                	push qword [rsp + 8 * 2]
  4486 00002D38 6A01                    	push 1
  4487 00002D3A E9162A0000              	jmp L_error_incorrect_arity_simple
  4488                                  .L_lambda_simple_arity_check_ok_0022:
  4489 00002D3F C8000000                	enter 0, 0
  4490 00002D43 BF08000000              	mov rdi, 8*1
  4491 00002D48 E84F2A0000              	call malloc
  4492 00002D4D 488B5D20                	mov rbx, PARAM(0)
  4493 00002D51 488918                  	mov qword [rax], rbx
  4494 00002D54 48894520                	mov PARAM(0), rax
  4495 00002D58 48B8-                   	mov rax, sob_void
  4495 00002D5A [0000000000000000] 
  4496                                  
  4497 00002D62 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4498 00002D67 E8302A0000              	call malloc
  4499 00002D6C 50                      	push rax
  4500 00002D6D BF08000000              	mov rdi, 8 * 1	; new rib
  4501 00002D72 E8252A0000              	call malloc
  4502 00002D77 50                      	push rax
  4503 00002D78 BF10000000              	mov rdi, 8 * 2	; extended env
  4504 00002D7D E81A2A0000              	call malloc
  4505 00002D82 488B7D10                	mov rdi, ENV
  4506 00002D86 BE00000000              	mov rsi, 0
  4507 00002D8B BA01000000              	mov rdx, 1
  4508                                  .L_lambda_simple_env_loop_0023:	; ext_env[i + 1] <-- env[i]
  4509 00002D90 4883FE01                	cmp rsi, 1
  4510 00002D94 7410                    	je .L_lambda_simple_env_end_0023
  4511 00002D96 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4512 00002D9A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4513 00002D9E 48FFC6                  	inc rsi
  4514 00002DA1 48FFC2                  	inc rdx
  4515 00002DA4 EBEA                    	jmp .L_lambda_simple_env_loop_0023
  4516                                  .L_lambda_simple_env_end_0023:
  4517 00002DA6 5B                      	pop rbx
  4518 00002DA7 BE00000000              	mov rsi, 0
  4519                                  .L_lambda_simple_params_loop_0023:	; copy params
  4520 00002DAC 4883FE01                	cmp rsi, 1
  4521 00002DB0 740E                    	je .L_lambda_simple_params_end_0023
  4522 00002DB2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4523 00002DB7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4524 00002DBB 48FFC6                  	inc rsi
  4525 00002DBE EBEC                    	jmp .L_lambda_simple_params_loop_0023
  4526                                  .L_lambda_simple_params_end_0023:
  4527 00002DC0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4528 00002DC3 4889C3                  	mov rbx, rax
  4529 00002DC6 58                      	pop rax
  4530 00002DC7 C60004                  	mov byte [rax], T_closure
  4531 00002DCA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4532 00002DCE 48C74009[DB2D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0023
  4533 00002DD6 E929010000              	jmp .L_lambda_simple_end_0023
  4534                                  .L_lambda_simple_code_0023:	; lambda-simple body
  4535 00002DDB 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4536 00002DE1 740B                    	je .L_lambda_simple_arity_check_ok_0023
  4537 00002DE3 FF742410                	push qword [rsp + 8 * 2]
  4538 00002DE7 6A02                    	push 2
  4539 00002DE9 E967290000              	jmp L_error_incorrect_arity_simple
  4540                                  .L_lambda_simple_arity_check_ok_0023:
  4541 00002DEE C8000000                	enter 0, 0
  4542                                  	; preparing a non-tail-call
  4543 00002DF2 488B4528                	mov rax, PARAM(1)	; param s
  4544 00002DF6 50                      	push rax
  4545 00002DF7 6A01                    	push 1	; arg count
  4546 00002DF9 488B0425[5B0B0000]      	mov rax, qword [free_var_46]	; free var pair?
  4547 00002E01 803805                  	cmp byte [rax], T_undefined
  4548 00002E04 0F8465280000            	je L_error_fvar_undefined
  4549 00002E0A 803804                  	cmp byte [rax], T_closure
  4550 00002E0D 0F85E0280000            	jne L_error_non_closure
  4551 00002E13 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4552 00002E16 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4553 00002E19 483D[02000000]          	cmp rax, sob_boolean_false
  4554 00002E1F 0F84D7000000            	je .L_if_else_0004
  4555                                  	; preparing a tail-call
  4556                                  	; preparing a non-tail-call
  4557                                  	; preparing a non-tail-call
  4558 00002E25 488B4528                	mov rax, PARAM(1)	; param s
  4559 00002E29 50                      	push rax
  4560 00002E2A 6A01                    	push 1	; arg count
  4561 00002E2C 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  4562 00002E34 803805                  	cmp byte [rax], T_undefined
  4563 00002E37 0F8432280000            	je L_error_fvar_undefined
  4564 00002E3D 803804                  	cmp byte [rax], T_closure
  4565 00002E40 0F85AD280000            	jne L_error_non_closure
  4566 00002E46 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4567 00002E49 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4568 00002E4C 50                      	push rax
  4569                                  	; preparing a non-tail-call
  4570 00002E4D 488B4528                	mov rax, PARAM(1)	; param s
  4571 00002E51 50                      	push rax
  4572 00002E52 6A01                    	push 1	; arg count
  4573 00002E54 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  4574 00002E5C 803805                  	cmp byte [rax], T_undefined
  4575 00002E5F 0F840A280000            	je L_error_fvar_undefined
  4576 00002E65 803804                  	cmp byte [rax], T_closure
  4577 00002E68 0F8585280000            	jne L_error_non_closure
  4578 00002E6E FF7001                  	push SOB_CLOSURE_ENV(rax)
  4579 00002E71 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4580 00002E74 50                      	push rax
  4581 00002E75 6A02                    	push 2	; arg count
  4582 00002E77 488B4510                	mov rax, ENV
  4583 00002E7B 488B00                  	mov rax, qword [rax + 8 * 0]
  4584 00002E7E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4585 00002E81 488B00                  	mov rax, qword [rax]
  4586 00002E84 803804                  	cmp byte [rax], T_closure
  4587 00002E87 0F8566280000            	jne L_error_non_closure
  4588 00002E8D FF7001                  	push SOB_CLOSURE_ENV(rax)
  4589 00002E90 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4590 00002E93 50                      	push rax
  4591 00002E94 488B4520                	mov rax, PARAM(0)	; param a
  4592 00002E98 50                      	push rax
  4593 00002E99 6A02                    	push 2	; arg count
  4594 00002E9B 488B0425[8F0A0000]      	mov rax, qword [free_var_34]	; free var cons
  4595 00002EA3 803805                  	cmp byte [rax], T_undefined
  4596 00002EA6 0F84C3270000            	je L_error_fvar_undefined
  4597 00002EAC 803804                  	cmp byte [rax], T_closure
  4598 00002EAF 0F853E280000            	jne L_error_non_closure
  4599 00002EB5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4600 00002EB8 FF7508                  	push qword [rbp + 8 * 1]
  4601                                   ; old ret addr
  4602 00002EBB FF7500                  	push qword [rbp]
  4603                                   ; restore the old rbp
  4604 00002EBE BB02000000              	mov rbx, 2
  4605 00002EC3 4883C303                	add rbx, 3
  4606 00002EC7 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  4607 00002ECB 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  4608 00002ED0 4C8D4DF8                	lea r9, [rbp - 8]
  4609 00002ED4 B906000000              	mov rcx, 6
  4610                                  .L_tc_recycle_frame_loop_0021:
  4611 00002ED9 4883F900                	cmp rcx, 0
  4612 00002EDD 7413                    	je .L_tc_recycle_frame_done_0021
  4613 00002EDF 4D8B11                  	mov r10, qword [r9]
  4614 00002EE2 4D8910                  	mov qword [r8], r10
  4615 00002EE5 4983E808                	sub r8, 8
  4616 00002EE9 4983E908                	sub r9, 8
  4617 00002EED 48FFC9                  	dec rcx
  4618 00002EF0 EBE7                    	jmp .L_tc_recycle_frame_loop_0021
  4619                                  .L_tc_recycle_frame_done_0021:
  4620 00002EF2 498D6008                	lea rsp, [r8 + 8]
  4621 00002EF6 5D                      	pop rbp ; restore the old rbp
  4622 00002EF7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4623 00002EFA EB04                    	jmp .L_if_end_0004
  4624                                  .L_if_else_0004:
  4625 00002EFC 488B4520                	mov rax, PARAM(0)	; param a
  4626                                  .L_if_end_0004:
  4627 00002F00 C9                      	leave
  4628 00002F01 C22000                  	ret AND_KILL_FRAME(2)
  4629                                  .L_lambda_simple_end_0023:	; new closure is in rax
  4630 00002F04 50                      	push rax
  4631 00002F05 488B4520                	mov rax, PARAM(0)	; param run
  4632 00002F09 8F00                    	pop qword [rax]
  4633 00002F0B 48B8-                   	mov rax, sob_void
  4633 00002F0D [0000000000000000] 
  4634                                  
  4635 00002F15 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4636 00002F1A E87D280000              	call malloc
  4637 00002F1F 50                      	push rax
  4638 00002F20 BF08000000              	mov rdi, 8 * 1	; new rib
  4639 00002F25 E872280000              	call malloc
  4640 00002F2A 50                      	push rax
  4641 00002F2B BF10000000              	mov rdi, 8 * 2	; extended env
  4642 00002F30 E867280000              	call malloc
  4643 00002F35 488B7D10                	mov rdi, ENV
  4644 00002F39 4831F6                  	 xor rsi, rsi
  4645 00002F3C 4831D2                  	 xor rdx, rdx
  4646 00002F3F 48FFC2                  	inc rdx
  4647                                  .L_lambda_opt_env_loop_0003:	; 
  4648 00002F42 4883FE01                	cmp rsi, 1
  4649 00002F46 7410                    	je .L_lambda_opt_env_end_0003
  4650 00002F48 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4651 00002F4C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4652 00002F50 48FFC6                  	inc rsi
  4653 00002F53 48FFC2                  	inc rdx
  4654 00002F56 EBEA                    	jmp .L_lambda_opt_env_loop_0003
  4655                                  .L_lambda_opt_env_end_0003:
  4656 00002F58 5B                      	pop rbx
  4657 00002F59 4831F6                  	xor rsi, rsi
  4658                                  .L_lambda_opt_params_loop_0003:	; copy params
  4659 00002F5C 4883FE01                	cmp rsi, 1
  4660 00002F60 740E                    	je .L_lambda_opt_params_end_0003
  4661 00002F62 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4662 00002F67 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4663 00002F6B 48FFC6                  	inc rsi
  4664 00002F6E EBEC                    	jmp .L_lambda_opt_params_loop_0003
  4665                                  .L_lambda_opt_params_end_0003:
  4666 00002F70 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4667 00002F73 4889C3                  	mov rbx, rax
  4668 00002F76 58                      	pop rax
  4669 00002F77 C60004                  	mov byte [rax], T_closure
  4670 00002F7A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4671 00002F7E 48C74009[8B2F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0003
  4672 00002F86 E9CF010000              	jmp .L_lambda_opt_end_0003
  4673                                  .L_lambda_opt_code_0003:
  4674 00002F8B 4C8B7C2410              	mov r15, qword [rsp + 8 * 2]
  4675 00002F90 4983FF01                	cmp r15, 1
  4676 00002F94 7409                    	je .L_lambda_opt_arity_check_exact_0003
  4677 00002F96 7F57                    	jg .L_lambda_opt_arity_check_more_0003
  4678 00002F98 6A01                    	push 1
  4679 00002F9A E9CA270000              	jmp L_error_incorrect_arity_opt
  4680                                  .L_lambda_opt_arity_check_exact_0003: ;Exact case
  4681 00002F9F 4C8B0424                	mov r8, qword [rsp -8 * 0]
  4682 00002FA3 4C894424F8              	mov qword [rsp -8], r8
  4683 00002FA8 4C8B442408              	mov r8, qword [rsp +8]
  4684 00002FAD 4C890424                	mov qword [rsp +8 * 0], r8
  4685 00002FB1 4C8B442410              	mov r8, qword [rsp +8 * 2]
  4686 00002FB6 4C89C1                  	mov rcx, r8
  4687 00002FB9 49FFC0                  	inc r8
  4688 00002FBC 4C89442408              	mov qword [rsp +8], r8
  4689 00002FC1 4889E2                  	mov rdx, rsp
  4690 00002FC4 4883C218                	add rdx, 24
  4691                                  .L_lambda_opt_loop_copy_to_new_frame_exact_0003:
  4692 00002FC8 4883F900                	cmp rcx, 0
  4693 00002FCC 7410                    	je .L_lambda_opt_loop_copy_to_new_frame_exact_end_0003
  4694 00002FCE 4C8B02                  	mov r8, qword [rdx]
  4695 00002FD1 4C8942F8                	mov qword [rdx - 8], r8
  4696 00002FD5 4883C208                	add rdx, 8
  4697 00002FD9 48FFC9                  	dec rcx
  4698 00002FDC EBEA                    	jmp .L_lambda_opt_loop_copy_to_new_frame_exact_0003
  4699                                  .L_lambda_opt_loop_copy_to_new_frame_exact_end_0003:
  4700 00002FDE 48C742F8[01000000]      	mov qword [rdx - 8], sob_nil
  4701 00002FE6 4883EC08                	sub rsp, 8
  4702 00002FEA E985000000              	jmp .L_lambda_opt_stack_adjusted_0003
  4703                                  .L_lambda_opt_arity_check_more_0003:
  4704 00002FEF 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  4705 00002FF4 4D89C4                  	mov r12, r8
  4706 00002FF7 4C89C1                  	mov rcx, r8
  4707 00002FFA 4D8D6802                	lea r13, [r8 + 2] 
  4708 00002FFE 4883E901                	sub rcx, 1
  4709 00003002 4E8D5CC410              	lea r11, qword [rsp + r8 * 8 + 16]
  4710 00003007 49BE-                   	mov r14, sob_nil
  4710 00003009 [0100000000000000] 
  4711                                  .L_lambda_opt_create_list_of_opt_params_0003:
  4712 00003011 4883F900                	cmp rcx, 0
  4713 00003015 7424                    	je .L_lambda_opt_create_list_of_opt_params_end_0003
  4714 00003017 BF11000000              	mov rdi, 17
  4715 0000301C E87B270000              	call malloc
  4716 00003021 C60021                  	mov byte [rax], T_pair
  4717 00003024 498B1B                  	mov rbx, qword [r11]
  4718 00003027 48895801                	mov qword [rax +1], rbx
  4719 0000302B 4C897009                	mov qword [rax + 1 + 8], r14
  4720 0000302F 4989C6                  	mov r14, rax
  4721 00003032 48FFC9                  	dec rcx
  4722 00003035 4983EB08                	sub r11, 8
  4723 00003039 EBD6                    	jmp .L_lambda_opt_create_list_of_opt_params_0003
  4724                                  .L_lambda_opt_create_list_of_opt_params_end_0003:
  4725 0000303B 4C8D542420              	lea r10, [rsp + 1*8 + 8*3]
  4726 00003040 4D8932                  	mov qword [r10], r14
  4727 00003043 4E8D2CED00000000        	lea r13, [8 * r13]
  4728 0000304B 4901E5                  	add r13, rsp
  4729 0000304E B905000000              	mov rcx, 4 + 1
  4730                                  .L_lambda_opt_stack_shrink_loop_0003:
  4731 00003053 4883F900                	cmp rcx, 0
  4732 00003057 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0003
  4733 00003059 4D8B1A                  	mov r11, qword [r10]
  4734 0000305C 4D895D00                	mov qword [r13], r11
  4735 00003060 4983EA08                	sub r10, 8
  4736 00003064 4983ED08                	sub r13, 8
  4737 00003068 48FFC9                  	dec rcx
  4738 0000306B EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0003
  4739                                  .L_lambda_opt_stack_shrink_loop_exit_0003:
  4740 0000306D 4983C508                	add r13, 8
  4741 00003071 4C89EC                  	mov rsp, r13
  4742                                  .L_lambda_opt_stack_adjusted_0003:
  4743 00003074 48C744241002000000      	mov qword [rsp + 8*2], 2
  4744 0000307D C8000000                	enter 0, 0
  4745                                  	; preparing a tail-call
  4746                                  	; preparing a non-tail-call
  4747                                  	; preparing a non-tail-call
  4748 00003081 488B4528                	mov rax, PARAM(1)	; param s
  4749 00003085 50                      	push rax
  4750 00003086 6A01                    	push 1	; arg count
  4751 00003088 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  4752 00003090 803805                  	cmp byte [rax], T_undefined
  4753 00003093 0F84D6250000            	je L_error_fvar_undefined
  4754 00003099 803804                  	cmp byte [rax], T_closure
  4755 0000309C 0F8551260000            	jne L_error_non_closure
  4756 000030A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4757 000030A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4758 000030A8 50                      	push rax
  4759                                  	; preparing a non-tail-call
  4760 000030A9 488B4528                	mov rax, PARAM(1)	; param s
  4761 000030AD 50                      	push rax
  4762 000030AE 6A01                    	push 1	; arg count
  4763 000030B0 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  4764 000030B8 803805                  	cmp byte [rax], T_undefined
  4765 000030BB 0F84AE250000            	je L_error_fvar_undefined
  4766 000030C1 803804                  	cmp byte [rax], T_closure
  4767 000030C4 0F8529260000            	jne L_error_non_closure
  4768 000030CA FF7001                  	push SOB_CLOSURE_ENV(rax)
  4769 000030CD FF5009                  	call SOB_CLOSURE_CODE(rax)
  4770 000030D0 50                      	push rax
  4771 000030D1 6A02                    	push 2	; arg count
  4772 000030D3 488B4510                	mov rax, ENV
  4773 000030D7 488B00                  	mov rax, qword [rax + 8 * 0]
  4774 000030DA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4775 000030DD 488B00                  	mov rax, qword [rax]
  4776 000030E0 803804                  	cmp byte [rax], T_closure
  4777 000030E3 0F850A260000            	jne L_error_non_closure
  4778 000030E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4779 000030EC FF5009                  	call SOB_CLOSURE_CODE(rax)
  4780 000030EF 50                      	push rax
  4781 000030F0 488B4520                	mov rax, PARAM(0)	; param f
  4782 000030F4 50                      	push rax
  4783 000030F5 6A02                    	push 2	; arg count
  4784 000030F7 488B0425[4D080000]      	mov rax, qword [free_var_0]	; free var __bin-apply
  4785 000030FF 803805                  	cmp byte [rax], T_undefined
  4786 00003102 0F8467250000            	je L_error_fvar_undefined
  4787 00003108 803804                  	cmp byte [rax], T_closure
  4788 0000310B 0F85E2250000            	jne L_error_non_closure
  4789 00003111 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4790 00003114 FF7508                  	push qword [rbp + 8 * 1]
  4791                                   ; old ret addr
  4792 00003117 FF7500                  	push qword [rbp]
  4793                                   ; restore the old rbp
  4794 0000311A BB02000000              	mov rbx, 2
  4795 0000311F 4883C303                	add rbx, 3
  4796 00003123 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  4797 00003127 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  4798 0000312C 4C8D4DF8                	lea r9, [rbp - 8]
  4799 00003130 B906000000              	mov rcx, 6
  4800                                  .L_tc_recycle_frame_loop_0022:
  4801 00003135 4883F900                	cmp rcx, 0
  4802 00003139 7413                    	je .L_tc_recycle_frame_done_0022
  4803 0000313B 4D8B11                  	mov r10, qword [r9]
  4804 0000313E 4D8910                  	mov qword [r8], r10
  4805 00003141 4983E808                	sub r8, 8
  4806 00003145 4983E908                	sub r9, 8
  4807 00003149 48FFC9                  	dec rcx
  4808 0000314C EBE7                    	jmp .L_tc_recycle_frame_loop_0022
  4809                                  .L_tc_recycle_frame_done_0022:
  4810 0000314E 498D6008                	lea rsp, [r8 + 8]
  4811 00003152 5D                      	pop rbp ; restore the old rbp
  4812 00003153 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4813 00003156 C9                      	leave
  4814 00003157 C22000                  	ret 8 * (2 + 2)
  4815                                  .L_lambda_opt_end_0003:	; new closure is in rax
  4816 0000315A C9                      	leave
  4817 0000315B C21800                  	ret AND_KILL_FRAME(1)
  4818                                  .L_lambda_simple_end_0022:	; new closure is in rax
  4819 0000315E 803804                  	cmp byte [rax], T_closure
  4820 00003161 0F858C250000            	jne L_error_non_closure
  4821 00003167 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4822 0000316A FF5009                  	call SOB_CLOSURE_CODE(rax)
  4823 0000316D 48890425[80080000]      	mov qword [free_var_3], rax
  4824 00003175 48B8-                   	mov rax, sob_void
  4824 00003177 [0000000000000000] 
  4825                                  
  4826 0000317F 4889C7                  	mov rdi, rax
  4827 00003182 E86A280000              	call print_sexpr_if_not_void
  4828 00003187 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4829 0000318C E80B260000              	call malloc
  4830 00003191 50                      	push rax
  4831 00003192 BF00000000              	mov rdi, 8 * 0	; new rib
  4832 00003197 E800260000              	call malloc
  4833 0000319C 50                      	push rax
  4834 0000319D BF08000000              	mov rdi, 8 * 1	; extended env
  4835 000031A2 E8F5250000              	call malloc
  4836 000031A7 488B7D10                	mov rdi, ENV
  4837 000031AB 4831F6                  	 xor rsi, rsi
  4838 000031AE 4831D2                  	 xor rdx, rdx
  4839 000031B1 48FFC2                  	inc rdx
  4840                                  .L_lambda_opt_env_loop_0004:	; 
  4841 000031B4 4883FE00                	cmp rsi, 0
  4842 000031B8 7410                    	je .L_lambda_opt_env_end_0004
  4843 000031BA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4844 000031BE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4845 000031C2 48FFC6                  	inc rsi
  4846 000031C5 48FFC2                  	inc rdx
  4847 000031C8 EBEA                    	jmp .L_lambda_opt_env_loop_0004
  4848                                  .L_lambda_opt_env_end_0004:
  4849 000031CA 5B                      	pop rbx
  4850 000031CB 4831F6                  	xor rsi, rsi
  4851                                  .L_lambda_opt_params_loop_0004:	; copy params
  4852 000031CE 4883FE00                	cmp rsi, 0
  4853 000031D2 740E                    	je .L_lambda_opt_params_end_0004
  4854 000031D4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4855 000031D9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4856 000031DD 48FFC6                  	inc rsi
  4857 000031E0 EBEC                    	jmp .L_lambda_opt_params_loop_0004
  4858                                  .L_lambda_opt_params_end_0004:
  4859 000031E2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4860 000031E5 4889C3                  	mov rbx, rax
  4861 000031E8 58                      	pop rax
  4862 000031E9 C60004                  	mov byte [rax], T_closure
  4863 000031EC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4864 000031F0 48C74009[FD310000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0004
  4865 000031F8 E9C7040000              	jmp .L_lambda_opt_end_0004
  4866                                  .L_lambda_opt_code_0004:
  4867 000031FD 4C8B7C2410              	mov r15, qword [rsp + 8 * 2]
  4868 00003202 4983FF01                	cmp r15, 1
  4869 00003206 7409                    	je .L_lambda_opt_arity_check_exact_0004
  4870 00003208 7F57                    	jg .L_lambda_opt_arity_check_more_0004
  4871 0000320A 6A01                    	push 1
  4872 0000320C E958250000              	jmp L_error_incorrect_arity_opt
  4873                                  .L_lambda_opt_arity_check_exact_0004: ;Exact case
  4874 00003211 4C8B0424                	mov r8, qword [rsp -8 * 0]
  4875 00003215 4C894424F8              	mov qword [rsp -8], r8
  4876 0000321A 4C8B442408              	mov r8, qword [rsp +8]
  4877 0000321F 4C890424                	mov qword [rsp +8 * 0], r8
  4878 00003223 4C8B442410              	mov r8, qword [rsp +8 * 2]
  4879 00003228 4C89C1                  	mov rcx, r8
  4880 0000322B 49FFC0                  	inc r8
  4881 0000322E 4C89442408              	mov qword [rsp +8], r8
  4882 00003233 4889E2                  	mov rdx, rsp
  4883 00003236 4883C218                	add rdx, 24
  4884                                  .L_lambda_opt_loop_copy_to_new_frame_exact_0004:
  4885 0000323A 4883F900                	cmp rcx, 0
  4886 0000323E 7410                    	je .L_lambda_opt_loop_copy_to_new_frame_exact_end_0004
  4887 00003240 4C8B02                  	mov r8, qword [rdx]
  4888 00003243 4C8942F8                	mov qword [rdx - 8], r8
  4889 00003247 4883C208                	add rdx, 8
  4890 0000324B 48FFC9                  	dec rcx
  4891 0000324E EBEA                    	jmp .L_lambda_opt_loop_copy_to_new_frame_exact_0004
  4892                                  .L_lambda_opt_loop_copy_to_new_frame_exact_end_0004:
  4893 00003250 48C742F8[01000000]      	mov qword [rdx - 8], sob_nil
  4894 00003258 4883EC08                	sub rsp, 8
  4895 0000325C E985000000              	jmp .L_lambda_opt_stack_adjusted_0004
  4896                                  .L_lambda_opt_arity_check_more_0004:
  4897 00003261 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  4898 00003266 4D89C4                  	mov r12, r8
  4899 00003269 4C89C1                  	mov rcx, r8
  4900 0000326C 4D8D6802                	lea r13, [r8 + 2] 
  4901 00003270 4883E901                	sub rcx, 1
  4902 00003274 4E8D5CC410              	lea r11, qword [rsp + r8 * 8 + 16]
  4903 00003279 49BE-                   	mov r14, sob_nil
  4903 0000327B [0100000000000000] 
  4904                                  .L_lambda_opt_create_list_of_opt_params_0004:
  4905 00003283 4883F900                	cmp rcx, 0
  4906 00003287 7424                    	je .L_lambda_opt_create_list_of_opt_params_end_0004
  4907 00003289 BF11000000              	mov rdi, 17
  4908 0000328E E809250000              	call malloc
  4909 00003293 C60021                  	mov byte [rax], T_pair
  4910 00003296 498B1B                  	mov rbx, qword [r11]
  4911 00003299 48895801                	mov qword [rax +1], rbx
  4912 0000329D 4C897009                	mov qword [rax + 1 + 8], r14
  4913 000032A1 4989C6                  	mov r14, rax
  4914 000032A4 48FFC9                  	dec rcx
  4915 000032A7 4983EB08                	sub r11, 8
  4916 000032AB EBD6                    	jmp .L_lambda_opt_create_list_of_opt_params_0004
  4917                                  .L_lambda_opt_create_list_of_opt_params_end_0004:
  4918 000032AD 4C8D542420              	lea r10, [rsp + 1*8 + 8*3]
  4919 000032B2 4D8932                  	mov qword [r10], r14
  4920 000032B5 4E8D2CED00000000        	lea r13, [8 * r13]
  4921 000032BD 4901E5                  	add r13, rsp
  4922 000032C0 B905000000              	mov rcx, 4 + 1
  4923                                  .L_lambda_opt_stack_shrink_loop_0004:
  4924 000032C5 4883F900                	cmp rcx, 0
  4925 000032C9 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0004
  4926 000032CB 4D8B1A                  	mov r11, qword [r10]
  4927 000032CE 4D895D00                	mov qword [r13], r11
  4928 000032D2 4983EA08                	sub r10, 8
  4929 000032D6 4983ED08                	sub r13, 8
  4930 000032DA 48FFC9                  	dec rcx
  4931 000032DD EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0004
  4932                                  .L_lambda_opt_stack_shrink_loop_exit_0004:
  4933 000032DF 4983C508                	add r13, 8
  4934 000032E3 4C89EC                  	mov rsp, r13
  4935                                  .L_lambda_opt_stack_adjusted_0004:
  4936 000032E6 48C744241002000000      	mov qword [rsp + 8*2], 2
  4937 000032EF C8000000                	enter 0, 0
  4938                                  	; preparing a tail-call
  4939 000032F3 48B8-                   	mov rax, L_constants + 1993
  4939 000032F5 [C907000000000000] 
  4940 000032FD 50                      	push rax
  4941 000032FE 6A01                    	push 1	; arg count
  4942 00003300 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4943 00003305 E892240000              	call malloc
  4944 0000330A 50                      	push rax
  4945 0000330B BF10000000              	mov rdi, 8 * 2	; new rib
  4946 00003310 E887240000              	call malloc
  4947 00003315 50                      	push rax
  4948 00003316 BF10000000              	mov rdi, 8 * 2	; extended env
  4949 0000331B E87C240000              	call malloc
  4950 00003320 488B7D10                	mov rdi, ENV
  4951 00003324 BE00000000              	mov rsi, 0
  4952 00003329 BA01000000              	mov rdx, 1
  4953                                  .L_lambda_simple_env_loop_0024:	; ext_env[i + 1] <-- env[i]
  4954 0000332E 4883FE01                	cmp rsi, 1
  4955 00003332 7410                    	je .L_lambda_simple_env_end_0024
  4956 00003334 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4957 00003338 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4958 0000333C 48FFC6                  	inc rsi
  4959 0000333F 48FFC2                  	inc rdx
  4960 00003342 EBEA                    	jmp .L_lambda_simple_env_loop_0024
  4961                                  .L_lambda_simple_env_end_0024:
  4962 00003344 5B                      	pop rbx
  4963 00003345 BE00000000              	mov rsi, 0
  4964                                  .L_lambda_simple_params_loop_0024:	; copy params
  4965 0000334A 4883FE02                	cmp rsi, 2
  4966 0000334E 740E                    	je .L_lambda_simple_params_end_0024
  4967 00003350 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4968 00003355 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4969 00003359 48FFC6                  	inc rsi
  4970 0000335C EBEC                    	jmp .L_lambda_simple_params_loop_0024
  4971                                  .L_lambda_simple_params_end_0024:
  4972 0000335E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4973 00003361 4889C3                  	mov rbx, rax
  4974 00003364 58                      	pop rax
  4975 00003365 C60004                  	mov byte [rax], T_closure
  4976 00003368 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4977 0000336C 48C74009[79330000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0024
  4978 00003374 E9F9020000              	jmp .L_lambda_simple_end_0024
  4979                                  .L_lambda_simple_code_0024:	; lambda-simple body
  4980 00003379 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4981 0000337F 740B                    	je .L_lambda_simple_arity_check_ok_0024
  4982 00003381 FF742410                	push qword [rsp + 8 * 2]
  4983 00003385 6A01                    	push 1
  4984 00003387 E9C9230000              	jmp L_error_incorrect_arity_simple
  4985                                  .L_lambda_simple_arity_check_ok_0024:
  4986 0000338C C8000000                	enter 0, 0
  4987 00003390 BF08000000              	mov rdi, 8*1
  4988 00003395 E802240000              	call malloc
  4989 0000339A 488B5D20                	mov rbx, PARAM(0)
  4990 0000339E 488918                  	mov qword [rax], rbx
  4991 000033A1 48894520                	mov PARAM(0), rax
  4992 000033A5 48B8-                   	mov rax, sob_void
  4992 000033A7 [0000000000000000] 
  4993                                  
  4994 000033AF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4995 000033B4 E8E3230000              	call malloc
  4996 000033B9 50                      	push rax
  4997 000033BA BF08000000              	mov rdi, 8 * 1	; new rib
  4998 000033BF E8D8230000              	call malloc
  4999 000033C4 50                      	push rax
  5000 000033C5 BF18000000              	mov rdi, 8 * 3	; extended env
  5001 000033CA E8CD230000              	call malloc
  5002 000033CF 488B7D10                	mov rdi, ENV
  5003 000033D3 BE00000000              	mov rsi, 0
  5004 000033D8 BA01000000              	mov rdx, 1
  5005                                  .L_lambda_simple_env_loop_0025:	; ext_env[i + 1] <-- env[i]
  5006 000033DD 4883FE02                	cmp rsi, 2
  5007 000033E1 7410                    	je .L_lambda_simple_env_end_0025
  5008 000033E3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5009 000033E7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5010 000033EB 48FFC6                  	inc rsi
  5011 000033EE 48FFC2                  	inc rdx
  5012 000033F1 EBEA                    	jmp .L_lambda_simple_env_loop_0025
  5013                                  .L_lambda_simple_env_end_0025:
  5014 000033F3 5B                      	pop rbx
  5015 000033F4 BE00000000              	mov rsi, 0
  5016                                  .L_lambda_simple_params_loop_0025:	; copy params
  5017 000033F9 4883FE01                	cmp rsi, 1
  5018 000033FD 740E                    	je .L_lambda_simple_params_end_0025
  5019 000033FF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5020 00003404 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5021 00003408 48FFC6                  	inc rsi
  5022 0000340B EBEC                    	jmp .L_lambda_simple_params_loop_0025
  5023                                  .L_lambda_simple_params_end_0025:
  5024 0000340D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5025 00003410 4889C3                  	mov rbx, rax
  5026 00003413 58                      	pop rax
  5027 00003414 C60004                  	mov byte [rax], T_closure
  5028 00003417 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5029 0000341B 48C74009[28340000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0025
  5030 00003423 E990010000              	jmp .L_lambda_simple_end_0025
  5031                                  .L_lambda_simple_code_0025:	; lambda-simple body
  5032 00003428 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5033 0000342E 740B                    	je .L_lambda_simple_arity_check_ok_0025
  5034 00003430 FF742410                	push qword [rsp + 8 * 2]
  5035 00003434 6A01                    	push 1
  5036 00003436 E91A230000              	jmp L_error_incorrect_arity_simple
  5037                                  .L_lambda_simple_arity_check_ok_0025:
  5038 0000343B C8000000                	enter 0, 0
  5039                                  	; preparing a non-tail-call
  5040                                  	; preparing a non-tail-call
  5041 0000343F 488B4520                	mov rax, PARAM(0)	; param s
  5042 00003443 50                      	push rax
  5043 00003444 6A01                    	push 1	; arg count
  5044 00003446 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  5045 0000344E 803805                  	cmp byte [rax], T_undefined
  5046 00003451 0F8418220000            	je L_error_fvar_undefined
  5047 00003457 803804                  	cmp byte [rax], T_closure
  5048 0000345A 0F8593220000            	jne L_error_non_closure
  5049 00003460 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5050 00003463 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5051 00003466 50                      	push rax
  5052 00003467 6A01                    	push 1	; arg count
  5053 00003469 488B0425[5B0B0000]      	mov rax, qword [free_var_46]	; free var pair?
  5054 00003471 803805                  	cmp byte [rax], T_undefined
  5055 00003474 0F84F5210000            	je L_error_fvar_undefined
  5056 0000347A 803804                  	cmp byte [rax], T_closure
  5057 0000347D 0F8570220000            	jne L_error_non_closure
  5058 00003483 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5059 00003486 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5060 00003489 483D[02000000]          	cmp rax, sob_boolean_false
  5061 0000348F 0F8415010000            	je .L_if_else_0005
  5062                                  	; preparing a non-tail-call
  5063                                  	; preparing a non-tail-call
  5064 00003495 488B4520                	mov rax, PARAM(0)	; param s
  5065 00003499 50                      	push rax
  5066 0000349A 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  5067 000034A2 803805                  	cmp byte [rax], T_undefined
  5068 000034A5 0F84C4210000            	je L_error_fvar_undefined
  5069 000034AB 50                      	push rax
  5070 000034AC 6A02                    	push 2	; arg count
  5071 000034AE 488B0425[170B0000]      	mov rax, qword [free_var_42]	; free var map
  5072 000034B6 803805                  	cmp byte [rax], T_undefined
  5073 000034B9 0F84B0210000            	je L_error_fvar_undefined
  5074 000034BF 803804                  	cmp byte [rax], T_closure
  5075 000034C2 0F852B220000            	jne L_error_non_closure
  5076 000034C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5077 000034CB FF5009                  	call SOB_CLOSURE_CODE(rax)
  5078 000034CE 50                      	push rax
  5079 000034CF 488B4510                	mov rax, ENV
  5080 000034D3 488B4008                	mov rax, qword [rax + 8 * 1]
  5081 000034D7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  5082 000034DA 50                      	push rax
  5083 000034DB 6A02                    	push 2	; arg count
  5084 000034DD 488B0425[80080000]      	mov rax, qword [free_var_3]	; free var apply
  5085 000034E5 803805                  	cmp byte [rax], T_undefined
  5086 000034E8 0F8481210000            	je L_error_fvar_undefined
  5087 000034EE 803804                  	cmp byte [rax], T_closure
  5088 000034F1 0F85FC210000            	jne L_error_non_closure
  5089 000034F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5090 000034FA FF5009                  	call SOB_CLOSURE_CODE(rax)
  5091 000034FD 483D[02000000]          	cmp rax, sob_boolean_false
  5092 00003503 0F849F000000            	je .L_or_end_0003
  5093                                  
  5094                                  	; preparing a tail-call
  5095                                  	; preparing a non-tail-call
  5096 00003509 488B4520                	mov rax, PARAM(0)	; param s
  5097 0000350D 50                      	push rax
  5098 0000350E 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  5099 00003516 803805                  	cmp byte [rax], T_undefined
  5100 00003519 0F8450210000            	je L_error_fvar_undefined
  5101 0000351F 50                      	push rax
  5102 00003520 6A02                    	push 2	; arg count
  5103 00003522 488B0425[170B0000]      	mov rax, qword [free_var_42]	; free var map
  5104 0000352A 803805                  	cmp byte [rax], T_undefined
  5105 0000352D 0F843C210000            	je L_error_fvar_undefined
  5106 00003533 803804                  	cmp byte [rax], T_closure
  5107 00003536 0F85B7210000            	jne L_error_non_closure
  5108 0000353C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5109 0000353F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5110 00003542 50                      	push rax
  5111 00003543 6A01                    	push 1	; arg count
  5112 00003545 488B4510                	mov rax, ENV
  5113 00003549 488B00                  	mov rax, qword [rax + 8 * 0]
  5114 0000354C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  5115 0000354F 488B00                  	mov rax, qword [rax]
  5116 00003552 803804                  	cmp byte [rax], T_closure
  5117 00003555 0F8598210000            	jne L_error_non_closure
  5118 0000355B FF7001                  	push SOB_CLOSURE_ENV(rax)
  5119 0000355E FF7508                  	push qword [rbp + 8 * 1]
  5120                                   ; old ret addr
  5121 00003561 FF7500                  	push qword [rbp]
  5122                                   ; restore the old rbp
  5123 00003564 BB01000000              	mov rbx, 1
  5124 00003569 4883C303                	add rbx, 3
  5125 0000356D 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  5126 00003571 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  5127 00003576 4C8D4DF8                	lea r9, [rbp - 8]
  5128 0000357A B905000000              	mov rcx, 5
  5129                                  .L_tc_recycle_frame_loop_0024:
  5130 0000357F 4883F900                	cmp rcx, 0
  5131 00003583 7413                    	je .L_tc_recycle_frame_done_0024
  5132 00003585 4D8B11                  	mov r10, qword [r9]
  5133 00003588 4D8910                  	mov qword [r8], r10
  5134 0000358B 4983E808                	sub r8, 8
  5135 0000358F 4983E908                	sub r9, 8
  5136 00003593 48FFC9                  	dec rcx
  5137 00003596 EBE7                    	jmp .L_tc_recycle_frame_loop_0024
  5138                                  .L_tc_recycle_frame_done_0024:
  5139 00003598 498D6008                	lea rsp, [r8 + 8]
  5140 0000359C 5D                      	pop rbp ; restore the old rbp
  5141 0000359D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5142 000035A0 483D[02000000]          	cmp rax, sob_boolean_false
  5143 000035A6 7400                    	je .L_or_end_0003
  5144                                  .L_or_end_0003:
  5145 000035A8 EB0A                    	jmp .L_if_end_0005
  5146                                  .L_if_else_0005:
  5147 000035AA 48B8-                   	mov rax, L_constants + 2
  5147 000035AC [0200000000000000] 
  5148                                  .L_if_end_0005:
  5149 000035B4 C9                      	leave
  5150 000035B5 C21800                  	ret AND_KILL_FRAME(1)
  5151                                  .L_lambda_simple_end_0025:	; new closure is in rax
  5152 000035B8 50                      	push rax
  5153 000035B9 488B4520                	mov rax, PARAM(0)	; param loop
  5154 000035BD 8F00                    	pop qword [rax]
  5155 000035BF 48B8-                   	mov rax, sob_void
  5155 000035C1 [0000000000000000] 
  5156                                  
  5157                                  	; preparing a non-tail-call
  5158 000035C9 488B4510                	mov rax, ENV
  5159 000035CD 488B00                  	mov rax, qword [rax + 8 * 0]
  5160 000035D0 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5161 000035D4 50                      	push rax
  5162 000035D5 6A01                    	push 1	; arg count
  5163 000035D7 488B0425[5B0B0000]      	mov rax, qword [free_var_46]	; free var pair?
  5164 000035DF 803805                  	cmp byte [rax], T_undefined
  5165 000035E2 0F8487200000            	je L_error_fvar_undefined
  5166 000035E8 803804                  	cmp byte [rax], T_closure
  5167 000035EB 0F8502210000            	jne L_error_non_closure
  5168 000035F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5169 000035F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5170 000035F7 483D[02000000]          	cmp rax, sob_boolean_false
  5171 000035FD 7465                    	je .L_if_else_0006
  5172                                  	; preparing a tail-call
  5173 000035FF 488B4510                	mov rax, ENV
  5174 00003603 488B00                  	mov rax, qword [rax + 8 * 0]
  5175 00003606 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5176 0000360A 50                      	push rax
  5177 0000360B 6A01                    	push 1	; arg count
  5178 0000360D 488B4520                	mov rax, PARAM(0)	; param loop
  5179 00003611 488B00                  	mov rax, qword [rax]
  5180 00003614 803804                  	cmp byte [rax], T_closure
  5181 00003617 0F85D6200000            	jne L_error_non_closure
  5182 0000361D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5183 00003620 FF7508                  	push qword [rbp + 8 * 1]
  5184                                   ; old ret addr
  5185 00003623 FF7500                  	push qword [rbp]
  5186                                   ; restore the old rbp
  5187 00003626 BB01000000              	mov rbx, 1
  5188 0000362B 4883C303                	add rbx, 3
  5189 0000362F 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  5190 00003633 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  5191 00003638 4C8D4DF8                	lea r9, [rbp - 8]
  5192 0000363C B905000000              	mov rcx, 5
  5193                                  .L_tc_recycle_frame_loop_0025:
  5194 00003641 4883F900                	cmp rcx, 0
  5195 00003645 7413                    	je .L_tc_recycle_frame_done_0025
  5196 00003647 4D8B11                  	mov r10, qword [r9]
  5197 0000364A 4D8910                  	mov qword [r8], r10
  5198 0000364D 4983E808                	sub r8, 8
  5199 00003651 4983E908                	sub r9, 8
  5200 00003655 48FFC9                  	dec rcx
  5201 00003658 EBE7                    	jmp .L_tc_recycle_frame_loop_0025
  5202                                  .L_tc_recycle_frame_done_0025:
  5203 0000365A 498D6008                	lea rsp, [r8 + 8]
  5204 0000365E 5D                      	pop rbp ; restore the old rbp
  5205 0000365F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5206 00003662 EB0A                    	jmp .L_if_end_0006
  5207                                  .L_if_else_0006:
  5208 00003664 48B8-                   	mov rax, L_constants + 2
  5208 00003666 [0200000000000000] 
  5209                                  .L_if_end_0006:
  5210 0000366E C9                      	leave
  5211 0000366F C21800                  	ret AND_KILL_FRAME(1)
  5212                                  .L_lambda_simple_end_0024:	; new closure is in rax
  5213 00003672 803804                  	cmp byte [rax], T_closure
  5214 00003675 0F8578200000            	jne L_error_non_closure
  5215 0000367B FF7001                  	push SOB_CLOSURE_ENV(rax)
  5216 0000367E FF7508                  	push qword [rbp + 8 * 1]
  5217                                   ; old ret addr
  5218 00003681 FF7500                  	push qword [rbp]
  5219                                   ; restore the old rbp
  5220 00003684 BB01000000              	mov rbx, 1
  5221 00003689 4883C303                	add rbx, 3
  5222 0000368D 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  5223 00003691 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  5224 00003696 4C8D4DF8                	lea r9, [rbp - 8]
  5225 0000369A B905000000              	mov rcx, 5
  5226                                  .L_tc_recycle_frame_loop_0023:
  5227 0000369F 4883F900                	cmp rcx, 0
  5228 000036A3 7413                    	je .L_tc_recycle_frame_done_0023
  5229 000036A5 4D8B11                  	mov r10, qword [r9]
  5230 000036A8 4D8910                  	mov qword [r8], r10
  5231 000036AB 4983E808                	sub r8, 8
  5232 000036AF 4983E908                	sub r9, 8
  5233 000036B3 48FFC9                  	dec rcx
  5234 000036B6 EBE7                    	jmp .L_tc_recycle_frame_loop_0023
  5235                                  .L_tc_recycle_frame_done_0023:
  5236 000036B8 498D6008                	lea rsp, [r8 + 8]
  5237 000036BC 5D                      	pop rbp ; restore the old rbp
  5238 000036BD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5239 000036C0 C9                      	leave
  5240 000036C1 C22000                  	ret 8 * (2 + 2)
  5241                                  .L_lambda_opt_end_0004:	; new closure is in rax
  5242 000036C4 48890425[4A0B0000]      	mov qword [free_var_45], rax
  5243 000036CC 48B8-                   	mov rax, sob_void
  5243 000036CE [0000000000000000] 
  5244                                  
  5245 000036D6 4889C7                  	mov rdi, rax
  5246 000036D9 E813230000              	call print_sexpr_if_not_void
  5247 000036DE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5248 000036E3 E8B4200000              	call malloc
  5249 000036E8 50                      	push rax
  5250 000036E9 BF00000000              	mov rdi, 8 * 0	; new rib
  5251 000036EE E8A9200000              	call malloc
  5252 000036F3 50                      	push rax
  5253 000036F4 BF08000000              	mov rdi, 8 * 1	; extended env
  5254 000036F9 E89E200000              	call malloc
  5255 000036FE 488B7D10                	mov rdi, ENV
  5256 00003702 4831F6                  	 xor rsi, rsi
  5257 00003705 4831D2                  	 xor rdx, rdx
  5258 00003708 48FFC2                  	inc rdx
  5259                                  .L_lambda_opt_env_loop_0005:	; 
  5260 0000370B 4883FE00                	cmp rsi, 0
  5261 0000370F 7410                    	je .L_lambda_opt_env_end_0005
  5262 00003711 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5263 00003715 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5264 00003719 48FFC6                  	inc rsi
  5265 0000371C 48FFC2                  	inc rdx
  5266 0000371F EBEA                    	jmp .L_lambda_opt_env_loop_0005
  5267                                  .L_lambda_opt_env_end_0005:
  5268 00003721 5B                      	pop rbx
  5269 00003722 4831F6                  	xor rsi, rsi
  5270                                  .L_lambda_opt_params_loop_0005:	; copy params
  5271 00003725 4883FE00                	cmp rsi, 0
  5272 00003729 740E                    	je .L_lambda_opt_params_end_0005
  5273 0000372B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5274 00003730 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5275 00003734 48FFC6                  	inc rsi
  5276 00003737 EBEC                    	jmp .L_lambda_opt_params_loop_0005
  5277                                  .L_lambda_opt_params_end_0005:
  5278 00003739 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5279 0000373C 4889C3                  	mov rbx, rax
  5280 0000373F 58                      	pop rax
  5281 00003740 C60004                  	mov byte [rax], T_closure
  5282 00003743 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5283 00003747 48C74009[54370000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0005
  5284 0000374F E909050000              	jmp .L_lambda_opt_end_0005
  5285                                  .L_lambda_opt_code_0005:
  5286 00003754 4C8B7C2410              	mov r15, qword [rsp + 8 * 2]
  5287 00003759 4983FF01                	cmp r15, 1
  5288 0000375D 7409                    	je .L_lambda_opt_arity_check_exact_0005
  5289 0000375F 7F57                    	jg .L_lambda_opt_arity_check_more_0005
  5290 00003761 6A01                    	push 1
  5291 00003763 E901200000              	jmp L_error_incorrect_arity_opt
  5292                                  .L_lambda_opt_arity_check_exact_0005: ;Exact case
  5293 00003768 4C8B0424                	mov r8, qword [rsp -8 * 0]
  5294 0000376C 4C894424F8              	mov qword [rsp -8], r8
  5295 00003771 4C8B442408              	mov r8, qword [rsp +8]
  5296 00003776 4C890424                	mov qword [rsp +8 * 0], r8
  5297 0000377A 4C8B442410              	mov r8, qword [rsp +8 * 2]
  5298 0000377F 4C89C1                  	mov rcx, r8
  5299 00003782 49FFC0                  	inc r8
  5300 00003785 4C89442408              	mov qword [rsp +8], r8
  5301 0000378A 4889E2                  	mov rdx, rsp
  5302 0000378D 4883C218                	add rdx, 24
  5303                                  .L_lambda_opt_loop_copy_to_new_frame_exact_0005:
  5304 00003791 4883F900                	cmp rcx, 0
  5305 00003795 7410                    	je .L_lambda_opt_loop_copy_to_new_frame_exact_end_0005
  5306 00003797 4C8B02                  	mov r8, qword [rdx]
  5307 0000379A 4C8942F8                	mov qword [rdx - 8], r8
  5308 0000379E 4883C208                	add rdx, 8
  5309 000037A2 48FFC9                  	dec rcx
  5310 000037A5 EBEA                    	jmp .L_lambda_opt_loop_copy_to_new_frame_exact_0005
  5311                                  .L_lambda_opt_loop_copy_to_new_frame_exact_end_0005:
  5312 000037A7 48C742F8[01000000]      	mov qword [rdx - 8], sob_nil
  5313 000037AF 4883EC08                	sub rsp, 8
  5314 000037B3 E985000000              	jmp .L_lambda_opt_stack_adjusted_0005
  5315                                  .L_lambda_opt_arity_check_more_0005:
  5316 000037B8 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  5317 000037BD 4D89C4                  	mov r12, r8
  5318 000037C0 4C89C1                  	mov rcx, r8
  5319 000037C3 4D8D6802                	lea r13, [r8 + 2] 
  5320 000037C7 4883E901                	sub rcx, 1
  5321 000037CB 4E8D5CC410              	lea r11, qword [rsp + r8 * 8 + 16]
  5322 000037D0 49BE-                   	mov r14, sob_nil
  5322 000037D2 [0100000000000000] 
  5323                                  .L_lambda_opt_create_list_of_opt_params_0005:
  5324 000037DA 4883F900                	cmp rcx, 0
  5325 000037DE 7424                    	je .L_lambda_opt_create_list_of_opt_params_end_0005
  5326 000037E0 BF11000000              	mov rdi, 17
  5327 000037E5 E8B21F0000              	call malloc
  5328 000037EA C60021                  	mov byte [rax], T_pair
  5329 000037ED 498B1B                  	mov rbx, qword [r11]
  5330 000037F0 48895801                	mov qword [rax +1], rbx
  5331 000037F4 4C897009                	mov qword [rax + 1 + 8], r14
  5332 000037F8 4989C6                  	mov r14, rax
  5333 000037FB 48FFC9                  	dec rcx
  5334 000037FE 4983EB08                	sub r11, 8
  5335 00003802 EBD6                    	jmp .L_lambda_opt_create_list_of_opt_params_0005
  5336                                  .L_lambda_opt_create_list_of_opt_params_end_0005:
  5337 00003804 4C8D542420              	lea r10, [rsp + 1*8 + 8*3]
  5338 00003809 4D8932                  	mov qword [r10], r14
  5339 0000380C 4E8D2CED00000000        	lea r13, [8 * r13]
  5340 00003814 4901E5                  	add r13, rsp
  5341 00003817 B905000000              	mov rcx, 4 + 1
  5342                                  .L_lambda_opt_stack_shrink_loop_0005:
  5343 0000381C 4883F900                	cmp rcx, 0
  5344 00003820 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0005
  5345 00003822 4D8B1A                  	mov r11, qword [r10]
  5346 00003825 4D895D00                	mov qword [r13], r11
  5347 00003829 4983EA08                	sub r10, 8
  5348 0000382D 4983ED08                	sub r13, 8
  5349 00003831 48FFC9                  	dec rcx
  5350 00003834 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0005
  5351                                  .L_lambda_opt_stack_shrink_loop_exit_0005:
  5352 00003836 4983C508                	add r13, 8
  5353 0000383A 4C89EC                  	mov rsp, r13
  5354                                  .L_lambda_opt_stack_adjusted_0005:
  5355 0000383D 48C744241002000000      	mov qword [rsp + 8*2], 2
  5356 00003846 C8000000                	enter 0, 0
  5357                                  	; preparing a tail-call
  5358 0000384A 48B8-                   	mov rax, L_constants + 1993
  5358 0000384C [C907000000000000] 
  5359 00003854 50                      	push rax
  5360 00003855 6A01                    	push 1	; arg count
  5361 00003857 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5362 0000385C E83B1F0000              	call malloc
  5363 00003861 50                      	push rax
  5364 00003862 BF10000000              	mov rdi, 8 * 2	; new rib
  5365 00003867 E8301F0000              	call malloc
  5366 0000386C 50                      	push rax
  5367 0000386D BF10000000              	mov rdi, 8 * 2	; extended env
  5368 00003872 E8251F0000              	call malloc
  5369 00003877 488B7D10                	mov rdi, ENV
  5370 0000387B BE00000000              	mov rsi, 0
  5371 00003880 BA01000000              	mov rdx, 1
  5372                                  .L_lambda_simple_env_loop_0026:	; ext_env[i + 1] <-- env[i]
  5373 00003885 4883FE01                	cmp rsi, 1
  5374 00003889 7410                    	je .L_lambda_simple_env_end_0026
  5375 0000388B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5376 0000388F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5377 00003893 48FFC6                  	inc rsi
  5378 00003896 48FFC2                  	inc rdx
  5379 00003899 EBEA                    	jmp .L_lambda_simple_env_loop_0026
  5380                                  .L_lambda_simple_env_end_0026:
  5381 0000389B 5B                      	pop rbx
  5382 0000389C BE00000000              	mov rsi, 0
  5383                                  .L_lambda_simple_params_loop_0026:	; copy params
  5384 000038A1 4883FE02                	cmp rsi, 2
  5385 000038A5 740E                    	je .L_lambda_simple_params_end_0026
  5386 000038A7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5387 000038AC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5388 000038B0 48FFC6                  	inc rsi
  5389 000038B3 EBEC                    	jmp .L_lambda_simple_params_loop_0026
  5390                                  .L_lambda_simple_params_end_0026:
  5391 000038B5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5392 000038B8 4889C3                  	mov rbx, rax
  5393 000038BB 58                      	pop rax
  5394 000038BC C60004                  	mov byte [rax], T_closure
  5395 000038BF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5396 000038C3 48C74009[D0380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0026
  5397 000038CB E93B030000              	jmp .L_lambda_simple_end_0026
  5398                                  .L_lambda_simple_code_0026:	; lambda-simple body
  5399 000038D0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5400 000038D6 740B                    	je .L_lambda_simple_arity_check_ok_0026
  5401 000038D8 FF742410                	push qword [rsp + 8 * 2]
  5402 000038DC 6A01                    	push 1
  5403 000038DE E9721E0000              	jmp L_error_incorrect_arity_simple
  5404                                  .L_lambda_simple_arity_check_ok_0026:
  5405 000038E3 C8000000                	enter 0, 0
  5406 000038E7 BF08000000              	mov rdi, 8*1
  5407 000038EC E8AB1E0000              	call malloc
  5408 000038F1 488B5D20                	mov rbx, PARAM(0)
  5409 000038F5 488918                  	mov qword [rax], rbx
  5410 000038F8 48894520                	mov PARAM(0), rax
  5411 000038FC 48B8-                   	mov rax, sob_void
  5411 000038FE [0000000000000000] 
  5412                                  
  5413 00003906 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5414 0000390B E88C1E0000              	call malloc
  5415 00003910 50                      	push rax
  5416 00003911 BF08000000              	mov rdi, 8 * 1	; new rib
  5417 00003916 E8811E0000              	call malloc
  5418 0000391B 50                      	push rax
  5419 0000391C BF18000000              	mov rdi, 8 * 3	; extended env
  5420 00003921 E8761E0000              	call malloc
  5421 00003926 488B7D10                	mov rdi, ENV
  5422 0000392A BE00000000              	mov rsi, 0
  5423 0000392F BA01000000              	mov rdx, 1
  5424                                  .L_lambda_simple_env_loop_0027:	; ext_env[i + 1] <-- env[i]
  5425 00003934 4883FE02                	cmp rsi, 2
  5426 00003938 7410                    	je .L_lambda_simple_env_end_0027
  5427 0000393A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5428 0000393E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5429 00003942 48FFC6                  	inc rsi
  5430 00003945 48FFC2                  	inc rdx
  5431 00003948 EBEA                    	jmp .L_lambda_simple_env_loop_0027
  5432                                  .L_lambda_simple_env_end_0027:
  5433 0000394A 5B                      	pop rbx
  5434 0000394B BE00000000              	mov rsi, 0
  5435                                  .L_lambda_simple_params_loop_0027:	; copy params
  5436 00003950 4883FE01                	cmp rsi, 1
  5437 00003954 740E                    	je .L_lambda_simple_params_end_0027
  5438 00003956 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5439 0000395B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5440 0000395F 48FFC6                  	inc rsi
  5441 00003962 EBEC                    	jmp .L_lambda_simple_params_loop_0027
  5442                                  .L_lambda_simple_params_end_0027:
  5443 00003964 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5444 00003967 4889C3                  	mov rbx, rax
  5445 0000396A 58                      	pop rax
  5446 0000396B C60004                  	mov byte [rax], T_closure
  5447 0000396E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5448 00003972 48C74009[7F390000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0027
  5449 0000397A E990010000              	jmp .L_lambda_simple_end_0027
  5450                                  .L_lambda_simple_code_0027:	; lambda-simple body
  5451 0000397F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5452 00003985 740B                    	je .L_lambda_simple_arity_check_ok_0027
  5453 00003987 FF742410                	push qword [rsp + 8 * 2]
  5454 0000398B 6A01                    	push 1
  5455 0000398D E9C31D0000              	jmp L_error_incorrect_arity_simple
  5456                                  .L_lambda_simple_arity_check_ok_0027:
  5457 00003992 C8000000                	enter 0, 0
  5458                                  	; preparing a non-tail-call
  5459                                  	; preparing a non-tail-call
  5460 00003996 488B4520                	mov rax, PARAM(0)	; param s
  5461 0000399A 50                      	push rax
  5462 0000399B 6A01                    	push 1	; arg count
  5463 0000399D 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  5464 000039A5 803805                  	cmp byte [rax], T_undefined
  5465 000039A8 0F84C11C0000            	je L_error_fvar_undefined
  5466 000039AE 803804                  	cmp byte [rax], T_closure
  5467 000039B1 0F853C1D0000            	jne L_error_non_closure
  5468 000039B7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5469 000039BA FF5009                  	call SOB_CLOSURE_CODE(rax)
  5470 000039BD 50                      	push rax
  5471 000039BE 6A01                    	push 1	; arg count
  5472 000039C0 488B0425[390B0000]      	mov rax, qword [free_var_44]	; free var null?
  5473 000039C8 803805                  	cmp byte [rax], T_undefined
  5474 000039CB 0F849E1C0000            	je L_error_fvar_undefined
  5475 000039D1 803804                  	cmp byte [rax], T_closure
  5476 000039D4 0F85191D0000            	jne L_error_non_closure
  5477 000039DA FF7001                  	push SOB_CLOSURE_ENV(rax)
  5478 000039DD FF5009                  	call SOB_CLOSURE_CODE(rax)
  5479 000039E0 483D[02000000]          	cmp rax, sob_boolean_false
  5480 000039E6 0F841F010000            	je .L_or_end_0004
  5481                                  
  5482                                  	; preparing a non-tail-call
  5483                                  	; preparing a non-tail-call
  5484 000039EC 488B4520                	mov rax, PARAM(0)	; param s
  5485 000039F0 50                      	push rax
  5486 000039F1 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  5487 000039F9 803805                  	cmp byte [rax], T_undefined
  5488 000039FC 0F846D1C0000            	je L_error_fvar_undefined
  5489 00003A02 50                      	push rax
  5490 00003A03 6A02                    	push 2	; arg count
  5491 00003A05 488B0425[170B0000]      	mov rax, qword [free_var_42]	; free var map
  5492 00003A0D 803805                  	cmp byte [rax], T_undefined
  5493 00003A10 0F84591C0000            	je L_error_fvar_undefined
  5494 00003A16 803804                  	cmp byte [rax], T_closure
  5495 00003A19 0F85D41C0000            	jne L_error_non_closure
  5496 00003A1F FF7001                  	push SOB_CLOSURE_ENV(rax)
  5497 00003A22 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5498 00003A25 50                      	push rax
  5499 00003A26 488B4510                	mov rax, ENV
  5500 00003A2A 488B4008                	mov rax, qword [rax + 8 * 1]
  5501 00003A2E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  5502 00003A31 50                      	push rax
  5503 00003A32 6A02                    	push 2	; arg count
  5504 00003A34 488B0425[80080000]      	mov rax, qword [free_var_3]	; free var apply
  5505 00003A3C 803805                  	cmp byte [rax], T_undefined
  5506 00003A3F 0F842A1C0000            	je L_error_fvar_undefined
  5507 00003A45 803804                  	cmp byte [rax], T_closure
  5508 00003A48 0F85A51C0000            	jne L_error_non_closure
  5509 00003A4E FF7001                  	push SOB_CLOSURE_ENV(rax)
  5510 00003A51 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5511 00003A54 483D[02000000]          	cmp rax, sob_boolean_false
  5512 00003A5A 0F8499000000            	je .L_if_else_0007
  5513                                  	; preparing a tail-call
  5514                                  	; preparing a non-tail-call
  5515 00003A60 488B4520                	mov rax, PARAM(0)	; param s
  5516 00003A64 50                      	push rax
  5517 00003A65 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  5518 00003A6D 803805                  	cmp byte [rax], T_undefined
  5519 00003A70 0F84F91B0000            	je L_error_fvar_undefined
  5520 00003A76 50                      	push rax
  5521 00003A77 6A02                    	push 2	; arg count
  5522 00003A79 488B0425[170B0000]      	mov rax, qword [free_var_42]	; free var map
  5523 00003A81 803805                  	cmp byte [rax], T_undefined
  5524 00003A84 0F84E51B0000            	je L_error_fvar_undefined
  5525 00003A8A 803804                  	cmp byte [rax], T_closure
  5526 00003A8D 0F85601C0000            	jne L_error_non_closure
  5527 00003A93 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5528 00003A96 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5529 00003A99 50                      	push rax
  5530 00003A9A 6A01                    	push 1	; arg count
  5531 00003A9C 488B4510                	mov rax, ENV
  5532 00003AA0 488B00                  	mov rax, qword [rax + 8 * 0]
  5533 00003AA3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  5534 00003AA6 488B00                  	mov rax, qword [rax]
  5535 00003AA9 803804                  	cmp byte [rax], T_closure
  5536 00003AAC 0F85411C0000            	jne L_error_non_closure
  5537 00003AB2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5538 00003AB5 FF7508                  	push qword [rbp + 8 * 1]
  5539                                   ; old ret addr
  5540 00003AB8 FF7500                  	push qword [rbp]
  5541                                   ; restore the old rbp
  5542 00003ABB BB01000000              	mov rbx, 1
  5543 00003AC0 4883C303                	add rbx, 3
  5544 00003AC4 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  5545 00003AC8 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  5546 00003ACD 4C8D4DF8                	lea r9, [rbp - 8]
  5547 00003AD1 B905000000              	mov rcx, 5
  5548                                  .L_tc_recycle_frame_loop_0027:
  5549 00003AD6 4883F900                	cmp rcx, 0
  5550 00003ADA 7413                    	je .L_tc_recycle_frame_done_0027
  5551 00003ADC 4D8B11                  	mov r10, qword [r9]
  5552 00003ADF 4D8910                  	mov qword [r8], r10
  5553 00003AE2 4983E808                	sub r8, 8
  5554 00003AE6 4983E908                	sub r9, 8
  5555 00003AEA 48FFC9                  	dec rcx
  5556 00003AED EBE7                    	jmp .L_tc_recycle_frame_loop_0027
  5557                                  .L_tc_recycle_frame_done_0027:
  5558 00003AEF 498D6008                	lea rsp, [r8 + 8]
  5559 00003AF3 5D                      	pop rbp ; restore the old rbp
  5560 00003AF4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5561 00003AF7 EB0A                    	jmp .L_if_end_0007
  5562                                  .L_if_else_0007:
  5563 00003AF9 48B8-                   	mov rax, L_constants + 2
  5563 00003AFB [0200000000000000] 
  5564                                  .L_if_end_0007:
  5565 00003B03 483D[02000000]          	cmp rax, sob_boolean_false
  5566 00003B09 7400                    	je .L_or_end_0004
  5567                                  .L_or_end_0004:
  5568 00003B0B C9                      	leave
  5569 00003B0C C21800                  	ret AND_KILL_FRAME(1)
  5570                                  .L_lambda_simple_end_0027:	; new closure is in rax
  5571 00003B0F 50                      	push rax
  5572 00003B10 488B4520                	mov rax, PARAM(0)	; param loop
  5573 00003B14 8F00                    	pop qword [rax]
  5574 00003B16 48B8-                   	mov rax, sob_void
  5574 00003B18 [0000000000000000] 
  5575                                  
  5576                                  	; preparing a non-tail-call
  5577 00003B20 488B4510                	mov rax, ENV
  5578 00003B24 488B00                  	mov rax, qword [rax + 8 * 0]
  5579 00003B27 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5580 00003B2B 50                      	push rax
  5581 00003B2C 6A01                    	push 1	; arg count
  5582 00003B2E 488B0425[390B0000]      	mov rax, qword [free_var_44]	; free var null?
  5583 00003B36 803805                  	cmp byte [rax], T_undefined
  5584 00003B39 0F84301B0000            	je L_error_fvar_undefined
  5585 00003B3F 803804                  	cmp byte [rax], T_closure
  5586 00003B42 0F85AB1B0000            	jne L_error_non_closure
  5587 00003B48 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5588 00003B4B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5589 00003B4E 483D[02000000]          	cmp rax, sob_boolean_false
  5590 00003B54 0F84AD000000            	je .L_or_end_0005
  5591                                  
  5592                                  	; preparing a non-tail-call
  5593 00003B5A 488B4510                	mov rax, ENV
  5594 00003B5E 488B00                  	mov rax, qword [rax + 8 * 0]
  5595 00003B61 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5596 00003B65 50                      	push rax
  5597 00003B66 6A01                    	push 1	; arg count
  5598 00003B68 488B0425[5B0B0000]      	mov rax, qword [free_var_46]	; free var pair?
  5599 00003B70 803805                  	cmp byte [rax], T_undefined
  5600 00003B73 0F84F61A0000            	je L_error_fvar_undefined
  5601 00003B79 803804                  	cmp byte [rax], T_closure
  5602 00003B7C 0F85711B0000            	jne L_error_non_closure
  5603 00003B82 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5604 00003B85 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5605 00003B88 483D[02000000]          	cmp rax, sob_boolean_false
  5606 00003B8E 7465                    	je .L_if_else_0008
  5607                                  	; preparing a tail-call
  5608 00003B90 488B4510                	mov rax, ENV
  5609 00003B94 488B00                  	mov rax, qword [rax + 8 * 0]
  5610 00003B97 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5611 00003B9B 50                      	push rax
  5612 00003B9C 6A01                    	push 1	; arg count
  5613 00003B9E 488B4520                	mov rax, PARAM(0)	; param loop
  5614 00003BA2 488B00                  	mov rax, qword [rax]
  5615 00003BA5 803804                  	cmp byte [rax], T_closure
  5616 00003BA8 0F85451B0000            	jne L_error_non_closure
  5617 00003BAE FF7001                  	push SOB_CLOSURE_ENV(rax)
  5618 00003BB1 FF7508                  	push qword [rbp + 8 * 1]
  5619                                   ; old ret addr
  5620 00003BB4 FF7500                  	push qword [rbp]
  5621                                   ; restore the old rbp
  5622 00003BB7 BB01000000              	mov rbx, 1
  5623 00003BBC 4883C303                	add rbx, 3
  5624 00003BC0 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  5625 00003BC4 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  5626 00003BC9 4C8D4DF8                	lea r9, [rbp - 8]
  5627 00003BCD B905000000              	mov rcx, 5
  5628                                  .L_tc_recycle_frame_loop_0028:
  5629 00003BD2 4883F900                	cmp rcx, 0
  5630 00003BD6 7413                    	je .L_tc_recycle_frame_done_0028
  5631 00003BD8 4D8B11                  	mov r10, qword [r9]
  5632 00003BDB 4D8910                  	mov qword [r8], r10
  5633 00003BDE 4983E808                	sub r8, 8
  5634 00003BE2 4983E908                	sub r9, 8
  5635 00003BE6 48FFC9                  	dec rcx
  5636 00003BE9 EBE7                    	jmp .L_tc_recycle_frame_loop_0028
  5637                                  .L_tc_recycle_frame_done_0028:
  5638 00003BEB 498D6008                	lea rsp, [r8 + 8]
  5639 00003BEF 5D                      	pop rbp ; restore the old rbp
  5640 00003BF0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5641 00003BF3 EB0A                    	jmp .L_if_end_0008
  5642                                  .L_if_else_0008:
  5643 00003BF5 48B8-                   	mov rax, L_constants + 2
  5643 00003BF7 [0200000000000000] 
  5644                                  .L_if_end_0008:
  5645 00003BFF 483D[02000000]          	cmp rax, sob_boolean_false
  5646 00003C05 7400                    	je .L_or_end_0005
  5647                                  .L_or_end_0005:
  5648 00003C07 C9                      	leave
  5649 00003C08 C21800                  	ret AND_KILL_FRAME(1)
  5650                                  .L_lambda_simple_end_0026:	; new closure is in rax
  5651 00003C0B 803804                  	cmp byte [rax], T_closure
  5652 00003C0E 0F85DF1A0000            	jne L_error_non_closure
  5653 00003C14 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5654 00003C17 FF7508                  	push qword [rbp + 8 * 1]
  5655                                   ; old ret addr
  5656 00003C1A FF7500                  	push qword [rbp]
  5657                                   ; restore the old rbp
  5658 00003C1D BB01000000              	mov rbx, 1
  5659 00003C22 4883C303                	add rbx, 3
  5660 00003C26 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  5661 00003C2A 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  5662 00003C2F 4C8D4DF8                	lea r9, [rbp - 8]
  5663 00003C33 B905000000              	mov rcx, 5
  5664                                  .L_tc_recycle_frame_loop_0026:
  5665 00003C38 4883F900                	cmp rcx, 0
  5666 00003C3C 7413                    	je .L_tc_recycle_frame_done_0026
  5667 00003C3E 4D8B11                  	mov r10, qword [r9]
  5668 00003C41 4D8910                  	mov qword [r8], r10
  5669 00003C44 4983E808                	sub r8, 8
  5670 00003C48 4983E908                	sub r9, 8
  5671 00003C4C 48FFC9                  	dec rcx
  5672 00003C4F EBE7                    	jmp .L_tc_recycle_frame_loop_0026
  5673                                  .L_tc_recycle_frame_done_0026:
  5674 00003C51 498D6008                	lea rsp, [r8 + 8]
  5675 00003C55 5D                      	pop rbp ; restore the old rbp
  5676 00003C56 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5677 00003C59 C9                      	leave
  5678 00003C5A C22000                  	ret 8 * (2 + 2)
  5679                                  .L_lambda_opt_end_0005:	; new closure is in rax
  5680 00003C5D 48890425[5E080000]      	mov qword [free_var_1], rax
  5681 00003C65 48B8-                   	mov rax, sob_void
  5681 00003C67 [0000000000000000] 
  5682                                  
  5683 00003C6F 4889C7                  	mov rdi, rax
  5684 00003C72 E87A1D0000              	call print_sexpr_if_not_void
  5685                                  	; preparing a non-tail-call
  5686 00003C77 48B8-                   	mov rax, L_constants + 1993
  5686 00003C79 [C907000000000000] 
  5687 00003C81 50                      	push rax
  5688 00003C82 48B8-                   	mov rax, L_constants + 1993
  5688 00003C84 [C907000000000000] 
  5689 00003C8C 50                      	push rax
  5690 00003C8D 6A02                    	push 2	; arg count
  5691 00003C8F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5692 00003C94 E8031B0000              	call malloc
  5693 00003C99 50                      	push rax
  5694 00003C9A BF00000000              	mov rdi, 8 * 0	; new rib
  5695 00003C9F E8F81A0000              	call malloc
  5696 00003CA4 50                      	push rax
  5697 00003CA5 BF08000000              	mov rdi, 8 * 1	; extended env
  5698 00003CAA E8ED1A0000              	call malloc
  5699 00003CAF 488B7D10                	mov rdi, ENV
  5700 00003CB3 BE00000000              	mov rsi, 0
  5701 00003CB8 BA01000000              	mov rdx, 1
  5702                                  .L_lambda_simple_env_loop_0028:	; ext_env[i + 1] <-- env[i]
  5703 00003CBD 4883FE00                	cmp rsi, 0
  5704 00003CC1 7410                    	je .L_lambda_simple_env_end_0028
  5705 00003CC3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5706 00003CC7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5707 00003CCB 48FFC6                  	inc rsi
  5708 00003CCE 48FFC2                  	inc rdx
  5709 00003CD1 EBEA                    	jmp .L_lambda_simple_env_loop_0028
  5710                                  .L_lambda_simple_env_end_0028:
  5711 00003CD3 5B                      	pop rbx
  5712 00003CD4 BE00000000              	mov rsi, 0
  5713                                  .L_lambda_simple_params_loop_0028:	; copy params
  5714 00003CD9 4883FE00                	cmp rsi, 0
  5715 00003CDD 740E                    	je .L_lambda_simple_params_end_0028
  5716 00003CDF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5717 00003CE4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5718 00003CE8 48FFC6                  	inc rsi
  5719 00003CEB EBEC                    	jmp .L_lambda_simple_params_loop_0028
  5720                                  .L_lambda_simple_params_end_0028:
  5721 00003CED 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5722 00003CF0 4889C3                  	mov rbx, rax
  5723 00003CF3 58                      	pop rax
  5724 00003CF4 C60004                  	mov byte [rax], T_closure
  5725 00003CF7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5726 00003CFB 48C74009[083D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0028
  5727 00003D03 E95A060000              	jmp .L_lambda_simple_end_0028
  5728                                  .L_lambda_simple_code_0028:	; lambda-simple body
  5729 00003D08 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5730 00003D0E 740B                    	je .L_lambda_simple_arity_check_ok_0028
  5731 00003D10 FF742410                	push qword [rsp + 8 * 2]
  5732 00003D14 6A02                    	push 2
  5733 00003D16 E93A1A0000              	jmp L_error_incorrect_arity_simple
  5734                                  .L_lambda_simple_arity_check_ok_0028:
  5735 00003D1B C8000000                	enter 0, 0
  5736 00003D1F BF08000000              	mov rdi, 8*1
  5737 00003D24 E8731A0000              	call malloc
  5738 00003D29 488B5D20                	mov rbx, PARAM(0)
  5739 00003D2D 488918                  	mov qword [rax], rbx
  5740 00003D30 48894520                	mov PARAM(0), rax
  5741 00003D34 48B8-                   	mov rax, sob_void
  5741 00003D36 [0000000000000000] 
  5742                                  
  5743 00003D3E BF08000000              	mov rdi, 8*1
  5744 00003D43 E8541A0000              	call malloc
  5745 00003D48 488B5D28                	mov rbx, PARAM(1)
  5746 00003D4C 488918                  	mov qword [rax], rbx
  5747 00003D4F 48894528                	mov PARAM(1), rax
  5748 00003D53 48B8-                   	mov rax, sob_void
  5748 00003D55 [0000000000000000] 
  5749                                  
  5750 00003D5D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5751 00003D62 E8351A0000              	call malloc
  5752 00003D67 50                      	push rax
  5753 00003D68 BF10000000              	mov rdi, 8 * 2	; new rib
  5754 00003D6D E82A1A0000              	call malloc
  5755 00003D72 50                      	push rax
  5756 00003D73 BF10000000              	mov rdi, 8 * 2	; extended env
  5757 00003D78 E81F1A0000              	call malloc
  5758 00003D7D 488B7D10                	mov rdi, ENV
  5759 00003D81 BE00000000              	mov rsi, 0
  5760 00003D86 BA01000000              	mov rdx, 1
  5761                                  .L_lambda_simple_env_loop_0029:	; ext_env[i + 1] <-- env[i]
  5762 00003D8B 4883FE01                	cmp rsi, 1
  5763 00003D8F 7410                    	je .L_lambda_simple_env_end_0029
  5764 00003D91 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5765 00003D95 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5766 00003D99 48FFC6                  	inc rsi
  5767 00003D9C 48FFC2                  	inc rdx
  5768 00003D9F EBEA                    	jmp .L_lambda_simple_env_loop_0029
  5769                                  .L_lambda_simple_env_end_0029:
  5770 00003DA1 5B                      	pop rbx
  5771 00003DA2 BE00000000              	mov rsi, 0
  5772                                  .L_lambda_simple_params_loop_0029:	; copy params
  5773 00003DA7 4883FE02                	cmp rsi, 2
  5774 00003DAB 740E                    	je .L_lambda_simple_params_end_0029
  5775 00003DAD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5776 00003DB2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5777 00003DB6 48FFC6                  	inc rsi
  5778 00003DB9 EBEC                    	jmp .L_lambda_simple_params_loop_0029
  5779                                  .L_lambda_simple_params_end_0029:
  5780 00003DBB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5781 00003DBE 4889C3                  	mov rbx, rax
  5782 00003DC1 58                      	pop rax
  5783 00003DC2 C60004                  	mov byte [rax], T_closure
  5784 00003DC5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5785 00003DC9 48C74009[D63D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0029
  5786 00003DD1 E944010000              	jmp .L_lambda_simple_end_0029
  5787                                  .L_lambda_simple_code_0029:	; lambda-simple body
  5788 00003DD6 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5789 00003DDC 740B                    	je .L_lambda_simple_arity_check_ok_0029
  5790 00003DDE FF742410                	push qword [rsp + 8 * 2]
  5791 00003DE2 6A02                    	push 2
  5792 00003DE4 E96C190000              	jmp L_error_incorrect_arity_simple
  5793                                  .L_lambda_simple_arity_check_ok_0029:
  5794 00003DE9 C8000000                	enter 0, 0
  5795                                  	; preparing a non-tail-call
  5796 00003DED 488B4528                	mov rax, PARAM(1)	; param s
  5797 00003DF1 50                      	push rax
  5798 00003DF2 6A01                    	push 1	; arg count
  5799 00003DF4 488B0425[390B0000]      	mov rax, qword [free_var_44]	; free var null?
  5800 00003DFC 803805                  	cmp byte [rax], T_undefined
  5801 00003DFF 0F846A180000            	je L_error_fvar_undefined
  5802 00003E05 803804                  	cmp byte [rax], T_closure
  5803 00003E08 0F85E5180000            	jne L_error_non_closure
  5804 00003E0E FF7001                  	push SOB_CLOSURE_ENV(rax)
  5805 00003E11 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5806 00003E14 483D[02000000]          	cmp rax, sob_boolean_false
  5807 00003E1A 740F                    	je .L_if_else_0009
  5808 00003E1C 48B8-                   	mov rax, L_constants + 1
  5808 00003E1E [0100000000000000] 
  5809 00003E26 E9EB000000              	jmp .L_if_end_0009
  5810                                  .L_if_else_0009:
  5811                                  	; preparing a tail-call
  5812                                  	; preparing a non-tail-call
  5813                                  	; preparing a non-tail-call
  5814 00003E2B 488B4528                	mov rax, PARAM(1)	; param s
  5815 00003E2F 50                      	push rax
  5816 00003E30 6A01                    	push 1	; arg count
  5817 00003E32 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  5818 00003E3A 803805                  	cmp byte [rax], T_undefined
  5819 00003E3D 0F842C180000            	je L_error_fvar_undefined
  5820 00003E43 803804                  	cmp byte [rax], T_closure
  5821 00003E46 0F85A7180000            	jne L_error_non_closure
  5822 00003E4C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5823 00003E4F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5824 00003E52 50                      	push rax
  5825 00003E53 488B4520                	mov rax, PARAM(0)	; param f
  5826 00003E57 50                      	push rax
  5827 00003E58 6A02                    	push 2	; arg count
  5828 00003E5A 488B4510                	mov rax, ENV
  5829 00003E5E 488B00                  	mov rax, qword [rax + 8 * 0]
  5830 00003E61 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  5831 00003E64 488B00                  	mov rax, qword [rax]
  5832 00003E67 803804                  	cmp byte [rax], T_closure
  5833 00003E6A 0F8583180000            	jne L_error_non_closure
  5834 00003E70 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5835 00003E73 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5836 00003E76 50                      	push rax
  5837                                  	; preparing a non-tail-call
  5838                                  	; preparing a non-tail-call
  5839 00003E77 488B4528                	mov rax, PARAM(1)	; param s
  5840 00003E7B 50                      	push rax
  5841 00003E7C 6A01                    	push 1	; arg count
  5842 00003E7E 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  5843 00003E86 803805                  	cmp byte [rax], T_undefined
  5844 00003E89 0F84E0170000            	je L_error_fvar_undefined
  5845 00003E8F 803804                  	cmp byte [rax], T_closure
  5846 00003E92 0F855B180000            	jne L_error_non_closure
  5847 00003E98 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5848 00003E9B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5849 00003E9E 50                      	push rax
  5850 00003E9F 6A01                    	push 1	; arg count
  5851 00003EA1 488B4520                	mov rax, PARAM(0)	; param f
  5852 00003EA5 803804                  	cmp byte [rax], T_closure
  5853 00003EA8 0F8545180000            	jne L_error_non_closure
  5854 00003EAE FF7001                  	push SOB_CLOSURE_ENV(rax)
  5855 00003EB1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5856 00003EB4 50                      	push rax
  5857 00003EB5 6A02                    	push 2	; arg count
  5858 00003EB7 488B0425[8F0A0000]      	mov rax, qword [free_var_34]	; free var cons
  5859 00003EBF 803805                  	cmp byte [rax], T_undefined
  5860 00003EC2 0F84A7170000            	je L_error_fvar_undefined
  5861 00003EC8 803804                  	cmp byte [rax], T_closure
  5862 00003ECB 0F8522180000            	jne L_error_non_closure
  5863 00003ED1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5864 00003ED4 FF7508                  	push qword [rbp + 8 * 1]
  5865                                   ; old ret addr
  5866 00003ED7 FF7500                  	push qword [rbp]
  5867                                   ; restore the old rbp
  5868 00003EDA BB02000000              	mov rbx, 2
  5869 00003EDF 4883C303                	add rbx, 3
  5870 00003EE3 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  5871 00003EE7 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  5872 00003EEC 4C8D4DF8                	lea r9, [rbp - 8]
  5873 00003EF0 B906000000              	mov rcx, 6
  5874                                  .L_tc_recycle_frame_loop_0029:
  5875 00003EF5 4883F900                	cmp rcx, 0
  5876 00003EF9 7413                    	je .L_tc_recycle_frame_done_0029
  5877 00003EFB 4D8B11                  	mov r10, qword [r9]
  5878 00003EFE 4D8910                  	mov qword [r8], r10
  5879 00003F01 4983E808                	sub r8, 8
  5880 00003F05 4983E908                	sub r9, 8
  5881 00003F09 48FFC9                  	dec rcx
  5882 00003F0C EBE7                    	jmp .L_tc_recycle_frame_loop_0029
  5883                                  .L_tc_recycle_frame_done_0029:
  5884 00003F0E 498D6008                	lea rsp, [r8 + 8]
  5885 00003F12 5D                      	pop rbp ; restore the old rbp
  5886 00003F13 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5887                                  .L_if_end_0009:
  5888 00003F16 C9                      	leave
  5889 00003F17 C22000                  	ret AND_KILL_FRAME(2)
  5890                                  .L_lambda_simple_end_0029:	; new closure is in rax
  5891 00003F1A 50                      	push rax
  5892 00003F1B 488B4520                	mov rax, PARAM(0)	; param map1
  5893 00003F1F 8F00                    	pop qword [rax]
  5894 00003F21 48B8-                   	mov rax, sob_void
  5894 00003F23 [0000000000000000] 
  5895                                  
  5896 00003F2B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5897 00003F30 E867180000              	call malloc
  5898 00003F35 50                      	push rax
  5899 00003F36 BF10000000              	mov rdi, 8 * 2	; new rib
  5900 00003F3B E85C180000              	call malloc
  5901 00003F40 50                      	push rax
  5902 00003F41 BF10000000              	mov rdi, 8 * 2	; extended env
  5903 00003F46 E851180000              	call malloc
  5904 00003F4B 488B7D10                	mov rdi, ENV
  5905 00003F4F BE00000000              	mov rsi, 0
  5906 00003F54 BA01000000              	mov rdx, 1
  5907                                  .L_lambda_simple_env_loop_002a:	; ext_env[i + 1] <-- env[i]
  5908 00003F59 4883FE01                	cmp rsi, 1
  5909 00003F5D 7410                    	je .L_lambda_simple_env_end_002a
  5910 00003F5F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5911 00003F63 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5912 00003F67 48FFC6                  	inc rsi
  5913 00003F6A 48FFC2                  	inc rdx
  5914 00003F6D EBEA                    	jmp .L_lambda_simple_env_loop_002a
  5915                                  .L_lambda_simple_env_end_002a:
  5916 00003F6F 5B                      	pop rbx
  5917 00003F70 BE00000000              	mov rsi, 0
  5918                                  .L_lambda_simple_params_loop_002a:	; copy params
  5919 00003F75 4883FE02                	cmp rsi, 2
  5920 00003F79 740E                    	je .L_lambda_simple_params_end_002a
  5921 00003F7B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5922 00003F80 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5923 00003F84 48FFC6                  	inc rsi
  5924 00003F87 EBEC                    	jmp .L_lambda_simple_params_loop_002a
  5925                                  .L_lambda_simple_params_end_002a:
  5926 00003F89 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5927 00003F8C 4889C3                  	mov rbx, rax
  5928 00003F8F 58                      	pop rax
  5929 00003F90 C60004                  	mov byte [rax], T_closure
  5930 00003F93 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5931 00003F97 48C74009[A43F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002a
  5932 00003F9F E996010000              	jmp .L_lambda_simple_end_002a
  5933                                  .L_lambda_simple_code_002a:	; lambda-simple body
  5934 00003FA4 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5935 00003FAA 740B                    	je .L_lambda_simple_arity_check_ok_002a
  5936 00003FAC FF742410                	push qword [rsp + 8 * 2]
  5937 00003FB0 6A02                    	push 2
  5938 00003FB2 E99E170000              	jmp L_error_incorrect_arity_simple
  5939                                  .L_lambda_simple_arity_check_ok_002a:
  5940 00003FB7 C8000000                	enter 0, 0
  5941                                  	; preparing a non-tail-call
  5942                                  	; preparing a non-tail-call
  5943 00003FBB 488B4528                	mov rax, PARAM(1)	; param s
  5944 00003FBF 50                      	push rax
  5945 00003FC0 6A01                    	push 1	; arg count
  5946 00003FC2 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  5947 00003FCA 803805                  	cmp byte [rax], T_undefined
  5948 00003FCD 0F849C160000            	je L_error_fvar_undefined
  5949 00003FD3 803804                  	cmp byte [rax], T_closure
  5950 00003FD6 0F8517170000            	jne L_error_non_closure
  5951 00003FDC FF7001                  	push SOB_CLOSURE_ENV(rax)
  5952 00003FDF FF5009                  	call SOB_CLOSURE_CODE(rax)
  5953 00003FE2 50                      	push rax
  5954 00003FE3 6A01                    	push 1	; arg count
  5955 00003FE5 488B0425[390B0000]      	mov rax, qword [free_var_44]	; free var null?
  5956 00003FED 803805                  	cmp byte [rax], T_undefined
  5957 00003FF0 0F8479160000            	je L_error_fvar_undefined
  5958 00003FF6 803804                  	cmp byte [rax], T_closure
  5959 00003FF9 0F85F4160000            	jne L_error_non_closure
  5960 00003FFF FF7001                  	push SOB_CLOSURE_ENV(rax)
  5961 00004002 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5962 00004005 483D[02000000]          	cmp rax, sob_boolean_false
  5963 0000400B 740F                    	je .L_if_else_000a
  5964 0000400D 48B8-                   	mov rax, L_constants + 1
  5964 0000400F [0100000000000000] 
  5965 00004017 E91A010000              	jmp .L_if_end_000a
  5966                                  .L_if_else_000a:
  5967                                  	; preparing a tail-call
  5968                                  	; preparing a non-tail-call
  5969                                  	; preparing a non-tail-call
  5970 0000401C 488B4528                	mov rax, PARAM(1)	; param s
  5971 00004020 50                      	push rax
  5972 00004021 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  5973 00004029 803805                  	cmp byte [rax], T_undefined
  5974 0000402C 0F843D160000            	je L_error_fvar_undefined
  5975 00004032 50                      	push rax
  5976 00004033 6A02                    	push 2	; arg count
  5977 00004035 488B4510                	mov rax, ENV
  5978 00004039 488B00                  	mov rax, qword [rax + 8 * 0]
  5979 0000403C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  5980 0000403F 488B00                  	mov rax, qword [rax]
  5981 00004042 803804                  	cmp byte [rax], T_closure
  5982 00004045 0F85A8160000            	jne L_error_non_closure
  5983 0000404B FF7001                  	push SOB_CLOSURE_ENV(rax)
  5984 0000404E FF5009                  	call SOB_CLOSURE_CODE(rax)
  5985 00004051 50                      	push rax
  5986 00004052 488B4520                	mov rax, PARAM(0)	; param f
  5987 00004056 50                      	push rax
  5988 00004057 6A02                    	push 2	; arg count
  5989 00004059 488B4510                	mov rax, ENV
  5990 0000405D 488B00                  	mov rax, qword [rax + 8 * 0]
  5991 00004060 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  5992 00004064 488B00                  	mov rax, qword [rax]
  5993 00004067 803804                  	cmp byte [rax], T_closure
  5994 0000406A 0F8583160000            	jne L_error_non_closure
  5995 00004070 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5996 00004073 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5997 00004076 50                      	push rax
  5998                                  	; preparing a non-tail-call
  5999                                  	; preparing a non-tail-call
  6000 00004077 488B4528                	mov rax, PARAM(1)	; param s
  6001 0000407B 50                      	push rax
  6002 0000407C 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  6003 00004084 803805                  	cmp byte [rax], T_undefined
  6004 00004087 0F84E2150000            	je L_error_fvar_undefined
  6005 0000408D 50                      	push rax
  6006 0000408E 6A02                    	push 2	; arg count
  6007 00004090 488B4510                	mov rax, ENV
  6008 00004094 488B00                  	mov rax, qword [rax + 8 * 0]
  6009 00004097 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  6010 0000409A 488B00                  	mov rax, qword [rax]
  6011 0000409D 803804                  	cmp byte [rax], T_closure
  6012 000040A0 0F854D160000            	jne L_error_non_closure
  6013 000040A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6014 000040A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6015 000040AC 50                      	push rax
  6016 000040AD 488B4520                	mov rax, PARAM(0)	; param f
  6017 000040B1 50                      	push rax
  6018 000040B2 6A02                    	push 2	; arg count
  6019 000040B4 488B0425[80080000]      	mov rax, qword [free_var_3]	; free var apply
  6020 000040BC 803805                  	cmp byte [rax], T_undefined
  6021 000040BF 0F84AA150000            	je L_error_fvar_undefined
  6022 000040C5 803804                  	cmp byte [rax], T_closure
  6023 000040C8 0F8525160000            	jne L_error_non_closure
  6024 000040CE FF7001                  	push SOB_CLOSURE_ENV(rax)
  6025 000040D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6026 000040D4 50                      	push rax
  6027 000040D5 6A02                    	push 2	; arg count
  6028 000040D7 488B0425[8F0A0000]      	mov rax, qword [free_var_34]	; free var cons
  6029 000040DF 803805                  	cmp byte [rax], T_undefined
  6030 000040E2 0F8487150000            	je L_error_fvar_undefined
  6031 000040E8 803804                  	cmp byte [rax], T_closure
  6032 000040EB 0F8502160000            	jne L_error_non_closure
  6033 000040F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6034 000040F4 FF7508                  	push qword [rbp + 8 * 1]
  6035                                   ; old ret addr
  6036 000040F7 FF7500                  	push qword [rbp]
  6037                                   ; restore the old rbp
  6038 000040FA BB02000000              	mov rbx, 2
  6039 000040FF 4883C303                	add rbx, 3
  6040 00004103 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  6041 00004107 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  6042 0000410C 4C8D4DF8                	lea r9, [rbp - 8]
  6043 00004110 B906000000              	mov rcx, 6
  6044                                  .L_tc_recycle_frame_loop_002a:
  6045 00004115 4883F900                	cmp rcx, 0
  6046 00004119 7413                    	je .L_tc_recycle_frame_done_002a
  6047 0000411B 4D8B11                  	mov r10, qword [r9]
  6048 0000411E 4D8910                  	mov qword [r8], r10
  6049 00004121 4983E808                	sub r8, 8
  6050 00004125 4983E908                	sub r9, 8
  6051 00004129 48FFC9                  	dec rcx
  6052 0000412C EBE7                    	jmp .L_tc_recycle_frame_loop_002a
  6053                                  .L_tc_recycle_frame_done_002a:
  6054 0000412E 498D6008                	lea rsp, [r8 + 8]
  6055 00004132 5D                      	pop rbp ; restore the old rbp
  6056 00004133 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6057                                  .L_if_end_000a:
  6058 00004136 C9                      	leave
  6059 00004137 C22000                  	ret AND_KILL_FRAME(2)
  6060                                  .L_lambda_simple_end_002a:	; new closure is in rax
  6061 0000413A 50                      	push rax
  6062 0000413B 488B4528                	mov rax, PARAM(1)	; param map-list
  6063 0000413F 8F00                    	pop qword [rax]
  6064 00004141 48B8-                   	mov rax, sob_void
  6064 00004143 [0000000000000000] 
  6065                                  
  6066 0000414B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6067 00004150 E847160000              	call malloc
  6068 00004155 50                      	push rax
  6069 00004156 BF10000000              	mov rdi, 8 * 2	; new rib
  6070 0000415B E83C160000              	call malloc
  6071 00004160 50                      	push rax
  6072 00004161 BF10000000              	mov rdi, 8 * 2	; extended env
  6073 00004166 E831160000              	call malloc
  6074 0000416B 488B7D10                	mov rdi, ENV
  6075 0000416F 4831F6                  	 xor rsi, rsi
  6076 00004172 4831D2                  	 xor rdx, rdx
  6077 00004175 48FFC2                  	inc rdx
  6078                                  .L_lambda_opt_env_loop_0006:	; 
  6079 00004178 4883FE01                	cmp rsi, 1
  6080 0000417C 7410                    	je .L_lambda_opt_env_end_0006
  6081 0000417E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6082 00004182 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6083 00004186 48FFC6                  	inc rsi
  6084 00004189 48FFC2                  	inc rdx
  6085 0000418C EBEA                    	jmp .L_lambda_opt_env_loop_0006
  6086                                  .L_lambda_opt_env_end_0006:
  6087 0000418E 5B                      	pop rbx
  6088 0000418F 4831F6                  	xor rsi, rsi
  6089                                  .L_lambda_opt_params_loop_0006:	; copy params
  6090 00004192 4883FE02                	cmp rsi, 2
  6091 00004196 740E                    	je .L_lambda_opt_params_end_0006
  6092 00004198 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6093 0000419D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6094 000041A1 48FFC6                  	inc rsi
  6095 000041A4 EBEC                    	jmp .L_lambda_opt_params_loop_0006
  6096                                  .L_lambda_opt_params_end_0006:
  6097 000041A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6098 000041A9 4889C3                  	mov rbx, rax
  6099 000041AC 58                      	pop rax
  6100 000041AD C60004                  	mov byte [rax], T_closure
  6101 000041B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6102 000041B4 48C74009[C1410000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0006
  6103 000041BC E99D010000              	jmp .L_lambda_opt_end_0006
  6104                                  .L_lambda_opt_code_0006:
  6105 000041C1 4C8B7C2410              	mov r15, qword [rsp + 8 * 2]
  6106 000041C6 4983FF01                	cmp r15, 1
  6107 000041CA 7409                    	je .L_lambda_opt_arity_check_exact_0006
  6108 000041CC 7F57                    	jg .L_lambda_opt_arity_check_more_0006
  6109 000041CE 6A01                    	push 1
  6110 000041D0 E994150000              	jmp L_error_incorrect_arity_opt
  6111                                  .L_lambda_opt_arity_check_exact_0006: ;Exact case
  6112 000041D5 4C8B0424                	mov r8, qword [rsp -8 * 0]
  6113 000041D9 4C894424F8              	mov qword [rsp -8], r8
  6114 000041DE 4C8B442408              	mov r8, qword [rsp +8]
  6115 000041E3 4C890424                	mov qword [rsp +8 * 0], r8
  6116 000041E7 4C8B442410              	mov r8, qword [rsp +8 * 2]
  6117 000041EC 4C89C1                  	mov rcx, r8
  6118 000041EF 49FFC0                  	inc r8
  6119 000041F2 4C89442408              	mov qword [rsp +8], r8
  6120 000041F7 4889E2                  	mov rdx, rsp
  6121 000041FA 4883C218                	add rdx, 24
  6122                                  .L_lambda_opt_loop_copy_to_new_frame_exact_0006:
  6123 000041FE 4883F900                	cmp rcx, 0
  6124 00004202 7410                    	je .L_lambda_opt_loop_copy_to_new_frame_exact_end_0006
  6125 00004204 4C8B02                  	mov r8, qword [rdx]
  6126 00004207 4C8942F8                	mov qword [rdx - 8], r8
  6127 0000420B 4883C208                	add rdx, 8
  6128 0000420F 48FFC9                  	dec rcx
  6129 00004212 EBEA                    	jmp .L_lambda_opt_loop_copy_to_new_frame_exact_0006
  6130                                  .L_lambda_opt_loop_copy_to_new_frame_exact_end_0006:
  6131 00004214 48C742F8[01000000]      	mov qword [rdx - 8], sob_nil
  6132 0000421C 4883EC08                	sub rsp, 8
  6133 00004220 E985000000              	jmp .L_lambda_opt_stack_adjusted_0006
  6134                                  .L_lambda_opt_arity_check_more_0006:
  6135 00004225 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  6136 0000422A 4D89C4                  	mov r12, r8
  6137 0000422D 4C89C1                  	mov rcx, r8
  6138 00004230 4D8D6802                	lea r13, [r8 + 2] 
  6139 00004234 4883E901                	sub rcx, 1
  6140 00004238 4E8D5CC410              	lea r11, qword [rsp + r8 * 8 + 16]
  6141 0000423D 49BE-                   	mov r14, sob_nil
  6141 0000423F [0100000000000000] 
  6142                                  .L_lambda_opt_create_list_of_opt_params_0006:
  6143 00004247 4883F900                	cmp rcx, 0
  6144 0000424B 7424                    	je .L_lambda_opt_create_list_of_opt_params_end_0006
  6145 0000424D BF11000000              	mov rdi, 17
  6146 00004252 E845150000              	call malloc
  6147 00004257 C60021                  	mov byte [rax], T_pair
  6148 0000425A 498B1B                  	mov rbx, qword [r11]
  6149 0000425D 48895801                	mov qword [rax +1], rbx
  6150 00004261 4C897009                	mov qword [rax + 1 + 8], r14
  6151 00004265 4989C6                  	mov r14, rax
  6152 00004268 48FFC9                  	dec rcx
  6153 0000426B 4983EB08                	sub r11, 8
  6154 0000426F EBD6                    	jmp .L_lambda_opt_create_list_of_opt_params_0006
  6155                                  .L_lambda_opt_create_list_of_opt_params_end_0006:
  6156 00004271 4C8D542420              	lea r10, [rsp + 1*8 + 8*3]
  6157 00004276 4D8932                  	mov qword [r10], r14
  6158 00004279 4E8D2CED00000000        	lea r13, [8 * r13]
  6159 00004281 4901E5                  	add r13, rsp
  6160 00004284 B905000000              	mov rcx, 4 + 1
  6161                                  .L_lambda_opt_stack_shrink_loop_0006:
  6162 00004289 4883F900                	cmp rcx, 0
  6163 0000428D 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0006
  6164 0000428F 4D8B1A                  	mov r11, qword [r10]
  6165 00004292 4D895D00                	mov qword [r13], r11
  6166 00004296 4983EA08                	sub r10, 8
  6167 0000429A 4983ED08                	sub r13, 8
  6168 0000429E 48FFC9                  	dec rcx
  6169 000042A1 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0006
  6170                                  .L_lambda_opt_stack_shrink_loop_exit_0006:
  6171 000042A3 4983C508                	add r13, 8
  6172 000042A7 4C89EC                  	mov rsp, r13
  6173                                  .L_lambda_opt_stack_adjusted_0006:
  6174 000042AA 48C744241002000000      	mov qword [rsp + 8*2], 2
  6175 000042B3 C8000000                	enter 0, 0
  6176                                  	; preparing a non-tail-call
  6177 000042B7 488B4528                	mov rax, PARAM(1)	; param s
  6178 000042BB 50                      	push rax
  6179 000042BC 6A01                    	push 1	; arg count
  6180 000042BE 488B0425[390B0000]      	mov rax, qword [free_var_44]	; free var null?
  6181 000042C6 803805                  	cmp byte [rax], T_undefined
  6182 000042C9 0F84A0130000            	je L_error_fvar_undefined
  6183 000042CF 803804                  	cmp byte [rax], T_closure
  6184 000042D2 0F851B140000            	jne L_error_non_closure
  6185 000042D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6186 000042DB FF5009                  	call SOB_CLOSURE_CODE(rax)
  6187 000042DE 483D[02000000]          	cmp rax, sob_boolean_false
  6188 000042E4 740C                    	je .L_if_else_000b
  6189 000042E6 48B8-                   	mov rax, L_constants + 1
  6189 000042E8 [0100000000000000] 
  6190 000042F0 EB68                    	jmp .L_if_end_000b
  6191                                  .L_if_else_000b:
  6192                                  	; preparing a tail-call
  6193 000042F2 488B4528                	mov rax, PARAM(1)	; param s
  6194 000042F6 50                      	push rax
  6195 000042F7 488B4520                	mov rax, PARAM(0)	; param f
  6196 000042FB 50                      	push rax
  6197 000042FC 6A02                    	push 2	; arg count
  6198 000042FE 488B4510                	mov rax, ENV
  6199 00004302 488B00                  	mov rax, qword [rax + 8 * 0]
  6200 00004305 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  6201 00004309 488B00                  	mov rax, qword [rax]
  6202 0000430C 803804                  	cmp byte [rax], T_closure
  6203 0000430F 0F85DE130000            	jne L_error_non_closure
  6204 00004315 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6205 00004318 FF7508                  	push qword [rbp + 8 * 1]
  6206                                   ; old ret addr
  6207 0000431B FF7500                  	push qword [rbp]
  6208                                   ; restore the old rbp
  6209 0000431E BB02000000              	mov rbx, 2
  6210 00004323 4883C303                	add rbx, 3
  6211 00004327 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  6212 0000432B 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  6213 00004330 4C8D4DF8                	lea r9, [rbp - 8]
  6214 00004334 B906000000              	mov rcx, 6
  6215                                  .L_tc_recycle_frame_loop_002b:
  6216 00004339 4883F900                	cmp rcx, 0
  6217 0000433D 7413                    	je .L_tc_recycle_frame_done_002b
  6218 0000433F 4D8B11                  	mov r10, qword [r9]
  6219 00004342 4D8910                  	mov qword [r8], r10
  6220 00004345 4983E808                	sub r8, 8
  6221 00004349 4983E908                	sub r9, 8
  6222 0000434D 48FFC9                  	dec rcx
  6223 00004350 EBE7                    	jmp .L_tc_recycle_frame_loop_002b
  6224                                  .L_tc_recycle_frame_done_002b:
  6225 00004352 498D6008                	lea rsp, [r8 + 8]
  6226 00004356 5D                      	pop rbp ; restore the old rbp
  6227 00004357 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6228                                  .L_if_end_000b:
  6229 0000435A C9                      	leave
  6230 0000435B C22000                  	ret 8 * (2 + 2)
  6231                                  .L_lambda_opt_end_0006:	; new closure is in rax
  6232 0000435E C9                      	leave
  6233 0000435F C22000                  	ret AND_KILL_FRAME(2)
  6234                                  .L_lambda_simple_end_0028:	; new closure is in rax
  6235 00004362 803804                  	cmp byte [rax], T_closure
  6236 00004365 0F8588130000            	jne L_error_non_closure
  6237 0000436B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6238 0000436E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6239 00004371 48890425[170B0000]      	mov qword [free_var_42], rax
  6240 00004379 48B8-                   	mov rax, sob_void
  6240 0000437B [0000000000000000] 
  6241                                  
  6242 00004383 4889C7                  	mov rdi, rax
  6243 00004386 E866160000              	call print_sexpr_if_not_void
  6244 0000438B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6245 00004390 E807140000              	call malloc
  6246 00004395 50                      	push rax
  6247 00004396 BF00000000              	mov rdi, 8 * 0	; new rib
  6248 0000439B E8FC130000              	call malloc
  6249 000043A0 50                      	push rax
  6250 000043A1 BF08000000              	mov rdi, 8 * 1	; extended env
  6251 000043A6 E8F1130000              	call malloc
  6252 000043AB 488B7D10                	mov rdi, ENV
  6253 000043AF BE00000000              	mov rsi, 0
  6254 000043B4 BA01000000              	mov rdx, 1
  6255                                  .L_lambda_simple_env_loop_002b:	; ext_env[i + 1] <-- env[i]
  6256 000043B9 4883FE00                	cmp rsi, 0
  6257 000043BD 7410                    	je .L_lambda_simple_env_end_002b
  6258 000043BF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6259 000043C3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6260 000043C7 48FFC6                  	inc rsi
  6261 000043CA 48FFC2                  	inc rdx
  6262 000043CD EBEA                    	jmp .L_lambda_simple_env_loop_002b
  6263                                  .L_lambda_simple_env_end_002b:
  6264 000043CF 5B                      	pop rbx
  6265 000043D0 BE00000000              	mov rsi, 0
  6266                                  .L_lambda_simple_params_loop_002b:	; copy params
  6267 000043D5 4883FE00                	cmp rsi, 0
  6268 000043D9 740E                    	je .L_lambda_simple_params_end_002b
  6269 000043DB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6270 000043E0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6271 000043E4 48FFC6                  	inc rsi
  6272 000043E7 EBEC                    	jmp .L_lambda_simple_params_loop_002b
  6273                                  .L_lambda_simple_params_end_002b:
  6274 000043E9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6275 000043EC 4889C3                  	mov rbx, rax
  6276 000043EF 58                      	pop rax
  6277 000043F0 C60004                  	mov byte [rax], T_closure
  6278 000043F3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6279 000043F7 48C74009[04440000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002b
  6280 000043FF E98C010000              	jmp .L_lambda_simple_end_002b
  6281                                  .L_lambda_simple_code_002b:	; lambda-simple body
  6282 00004404 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6283 0000440A 740B                    	je .L_lambda_simple_arity_check_ok_002b
  6284 0000440C FF742410                	push qword [rsp + 8 * 2]
  6285 00004410 6A01                    	push 1
  6286 00004412 E93E130000              	jmp L_error_incorrect_arity_simple
  6287                                  .L_lambda_simple_arity_check_ok_002b:
  6288 00004417 C8000000                	enter 0, 0
  6289                                  	; preparing a tail-call
  6290 0000441B 488B4520                	mov rax, PARAM(0)	; param s
  6291 0000441F 50                      	push rax
  6292 00004420 48B8-                   	mov rax, L_constants + 1
  6292 00004422 [0100000000000000] 
  6293 0000442A 50                      	push rax
  6294 0000442B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6295 00004430 E867130000              	call malloc
  6296 00004435 50                      	push rax
  6297 00004436 BF08000000              	mov rdi, 8 * 1	; new rib
  6298 0000443B E85C130000              	call malloc
  6299 00004440 50                      	push rax
  6300 00004441 BF10000000              	mov rdi, 8 * 2	; extended env
  6301 00004446 E851130000              	call malloc
  6302 0000444B 488B7D10                	mov rdi, ENV
  6303 0000444F BE00000000              	mov rsi, 0
  6304 00004454 BA01000000              	mov rdx, 1
  6305                                  .L_lambda_simple_env_loop_002c:	; ext_env[i + 1] <-- env[i]
  6306 00004459 4883FE01                	cmp rsi, 1
  6307 0000445D 7410                    	je .L_lambda_simple_env_end_002c
  6308 0000445F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6309 00004463 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6310 00004467 48FFC6                  	inc rsi
  6311 0000446A 48FFC2                  	inc rdx
  6312 0000446D EBEA                    	jmp .L_lambda_simple_env_loop_002c
  6313                                  .L_lambda_simple_env_end_002c:
  6314 0000446F 5B                      	pop rbx
  6315 00004470 BE00000000              	mov rsi, 0
  6316                                  .L_lambda_simple_params_loop_002c:	; copy params
  6317 00004475 4883FE01                	cmp rsi, 1
  6318 00004479 740E                    	je .L_lambda_simple_params_end_002c
  6319 0000447B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6320 00004480 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6321 00004484 48FFC6                  	inc rsi
  6322 00004487 EBEC                    	jmp .L_lambda_simple_params_loop_002c
  6323                                  .L_lambda_simple_params_end_002c:
  6324 00004489 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6325 0000448C 4889C3                  	mov rbx, rax
  6326 0000448F 58                      	pop rax
  6327 00004490 C60004                  	mov byte [rax], T_closure
  6328 00004493 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6329 00004497 48C74009[A4440000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002c
  6330 0000449F E986000000              	jmp .L_lambda_simple_end_002c
  6331                                  .L_lambda_simple_code_002c:	; lambda-simple body
  6332 000044A4 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6333 000044AA 740B                    	je .L_lambda_simple_arity_check_ok_002c
  6334 000044AC FF742410                	push qword [rsp + 8 * 2]
  6335 000044B0 6A02                    	push 2
  6336 000044B2 E99E120000              	jmp L_error_incorrect_arity_simple
  6337                                  .L_lambda_simple_arity_check_ok_002c:
  6338 000044B7 C8000000                	enter 0, 0
  6339                                  	; preparing a tail-call
  6340 000044BB 488B4520                	mov rax, PARAM(0)	; param r
  6341 000044BF 50                      	push rax
  6342 000044C0 488B4528                	mov rax, PARAM(1)	; param a
  6343 000044C4 50                      	push rax
  6344 000044C5 6A02                    	push 2	; arg count
  6345 000044C7 488B0425[8F0A0000]      	mov rax, qword [free_var_34]	; free var cons
  6346 000044CF 803805                  	cmp byte [rax], T_undefined
  6347 000044D2 0F8497110000            	je L_error_fvar_undefined
  6348 000044D8 803804                  	cmp byte [rax], T_closure
  6349 000044DB 0F8512120000            	jne L_error_non_closure
  6350 000044E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6351 000044E4 FF7508                  	push qword [rbp + 8 * 1]
  6352                                   ; old ret addr
  6353 000044E7 FF7500                  	push qword [rbp]
  6354                                   ; restore the old rbp
  6355 000044EA BB02000000              	mov rbx, 2
  6356 000044EF 4883C303                	add rbx, 3
  6357 000044F3 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  6358 000044F7 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  6359 000044FC 4C8D4DF8                	lea r9, [rbp - 8]
  6360 00004500 B906000000              	mov rcx, 6
  6361                                  .L_tc_recycle_frame_loop_002d:
  6362 00004505 4883F900                	cmp rcx, 0
  6363 00004509 7413                    	je .L_tc_recycle_frame_done_002d
  6364 0000450B 4D8B11                  	mov r10, qword [r9]
  6365 0000450E 4D8910                  	mov qword [r8], r10
  6366 00004511 4983E808                	sub r8, 8
  6367 00004515 4983E908                	sub r9, 8
  6368 00004519 48FFC9                  	dec rcx
  6369 0000451C EBE7                    	jmp .L_tc_recycle_frame_loop_002d
  6370                                  .L_tc_recycle_frame_done_002d:
  6371 0000451E 498D6008                	lea rsp, [r8 + 8]
  6372 00004522 5D                      	pop rbp ; restore the old rbp
  6373 00004523 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6374 00004526 C9                      	leave
  6375 00004527 C22000                  	ret AND_KILL_FRAME(2)
  6376                                  .L_lambda_simple_end_002c:	; new closure is in rax
  6377 0000452A 50                      	push rax
  6378 0000452B 6A03                    	push 3	; arg count
  6379 0000452D 488B0425[A00A0000]      	mov rax, qword [free_var_35]	; free var fold-left
  6380 00004535 803805                  	cmp byte [rax], T_undefined
  6381 00004538 0F8431110000            	je L_error_fvar_undefined
  6382 0000453E 803804                  	cmp byte [rax], T_closure
  6383 00004541 0F85AC110000            	jne L_error_non_closure
  6384 00004547 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6385 0000454A FF7508                  	push qword [rbp + 8 * 1]
  6386                                   ; old ret addr
  6387 0000454D FF7500                  	push qword [rbp]
  6388                                   ; restore the old rbp
  6389 00004550 BB03000000              	mov rbx, 3
  6390 00004555 4883C303                	add rbx, 3
  6391 00004559 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  6392 0000455D 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  6393 00004562 4C8D4DF8                	lea r9, [rbp - 8]
  6394 00004566 B907000000              	mov rcx, 7
  6395                                  .L_tc_recycle_frame_loop_002c:
  6396 0000456B 4883F900                	cmp rcx, 0
  6397 0000456F 7413                    	je .L_tc_recycle_frame_done_002c
  6398 00004571 4D8B11                  	mov r10, qword [r9]
  6399 00004574 4D8910                  	mov qword [r8], r10
  6400 00004577 4983E808                	sub r8, 8
  6401 0000457B 4983E908                	sub r9, 8
  6402 0000457F 48FFC9                  	dec rcx
  6403 00004582 EBE7                    	jmp .L_tc_recycle_frame_loop_002c
  6404                                  .L_tc_recycle_frame_done_002c:
  6405 00004584 498D6008                	lea rsp, [r8 + 8]
  6406 00004588 5D                      	pop rbp ; restore the old rbp
  6407 00004589 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6408 0000458C C9                      	leave
  6409 0000458D C21800                  	ret AND_KILL_FRAME(1)
  6410                                  .L_lambda_simple_end_002b:	; new closure is in rax
  6411 00004590 48890425[7D0B0000]      	mov qword [free_var_48], rax
  6412 00004598 48B8-                   	mov rax, sob_void
  6412 0000459A [0000000000000000] 
  6413                                  
  6414 000045A2 4889C7                  	mov rdi, rax
  6415 000045A5 E847140000              	call print_sexpr_if_not_void
  6416                                  	; preparing a non-tail-call
  6417 000045AA 48B8-                   	mov rax, L_constants + 1993
  6417 000045AC [C907000000000000] 
  6418 000045B4 50                      	push rax
  6419 000045B5 48B8-                   	mov rax, L_constants + 1993
  6419 000045B7 [C907000000000000] 
  6420 000045BF 50                      	push rax
  6421 000045C0 6A02                    	push 2	; arg count
  6422 000045C2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6423 000045C7 E8D0110000              	call malloc
  6424 000045CC 50                      	push rax
  6425 000045CD BF00000000              	mov rdi, 8 * 0	; new rib
  6426 000045D2 E8C5110000              	call malloc
  6427 000045D7 50                      	push rax
  6428 000045D8 BF08000000              	mov rdi, 8 * 1	; extended env
  6429 000045DD E8BA110000              	call malloc
  6430 000045E2 488B7D10                	mov rdi, ENV
  6431 000045E6 BE00000000              	mov rsi, 0
  6432 000045EB BA01000000              	mov rdx, 1
  6433                                  .L_lambda_simple_env_loop_002d:	; ext_env[i + 1] <-- env[i]
  6434 000045F0 4883FE00                	cmp rsi, 0
  6435 000045F4 7410                    	je .L_lambda_simple_env_end_002d
  6436 000045F6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6437 000045FA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6438 000045FE 48FFC6                  	inc rsi
  6439 00004601 48FFC2                  	inc rdx
  6440 00004604 EBEA                    	jmp .L_lambda_simple_env_loop_002d
  6441                                  .L_lambda_simple_env_end_002d:
  6442 00004606 5B                      	pop rbx
  6443 00004607 BE00000000              	mov rsi, 0
  6444                                  .L_lambda_simple_params_loop_002d:	; copy params
  6445 0000460C 4883FE00                	cmp rsi, 0
  6446 00004610 740E                    	je .L_lambda_simple_params_end_002d
  6447 00004612 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6448 00004617 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6449 0000461B 48FFC6                  	inc rsi
  6450 0000461E EBEC                    	jmp .L_lambda_simple_params_loop_002d
  6451                                  .L_lambda_simple_params_end_002d:
  6452 00004620 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6453 00004623 4889C3                  	mov rbx, rax
  6454 00004626 58                      	pop rax
  6455 00004627 C60004                  	mov byte [rax], T_closure
  6456 0000462A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6457 0000462E 48C74009[3B460000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002d
  6458 00004636 E916060000              	jmp .L_lambda_simple_end_002d
  6459                                  .L_lambda_simple_code_002d:	; lambda-simple body
  6460 0000463B 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6461 00004641 740B                    	je .L_lambda_simple_arity_check_ok_002d
  6462 00004643 FF742410                	push qword [rsp + 8 * 2]
  6463 00004647 6A02                    	push 2
  6464 00004649 E907110000              	jmp L_error_incorrect_arity_simple
  6465                                  .L_lambda_simple_arity_check_ok_002d:
  6466 0000464E C8000000                	enter 0, 0
  6467 00004652 BF08000000              	mov rdi, 8*1
  6468 00004657 E840110000              	call malloc
  6469 0000465C 488B5D20                	mov rbx, PARAM(0)
  6470 00004660 488918                  	mov qword [rax], rbx
  6471 00004663 48894520                	mov PARAM(0), rax
  6472 00004667 48B8-                   	mov rax, sob_void
  6472 00004669 [0000000000000000] 
  6473                                  
  6474 00004671 BF08000000              	mov rdi, 8*1
  6475 00004676 E821110000              	call malloc
  6476 0000467B 488B5D28                	mov rbx, PARAM(1)
  6477 0000467F 488918                  	mov qword [rax], rbx
  6478 00004682 48894528                	mov PARAM(1), rax
  6479 00004686 48B8-                   	mov rax, sob_void
  6479 00004688 [0000000000000000] 
  6480                                  
  6481 00004690 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6482 00004695 E802110000              	call malloc
  6483 0000469A 50                      	push rax
  6484 0000469B BF10000000              	mov rdi, 8 * 2	; new rib
  6485 000046A0 E8F7100000              	call malloc
  6486 000046A5 50                      	push rax
  6487 000046A6 BF10000000              	mov rdi, 8 * 2	; extended env
  6488 000046AB E8EC100000              	call malloc
  6489 000046B0 488B7D10                	mov rdi, ENV
  6490 000046B4 BE00000000              	mov rsi, 0
  6491 000046B9 BA01000000              	mov rdx, 1
  6492                                  .L_lambda_simple_env_loop_002e:	; ext_env[i + 1] <-- env[i]
  6493 000046BE 4883FE01                	cmp rsi, 1
  6494 000046C2 7410                    	je .L_lambda_simple_env_end_002e
  6495 000046C4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6496 000046C8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6497 000046CC 48FFC6                  	inc rsi
  6498 000046CF 48FFC2                  	inc rdx
  6499 000046D2 EBEA                    	jmp .L_lambda_simple_env_loop_002e
  6500                                  .L_lambda_simple_env_end_002e:
  6501 000046D4 5B                      	pop rbx
  6502 000046D5 BE00000000              	mov rsi, 0
  6503                                  .L_lambda_simple_params_loop_002e:	; copy params
  6504 000046DA 4883FE02                	cmp rsi, 2
  6505 000046DE 740E                    	je .L_lambda_simple_params_end_002e
  6506 000046E0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6507 000046E5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6508 000046E9 48FFC6                  	inc rsi
  6509 000046EC EBEC                    	jmp .L_lambda_simple_params_loop_002e
  6510                                  .L_lambda_simple_params_end_002e:
  6511 000046EE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6512 000046F1 4889C3                  	mov rbx, rax
  6513 000046F4 58                      	pop rax
  6514 000046F5 C60004                  	mov byte [rax], T_closure
  6515 000046F8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6516 000046FC 48C74009[09470000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002e
  6517 00004704 E925010000              	jmp .L_lambda_simple_end_002e
  6518                                  .L_lambda_simple_code_002e:	; lambda-simple body
  6519 00004709 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6520 0000470F 740B                    	je .L_lambda_simple_arity_check_ok_002e
  6521 00004711 FF742410                	push qword [rsp + 8 * 2]
  6522 00004715 6A02                    	push 2
  6523 00004717 E939100000              	jmp L_error_incorrect_arity_simple
  6524                                  .L_lambda_simple_arity_check_ok_002e:
  6525 0000471C C8000000                	enter 0, 0
  6526                                  	; preparing a non-tail-call
  6527 00004720 488B4528                	mov rax, PARAM(1)	; param sr
  6528 00004724 50                      	push rax
  6529 00004725 6A01                    	push 1	; arg count
  6530 00004727 488B0425[390B0000]      	mov rax, qword [free_var_44]	; free var null?
  6531 0000472F 803805                  	cmp byte [rax], T_undefined
  6532 00004732 0F84370F0000            	je L_error_fvar_undefined
  6533 00004738 803804                  	cmp byte [rax], T_closure
  6534 0000473B 0F85B20F0000            	jne L_error_non_closure
  6535 00004741 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6536 00004744 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6537 00004747 483D[02000000]          	cmp rax, sob_boolean_false
  6538 0000474D 7409                    	je .L_if_else_000c
  6539 0000474F 488B4520                	mov rax, PARAM(0)	; param s1
  6540 00004753 E9D2000000              	jmp .L_if_end_000c
  6541                                  .L_if_else_000c:
  6542                                  	; preparing a tail-call
  6543                                  	; preparing a non-tail-call
  6544                                  	; preparing a non-tail-call
  6545 00004758 488B4528                	mov rax, PARAM(1)	; param sr
  6546 0000475C 50                      	push rax
  6547 0000475D 6A01                    	push 1	; arg count
  6548 0000475F 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  6549 00004767 803805                  	cmp byte [rax], T_undefined
  6550 0000476A 0F84FF0E0000            	je L_error_fvar_undefined
  6551 00004770 803804                  	cmp byte [rax], T_closure
  6552 00004773 0F857A0F0000            	jne L_error_non_closure
  6553 00004779 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6554 0000477C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6555 0000477F 50                      	push rax
  6556                                  	; preparing a non-tail-call
  6557 00004780 488B4528                	mov rax, PARAM(1)	; param sr
  6558 00004784 50                      	push rax
  6559 00004785 6A01                    	push 1	; arg count
  6560 00004787 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  6561 0000478F 803805                  	cmp byte [rax], T_undefined
  6562 00004792 0F84D70E0000            	je L_error_fvar_undefined
  6563 00004798 803804                  	cmp byte [rax], T_closure
  6564 0000479B 0F85520F0000            	jne L_error_non_closure
  6565 000047A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6566 000047A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6567 000047A7 50                      	push rax
  6568 000047A8 6A02                    	push 2	; arg count
  6569 000047AA 488B4510                	mov rax, ENV
  6570 000047AE 488B00                  	mov rax, qword [rax + 8 * 0]
  6571 000047B1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  6572 000047B4 488B00                  	mov rax, qword [rax]
  6573 000047B7 803804                  	cmp byte [rax], T_closure
  6574 000047BA 0F85330F0000            	jne L_error_non_closure
  6575 000047C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6576 000047C3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6577 000047C6 50                      	push rax
  6578 000047C7 488B4520                	mov rax, PARAM(0)	; param s1
  6579 000047CB 50                      	push rax
  6580 000047CC 6A02                    	push 2	; arg count
  6581 000047CE 488B4510                	mov rax, ENV
  6582 000047D2 488B00                  	mov rax, qword [rax + 8 * 0]
  6583 000047D5 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  6584 000047D9 488B00                  	mov rax, qword [rax]
  6585 000047DC 803804                  	cmp byte [rax], T_closure
  6586 000047DF 0F850E0F0000            	jne L_error_non_closure
  6587 000047E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6588 000047E8 FF7508                  	push qword [rbp + 8 * 1]
  6589                                   ; old ret addr
  6590 000047EB FF7500                  	push qword [rbp]
  6591                                   ; restore the old rbp
  6592 000047EE BB02000000              	mov rbx, 2
  6593 000047F3 4883C303                	add rbx, 3
  6594 000047F7 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  6595 000047FB 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  6596 00004800 4C8D4DF8                	lea r9, [rbp - 8]
  6597 00004804 B906000000              	mov rcx, 6
  6598                                  .L_tc_recycle_frame_loop_002e:
  6599 00004809 4883F900                	cmp rcx, 0
  6600 0000480D 7413                    	je .L_tc_recycle_frame_done_002e
  6601 0000480F 4D8B11                  	mov r10, qword [r9]
  6602 00004812 4D8910                  	mov qword [r8], r10
  6603 00004815 4983E808                	sub r8, 8
  6604 00004819 4983E908                	sub r9, 8
  6605 0000481D 48FFC9                  	dec rcx
  6606 00004820 EBE7                    	jmp .L_tc_recycle_frame_loop_002e
  6607                                  .L_tc_recycle_frame_done_002e:
  6608 00004822 498D6008                	lea rsp, [r8 + 8]
  6609 00004826 5D                      	pop rbp ; restore the old rbp
  6610 00004827 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6611                                  .L_if_end_000c:
  6612 0000482A C9                      	leave
  6613 0000482B C22000                  	ret AND_KILL_FRAME(2)
  6614                                  .L_lambda_simple_end_002e:	; new closure is in rax
  6615 0000482E 50                      	push rax
  6616 0000482F 488B4520                	mov rax, PARAM(0)	; param run-1
  6617 00004833 8F00                    	pop qword [rax]
  6618 00004835 48B8-                   	mov rax, sob_void
  6618 00004837 [0000000000000000] 
  6619                                  
  6620 0000483F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6621 00004844 E8530F0000              	call malloc
  6622 00004849 50                      	push rax
  6623 0000484A BF10000000              	mov rdi, 8 * 2	; new rib
  6624 0000484F E8480F0000              	call malloc
  6625 00004854 50                      	push rax
  6626 00004855 BF10000000              	mov rdi, 8 * 2	; extended env
  6627 0000485A E83D0F0000              	call malloc
  6628 0000485F 488B7D10                	mov rdi, ENV
  6629 00004863 BE00000000              	mov rsi, 0
  6630 00004868 BA01000000              	mov rdx, 1
  6631                                  .L_lambda_simple_env_loop_002f:	; ext_env[i + 1] <-- env[i]
  6632 0000486D 4883FE01                	cmp rsi, 1
  6633 00004871 7410                    	je .L_lambda_simple_env_end_002f
  6634 00004873 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6635 00004877 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6636 0000487B 48FFC6                  	inc rsi
  6637 0000487E 48FFC2                  	inc rdx
  6638 00004881 EBEA                    	jmp .L_lambda_simple_env_loop_002f
  6639                                  .L_lambda_simple_env_end_002f:
  6640 00004883 5B                      	pop rbx
  6641 00004884 BE00000000              	mov rsi, 0
  6642                                  .L_lambda_simple_params_loop_002f:	; copy params
  6643 00004889 4883FE02                	cmp rsi, 2
  6644 0000488D 740E                    	je .L_lambda_simple_params_end_002f
  6645 0000488F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6646 00004894 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6647 00004898 48FFC6                  	inc rsi
  6648 0000489B EBEC                    	jmp .L_lambda_simple_params_loop_002f
  6649                                  .L_lambda_simple_params_end_002f:
  6650 0000489D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6651 000048A0 4889C3                  	mov rbx, rax
  6652 000048A3 58                      	pop rax
  6653 000048A4 C60004                  	mov byte [rax], T_closure
  6654 000048A7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6655 000048AB 48C74009[B8480000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002f
  6656 000048B3 E929010000              	jmp .L_lambda_simple_end_002f
  6657                                  .L_lambda_simple_code_002f:	; lambda-simple body
  6658 000048B8 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6659 000048BE 740B                    	je .L_lambda_simple_arity_check_ok_002f
  6660 000048C0 FF742410                	push qword [rsp + 8 * 2]
  6661 000048C4 6A02                    	push 2
  6662 000048C6 E98A0E0000              	jmp L_error_incorrect_arity_simple
  6663                                  .L_lambda_simple_arity_check_ok_002f:
  6664 000048CB C8000000                	enter 0, 0
  6665                                  	; preparing a non-tail-call
  6666 000048CF 488B4520                	mov rax, PARAM(0)	; param s1
  6667 000048D3 50                      	push rax
  6668 000048D4 6A01                    	push 1	; arg count
  6669 000048D6 488B0425[390B0000]      	mov rax, qword [free_var_44]	; free var null?
  6670 000048DE 803805                  	cmp byte [rax], T_undefined
  6671 000048E1 0F84880D0000            	je L_error_fvar_undefined
  6672 000048E7 803804                  	cmp byte [rax], T_closure
  6673 000048EA 0F85030E0000            	jne L_error_non_closure
  6674 000048F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6675 000048F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6676 000048F6 483D[02000000]          	cmp rax, sob_boolean_false
  6677 000048FC 7409                    	je .L_if_else_000d
  6678 000048FE 488B4528                	mov rax, PARAM(1)	; param s2
  6679 00004902 E9D6000000              	jmp .L_if_end_000d
  6680                                  .L_if_else_000d:
  6681                                  	; preparing a tail-call
  6682                                  	; preparing a non-tail-call
  6683 00004907 488B4528                	mov rax, PARAM(1)	; param s2
  6684 0000490B 50                      	push rax
  6685                                  	; preparing a non-tail-call
  6686 0000490C 488B4520                	mov rax, PARAM(0)	; param s1
  6687 00004910 50                      	push rax
  6688 00004911 6A01                    	push 1	; arg count
  6689 00004913 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  6690 0000491B 803805                  	cmp byte [rax], T_undefined
  6691 0000491E 0F844B0D0000            	je L_error_fvar_undefined
  6692 00004924 803804                  	cmp byte [rax], T_closure
  6693 00004927 0F85C60D0000            	jne L_error_non_closure
  6694 0000492D FF7001                  	push SOB_CLOSURE_ENV(rax)
  6695 00004930 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6696 00004933 50                      	push rax
  6697 00004934 6A02                    	push 2	; arg count
  6698 00004936 488B4510                	mov rax, ENV
  6699 0000493A 488B00                  	mov rax, qword [rax + 8 * 0]
  6700 0000493D 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  6701 00004941 488B00                  	mov rax, qword [rax]
  6702 00004944 803804                  	cmp byte [rax], T_closure
  6703 00004947 0F85A60D0000            	jne L_error_non_closure
  6704 0000494D FF7001                  	push SOB_CLOSURE_ENV(rax)
  6705 00004950 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6706 00004953 50                      	push rax
  6707                                  	; preparing a non-tail-call
  6708 00004954 488B4520                	mov rax, PARAM(0)	; param s1
  6709 00004958 50                      	push rax
  6710 00004959 6A01                    	push 1	; arg count
  6711 0000495B 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  6712 00004963 803805                  	cmp byte [rax], T_undefined
  6713 00004966 0F84030D0000            	je L_error_fvar_undefined
  6714 0000496C 803804                  	cmp byte [rax], T_closure
  6715 0000496F 0F857E0D0000            	jne L_error_non_closure
  6716 00004975 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6717 00004978 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6718 0000497B 50                      	push rax
  6719 0000497C 6A02                    	push 2	; arg count
  6720 0000497E 488B0425[8F0A0000]      	mov rax, qword [free_var_34]	; free var cons
  6721 00004986 803805                  	cmp byte [rax], T_undefined
  6722 00004989 0F84E00C0000            	je L_error_fvar_undefined
  6723 0000498F 803804                  	cmp byte [rax], T_closure
  6724 00004992 0F855B0D0000            	jne L_error_non_closure
  6725 00004998 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6726 0000499B FF7508                  	push qword [rbp + 8 * 1]
  6727                                   ; old ret addr
  6728 0000499E FF7500                  	push qword [rbp]
  6729                                   ; restore the old rbp
  6730 000049A1 BB02000000              	mov rbx, 2
  6731 000049A6 4883C303                	add rbx, 3
  6732 000049AA 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  6733 000049AE 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  6734 000049B3 4C8D4DF8                	lea r9, [rbp - 8]
  6735 000049B7 B906000000              	mov rcx, 6
  6736                                  .L_tc_recycle_frame_loop_002f:
  6737 000049BC 4883F900                	cmp rcx, 0
  6738 000049C0 7413                    	je .L_tc_recycle_frame_done_002f
  6739 000049C2 4D8B11                  	mov r10, qword [r9]
  6740 000049C5 4D8910                  	mov qword [r8], r10
  6741 000049C8 4983E808                	sub r8, 8
  6742 000049CC 4983E908                	sub r9, 8
  6743 000049D0 48FFC9                  	dec rcx
  6744 000049D3 EBE7                    	jmp .L_tc_recycle_frame_loop_002f
  6745                                  .L_tc_recycle_frame_done_002f:
  6746 000049D5 498D6008                	lea rsp, [r8 + 8]
  6747 000049D9 5D                      	pop rbp ; restore the old rbp
  6748 000049DA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6749                                  .L_if_end_000d:
  6750 000049DD C9                      	leave
  6751 000049DE C22000                  	ret AND_KILL_FRAME(2)
  6752                                  .L_lambda_simple_end_002f:	; new closure is in rax
  6753 000049E1 50                      	push rax
  6754 000049E2 488B4528                	mov rax, PARAM(1)	; param run-2
  6755 000049E6 8F00                    	pop qword [rax]
  6756 000049E8 48B8-                   	mov rax, sob_void
  6756 000049EA [0000000000000000] 
  6757                                  
  6758 000049F2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6759 000049F7 E8A00D0000              	call malloc
  6760 000049FC 50                      	push rax
  6761 000049FD BF10000000              	mov rdi, 8 * 2	; new rib
  6762 00004A02 E8950D0000              	call malloc
  6763 00004A07 50                      	push rax
  6764 00004A08 BF10000000              	mov rdi, 8 * 2	; extended env
  6765 00004A0D E88A0D0000              	call malloc
  6766 00004A12 488B7D10                	mov rdi, ENV
  6767 00004A16 4831F6                  	 xor rsi, rsi
  6768 00004A19 4831D2                  	 xor rdx, rdx
  6769 00004A1C 48FFC2                  	inc rdx
  6770                                  .L_lambda_opt_env_loop_0007:	; 
  6771 00004A1F 4883FE01                	cmp rsi, 1
  6772 00004A23 7410                    	je .L_lambda_opt_env_end_0007
  6773 00004A25 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6774 00004A29 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6775 00004A2D 48FFC6                  	inc rsi
  6776 00004A30 48FFC2                  	inc rdx
  6777 00004A33 EBEA                    	jmp .L_lambda_opt_env_loop_0007
  6778                                  .L_lambda_opt_env_end_0007:
  6779 00004A35 5B                      	pop rbx
  6780 00004A36 4831F6                  	xor rsi, rsi
  6781                                  .L_lambda_opt_params_loop_0007:	; copy params
  6782 00004A39 4883FE02                	cmp rsi, 2
  6783 00004A3D 740E                    	je .L_lambda_opt_params_end_0007
  6784 00004A3F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6785 00004A44 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6786 00004A48 48FFC6                  	inc rsi
  6787 00004A4B EBEC                    	jmp .L_lambda_opt_params_loop_0007
  6788                                  .L_lambda_opt_params_end_0007:
  6789 00004A4D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6790 00004A50 4889C3                  	mov rbx, rax
  6791 00004A53 58                      	pop rax
  6792 00004A54 C60004                  	mov byte [rax], T_closure
  6793 00004A57 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6794 00004A5B 48C74009[684A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0007
  6795 00004A63 E9E5010000              	jmp .L_lambda_opt_end_0007
  6796                                  .L_lambda_opt_code_0007:
  6797 00004A68 4C8B7C2410              	mov r15, qword [rsp + 8 * 2]
  6798 00004A6D 4983FF00                	cmp r15, 0
  6799 00004A71 7409                    	je .L_lambda_opt_arity_check_exact_0007
  6800 00004A73 7F57                    	jg .L_lambda_opt_arity_check_more_0007
  6801 00004A75 6A00                    	push 0
  6802 00004A77 E9ED0C0000              	jmp L_error_incorrect_arity_opt
  6803                                  .L_lambda_opt_arity_check_exact_0007: ;Exact case
  6804 00004A7C 4C8B0424                	mov r8, qword [rsp -8 * 0]
  6805 00004A80 4C894424F8              	mov qword [rsp -8], r8
  6806 00004A85 4C8B442408              	mov r8, qword [rsp +8]
  6807 00004A8A 4C890424                	mov qword [rsp +8 * 0], r8
  6808 00004A8E 4C8B442410              	mov r8, qword [rsp +8 * 2]
  6809 00004A93 4C89C1                  	mov rcx, r8
  6810 00004A96 49FFC0                  	inc r8
  6811 00004A99 4C89442408              	mov qword [rsp +8], r8
  6812 00004A9E 4889E2                  	mov rdx, rsp
  6813 00004AA1 4883C218                	add rdx, 24
  6814                                  .L_lambda_opt_loop_copy_to_new_frame_exact_0007:
  6815 00004AA5 4883F900                	cmp rcx, 0
  6816 00004AA9 7410                    	je .L_lambda_opt_loop_copy_to_new_frame_exact_end_0007
  6817 00004AAB 4C8B02                  	mov r8, qword [rdx]
  6818 00004AAE 4C8942F8                	mov qword [rdx - 8], r8
  6819 00004AB2 4883C208                	add rdx, 8
  6820 00004AB6 48FFC9                  	dec rcx
  6821 00004AB9 EBEA                    	jmp .L_lambda_opt_loop_copy_to_new_frame_exact_0007
  6822                                  .L_lambda_opt_loop_copy_to_new_frame_exact_end_0007:
  6823 00004ABB 48C742F8[01000000]      	mov qword [rdx - 8], sob_nil
  6824 00004AC3 4883EC08                	sub rsp, 8
  6825 00004AC7 E985000000              	jmp .L_lambda_opt_stack_adjusted_0007
  6826                                  .L_lambda_opt_arity_check_more_0007:
  6827 00004ACC 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  6828 00004AD1 4D89C4                  	mov r12, r8
  6829 00004AD4 4C89C1                  	mov rcx, r8
  6830 00004AD7 4D8D6802                	lea r13, [r8 + 2] 
  6831 00004ADB 4883E900                	sub rcx, 0
  6832 00004ADF 4E8D5CC410              	lea r11, qword [rsp + r8 * 8 + 16]
  6833 00004AE4 49BE-                   	mov r14, sob_nil
  6833 00004AE6 [0100000000000000] 
  6834                                  .L_lambda_opt_create_list_of_opt_params_0007:
  6835 00004AEE 4883F900                	cmp rcx, 0
  6836 00004AF2 7424                    	je .L_lambda_opt_create_list_of_opt_params_end_0007
  6837 00004AF4 BF11000000              	mov rdi, 17
  6838 00004AF9 E89E0C0000              	call malloc
  6839 00004AFE C60021                  	mov byte [rax], T_pair
  6840 00004B01 498B1B                  	mov rbx, qword [r11]
  6841 00004B04 48895801                	mov qword [rax +1], rbx
  6842 00004B08 4C897009                	mov qword [rax + 1 + 8], r14
  6843 00004B0C 4989C6                  	mov r14, rax
  6844 00004B0F 48FFC9                  	dec rcx
  6845 00004B12 4983EB08                	sub r11, 8
  6846 00004B16 EBD6                    	jmp .L_lambda_opt_create_list_of_opt_params_0007
  6847                                  .L_lambda_opt_create_list_of_opt_params_end_0007:
  6848 00004B18 4C8D542418              	lea r10, [rsp + 0*8 + 8*3]
  6849 00004B1D 4D8932                  	mov qword [r10], r14
  6850 00004B20 4E8D2CED00000000        	lea r13, [8 * r13]
  6851 00004B28 4901E5                  	add r13, rsp
  6852 00004B2B B904000000              	mov rcx, 4 + 0
  6853                                  .L_lambda_opt_stack_shrink_loop_0007:
  6854 00004B30 4883F900                	cmp rcx, 0
  6855 00004B34 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0007
  6856 00004B36 4D8B1A                  	mov r11, qword [r10]
  6857 00004B39 4D895D00                	mov qword [r13], r11
  6858 00004B3D 4983EA08                	sub r10, 8
  6859 00004B41 4983ED08                	sub r13, 8
  6860 00004B45 48FFC9                  	dec rcx
  6861 00004B48 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0007
  6862                                  .L_lambda_opt_stack_shrink_loop_exit_0007:
  6863 00004B4A 4983C508                	add r13, 8
  6864 00004B4E 4C89EC                  	mov rsp, r13
  6865                                  .L_lambda_opt_stack_adjusted_0007:
  6866 00004B51 48C744241001000000      	mov qword [rsp + 8*2], 1
  6867 00004B5A C8000000                	enter 0, 0
  6868                                  	; preparing a non-tail-call
  6869 00004B5E 488B4520                	mov rax, PARAM(0)	; param s
  6870 00004B62 50                      	push rax
  6871 00004B63 6A01                    	push 1	; arg count
  6872 00004B65 488B0425[390B0000]      	mov rax, qword [free_var_44]	; free var null?
  6873 00004B6D 803805                  	cmp byte [rax], T_undefined
  6874 00004B70 0F84F90A0000            	je L_error_fvar_undefined
  6875 00004B76 803804                  	cmp byte [rax], T_closure
  6876 00004B79 0F85740B0000            	jne L_error_non_closure
  6877 00004B7F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6878 00004B82 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6879 00004B85 483D[02000000]          	cmp rax, sob_boolean_false
  6880 00004B8B 740F                    	je .L_if_else_000e
  6881 00004B8D 48B8-                   	mov rax, L_constants + 1
  6881 00004B8F [0100000000000000] 
  6882 00004B97 E9AD000000              	jmp .L_if_end_000e
  6883                                  .L_if_else_000e:
  6884                                  	; preparing a tail-call
  6885                                  	; preparing a non-tail-call
  6886 00004B9C 488B4520                	mov rax, PARAM(0)	; param s
  6887 00004BA0 50                      	push rax
  6888 00004BA1 6A01                    	push 1	; arg count
  6889 00004BA3 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  6890 00004BAB 803805                  	cmp byte [rax], T_undefined
  6891 00004BAE 0F84BB0A0000            	je L_error_fvar_undefined
  6892 00004BB4 803804                  	cmp byte [rax], T_closure
  6893 00004BB7 0F85360B0000            	jne L_error_non_closure
  6894 00004BBD FF7001                  	push SOB_CLOSURE_ENV(rax)
  6895 00004BC0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6896 00004BC3 50                      	push rax
  6897                                  	; preparing a non-tail-call
  6898 00004BC4 488B4520                	mov rax, PARAM(0)	; param s
  6899 00004BC8 50                      	push rax
  6900 00004BC9 6A01                    	push 1	; arg count
  6901 00004BCB 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  6902 00004BD3 803805                  	cmp byte [rax], T_undefined
  6903 00004BD6 0F84930A0000            	je L_error_fvar_undefined
  6904 00004BDC 803804                  	cmp byte [rax], T_closure
  6905 00004BDF 0F850E0B0000            	jne L_error_non_closure
  6906 00004BE5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6907 00004BE8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6908 00004BEB 50                      	push rax
  6909 00004BEC 6A02                    	push 2	; arg count
  6910 00004BEE 488B4510                	mov rax, ENV
  6911 00004BF2 488B00                  	mov rax, qword [rax + 8 * 0]
  6912 00004BF5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  6913 00004BF8 488B00                  	mov rax, qword [rax]
  6914 00004BFB 803804                  	cmp byte [rax], T_closure
  6915 00004BFE 0F85EF0A0000            	jne L_error_non_closure
  6916 00004C04 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6917 00004C07 FF7508                  	push qword [rbp + 8 * 1]
  6918                                   ; old ret addr
  6919 00004C0A FF7500                  	push qword [rbp]
  6920                                   ; restore the old rbp
  6921 00004C0D BB02000000              	mov rbx, 2
  6922 00004C12 4883C303                	add rbx, 3
  6923 00004C16 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  6924 00004C1A 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  6925 00004C1F 4C8D4DF8                	lea r9, [rbp - 8]
  6926 00004C23 B906000000              	mov rcx, 6
  6927                                  .L_tc_recycle_frame_loop_0030:
  6928 00004C28 4883F900                	cmp rcx, 0
  6929 00004C2C 7413                    	je .L_tc_recycle_frame_done_0030
  6930 00004C2E 4D8B11                  	mov r10, qword [r9]
  6931 00004C31 4D8910                  	mov qword [r8], r10
  6932 00004C34 4983E808                	sub r8, 8
  6933 00004C38 4983E908                	sub r9, 8
  6934 00004C3C 48FFC9                  	dec rcx
  6935 00004C3F EBE7                    	jmp .L_tc_recycle_frame_loop_0030
  6936                                  .L_tc_recycle_frame_done_0030:
  6937 00004C41 498D6008                	lea rsp, [r8 + 8]
  6938 00004C45 5D                      	pop rbp ; restore the old rbp
  6939 00004C46 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6940                                  .L_if_end_000e:
  6941 00004C49 C9                      	leave
  6942 00004C4A C21800                  	ret 8 * (2 + 1)
  6943                                  .L_lambda_opt_end_0007:	; new closure is in rax
  6944 00004C4D C9                      	leave
  6945 00004C4E C22000                  	ret AND_KILL_FRAME(2)
  6946                                  .L_lambda_simple_end_002d:	; new closure is in rax
  6947 00004C51 803804                  	cmp byte [rax], T_closure
  6948 00004C54 0F85990A0000            	jne L_error_non_closure
  6949 00004C5A FF7001                  	push SOB_CLOSURE_ENV(rax)
  6950 00004C5D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6951 00004C60 48890425[6F080000]      	mov qword [free_var_2], rax
  6952 00004C68 48B8-                   	mov rax, sob_void
  6952 00004C6A [0000000000000000] 
  6953                                  
  6954 00004C72 4889C7                  	mov rdi, rax
  6955 00004C75 E8770D0000              	call print_sexpr_if_not_void
  6956                                  	; preparing a non-tail-call
  6957 00004C7A 48B8-                   	mov rax, L_constants + 1993
  6957 00004C7C [C907000000000000] 
  6958 00004C84 50                      	push rax
  6959 00004C85 6A01                    	push 1	; arg count
  6960 00004C87 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6961 00004C8C E80B0B0000              	call malloc
  6962 00004C91 50                      	push rax
  6963 00004C92 BF00000000              	mov rdi, 8 * 0	; new rib
  6964 00004C97 E8000B0000              	call malloc
  6965 00004C9C 50                      	push rax
  6966 00004C9D BF08000000              	mov rdi, 8 * 1	; extended env
  6967 00004CA2 E8F50A0000              	call malloc
  6968 00004CA7 488B7D10                	mov rdi, ENV
  6969 00004CAB BE00000000              	mov rsi, 0
  6970 00004CB0 BA01000000              	mov rdx, 1
  6971                                  .L_lambda_simple_env_loop_0030:	; ext_env[i + 1] <-- env[i]
  6972 00004CB5 4883FE00                	cmp rsi, 0
  6973 00004CB9 7410                    	je .L_lambda_simple_env_end_0030
  6974 00004CBB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6975 00004CBF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6976 00004CC3 48FFC6                  	inc rsi
  6977 00004CC6 48FFC2                  	inc rdx
  6978 00004CC9 EBEA                    	jmp .L_lambda_simple_env_loop_0030
  6979                                  .L_lambda_simple_env_end_0030:
  6980 00004CCB 5B                      	pop rbx
  6981 00004CCC BE00000000              	mov rsi, 0
  6982                                  .L_lambda_simple_params_loop_0030:	; copy params
  6983 00004CD1 4883FE00                	cmp rsi, 0
  6984 00004CD5 740E                    	je .L_lambda_simple_params_end_0030
  6985 00004CD7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6986 00004CDC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6987 00004CE0 48FFC6                  	inc rsi
  6988 00004CE3 EBEC                    	jmp .L_lambda_simple_params_loop_0030
  6989                                  .L_lambda_simple_params_end_0030:
  6990 00004CE5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6991 00004CE8 4889C3                  	mov rbx, rax
  6992 00004CEB 58                      	pop rax
  6993 00004CEC C60004                  	mov byte [rax], T_closure
  6994 00004CEF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6995 00004CF3 48C74009[004D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0030
  6996 00004CFB E908040000              	jmp .L_lambda_simple_end_0030
  6997                                  .L_lambda_simple_code_0030:	; lambda-simple body
  6998 00004D00 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6999 00004D06 740B                    	je .L_lambda_simple_arity_check_ok_0030
  7000 00004D08 FF742410                	push qword [rsp + 8 * 2]
  7001 00004D0C 6A01                    	push 1
  7002 00004D0E E9420A0000              	jmp L_error_incorrect_arity_simple
  7003                                  .L_lambda_simple_arity_check_ok_0030:
  7004 00004D13 C8000000                	enter 0, 0
  7005 00004D17 BF08000000              	mov rdi, 8*1
  7006 00004D1C E87B0A0000              	call malloc
  7007 00004D21 488B5D20                	mov rbx, PARAM(0)
  7008 00004D25 488918                  	mov qword [rax], rbx
  7009 00004D28 48894520                	mov PARAM(0), rax
  7010 00004D2C 48B8-                   	mov rax, sob_void
  7010 00004D2E [0000000000000000] 
  7011                                  
  7012 00004D36 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7013 00004D3B E85C0A0000              	call malloc
  7014 00004D40 50                      	push rax
  7015 00004D41 BF08000000              	mov rdi, 8 * 1	; new rib
  7016 00004D46 E8510A0000              	call malloc
  7017 00004D4B 50                      	push rax
  7018 00004D4C BF10000000              	mov rdi, 8 * 2	; extended env
  7019 00004D51 E8460A0000              	call malloc
  7020 00004D56 488B7D10                	mov rdi, ENV
  7021 00004D5A BE00000000              	mov rsi, 0
  7022 00004D5F BA01000000              	mov rdx, 1
  7023                                  .L_lambda_simple_env_loop_0031:	; ext_env[i + 1] <-- env[i]
  7024 00004D64 4883FE01                	cmp rsi, 1
  7025 00004D68 7410                    	je .L_lambda_simple_env_end_0031
  7026 00004D6A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7027 00004D6E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7028 00004D72 48FFC6                  	inc rsi
  7029 00004D75 48FFC2                  	inc rdx
  7030 00004D78 EBEA                    	jmp .L_lambda_simple_env_loop_0031
  7031                                  .L_lambda_simple_env_end_0031:
  7032 00004D7A 5B                      	pop rbx
  7033 00004D7B BE00000000              	mov rsi, 0
  7034                                  .L_lambda_simple_params_loop_0031:	; copy params
  7035 00004D80 4883FE01                	cmp rsi, 1
  7036 00004D84 740E                    	je .L_lambda_simple_params_end_0031
  7037 00004D86 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7038 00004D8B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7039 00004D8F 48FFC6                  	inc rsi
  7040 00004D92 EBEC                    	jmp .L_lambda_simple_params_loop_0031
  7041                                  .L_lambda_simple_params_end_0031:
  7042 00004D94 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7043 00004D97 4889C3                  	mov rbx, rax
  7044 00004D9A 58                      	pop rax
  7045 00004D9B C60004                  	mov byte [rax], T_closure
  7046 00004D9E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7047 00004DA2 48C74009[AF4D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0031
  7048 00004DAA E968010000              	jmp .L_lambda_simple_end_0031
  7049                                  .L_lambda_simple_code_0031:	; lambda-simple body
  7050 00004DAF 48837C241003            	cmp qword [rsp + 8 * 2], 3
  7051 00004DB5 740B                    	je .L_lambda_simple_arity_check_ok_0031
  7052 00004DB7 FF742410                	push qword [rsp + 8 * 2]
  7053 00004DBB 6A03                    	push 3
  7054 00004DBD E993090000              	jmp L_error_incorrect_arity_simple
  7055                                  .L_lambda_simple_arity_check_ok_0031:
  7056 00004DC2 C8000000                	enter 0, 0
  7057                                  	; preparing a non-tail-call
  7058 00004DC6 488B4530                	mov rax, PARAM(2)	; param ss
  7059 00004DCA 50                      	push rax
  7060 00004DCB 488B0425[390B0000]      	mov rax, qword [free_var_44]	; free var null?
  7061 00004DD3 803805                  	cmp byte [rax], T_undefined
  7062 00004DD6 0F8493080000            	je L_error_fvar_undefined
  7063 00004DDC 50                      	push rax
  7064 00004DDD 6A02                    	push 2	; arg count
  7065 00004DDF 488B0425[4A0B0000]      	mov rax, qword [free_var_45]	; free var ormap
  7066 00004DE7 803805                  	cmp byte [rax], T_undefined
  7067 00004DEA 0F847F080000            	je L_error_fvar_undefined
  7068 00004DF0 803804                  	cmp byte [rax], T_closure
  7069 00004DF3 0F85FA080000            	jne L_error_non_closure
  7070 00004DF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7071 00004DFC FF5009                  	call SOB_CLOSURE_CODE(rax)
  7072 00004DFF 483D[02000000]          	cmp rax, sob_boolean_false
  7073 00004E05 7409                    	je .L_if_else_000f
  7074 00004E07 488B4528                	mov rax, PARAM(1)	; param unit
  7075 00004E0B E903010000              	jmp .L_if_end_000f
  7076                                  .L_if_else_000f:
  7077                                  	; preparing a tail-call
  7078                                  	; preparing a non-tail-call
  7079 00004E10 488B4530                	mov rax, PARAM(2)	; param ss
  7080 00004E14 50                      	push rax
  7081 00004E15 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  7082 00004E1D 803805                  	cmp byte [rax], T_undefined
  7083 00004E20 0F8449080000            	je L_error_fvar_undefined
  7084 00004E26 50                      	push rax
  7085 00004E27 6A02                    	push 2	; arg count
  7086 00004E29 488B0425[170B0000]      	mov rax, qword [free_var_42]	; free var map
  7087 00004E31 803805                  	cmp byte [rax], T_undefined
  7088 00004E34 0F8435080000            	je L_error_fvar_undefined
  7089 00004E3A 803804                  	cmp byte [rax], T_closure
  7090 00004E3D 0F85B0080000            	jne L_error_non_closure
  7091 00004E43 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7092 00004E46 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7093 00004E49 50                      	push rax
  7094                                  	; preparing a non-tail-call
  7095                                  	; preparing a non-tail-call
  7096 00004E4A 488B4530                	mov rax, PARAM(2)	; param ss
  7097 00004E4E 50                      	push rax
  7098 00004E4F 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  7099 00004E57 803805                  	cmp byte [rax], T_undefined
  7100 00004E5A 0F840F080000            	je L_error_fvar_undefined
  7101 00004E60 50                      	push rax
  7102 00004E61 6A02                    	push 2	; arg count
  7103 00004E63 488B0425[170B0000]      	mov rax, qword [free_var_42]	; free var map
  7104 00004E6B 803805                  	cmp byte [rax], T_undefined
  7105 00004E6E 0F84FB070000            	je L_error_fvar_undefined
  7106 00004E74 803804                  	cmp byte [rax], T_closure
  7107 00004E77 0F8576080000            	jne L_error_non_closure
  7108 00004E7D FF7001                  	push SOB_CLOSURE_ENV(rax)
  7109 00004E80 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7110 00004E83 50                      	push rax
  7111 00004E84 488B4528                	mov rax, PARAM(1)	; param unit
  7112 00004E88 50                      	push rax
  7113 00004E89 488B4520                	mov rax, PARAM(0)	; param f
  7114 00004E8D 50                      	push rax
  7115 00004E8E 6A03                    	push 3	; arg count
  7116 00004E90 488B0425[80080000]      	mov rax, qword [free_var_3]	; free var apply
  7117 00004E98 803805                  	cmp byte [rax], T_undefined
  7118 00004E9B 0F84CE070000            	je L_error_fvar_undefined
  7119 00004EA1 803804                  	cmp byte [rax], T_closure
  7120 00004EA4 0F8549080000            	jne L_error_non_closure
  7121 00004EAA FF7001                  	push SOB_CLOSURE_ENV(rax)
  7122 00004EAD FF5009                  	call SOB_CLOSURE_CODE(rax)
  7123 00004EB0 50                      	push rax
  7124 00004EB1 488B4520                	mov rax, PARAM(0)	; param f
  7125 00004EB5 50                      	push rax
  7126 00004EB6 6A03                    	push 3	; arg count
  7127 00004EB8 488B4510                	mov rax, ENV
  7128 00004EBC 488B00                  	mov rax, qword [rax + 8 * 0]
  7129 00004EBF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  7130 00004EC2 488B00                  	mov rax, qword [rax]
  7131 00004EC5 803804                  	cmp byte [rax], T_closure
  7132 00004EC8 0F8525080000            	jne L_error_non_closure
  7133 00004ECE FF7001                  	push SOB_CLOSURE_ENV(rax)
  7134 00004ED1 FF7508                  	push qword [rbp + 8 * 1]
  7135                                   ; old ret addr
  7136 00004ED4 FF7500                  	push qword [rbp]
  7137                                   ; restore the old rbp
  7138 00004ED7 BB03000000              	mov rbx, 3
  7139 00004EDC 4883C303                	add rbx, 3
  7140 00004EE0 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  7141 00004EE4 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  7142 00004EE9 4C8D4DF8                	lea r9, [rbp - 8]
  7143 00004EED B907000000              	mov rcx, 7
  7144                                  .L_tc_recycle_frame_loop_0031:
  7145 00004EF2 4883F900                	cmp rcx, 0
  7146 00004EF6 7413                    	je .L_tc_recycle_frame_done_0031
  7147 00004EF8 4D8B11                  	mov r10, qword [r9]
  7148 00004EFB 4D8910                  	mov qword [r8], r10
  7149 00004EFE 4983E808                	sub r8, 8
  7150 00004F02 4983E908                	sub r9, 8
  7151 00004F06 48FFC9                  	dec rcx
  7152 00004F09 EBE7                    	jmp .L_tc_recycle_frame_loop_0031
  7153                                  .L_tc_recycle_frame_done_0031:
  7154 00004F0B 498D6008                	lea rsp, [r8 + 8]
  7155 00004F0F 5D                      	pop rbp ; restore the old rbp
  7156 00004F10 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7157                                  .L_if_end_000f:
  7158 00004F13 C9                      	leave
  7159 00004F14 C22800                  	ret AND_KILL_FRAME(3)
  7160                                  .L_lambda_simple_end_0031:	; new closure is in rax
  7161 00004F17 50                      	push rax
  7162 00004F18 488B4520                	mov rax, PARAM(0)	; param run
  7163 00004F1C 8F00                    	pop qword [rax]
  7164 00004F1E 48B8-                   	mov rax, sob_void
  7164 00004F20 [0000000000000000] 
  7165                                  
  7166 00004F28 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7167 00004F2D E86A080000              	call malloc
  7168 00004F32 50                      	push rax
  7169 00004F33 BF08000000              	mov rdi, 8 * 1	; new rib
  7170 00004F38 E85F080000              	call malloc
  7171 00004F3D 50                      	push rax
  7172 00004F3E BF10000000              	mov rdi, 8 * 2	; extended env
  7173 00004F43 E854080000              	call malloc
  7174 00004F48 488B7D10                	mov rdi, ENV
  7175 00004F4C 4831F6                  	 xor rsi, rsi
  7176 00004F4F 4831D2                  	 xor rdx, rdx
  7177 00004F52 48FFC2                  	inc rdx
  7178                                  .L_lambda_opt_env_loop_0008:	; 
  7179 00004F55 4883FE01                	cmp rsi, 1
  7180 00004F59 7410                    	je .L_lambda_opt_env_end_0008
  7181 00004F5B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7182 00004F5F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7183 00004F63 48FFC6                  	inc rsi
  7184 00004F66 48FFC2                  	inc rdx
  7185 00004F69 EBEA                    	jmp .L_lambda_opt_env_loop_0008
  7186                                  .L_lambda_opt_env_end_0008:
  7187 00004F6B 5B                      	pop rbx
  7188 00004F6C 4831F6                  	xor rsi, rsi
  7189                                  .L_lambda_opt_params_loop_0008:	; copy params
  7190 00004F6F 4883FE01                	cmp rsi, 1
  7191 00004F73 740E                    	je .L_lambda_opt_params_end_0008
  7192 00004F75 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7193 00004F7A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7194 00004F7E 48FFC6                  	inc rsi
  7195 00004F81 EBEC                    	jmp .L_lambda_opt_params_loop_0008
  7196                                  .L_lambda_opt_params_end_0008:
  7197 00004F83 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7198 00004F86 4889C3                  	mov rbx, rax
  7199 00004F89 58                      	pop rax
  7200 00004F8A C60004                  	mov byte [rax], T_closure
  7201 00004F8D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7202 00004F91 48C74009[9E4F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0008
  7203 00004F99 E966010000              	jmp .L_lambda_opt_end_0008
  7204                                  .L_lambda_opt_code_0008:
  7205 00004F9E 4C8B7C2410              	mov r15, qword [rsp + 8 * 2]
  7206 00004FA3 4983FF02                	cmp r15, 2
  7207 00004FA7 7409                    	je .L_lambda_opt_arity_check_exact_0008
  7208 00004FA9 7F57                    	jg .L_lambda_opt_arity_check_more_0008
  7209 00004FAB 6A02                    	push 2
  7210 00004FAD E9B7070000              	jmp L_error_incorrect_arity_opt
  7211                                  .L_lambda_opt_arity_check_exact_0008: ;Exact case
  7212 00004FB2 4C8B0424                	mov r8, qword [rsp -8 * 0]
  7213 00004FB6 4C894424F8              	mov qword [rsp -8], r8
  7214 00004FBB 4C8B442408              	mov r8, qword [rsp +8]
  7215 00004FC0 4C890424                	mov qword [rsp +8 * 0], r8
  7216 00004FC4 4C8B442410              	mov r8, qword [rsp +8 * 2]
  7217 00004FC9 4C89C1                  	mov rcx, r8
  7218 00004FCC 49FFC0                  	inc r8
  7219 00004FCF 4C89442408              	mov qword [rsp +8], r8
  7220 00004FD4 4889E2                  	mov rdx, rsp
  7221 00004FD7 4883C218                	add rdx, 24
  7222                                  .L_lambda_opt_loop_copy_to_new_frame_exact_0008:
  7223 00004FDB 4883F900                	cmp rcx, 0
  7224 00004FDF 7410                    	je .L_lambda_opt_loop_copy_to_new_frame_exact_end_0008
  7225 00004FE1 4C8B02                  	mov r8, qword [rdx]
  7226 00004FE4 4C8942F8                	mov qword [rdx - 8], r8
  7227 00004FE8 4883C208                	add rdx, 8
  7228 00004FEC 48FFC9                  	dec rcx
  7229 00004FEF EBEA                    	jmp .L_lambda_opt_loop_copy_to_new_frame_exact_0008
  7230                                  .L_lambda_opt_loop_copy_to_new_frame_exact_end_0008:
  7231 00004FF1 48C742F8[01000000]      	mov qword [rdx - 8], sob_nil
  7232 00004FF9 4883EC08                	sub rsp, 8
  7233 00004FFD E985000000              	jmp .L_lambda_opt_stack_adjusted_0008
  7234                                  .L_lambda_opt_arity_check_more_0008:
  7235 00005002 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  7236 00005007 4D89C4                  	mov r12, r8
  7237 0000500A 4C89C1                  	mov rcx, r8
  7238 0000500D 4D8D6802                	lea r13, [r8 + 2] 
  7239 00005011 4883E902                	sub rcx, 2
  7240 00005015 4E8D5CC410              	lea r11, qword [rsp + r8 * 8 + 16]
  7241 0000501A 49BE-                   	mov r14, sob_nil
  7241 0000501C [0100000000000000] 
  7242                                  .L_lambda_opt_create_list_of_opt_params_0008:
  7243 00005024 4883F900                	cmp rcx, 0
  7244 00005028 7424                    	je .L_lambda_opt_create_list_of_opt_params_end_0008
  7245 0000502A BF11000000              	mov rdi, 17
  7246 0000502F E868070000              	call malloc
  7247 00005034 C60021                  	mov byte [rax], T_pair
  7248 00005037 498B1B                  	mov rbx, qword [r11]
  7249 0000503A 48895801                	mov qword [rax +1], rbx
  7250 0000503E 4C897009                	mov qword [rax + 1 + 8], r14
  7251 00005042 4989C6                  	mov r14, rax
  7252 00005045 48FFC9                  	dec rcx
  7253 00005048 4983EB08                	sub r11, 8
  7254 0000504C EBD6                    	jmp .L_lambda_opt_create_list_of_opt_params_0008
  7255                                  .L_lambda_opt_create_list_of_opt_params_end_0008:
  7256 0000504E 4C8D542428              	lea r10, [rsp + 2*8 + 8*3]
  7257 00005053 4D8932                  	mov qword [r10], r14
  7258 00005056 4E8D2CED00000000        	lea r13, [8 * r13]
  7259 0000505E 4901E5                  	add r13, rsp
  7260 00005061 B906000000              	mov rcx, 4 + 2
  7261                                  .L_lambda_opt_stack_shrink_loop_0008:
  7262 00005066 4883F900                	cmp rcx, 0
  7263 0000506A 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0008
  7264 0000506C 4D8B1A                  	mov r11, qword [r10]
  7265 0000506F 4D895D00                	mov qword [r13], r11
  7266 00005073 4983EA08                	sub r10, 8
  7267 00005077 4983ED08                	sub r13, 8
  7268 0000507B 48FFC9                  	dec rcx
  7269 0000507E EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0008
  7270                                  .L_lambda_opt_stack_shrink_loop_exit_0008:
  7271 00005080 4983C508                	add r13, 8
  7272 00005084 4C89EC                  	mov rsp, r13
  7273                                  .L_lambda_opt_stack_adjusted_0008:
  7274 00005087 48C744241003000000      	mov qword [rsp + 8*2], 3
  7275 00005090 C8000000                	enter 0, 0
  7276                                  	; preparing a tail-call
  7277 00005094 488B4530                	mov rax, PARAM(2)	; param ss
  7278 00005098 50                      	push rax
  7279 00005099 488B4528                	mov rax, PARAM(1)	; param unit
  7280 0000509D 50                      	push rax
  7281 0000509E 488B4520                	mov rax, PARAM(0)	; param f
  7282 000050A2 50                      	push rax
  7283 000050A3 6A03                    	push 3	; arg count
  7284 000050A5 488B4510                	mov rax, ENV
  7285 000050A9 488B00                  	mov rax, qword [rax + 8 * 0]
  7286 000050AC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  7287 000050AF 488B00                  	mov rax, qword [rax]
  7288 000050B2 803804                  	cmp byte [rax], T_closure
  7289 000050B5 0F8538060000            	jne L_error_non_closure
  7290 000050BB FF7001                  	push SOB_CLOSURE_ENV(rax)
  7291 000050BE FF7508                  	push qword [rbp + 8 * 1]
  7292                                   ; old ret addr
  7293 000050C1 FF7500                  	push qword [rbp]
  7294                                   ; restore the old rbp
  7295 000050C4 BB03000000              	mov rbx, 3
  7296 000050C9 4883C303                	add rbx, 3
  7297 000050CD 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  7298 000050D1 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  7299 000050D6 4C8D4DF8                	lea r9, [rbp - 8]
  7300 000050DA B907000000              	mov rcx, 7
  7301                                  .L_tc_recycle_frame_loop_0032:
  7302 000050DF 4883F900                	cmp rcx, 0
  7303 000050E3 7413                    	je .L_tc_recycle_frame_done_0032
  7304 000050E5 4D8B11                  	mov r10, qword [r9]
  7305 000050E8 4D8910                  	mov qword [r8], r10
  7306 000050EB 4983E808                	sub r8, 8
  7307 000050EF 4983E908                	sub r9, 8
  7308 000050F3 48FFC9                  	dec rcx
  7309 000050F6 EBE7                    	jmp .L_tc_recycle_frame_loop_0032
  7310                                  .L_tc_recycle_frame_done_0032:
  7311 000050F8 498D6008                	lea rsp, [r8 + 8]
  7312 000050FC 5D                      	pop rbp ; restore the old rbp
  7313 000050FD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7314 00005100 C9                      	leave
  7315 00005101 C22800                  	ret 8 * (2 + 3)
  7316                                  .L_lambda_opt_end_0008:	; new closure is in rax
  7317 00005104 C9                      	leave
  7318 00005105 C21800                  	ret AND_KILL_FRAME(1)
  7319                                  .L_lambda_simple_end_0030:	; new closure is in rax
  7320 00005108 803804                  	cmp byte [rax], T_closure
  7321 0000510B 0F85E2050000            	jne L_error_non_closure
  7322 00005111 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7323 00005114 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7324 00005117 48890425[A00A0000]      	mov qword [free_var_35], rax
  7325 0000511F 48B8-                   	mov rax, sob_void
  7325 00005121 [0000000000000000] 
  7326                                  
  7327 00005129 4889C7                  	mov rdi, rax
  7328 0000512C E8C0080000              	call print_sexpr_if_not_void
  7329                                  	; preparing a non-tail-call
  7330 00005131 48B8-                   	mov rax, L_constants + 1993
  7330 00005133 [C907000000000000] 
  7331 0000513B 50                      	push rax
  7332 0000513C 6A01                    	push 1	; arg count
  7333 0000513E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7334 00005143 E854060000              	call malloc
  7335 00005148 50                      	push rax
  7336 00005149 BF00000000              	mov rdi, 8 * 0	; new rib
  7337 0000514E E849060000              	call malloc
  7338 00005153 50                      	push rax
  7339 00005154 BF08000000              	mov rdi, 8 * 1	; extended env
  7340 00005159 E83E060000              	call malloc
  7341 0000515E 488B7D10                	mov rdi, ENV
  7342 00005162 BE00000000              	mov rsi, 0
  7343 00005167 BA01000000              	mov rdx, 1
  7344                                  .L_lambda_simple_env_loop_0032:	; ext_env[i + 1] <-- env[i]
  7345 0000516C 4883FE00                	cmp rsi, 0
  7346 00005170 7410                    	je .L_lambda_simple_env_end_0032
  7347 00005172 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7348 00005176 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7349 0000517A 48FFC6                  	inc rsi
  7350 0000517D 48FFC2                  	inc rdx
  7351 00005180 EBEA                    	jmp .L_lambda_simple_env_loop_0032
  7352                                  .L_lambda_simple_env_end_0032:
  7353 00005182 5B                      	pop rbx
  7354 00005183 BE00000000              	mov rsi, 0
  7355                                  .L_lambda_simple_params_loop_0032:	; copy params
  7356 00005188 4883FE00                	cmp rsi, 0
  7357 0000518C 740E                    	je .L_lambda_simple_params_end_0032
  7358 0000518E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7359 00005193 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7360 00005197 48FFC6                  	inc rsi
  7361 0000519A EBEC                    	jmp .L_lambda_simple_params_loop_0032
  7362                                  .L_lambda_simple_params_end_0032:
  7363 0000519C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7364 0000519F 4889C3                  	mov rbx, rax
  7365 000051A2 58                      	pop rax
  7366 000051A3 C60004                  	mov byte [rax], T_closure
  7367 000051A6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7368 000051AA 48C74009[B7510000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0032
  7369 000051B2 E959040000              	jmp .L_lambda_simple_end_0032
  7370                                  .L_lambda_simple_code_0032:	; lambda-simple body
  7371 000051B7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7372 000051BD 740B                    	je .L_lambda_simple_arity_check_ok_0032
  7373 000051BF FF742410                	push qword [rsp + 8 * 2]
  7374 000051C3 6A01                    	push 1
  7375 000051C5 E98B050000              	jmp L_error_incorrect_arity_simple
  7376                                  .L_lambda_simple_arity_check_ok_0032:
  7377 000051CA C8000000                	enter 0, 0
  7378 000051CE BF08000000              	mov rdi, 8*1
  7379 000051D3 E8C4050000              	call malloc
  7380 000051D8 488B5D20                	mov rbx, PARAM(0)
  7381 000051DC 488918                  	mov qword [rax], rbx
  7382 000051DF 48894520                	mov PARAM(0), rax
  7383 000051E3 48B8-                   	mov rax, sob_void
  7383 000051E5 [0000000000000000] 
  7384                                  
  7385 000051ED BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7386 000051F2 E8A5050000              	call malloc
  7387 000051F7 50                      	push rax
  7388 000051F8 BF08000000              	mov rdi, 8 * 1	; new rib
  7389 000051FD E89A050000              	call malloc
  7390 00005202 50                      	push rax
  7391 00005203 BF10000000              	mov rdi, 8 * 2	; extended env
  7392 00005208 E88F050000              	call malloc
  7393 0000520D 488B7D10                	mov rdi, ENV
  7394 00005211 BE00000000              	mov rsi, 0
  7395 00005216 BA01000000              	mov rdx, 1
  7396                                  .L_lambda_simple_env_loop_0033:	; ext_env[i + 1] <-- env[i]
  7397 0000521B 4883FE01                	cmp rsi, 1
  7398 0000521F 7410                    	je .L_lambda_simple_env_end_0033
  7399 00005221 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7400 00005225 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7401 00005229 48FFC6                  	inc rsi
  7402 0000522C 48FFC2                  	inc rdx
  7403 0000522F EBEA                    	jmp .L_lambda_simple_env_loop_0033
  7404                                  .L_lambda_simple_env_end_0033:
  7405 00005231 5B                      	pop rbx
  7406 00005232 BE00000000              	mov rsi, 0
  7407                                  .L_lambda_simple_params_loop_0033:	; copy params
  7408 00005237 4883FE01                	cmp rsi, 1
  7409 0000523B 740E                    	je .L_lambda_simple_params_end_0033
  7410 0000523D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7411 00005242 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7412 00005246 48FFC6                  	inc rsi
  7413 00005249 EBEC                    	jmp .L_lambda_simple_params_loop_0033
  7414                                  .L_lambda_simple_params_end_0033:
  7415 0000524B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7416 0000524E 4889C3                  	mov rbx, rax
  7417 00005251 58                      	pop rax
  7418 00005252 C60004                  	mov byte [rax], T_closure
  7419 00005255 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7420 00005259 48C74009[66520000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0033
  7421 00005261 E9B9010000              	jmp .L_lambda_simple_end_0033
  7422                                  .L_lambda_simple_code_0033:	; lambda-simple body
  7423 00005266 48837C241003            	cmp qword [rsp + 8 * 2], 3
  7424 0000526C 740B                    	je .L_lambda_simple_arity_check_ok_0033
  7425 0000526E FF742410                	push qword [rsp + 8 * 2]
  7426 00005272 6A03                    	push 3
  7427 00005274 E9DC040000              	jmp L_error_incorrect_arity_simple
  7428                                  .L_lambda_simple_arity_check_ok_0033:
  7429 00005279 C8000000                	enter 0, 0
  7430                                  	; preparing a non-tail-call
  7431 0000527D 488B4530                	mov rax, PARAM(2)	; param ss
  7432 00005281 50                      	push rax
  7433 00005282 488B0425[390B0000]      	mov rax, qword [free_var_44]	; free var null?
  7434 0000528A 803805                  	cmp byte [rax], T_undefined
  7435 0000528D 0F84DC030000            	je L_error_fvar_undefined
  7436 00005293 50                      	push rax
  7437 00005294 6A02                    	push 2	; arg count
  7438 00005296 488B0425[4A0B0000]      	mov rax, qword [free_var_45]	; free var ormap
  7439 0000529E 803805                  	cmp byte [rax], T_undefined
  7440 000052A1 0F84C8030000            	je L_error_fvar_undefined
  7441 000052A7 803804                  	cmp byte [rax], T_closure
  7442 000052AA 0F8543040000            	jne L_error_non_closure
  7443 000052B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7444 000052B3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7445 000052B6 483D[02000000]          	cmp rax, sob_boolean_false
  7446 000052BC 7409                    	je .L_if_else_0010
  7447 000052BE 488B4528                	mov rax, PARAM(1)	; param unit
  7448 000052C2 E954010000              	jmp .L_if_end_0010
  7449                                  .L_if_else_0010:
  7450                                  	; preparing a tail-call
  7451                                  	; preparing a non-tail-call
  7452                                  	; preparing a non-tail-call
  7453 000052C7 48B8-                   	mov rax, L_constants + 1
  7453 000052C9 [0100000000000000] 
  7454 000052D1 50                      	push rax
  7455                                  	; preparing a non-tail-call
  7456                                  	; preparing a non-tail-call
  7457 000052D2 488B4530                	mov rax, PARAM(2)	; param ss
  7458 000052D6 50                      	push rax
  7459 000052D7 488B0425[7E0A0000]      	mov rax, qword [free_var_33]	; free var cdr
  7460 000052DF 803805                  	cmp byte [rax], T_undefined
  7461 000052E2 0F8487030000            	je L_error_fvar_undefined
  7462 000052E8 50                      	push rax
  7463 000052E9 6A02                    	push 2	; arg count
  7464 000052EB 488B0425[170B0000]      	mov rax, qword [free_var_42]	; free var map
  7465 000052F3 803805                  	cmp byte [rax], T_undefined
  7466 000052F6 0F8473030000            	je L_error_fvar_undefined
  7467 000052FC 803804                  	cmp byte [rax], T_closure
  7468 000052FF 0F85EE030000            	jne L_error_non_closure
  7469 00005305 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7470 00005308 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7471 0000530B 50                      	push rax
  7472 0000530C 488B4528                	mov rax, PARAM(1)	; param unit
  7473 00005310 50                      	push rax
  7474 00005311 488B4520                	mov rax, PARAM(0)	; param f
  7475 00005315 50                      	push rax
  7476 00005316 6A03                    	push 3	; arg count
  7477 00005318 488B4510                	mov rax, ENV
  7478 0000531C 488B00                  	mov rax, qword [rax + 8 * 0]
  7479 0000531F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  7480 00005322 488B00                  	mov rax, qword [rax]
  7481 00005325 803804                  	cmp byte [rax], T_closure
  7482 00005328 0F85C5030000            	jne L_error_non_closure
  7483 0000532E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7484 00005331 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7485 00005334 50                      	push rax
  7486 00005335 6A02                    	push 2	; arg count
  7487 00005337 488B0425[8F0A0000]      	mov rax, qword [free_var_34]	; free var cons
  7488 0000533F 803805                  	cmp byte [rax], T_undefined
  7489 00005342 0F8427030000            	je L_error_fvar_undefined
  7490 00005348 803804                  	cmp byte [rax], T_closure
  7491 0000534B 0F85A2030000            	jne L_error_non_closure
  7492 00005351 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7493 00005354 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7494 00005357 50                      	push rax
  7495                                  	; preparing a non-tail-call
  7496 00005358 488B4530                	mov rax, PARAM(2)	; param ss
  7497 0000535C 50                      	push rax
  7498 0000535D 488B0425[7F090000]      	mov rax, qword [free_var_18]	; free var car
  7499 00005365 803805                  	cmp byte [rax], T_undefined
  7500 00005368 0F8401030000            	je L_error_fvar_undefined
  7501 0000536E 50                      	push rax
  7502 0000536F 6A02                    	push 2	; arg count
  7503 00005371 488B0425[170B0000]      	mov rax, qword [free_var_42]	; free var map
  7504 00005379 803805                  	cmp byte [rax], T_undefined
  7505 0000537C 0F84ED020000            	je L_error_fvar_undefined
  7506 00005382 803804                  	cmp byte [rax], T_closure
  7507 00005385 0F8568030000            	jne L_error_non_closure
  7508 0000538B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7509 0000538E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7510 00005391 50                      	push rax
  7511 00005392 6A02                    	push 2	; arg count
  7512 00005394 488B0425[6F080000]      	mov rax, qword [free_var_2]	; free var append
  7513 0000539C 803805                  	cmp byte [rax], T_undefined
  7514 0000539F 0F84CA020000            	je L_error_fvar_undefined
  7515 000053A5 803804                  	cmp byte [rax], T_closure
  7516 000053A8 0F8545030000            	jne L_error_non_closure
  7517 000053AE FF7001                  	push SOB_CLOSURE_ENV(rax)
  7518 000053B1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7519 000053B4 50                      	push rax
  7520 000053B5 488B4520                	mov rax, PARAM(0)	; param f
  7521 000053B9 50                      	push rax
  7522 000053BA 6A02                    	push 2	; arg count
  7523 000053BC 488B0425[80080000]      	mov rax, qword [free_var_3]	; free var apply
  7524 000053C4 803805                  	cmp byte [rax], T_undefined
  7525 000053C7 0F84A2020000            	je L_error_fvar_undefined
  7526 000053CD 803804                  	cmp byte [rax], T_closure
  7527 000053D0 0F851D030000            	jne L_error_non_closure
  7528 000053D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7529 000053D9 FF7508                  	push qword [rbp + 8 * 1]
  7530                                   ; old ret addr
  7531 000053DC FF7500                  	push qword [rbp]
  7532                                   ; restore the old rbp
  7533 000053DF BB02000000              	mov rbx, 2
  7534 000053E4 4883C303                	add rbx, 3
  7535 000053E8 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  7536 000053EC 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  7537 000053F1 4C8D4DF8                	lea r9, [rbp - 8]
  7538 000053F5 B906000000              	mov rcx, 6
  7539                                  .L_tc_recycle_frame_loop_0033:
  7540 000053FA 4883F900                	cmp rcx, 0
  7541 000053FE 7413                    	je .L_tc_recycle_frame_done_0033
  7542 00005400 4D8B11                  	mov r10, qword [r9]
  7543 00005403 4D8910                  	mov qword [r8], r10
  7544 00005406 4983E808                	sub r8, 8
  7545 0000540A 4983E908                	sub r9, 8
  7546 0000540E 48FFC9                  	dec rcx
  7547 00005411 EBE7                    	jmp .L_tc_recycle_frame_loop_0033
  7548                                  .L_tc_recycle_frame_done_0033:
  7549 00005413 498D6008                	lea rsp, [r8 + 8]
  7550 00005417 5D                      	pop rbp ; restore the old rbp
  7551 00005418 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7552                                  .L_if_end_0010:
  7553 0000541B C9                      	leave
  7554 0000541C C22800                  	ret AND_KILL_FRAME(3)
  7555                                  .L_lambda_simple_end_0033:	; new closure is in rax
  7556 0000541F 50                      	push rax
  7557 00005420 488B4520                	mov rax, PARAM(0)	; param run
  7558 00005424 8F00                    	pop qword [rax]
  7559 00005426 48B8-                   	mov rax, sob_void
  7559 00005428 [0000000000000000] 
  7560                                  
  7561 00005430 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7562 00005435 E862030000              	call malloc
  7563 0000543A 50                      	push rax
  7564 0000543B BF08000000              	mov rdi, 8 * 1	; new rib
  7565 00005440 E857030000              	call malloc
  7566 00005445 50                      	push rax
  7567 00005446 BF10000000              	mov rdi, 8 * 2	; extended env
  7568 0000544B E84C030000              	call malloc
  7569 00005450 488B7D10                	mov rdi, ENV
  7570 00005454 4831F6                  	 xor rsi, rsi
  7571 00005457 4831D2                  	 xor rdx, rdx
  7572 0000545A 48FFC2                  	inc rdx
  7573                                  .L_lambda_opt_env_loop_0009:	; 
  7574 0000545D 4883FE01                	cmp rsi, 1
  7575 00005461 7410                    	je .L_lambda_opt_env_end_0009
  7576 00005463 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7577 00005467 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7578 0000546B 48FFC6                  	inc rsi
  7579 0000546E 48FFC2                  	inc rdx
  7580 00005471 EBEA                    	jmp .L_lambda_opt_env_loop_0009
  7581                                  .L_lambda_opt_env_end_0009:
  7582 00005473 5B                      	pop rbx
  7583 00005474 4831F6                  	xor rsi, rsi
  7584                                  .L_lambda_opt_params_loop_0009:	; copy params
  7585 00005477 4883FE01                	cmp rsi, 1
  7586 0000547B 740E                    	je .L_lambda_opt_params_end_0009
  7587 0000547D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7588 00005482 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7589 00005486 48FFC6                  	inc rsi
  7590 00005489 EBEC                    	jmp .L_lambda_opt_params_loop_0009
  7591                                  .L_lambda_opt_params_end_0009:
  7592 0000548B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7593 0000548E 4889C3                  	mov rbx, rax
  7594 00005491 58                      	pop rax
  7595 00005492 C60004                  	mov byte [rax], T_closure
  7596 00005495 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7597 00005499 48C74009[A6540000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0009
  7598 000054A1 E966010000              	jmp .L_lambda_opt_end_0009
  7599                                  .L_lambda_opt_code_0009:
  7600 000054A6 4C8B7C2410              	mov r15, qword [rsp + 8 * 2]
  7601 000054AB 4983FF02                	cmp r15, 2
  7602 000054AF 7409                    	je .L_lambda_opt_arity_check_exact_0009
  7603 000054B1 7F57                    	jg .L_lambda_opt_arity_check_more_0009
  7604 000054B3 6A02                    	push 2
  7605 000054B5 E9AF020000              	jmp L_error_incorrect_arity_opt
  7606                                  .L_lambda_opt_arity_check_exact_0009: ;Exact case
  7607 000054BA 4C8B0424                	mov r8, qword [rsp -8 * 0]
  7608 000054BE 4C894424F8              	mov qword [rsp -8], r8
  7609 000054C3 4C8B442408              	mov r8, qword [rsp +8]
  7610 000054C8 4C890424                	mov qword [rsp +8 * 0], r8
  7611 000054CC 4C8B442410              	mov r8, qword [rsp +8 * 2]
  7612 000054D1 4C89C1                  	mov rcx, r8
  7613 000054D4 49FFC0                  	inc r8
  7614 000054D7 4C89442408              	mov qword [rsp +8], r8
  7615 000054DC 4889E2                  	mov rdx, rsp
  7616 000054DF 4883C218                	add rdx, 24
  7617                                  .L_lambda_opt_loop_copy_to_new_frame_exact_0009:
  7618 000054E3 4883F900                	cmp rcx, 0
  7619 000054E7 7410                    	je .L_lambda_opt_loop_copy_to_new_frame_exact_end_0009
  7620 000054E9 4C8B02                  	mov r8, qword [rdx]
  7621 000054EC 4C8942F8                	mov qword [rdx - 8], r8
  7622 000054F0 4883C208                	add rdx, 8
  7623 000054F4 48FFC9                  	dec rcx
  7624 000054F7 EBEA                    	jmp .L_lambda_opt_loop_copy_to_new_frame_exact_0009
  7625                                  .L_lambda_opt_loop_copy_to_new_frame_exact_end_0009:
  7626 000054F9 48C742F8[01000000]      	mov qword [rdx - 8], sob_nil
  7627 00005501 4883EC08                	sub rsp, 8
  7628 00005505 E985000000              	jmp .L_lambda_opt_stack_adjusted_0009
  7629                                  .L_lambda_opt_arity_check_more_0009:
  7630 0000550A 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  7631 0000550F 4D89C4                  	mov r12, r8
  7632 00005512 4C89C1                  	mov rcx, r8
  7633 00005515 4D8D6802                	lea r13, [r8 + 2] 
  7634 00005519 4883E902                	sub rcx, 2
  7635 0000551D 4E8D5CC410              	lea r11, qword [rsp + r8 * 8 + 16]
  7636 00005522 49BE-                   	mov r14, sob_nil
  7636 00005524 [0100000000000000] 
  7637                                  .L_lambda_opt_create_list_of_opt_params_0009:
  7638 0000552C 4883F900                	cmp rcx, 0
  7639 00005530 7424                    	je .L_lambda_opt_create_list_of_opt_params_end_0009
  7640 00005532 BF11000000              	mov rdi, 17
  7641 00005537 E860020000              	call malloc
  7642 0000553C C60021                  	mov byte [rax], T_pair
  7643 0000553F 498B1B                  	mov rbx, qword [r11]
  7644 00005542 48895801                	mov qword [rax +1], rbx
  7645 00005546 4C897009                	mov qword [rax + 1 + 8], r14
  7646 0000554A 4989C6                  	mov r14, rax
  7647 0000554D 48FFC9                  	dec rcx
  7648 00005550 4983EB08                	sub r11, 8
  7649 00005554 EBD6                    	jmp .L_lambda_opt_create_list_of_opt_params_0009
  7650                                  .L_lambda_opt_create_list_of_opt_params_end_0009:
  7651 00005556 4C8D542428              	lea r10, [rsp + 2*8 + 8*3]
  7652 0000555B 4D8932                  	mov qword [r10], r14
  7653 0000555E 4E8D2CED00000000        	lea r13, [8 * r13]
  7654 00005566 4901E5                  	add r13, rsp
  7655 00005569 B906000000              	mov rcx, 4 + 2
  7656                                  .L_lambda_opt_stack_shrink_loop_0009:
  7657 0000556E 4883F900                	cmp rcx, 0
  7658 00005572 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0009
  7659 00005574 4D8B1A                  	mov r11, qword [r10]
  7660 00005577 4D895D00                	mov qword [r13], r11
  7661 0000557B 4983EA08                	sub r10, 8
  7662 0000557F 4983ED08                	sub r13, 8
  7663 00005583 48FFC9                  	dec rcx
  7664 00005586 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0009
  7665                                  .L_lambda_opt_stack_shrink_loop_exit_0009:
  7666 00005588 4983C508                	add r13, 8
  7667 0000558C 4C89EC                  	mov rsp, r13
  7668                                  .L_lambda_opt_stack_adjusted_0009:
  7669 0000558F 48C744241003000000      	mov qword [rsp + 8*2], 3
  7670 00005598 C8000000                	enter 0, 0
  7671                                  	; preparing a tail-call
  7672 0000559C 488B4530                	mov rax, PARAM(2)	; param ss
  7673 000055A0 50                      	push rax
  7674 000055A1 488B4528                	mov rax, PARAM(1)	; param unit
  7675 000055A5 50                      	push rax
  7676 000055A6 488B4520                	mov rax, PARAM(0)	; param f
  7677 000055AA 50                      	push rax
  7678 000055AB 6A03                    	push 3	; arg count
  7679 000055AD 488B4510                	mov rax, ENV
  7680 000055B1 488B00                  	mov rax, qword [rax + 8 * 0]
  7681 000055B4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  7682 000055B7 488B00                  	mov rax, qword [rax]
  7683 000055BA 803804                  	cmp byte [rax], T_closure
  7684 000055BD 0F8530010000            	jne L_error_non_closure
  7685 000055C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7686 000055C6 FF7508                  	push qword [rbp + 8 * 1]
  7687                                   ; old ret addr
  7688 000055C9 FF7500                  	push qword [rbp]
  7689                                   ; restore the old rbp
  7690 000055CC BB03000000              	mov rbx, 3
  7691 000055D1 4883C303                	add rbx, 3
  7692 000055D5 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  7693 000055D9 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  7694 000055DE 4C8D4DF8                	lea r9, [rbp - 8]
  7695 000055E2 B907000000              	mov rcx, 7
  7696                                  .L_tc_recycle_frame_loop_0034:
  7697 000055E7 4883F900                	cmp rcx, 0
  7698 000055EB 7413                    	je .L_tc_recycle_frame_done_0034
  7699 000055ED 4D8B11                  	mov r10, qword [r9]
  7700 000055F0 4D8910                  	mov qword [r8], r10
  7701 000055F3 4983E808                	sub r8, 8
  7702 000055F7 4983E908                	sub r9, 8
  7703 000055FB 48FFC9                  	dec rcx
  7704 000055FE EBE7                    	jmp .L_tc_recycle_frame_loop_0034
  7705                                  .L_tc_recycle_frame_done_0034:
  7706 00005600 498D6008                	lea rsp, [r8 + 8]
  7707 00005604 5D                      	pop rbp ; restore the old rbp
  7708 00005605 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7709 00005608 C9                      	leave
  7710 00005609 C22800                  	ret 8 * (2 + 3)
  7711                                  .L_lambda_opt_end_0009:	; new closure is in rax
  7712 0000560C C9                      	leave
  7713 0000560D C21800                  	ret AND_KILL_FRAME(1)
  7714                                  .L_lambda_simple_end_0032:	; new closure is in rax
  7715 00005610 803804                  	cmp byte [rax], T_closure
  7716 00005613 0F85DA000000            	jne L_error_non_closure
  7717 00005619 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7718 0000561C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7719 0000561F 48890425[B10A0000]      	mov qword [free_var_36], rax
  7720 00005627 48B8-                   	mov rax, sob_void
  7720 00005629 [0000000000000000] 
  7721                                  Lend:
  7722 00005631 4889C7                  	mov rdi, rax
  7723 00005634 E8B8030000              	call print_sexpr_if_not_void
  7724                                  
  7725 00005639 48BF-                           mov rdi, fmt_memory_usage
  7725 0000563B [260C000000000000] 
  7726 00005643 488B3425[AC0C0000]              mov rsi, qword [top_of_memory]
  7727 0000564B 4881EE[00000000]                sub rsi, memory
  7728 00005652 B800000000                      mov rax, 0
  7729                                          ENTER
    44 00005657 C8000000            <1>  enter 0, 0
    45 0000565B 4883E4F0            <1>  and rsp, ~15
  7730 0000565F E8(00000000)                    call printf
  7731                                          LEAVE
    49 00005664 C9                  <1>  leave
  7732 00005665 B800000000                      mov rax, 0
  7733 0000566A E8(00000000)                    call exit
  7734                                  
  7735                                  L_error_fvar_undefined:
  7736 0000566F 50                              push rax
  7737 00005670 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
  7738 00005678 48BE-                           mov rsi, fmt_undefined_free_var_1
  7738 0000567A [8E0B000000000000] 
  7739 00005682 B800000000                      mov rax, 0
  7740                                          ENTER
    44 00005687 C8000000            <1>  enter 0, 0
    45 0000568B 4883E4F0            <1>  and rsp, ~15
  7741 0000568F E8(00000000)                    call fprintf
  7742                                          LEAVE
    49 00005694 C9                  <1>  leave
  7743 00005695 58                              pop rax
  7744 00005696 488B4001                        mov rax, qword [rax + 1] ; string
  7745 0000569A 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  7746 0000569E BE01000000                      mov rsi, 1               ; sizeof(char)
  7747 000056A3 488B5001                        mov rdx, qword [rax + 1] ; string-length
  7748 000056A7 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
  7749 000056AF B800000000                      mov rax, 0
  7750                                          ENTER
    44 000056B4 C8000000            <1>  enter 0, 0
    45 000056B8 4883E4F0            <1>  and rsp, ~15
  7751 000056BC E8(00000000)                    call fwrite
  7752                                          LEAVE
    49 000056C1 C9                  <1>  leave
  7753 000056C2 488B3C25[00000000]              mov rdi, [stderr]       ; destination
  7754 000056CA 48BE-                           mov rsi, fmt_undefined_free_var_2
  7754 000056CC [A50B000000000000] 
  7755 000056D4 B800000000                      mov rax, 0
  7756                                          ENTER
    44 000056D9 C8000000            <1>  enter 0, 0
    45 000056DD 4883E4F0            <1>  and rsp, ~15
  7757 000056E1 E8(00000000)                    call fprintf
  7758                                          LEAVE
    49 000056E6 C9                  <1>  leave
  7759 000056E7 48C7C0F6FFFFFF                  mov rax, -10
  7760 000056EE E8(00000000)                    call exit
  7761                                  
  7762                                  L_error_non_closure:
  7763 000056F3 488B3C25[00000000]              mov rdi, qword [stderr]
  7764 000056FB 48BE-                           mov rsi, fmt_non_closure
  7764 000056FD [5C0C000000000000] 
  7765 00005705 B800000000                      mov rax, 0
  7766                                          ENTER
    44 0000570A C8000000            <1>  enter 0, 0
    45 0000570E 4883E4F0            <1>  and rsp, ~15
  7767 00005712 E8(00000000)                    call fprintf
  7768                                          LEAVE
    49 00005717 C9                  <1>  leave
  7769 00005718 48C7C0FEFFFFFF                  mov rax, -2
  7770 0000571F E8(00000000)                    call exit
  7771                                  
  7772                                  L_error_improper_list:
  7773 00005724 488B3C25[00000000]      	mov rdi, qword [stderr]
  7774 0000572C 48BE-                   	mov rsi, fmt_error_improper_list
  7774 0000572E [840C000000000000] 
  7775 00005736 B800000000              	mov rax, 0
  7776                                          ENTER
    44 0000573B C8000000            <1>  enter 0, 0
    45 0000573F 4883E4F0            <1>  and rsp, ~15
  7777 00005743 E8(00000000)            	call fprintf
  7778                                          LEAVE
    49 00005748 C9                  <1>  leave
  7779 00005749 48C7C0F9FFFFFF          	mov rax, -7
  7780 00005750 E8(00000000)            	call exit
  7781                                  
  7782                                  L_error_incorrect_arity_simple:
  7783 00005755 488B3C25[00000000]              mov rdi, qword [stderr]
  7784 0000575D 48BE-                           mov rsi, fmt_incorrect_arity_simple
  7784 0000575F [C70B000000000000] 
  7785 00005767 EB12                            jmp L_error_incorrect_arity_common
  7786                                  L_error_incorrect_arity_opt:
  7787 00005769 488B3C25[00000000]              mov rdi, qword [stderr]
  7788 00005771 48BE-                           mov rsi, fmt_incorrect_arity_opt
  7788 00005773 [F20B000000000000] 
  7789                                  L_error_incorrect_arity_common:
  7790 0000577B 5A                              pop rdx
  7791 0000577C 59                              pop rcx
  7792 0000577D B800000000                      mov rax, 0
  7793                                          ENTER
    44 00005782 C8000000            <1>  enter 0, 0
    45 00005786 4883E4F0            <1>  and rsp, ~15
  7794 0000578A E8(00000000)                    call fprintf
  7795                                          LEAVE
    49 0000578F C9                  <1>  leave
  7796 00005790 48C7C0FAFFFFFF                  mov rax, -6
  7797 00005797 E8(00000000)                    call exit
  7798                                  
  7799                                  section .data
  7800                                  fmt_undefined_free_var_1:
  7801 00000B8E 212121205468652066-             db `!!! The free variable \0`
  7801 00000B97 726565207661726961-
  7801 00000BA0 626C652000         
  7802                                  fmt_undefined_free_var_2:
  7803 00000BA5 207761732075736564-             db ` was used before it was defined.\n\0`
  7803 00000BAE 206265666F72652069-
  7803 00000BB7 742077617320646566-
  7803 00000BC0 696E65642E0A00     
  7804                                  fmt_incorrect_arity_simple:
  7805 00000BC7 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
  7805 00000BD0 74656420256C642061-
  7805 00000BD9 7267756D656E74732C-
  7805 00000BE2 206275742067697665-
  7805 00000BEB 6E20256C640A00     
  7806                                  fmt_incorrect_arity_opt:
  7807 00000BF2 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
  7807 00000BFB 746564206174206C65-
  7807 00000C04 61737420256C642061-
  7807 00000C0D 7267756D656E74732C-
  7807 00000C16 206275742067697665-
  7807 00000C1F 6E20256C640A00     
  7808                                  fmt_memory_usage:
  7809 00000C26 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
  7809 00000C2F 20256C642062797465-
  7809 00000C38 73206F662064796E61-
  7809 00000C41 6D6963616C6C792D61-
  7809 00000C4A 6C6C6F636174656420-
  7809 00000C53 6D656D6F72790A0A00 
  7810                                  fmt_non_closure:
  7811 00000C5C 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
  7811 00000C65 7074696E6720746F20-
  7811 00000C6E 6170706C792061206E-
  7811 00000C77 6F6E2D636C6F737572-
  7811 00000C80 65210A00           
  7812                                  fmt_error_improper_list:
  7813 00000C84 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
  7813 00000C8D 7267756D656E742069-
  7813 00000C96 73206E6F7420612070-
  7813 00000C9F 726F706572206C6973-
  7813 00000CA8 74210A00           
  7814                                  
  7815                                  section .bss
  7816                                  memory:
  7817 00000000 <res 40000000h>         	resb gbytes(1)
  7818                                  
  7819                                  section .data
  7820                                  top_of_memory:
  7821 00000CAC [0000000000000000]              dq memory
  7822                                  
  7823                                  section .text
  7824                                  malloc:
  7825 0000579C 488B0425[AC0C0000]              mov rax, qword [top_of_memory]
  7826 000057A4 48013C25[AC0C0000]              add qword [top_of_memory], rdi
  7827 000057AC C3                              ret
  7828                                  
  7829                                  L_code_ptr_return:
  7830 000057AD 48837C241002            	cmp qword [rsp + 8*2], 2
  7831 000057B3 0F85E71C0000            	jne L_error_arg_count_2
  7832 000057B9 488B4C2418              	mov rcx, qword [rsp + 8*3]
  7833                                  	assert_integer(rcx)
    53 000057BE 803911              <1>  cmp byte [%1], %2
    54 000057C1 0F85781D0000        <1>  jne L_error_incorrect_type
  7834 000057C7 488B4901                	mov rcx, qword [rcx + 1]
  7835 000057CB 4883F900                	cmp rcx, 0
  7836 000057CF 0F8CFF1B0000            	jl L_error_integer_range
  7837 000057D5 488B442420              	mov rax, qword [rsp + 8*4]
  7838                                  .L0:
  7839 000057DA 4883F900                        cmp rcx, 0
  7840 000057DE 7409                            je .L1
  7841 000057E0 488B6D00                	mov rbp, qword [rbp]
  7842 000057E4 48FFC9                  	dec rcx
  7843 000057E7 7FF1                    	jg .L0
  7844                                  .L1:
  7845 000057E9 4889EC                  	mov rsp, rbp
  7846 000057EC 5D                      	pop rbp
  7847 000057ED 5B                              pop rbx
  7848 000057EE 488B4C2408                      mov rcx, qword [rsp + 8*1]
  7849 000057F3 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
  7850 000057F8 FFE3                    	jmp rbx
  7851                                  
  7852                                  L_code_ptr_make_list:
  7853 000057FA C8000000                	enter 0, 0
  7854 000057FE 48837D1801                      cmp COUNT, 1
  7855 00005803 740C                            je .L0
  7856 00005805 48837D1802                      cmp COUNT, 2
  7857 0000580A 7411                            je .L1
  7858 0000580C E9C41C0000                      jmp L_error_arg_count_12
  7859                                  .L0:
  7860 00005811 49B9-                           mov r9, sob_void
  7860 00005813 [0000000000000000] 
  7861 0000581B EB04                            jmp .L2
  7862                                  .L1:
  7863 0000581D 4C8B4D28                        mov r9, PARAM(1)
  7864                                  .L2:
  7865 00005821 488B4D20                        mov rcx, PARAM(0)
  7866                                          assert_integer(rcx)
    53 00005825 803911              <1>  cmp byte [%1], %2
    54 00005828 0F85111D0000        <1>  jne L_error_incorrect_type
  7867 0000582E 488B4901                        mov rcx, qword [rcx + 1]
  7868 00005832 4883F900                        cmp rcx, 0
  7869 00005836 0F8CC91B0000                    jl L_error_arg_negative
  7870 0000583C 49B8-                           mov r8, sob_nil
  7870 0000583E [0100000000000000] 
  7871                                  .L3:
  7872 00005846 4883F900                        cmp rcx, 0
  7873 0000584A 7E1D                            jle .L4
  7874 0000584C BF11000000                      mov rdi, 1 + 8 + 8
  7875 00005851 E846FFFFFF                      call malloc
  7876 00005856 C60021                          mov byte [rax], T_pair
  7877 00005859 4C894801                        mov qword [rax + 1], r9
  7878 0000585D 4C894009                        mov qword [rax + 1 + 8], r8
  7879 00005861 4989C0                          mov r8, rax
  7880 00005864 48FFC9                          dec rcx
  7881 00005867 EBDD                            jmp .L3
  7882                                  .L4:
  7883 00005869 4C89C0                          mov rax, r8
  7884 0000586C 48837D1802                      cmp COUNT, 2
  7885 00005871 7404                            je .L5
  7886 00005873 C9                              leave
  7887 00005874 C21800                          ret AND_KILL_FRAME(1)
  7888                                  .L5:
  7889 00005877 C9                      	leave
  7890 00005878 C22000                  	ret AND_KILL_FRAME(2)
  7891                                  
  7892                                  L_code_ptr_is_primitive:
  7893 0000587B C8000000                	enter 0, 0
  7894 0000587F 48837D1801              	cmp COUNT, 1
  7895 00005884 0F85E11B0000            	jne L_error_arg_count_1
  7896 0000588A 488B4520                	mov rax, PARAM(0)
  7897                                  	assert_closure(rax)
    53 0000588E 803804              <1>  cmp byte [%1], %2
    54 00005891 0F85A81C0000        <1>  jne L_error_incorrect_type
  7898 00005897 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
  7899 0000589C 750C                    	jne .L_false
  7900 0000589E 48B8-                   	mov rax, sob_boolean_true
  7900 000058A0 [0300000000000000] 
  7901 000058A8 EB0A                    	jmp .L_end
  7902                                  .L_false:
  7903 000058AA 48B8-                   	mov rax, sob_boolean_false
  7903 000058AC [0200000000000000] 
  7904                                  .L_end:
  7905 000058B4 C9                      	leave
  7906 000058B5 C21800                  	ret AND_KILL_FRAME(1)
  7907                                  
  7908                                  L_code_ptr_length:
  7909 000058B8 C8000000                	enter 0, 0
  7910 000058BC 48837D1801              	cmp COUNT, 1
  7911 000058C1 0F85A41B0000            	jne L_error_arg_count_1
  7912 000058C7 488B5D20                	mov rbx, PARAM(0)
  7913 000058CB BF00000000              	mov rdi, 0
  7914                                  .L:
  7915 000058D0 803B01                  	cmp byte [rbx], T_nil
  7916 000058D3 7412                    	je .L_end
  7917                                  	assert_pair(rbx)
    53 000058D5 803B21              <1>  cmp byte [%1], %2
    54 000058D8 0F85611C0000        <1>  jne L_error_incorrect_type
  7918 000058DE 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
  7919 000058E2 48FFC7                  	inc rdi
  7920 000058E5 EBE9                    	jmp .L
  7921                                  .L_end:
  7922 000058E7 E8CE1A0000              	call make_integer
  7923 000058EC C9                      	leave
  7924 000058ED C21800                  	ret AND_KILL_FRAME(1)
  7925                                  
  7926                                  L_code_ptr_break:
  7927 000058F0 48837C241000                    cmp qword [rsp + 8 * 2], 0
  7928 000058F6 0F853A1B0000                    jne L_error_arg_count_0
  7929 000058FC CC                              int3
  7930 000058FD 48B8-                           mov rax, sob_void
  7930 000058FF [0000000000000000] 
  7931 00005907 C21000                          ret AND_KILL_FRAME(0)        
  7932                                  
  7933                                  L_code_ptr_frame:
  7934 0000590A C8000000                        enter 0, 0
  7935 0000590E 48837D1800                      cmp COUNT, 0
  7936 00005913 0F851D1B0000                    jne L_error_arg_count_0
  7937                                  
  7938 00005919 48BF-                           mov rdi, fmt_frame
  7938 0000591B [B40C000000000000] 
  7939 00005923 488B7500                        mov rsi, qword [rbp]    ; old rbp
  7940 00005927 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
  7941 0000592B 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
  7942 0000592F 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
  7943 00005933 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
  7944 00005937 6A00                            push 0
  7945 00005939 4151                            push r9
  7946 0000593B 4150                            push r8                   ; we'll use it when printing the params
  7947 0000593D B800000000                      mov rax, 0
  7948                                          
  7949                                          ENTER
    44 00005942 C8000000            <1>  enter 0, 0
    45 00005946 4883E4F0            <1>  and rsp, ~15
  7950 0000594A E8(00000000)                    call printf
  7951                                          LEAVE
    49 0000594F C9                  <1>  leave
  7952                                  
  7953                                  .L:
  7954 00005950 488B0C24                        mov rcx, qword [rsp]
  7955 00005954 4883F900                        cmp rcx, 0
  7956 00005958 7467                            je .L_out
  7957 0000595A 48BF-                           mov rdi, fmt_frame_param_prefix
  7957 0000595C [ED0C000000000000] 
  7958 00005964 488B742410                      mov rsi, qword [rsp + 8*2]
  7959 00005969 B800000000                      mov rax, 0
  7960                                          
  7961                                          ENTER
    44 0000596E C8000000            <1>  enter 0, 0
    45 00005972 4883E4F0            <1>  and rsp, ~15
  7962 00005976 E8(00000000)                    call printf
  7963                                          LEAVE
    49 0000597B C9                  <1>  leave
  7964                                  
  7965 0000597C 488B0C24                        mov rcx, qword [rsp]
  7966 00005980 48FFC9                          dec rcx
  7967 00005983 48890C24                        mov qword [rsp], rcx    ; dec arg count
  7968 00005987 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
  7969 0000598C 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
  7970 00005991 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
  7971 00005995 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
  7972 0000599A 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
  7973 0000599D E87B000000                      call print_sexpr
  7974 000059A2 48BF-                           mov rdi, fmt_newline
  7974 000059A4 [190D000000000000] 
  7975 000059AC B800000000                      mov rax, 0
  7976                                          ENTER
    44 000059B1 C8000000            <1>  enter 0, 0
    45 000059B5 4883E4F0            <1>  and rsp, ~15
  7977 000059B9 E8(00000000)                    call printf
  7978                                          LEAVE
    49 000059BE C9                  <1>  leave
  7979 000059BF EB8F                            jmp .L
  7980                                  .L_out:
  7981 000059C1 48BF-                           mov rdi, fmt_frame_continue
  7981 000059C3 [FE0C000000000000] 
  7982 000059CB B800000000                      mov rax, 0
  7983                                          ENTER
    44 000059D0 C8000000            <1>  enter 0, 0
    45 000059D4 4883E4F0            <1>  and rsp, ~15
  7984 000059D8 E8(00000000)                    call printf
  7985 000059DD E8(00000000)                    call getchar
  7986                                          LEAVE
    49 000059E2 C9                  <1>  leave
  7987                                          
  7988 000059E3 48B8-                           mov rax, sob_void
  7988 000059E5 [0000000000000000] 
  7989 000059ED C9                              leave
  7990 000059EE C21000                          ret AND_KILL_FRAME(0)
  7991                                          
  7992                                  print_sexpr_if_not_void:
  7993 000059F1 4881FF[00000000]        	cmp rdi, sob_void
  7994 000059F8 7422                    	je .done
  7995 000059FA E81E000000              	call print_sexpr
  7996 000059FF 48BF-                   	mov rdi, fmt_newline
  7996 00005A01 [190D000000000000] 
  7997 00005A09 B800000000              	mov rax, 0
  7998                                  	ENTER
    44 00005A0E C8000000            <1>  enter 0, 0
    45 00005A12 4883E4F0            <1>  and rsp, ~15
  7999 00005A16 E8(00000000)            	call printf
  8000                                  	LEAVE
    49 00005A1B C9                  <1>  leave
  8001                                  .done:
  8002 00005A1C C3                      	ret
  8003                                  
  8004                                  section .data
  8005                                  fmt_frame:
  8006 00000CB4 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
  8006 00000CBD 207265742061646472-
  8006 00000CC6 203D2025703B206C65-
  8006 00000CCF 7820656E76203D2025-
  8006 00000CD8 703B20706172616D20-
  8006 00000CE1 636F756E74203D2025-
  8006 00000CEA 640A00             
  8007                                  fmt_frame_param_prefix:
  8008 00000CED 3D3D5B706172616D20-             db `==[param %d]==> \0`
  8008 00000CF6 25645D3D3D3E2000   
  8009                                  fmt_frame_continue:
  8010 00000CFE 486974203C456E7465-             db `Hit <Enter> to continue...\0`
  8010 00000D07 723E20746F20636F6E-
  8010 00000D10 74696E75652E2E2E00 
  8011                                  fmt_newline:
  8012 00000D19 0A00                    	db `\n\0`
  8013                                  fmt_void:
  8014 00000D1B 233C766F69643E00        	db `#<void>\0`
  8015                                  fmt_nil:
  8016 00000D23 282900                  	db `()\0`
  8017                                  fmt_boolean_false:
  8018 00000D26 236600                  	db `#f\0`
  8019                                  fmt_boolean_true:
  8020 00000D29 237400                  	db `#t\0`
  8021                                  fmt_char_backslash:
  8022 00000D2C 235C5C00                	db `#\\\\\0`
  8023                                  fmt_char_dquote:
  8024 00000D30 235C2200                	db `#\\"\0`
  8025                                  fmt_char_simple:
  8026 00000D34 235C256300              	db `#\\%c\0`
  8027                                  fmt_char_null:
  8028 00000D39 235C6E756C00            	db `#\\nul\0`
  8029                                  fmt_char_bell:
  8030 00000D3F 235C62656C6C00          	db `#\\bell\0`
  8031                                  fmt_char_backspace:
  8032 00000D46 235C6261636B737061-     	db `#\\backspace\0`
  8032 00000D4F 636500             
  8033                                  fmt_char_tab:
  8034 00000D52 235C74616200            	db `#\\tab\0`
  8035                                  fmt_char_newline:
  8036 00000D58 235C6E65776C696E65-     	db `#\\newline\0`
  8036 00000D61 00                 
  8037                                  fmt_char_formfeed:
  8038 00000D62 235C7061676500          	db `#\\page\0`
  8039                                  fmt_char_return:
  8040 00000D69 235C72657475726E00      	db `#\\return\0`
  8041                                  fmt_char_escape:
  8042 00000D72 235C65736300            	db `#\\esc\0`
  8043                                  fmt_char_space:
  8044 00000D78 235C737061636500        	db `#\\space\0`
  8045                                  fmt_char_hex:
  8046 00000D80 235C782530325800        	db `#\\x%02X\0`
  8047                                  fmt_gensym:
  8048 00000D88 47256C6400                      db `G%ld\0`
  8049                                  fmt_closure:
  8050 00000D8D 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  8050 00000D96 206174203078253038-
  8050 00000D9F 5820656E763D307825-
  8050 00000DA8 30385820636F64653D-
  8050 00000DB1 3078253038583E00   
  8051                                  fmt_lparen:
  8052 00000DB9 2800                    	db `(\0`
  8053                                  fmt_dotted_pair:
  8054 00000DBB 202E2000                	db ` . \0`
  8055                                  fmt_rparen:
  8056 00000DBF 2900                    	db `)\0`
  8057                                  fmt_space:
  8058 00000DC1 2000                    	db ` \0`
  8059                                  fmt_empty_vector:
  8060 00000DC3 23282900                	db `#()\0`
  8061                                  fmt_vector:
  8062 00000DC7 232800                  	db `#(\0`
  8063                                  fmt_real:
  8064 00000DCA 256600                  	db `%f\0`
  8065                                  fmt_fraction:
  8066 00000DCD 256C642F256C6400        	db `%ld/%ld\0`
  8067                                  fmt_zero:
  8068 00000DD5 3000                    	db `0\0`
  8069                                  fmt_int:
  8070 00000DD7 256C6400                	db `%ld\0`
  8071                                  fmt_unknown_scheme_object_error:
  8072 00000DDB 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
  8072 00000DE4 6F723A20556E6B6E6F-
  8072 00000DED 776E20536368656D65-
  8072 00000DF6 2D6F626A6563742028-
  8072 00000DFF 525454492030782530-
  8072 00000E08 32582920           
  8073 00000E0C 617420616464726573-     	db `at address 0x%08X\n\n\0`
  8073 00000E15 73203078253038580A-
  8073 00000E1E 0A00               
  8074                                  fmt_dquote:
  8075 00000E20 2200                    	db `\"\0`
  8076                                  fmt_string_char:
  8077 00000E22 256300                          db `%c\0`
  8078                                  fmt_string_char_7:
  8079 00000E25 5C6100                          db `\\a\0`
  8080                                  fmt_string_char_8:
  8081 00000E28 5C6200                          db `\\b\0`
  8082                                  fmt_string_char_9:
  8083 00000E2B 5C7400                          db `\\t\0`
  8084                                  fmt_string_char_10:
  8085 00000E2E 5C6E00                          db `\\n\0`
  8086                                  fmt_string_char_11:
  8087 00000E31 5C7600                          db `\\v\0`
  8088                                  fmt_string_char_12:
  8089 00000E34 5C6600                          db `\\f\0`
  8090                                  fmt_string_char_13:
  8091 00000E37 5C7200                          db `\\r\0`
  8092                                  fmt_string_char_34:
  8093 00000E3A 5C2200                          db `\\"\0`
  8094                                  fmt_string_char_92:
  8095 00000E3D 5C5C00                          db `\\\\\0`
  8096                                  fmt_string_char_hex:
  8097 00000E40 5C7825583B00                    db `\\x%X;\0`
  8098                                  
  8099                                  section .text
  8100                                  
  8101                                  print_sexpr:
  8102 00005A1D C8000000                	enter 0, 0
  8103 00005A21 8A07                    	mov al, byte [rdi]
  8104 00005A23 3C00                    	cmp al, T_void
  8105 00005A25 7465                    	je .Lvoid
  8106 00005A27 3C01                    	cmp al, T_nil
  8107 00005A29 7470                    	je .Lnil
  8108 00005A2B 3C09                    	cmp al, T_boolean_false
  8109 00005A2D 747B                    	je .Lboolean_false
  8110 00005A2F 3C0A                    	cmp al, T_boolean_true
  8111 00005A31 0F8482000000            	je .Lboolean_true
  8112 00005A37 3C02                    	cmp al, T_char
  8113 00005A39 0F8489000000            	je .Lchar
  8114 00005A3F 3C41                    	cmp al, T_interned_symbol
  8115 00005A41 0F84CB010000            	je .Linterned_symbol
  8116 00005A47 3C42                            cmp al, T_uninterned_symbol
  8117 00005A49 0F84EF010000                    je .Luninterned_symbol
  8118 00005A4F 3C21                    	cmp al, T_pair
  8119 00005A51 0F84FA010000            	je .Lpair
  8120 00005A57 3C22                    	cmp al, T_vector
  8121 00005A59 0F84C3020000            	je .Lvector
  8122 00005A5F 3C04                    	cmp al, T_closure
  8123 00005A61 0F8491010000            	je .Lclosure
  8124 00005A67 3C13                    	cmp al, T_real
  8125 00005A69 0F8454030000            	je .Lreal
  8126 00005A6F 3C12                    	cmp al, T_fraction
  8127 00005A71 0F847A030000            	je .Lfraction
  8128 00005A77 3C11                    	cmp al, T_integer
  8129 00005A79 0F84B3030000            	je .Linteger
  8130 00005A7F 3C03                    	cmp al, T_string
  8131 00005A81 0F84BE030000            	je .Lstring
  8132                                  
  8133 00005A87 E9F6040000              	jmp .Lunknown_sexpr_type
  8134                                  
  8135                                  .Lvoid:
  8136 00005A8C 48BF-                   	mov rdi, fmt_void
  8136 00005A8E [1B0D000000000000] 
  8137 00005A96 E91A050000              	jmp .Lemit
  8138                                  
  8139                                  .Lnil:
  8140 00005A9B 48BF-                   	mov rdi, fmt_nil
  8140 00005A9D [230D000000000000] 
  8141 00005AA5 E90B050000              	jmp .Lemit
  8142                                  
  8143                                  .Lboolean_false:
  8144 00005AAA 48BF-                   	mov rdi, fmt_boolean_false
  8144 00005AAC [260D000000000000] 
  8145 00005AB4 E9FC040000              	jmp .Lemit
  8146                                  
  8147                                  .Lboolean_true:
  8148 00005AB9 48BF-                   	mov rdi, fmt_boolean_true
  8148 00005ABB [290D000000000000] 
  8149 00005AC3 E9ED040000              	jmp .Lemit
  8150                                  
  8151                                  .Lchar:
  8152 00005AC8 8A4701                  	mov al, byte [rdi + 1]
  8153 00005ACB 3C20                    	cmp al, ' '
  8154 00005ACD 7E28                    	jle .Lchar_whitespace
  8155 00005ACF 3C5C                    	cmp al, 92 		; backslash
  8156 00005AD1 0F847C000000            	je .Lchar_backslash
  8157 00005AD7 3C22                    	cmp al, '"'
  8158 00005AD9 0F8483000000            	je .Lchar_dquote
  8159 00005ADF 4825FF000000            	and rax, 255
  8160 00005AE5 48BF-                   	mov rdi, fmt_char_simple
  8160 00005AE7 [340D000000000000] 
  8161 00005AEF 4889C6                  	mov rsi, rax
  8162 00005AF2 E9BE040000              	jmp .Lemit
  8163                                  
  8164                                  .Lchar_whitespace:
  8165 00005AF7 3C00                    	cmp al, 0
  8166 00005AF9 7476                    	je .Lchar_null
  8167 00005AFB 3C07                    	cmp al, 7
  8168 00005AFD 0F847D000000            	je .Lchar_bell
  8169 00005B03 3C08                    	cmp al, 8
  8170 00005B05 0F8484000000            	je .Lchar_backspace
  8171 00005B0B 3C09                    	cmp al, 9
  8172 00005B0D 0F848B000000            	je .Lchar_tab
  8173 00005B13 3C0A                    	cmp al, 10
  8174 00005B15 0F8492000000            	je .Lchar_newline
  8175 00005B1B 3C0C                    	cmp al, 12
  8176 00005B1D 0F8499000000            	je .Lchar_formfeed
  8177 00005B23 3C0D                    	cmp al, 13
  8178 00005B25 0F84A0000000            	je .Lchar_return
  8179 00005B2B 3C1B                    	cmp al, 27
  8180 00005B2D 0F84A7000000            	je .Lchar_escape
  8181 00005B33 4825FF000000            	and rax, 255
  8182 00005B39 3C20                    	cmp al, ' '
  8183 00005B3B 0F84A8000000            	je .Lchar_space
  8184 00005B41 48BF-                   	mov rdi, fmt_char_hex
  8184 00005B43 [800D000000000000] 
  8185 00005B4B 4889C6                  	mov rsi, rax
  8186 00005B4E E962040000              	jmp .Lemit	
  8187                                  
  8188                                  .Lchar_backslash:
  8189 00005B53 48BF-                   	mov rdi, fmt_char_backslash
  8189 00005B55 [2C0D000000000000] 
  8190 00005B5D E953040000              	jmp .Lemit
  8191                                  
  8192                                  .Lchar_dquote:
  8193 00005B62 48BF-                   	mov rdi, fmt_char_dquote
  8193 00005B64 [300D000000000000] 
  8194 00005B6C E944040000              	jmp .Lemit
  8195                                  
  8196                                  .Lchar_null:
  8197 00005B71 48BF-                   	mov rdi, fmt_char_null
  8197 00005B73 [390D000000000000] 
  8198 00005B7B E935040000              	jmp .Lemit
  8199                                  
  8200                                  .Lchar_bell:
  8201 00005B80 48BF-                   	mov rdi, fmt_char_bell
  8201 00005B82 [3F0D000000000000] 
  8202 00005B8A E926040000              	jmp .Lemit
  8203                                  
  8204                                  .Lchar_backspace:
  8205 00005B8F 48BF-                   	mov rdi, fmt_char_backspace
  8205 00005B91 [460D000000000000] 
  8206 00005B99 E917040000              	jmp .Lemit
  8207                                  
  8208                                  .Lchar_tab:
  8209 00005B9E 48BF-                   	mov rdi, fmt_char_tab
  8209 00005BA0 [520D000000000000] 
  8210 00005BA8 E908040000              	jmp .Lemit
  8211                                  
  8212                                  .Lchar_newline:
  8213 00005BAD 48BF-                   	mov rdi, fmt_char_newline
  8213 00005BAF [580D000000000000] 
  8214 00005BB7 E9F9030000              	jmp .Lemit
  8215                                  
  8216                                  .Lchar_formfeed:
  8217 00005BBC 48BF-                   	mov rdi, fmt_char_formfeed
  8217 00005BBE [620D000000000000] 
  8218 00005BC6 E9EA030000              	jmp .Lemit
  8219                                  
  8220                                  .Lchar_return:
  8221 00005BCB 48BF-                   	mov rdi, fmt_char_return
  8221 00005BCD [690D000000000000] 
  8222 00005BD5 E9DB030000              	jmp .Lemit
  8223                                  
  8224                                  .Lchar_escape:
  8225 00005BDA 48BF-                   	mov rdi, fmt_char_escape
  8225 00005BDC [720D000000000000] 
  8226 00005BE4 E9CC030000              	jmp .Lemit
  8227                                  
  8228                                  .Lchar_space:
  8229 00005BE9 48BF-                   	mov rdi, fmt_char_space
  8229 00005BEB [780D000000000000] 
  8230 00005BF3 E9BD030000              	jmp .Lemit
  8231                                  
  8232                                  .Lclosure:
  8233 00005BF8 4889FE                  	mov rsi, qword rdi
  8234 00005BFB 48BF-                   	mov rdi, fmt_closure
  8234 00005BFD [8D0D000000000000] 
  8235 00005C05 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  8236 00005C09 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  8237 00005C0D E9A3030000              	jmp .Lemit
  8238                                  
  8239                                  .Linterned_symbol:
  8240 00005C12 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  8241 00005C16 BE01000000              	mov rsi, 1		 ; size = 1 byte
  8242 00005C1B 488B5701                	mov rdx, qword [rdi + 1] ; length
  8243 00005C1F 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  8244 00005C23 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  8245                                  	ENTER
    44 00005C2B C8000000            <1>  enter 0, 0
    45 00005C2F 4883E4F0            <1>  and rsp, ~15
  8246 00005C33 E8(00000000)            	call fwrite
  8247                                  	LEAVE
    49 00005C38 C9                  <1>  leave
  8248 00005C39 E98C030000              	jmp .Lend
  8249                                  
  8250                                  .Luninterned_symbol:
  8251 00005C3E 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  8252 00005C42 48BF-                           mov rdi, fmt_gensym
  8252 00005C44 [880D000000000000] 
  8253 00005C4C E964030000                      jmp .Lemit
  8254                                  	
  8255                                  .Lpair:
  8256 00005C51 57                      	push rdi
  8257 00005C52 48BF-                   	mov rdi, fmt_lparen
  8257 00005C54 [B90D000000000000] 
  8258 00005C5C B800000000              	mov rax, 0
  8259                                          ENTER
    44 00005C61 C8000000            <1>  enter 0, 0
    45 00005C65 4883E4F0            <1>  and rsp, ~15
  8260 00005C69 E8(00000000)            	call printf
  8261                                          LEAVE
    49 00005C6E C9                  <1>  leave
  8262 00005C6F 488B3C24                	mov rdi, qword [rsp] 	; pair
  8263 00005C73 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  8264 00005C77 E8A1FDFFFF              	call print_sexpr
  8265 00005C7C 5F                      	pop rdi 		; pair
  8266 00005C7D 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  8267                                  .Lcdr:
  8268 00005C81 8A07                    	mov al, byte [rdi]
  8269 00005C83 3C01                    	cmp al, T_nil
  8270 00005C85 7447                    	je .Lcdr_nil
  8271 00005C87 3C21                    	cmp al, T_pair
  8272 00005C89 7462                    	je .Lcdr_pair
  8273 00005C8B 57                      	push rdi
  8274 00005C8C 48BF-                   	mov rdi, fmt_dotted_pair
  8274 00005C8E [BB0D000000000000] 
  8275 00005C96 B800000000              	mov rax, 0
  8276                                          ENTER
    44 00005C9B C8000000            <1>  enter 0, 0
    45 00005C9F 4883E4F0            <1>  and rsp, ~15
  8277 00005CA3 E8(00000000)            	call printf
  8278                                          LEAVE
    49 00005CA8 C9                  <1>  leave
  8279 00005CA9 5F                      	pop rdi
  8280 00005CAA E86EFDFFFF              	call print_sexpr
  8281 00005CAF 48BF-                   	mov rdi, fmt_rparen
  8281 00005CB1 [BF0D000000000000] 
  8282 00005CB9 B800000000              	mov rax, 0
  8283                                          ENTER
    44 00005CBE C8000000            <1>  enter 0, 0
    45 00005CC2 4883E4F0            <1>  and rsp, ~15
  8284 00005CC6 E8(00000000)            	call printf
  8285                                          LEAVE
    49 00005CCB C9                  <1>  leave
  8286 00005CCC C9                      	leave
  8287 00005CCD C3                      	ret
  8288                                  
  8289                                  .Lcdr_nil:
  8290 00005CCE 48BF-                   	mov rdi, fmt_rparen
  8290 00005CD0 [BF0D000000000000] 
  8291 00005CD8 B800000000              	mov rax, 0
  8292                                          ENTER
    44 00005CDD C8000000            <1>  enter 0, 0
    45 00005CE1 4883E4F0            <1>  and rsp, ~15
  8293 00005CE5 E8(00000000)            	call printf
  8294                                          LEAVE
    49 00005CEA C9                  <1>  leave
  8295 00005CEB C9                      	leave
  8296 00005CEC C3                      	ret
  8297                                  
  8298                                  .Lcdr_pair:
  8299 00005CED 57                      	push rdi
  8300 00005CEE 48BF-                   	mov rdi, fmt_space
  8300 00005CF0 [C10D000000000000] 
  8301 00005CF8 B800000000              	mov rax, 0
  8302                                          ENTER
    44 00005CFD C8000000            <1>  enter 0, 0
    45 00005D01 4883E4F0            <1>  and rsp, ~15
  8303 00005D05 E8(00000000)            	call printf
  8304                                          LEAVE
    49 00005D0A C9                  <1>  leave
  8305 00005D0B 488B3C24                	mov rdi, qword [rsp]
  8306 00005D0F 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  8307 00005D13 E805FDFFFF              	call print_sexpr
  8308 00005D18 5F                      	pop rdi
  8309 00005D19 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  8310 00005D1D E95FFFFFFF              	jmp .Lcdr
  8311                                  
  8312                                  .Lvector:
  8313 00005D22 488B4701                	mov rax, qword [rdi + 1] ; length
  8314 00005D26 4883F800                	cmp rax, 0
  8315 00005D2A 0F8484000000            	je .Lvector_empty
  8316 00005D30 57                      	push rdi
  8317 00005D31 48BF-                   	mov rdi, fmt_vector
  8317 00005D33 [C70D000000000000] 
  8318 00005D3B B800000000              	mov rax, 0
  8319                                          ENTER
    44 00005D40 C8000000            <1>  enter 0, 0
    45 00005D44 4883E4F0            <1>  and rsp, ~15
  8320 00005D48 E8(00000000)            	call printf
  8321                                          LEAVE
    49 00005D4D C9                  <1>  leave
  8322 00005D4E 488B3C24                	mov rdi, qword [rsp]
  8323 00005D52 FF7701                  	push qword [rdi + 1]
  8324 00005D55 6A01                    	push 1
  8325 00005D57 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  8326 00005D5B E8BDFCFFFF              	call print_sexpr
  8327                                  .Lvector_loop:
  8328                                  	; [rsp] index
  8329                                  	; [rsp + 8*1] limit
  8330                                  	; [rsp + 8*2] vector
  8331 00005D60 488B0424                	mov rax, qword [rsp]
  8332 00005D64 483B442408              	cmp rax, qword [rsp + 8*1]
  8333 00005D69 7436                    	je .Lvector_end
  8334 00005D6B 48BF-                   	mov rdi, fmt_space
  8334 00005D6D [C10D000000000000] 
  8335 00005D75 B800000000              	mov rax, 0
  8336                                          ENTER
    44 00005D7A C8000000            <1>  enter 0, 0
    45 00005D7E 4883E4F0            <1>  and rsp, ~15
  8337 00005D82 E8(00000000)            	call printf
  8338                                          LEAVE
    49 00005D87 C9                  <1>  leave
  8339 00005D88 488B0424                	mov rax, qword [rsp]
  8340 00005D8C 488B5C2410              	mov rbx, qword [rsp + 8*2]
  8341 00005D91 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  8342 00005D96 E882FCFFFF              	call print_sexpr
  8343 00005D9B 48FF0424                	inc qword [rsp]
  8344 00005D9F EBBF                    	jmp .Lvector_loop
  8345                                  
  8346                                  .Lvector_end:
  8347 00005DA1 4883C418                	add rsp, 8*3
  8348 00005DA5 48BF-                   	mov rdi, fmt_rparen
  8348 00005DA7 [BF0D000000000000] 
  8349 00005DAF E901020000              	jmp .Lemit	
  8350                                  
  8351                                  .Lvector_empty:
  8352 00005DB4 48BF-                   	mov rdi, fmt_empty_vector
  8352 00005DB6 [C30D000000000000] 
  8353 00005DBE E9F2010000              	jmp .Lemit
  8354                                  
  8355                                  .Lreal:
  8356 00005DC3 FF7701                  	push qword [rdi + 1]
  8357 00005DC6 F20F100424              	movsd xmm0, qword [rsp]
  8358 00005DCB 4883C408                	add rsp, 8*1
  8359 00005DCF 48BF-                   	mov rdi, fmt_real
  8359 00005DD1 [CA0D000000000000] 
  8360 00005DD9 B801000000              	mov rax, 1
  8361                                  	ENTER
    44 00005DDE C8000000            <1>  enter 0, 0
    45 00005DE2 4883E4F0            <1>  and rsp, ~15
  8362 00005DE6 E8(00000000)            	call printf
  8363                                  	LEAVE
    49 00005DEB C9                  <1>  leave
  8364 00005DEC E9D9010000              	jmp .Lend
  8365                                  
  8366                                  .Lfraction:
  8367 00005DF1 488B7701                	mov rsi, qword [rdi + 1]
  8368 00005DF5 488B5709                	mov rdx, qword [rdi + 1 + 8]
  8369 00005DF9 4883FE00                	cmp rsi, 0
  8370 00005DFD 7415                    	je .Lrat_zero
  8371 00005DFF 4883FA01                	cmp rdx, 1
  8372 00005E03 741E                    	je .Lrat_int
  8373 00005E05 48BF-                   	mov rdi, fmt_fraction
  8373 00005E07 [CD0D000000000000] 
  8374 00005E0F E9A1010000              	jmp .Lemit
  8375                                  
  8376                                  .Lrat_zero:
  8377 00005E14 48BF-                   	mov rdi, fmt_zero
  8377 00005E16 [D50D000000000000] 
  8378 00005E1E E992010000              	jmp .Lemit
  8379                                  
  8380                                  .Lrat_int:
  8381 00005E23 48BF-                   	mov rdi, fmt_int
  8381 00005E25 [D70D000000000000] 
  8382 00005E2D E983010000              	jmp .Lemit
  8383                                  
  8384                                  .Linteger:
  8385 00005E32 488B7701                	mov rsi, qword [rdi + 1]
  8386 00005E36 48BF-                   	mov rdi, fmt_int
  8386 00005E38 [D70D000000000000] 
  8387 00005E40 E970010000              	jmp .Lemit
  8388                                  
  8389                                  .Lstring:
  8390 00005E45 488D4709                	lea rax, [rdi + 1 + 8]
  8391 00005E49 50                      	push rax
  8392 00005E4A FF7701                  	push qword [rdi + 1]
  8393 00005E4D 48BF-                   	mov rdi, fmt_dquote
  8393 00005E4F [200E000000000000] 
  8394 00005E57 B800000000              	mov rax, 0
  8395                                  	ENTER
    44 00005E5C C8000000            <1>  enter 0, 0
    45 00005E60 4883E4F0            <1>  and rsp, ~15
  8396 00005E64 E8(00000000)            	call printf
  8397                                  	LEAVE
    49 00005E69 C9                  <1>  leave
  8398                                  .Lstring_loop:
  8399                                  	; qword [rsp]: limit
  8400                                  	; qword [rsp + 8*1]: char *
  8401 00005E6A 48833C2400              	cmp qword [rsp], 0
  8402 00005E6F 0F84FD000000            	je .Lstring_end
  8403 00005E75 488B442408              	mov rax, qword [rsp + 8*1]
  8404 00005E7A 8A00                    	mov al, byte [rax]
  8405 00005E7C 4825FF000000            	and rax, 255
  8406 00005E82 3C07                    	cmp al, 7
  8407 00005E84 7468                            je .Lstring_char_7
  8408 00005E86 3C08                            cmp al, 8
  8409 00005E88 7470                            je .Lstring_char_8
  8410 00005E8A 3C09                            cmp al, 9
  8411 00005E8C 7478                            je .Lstring_char_9
  8412 00005E8E 3C0A                            cmp al, 10
  8413 00005E90 0F847C000000                    je .Lstring_char_10
  8414 00005E96 3C0B                            cmp al, 11
  8415 00005E98 0F8480000000                    je .Lstring_char_11
  8416 00005E9E 3C0C                            cmp al, 12
  8417 00005EA0 0F8484000000                    je .Lstring_char_12
  8418 00005EA6 3C0D                            cmp al, 13
  8419 00005EA8 0F8488000000                    je .Lstring_char_13
  8420 00005EAE 3C22                            cmp al, 34
  8421 00005EB0 0F848C000000                    je .Lstring_char_34
  8422 00005EB6 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  8424 00005EB8 3C20                            cmp al, ' '
  8425 00005EBA 0F8CA0000000                    jl .Lstring_char_hex
  8426 00005EC0 48BF-                           mov rdi, fmt_string_char
  8426 00005EC2 [220E000000000000] 
  8427 00005ECA 4889C6                          mov rsi, rax
  8428                                  .Lstring_char_emit:
  8429 00005ECD B800000000                      mov rax, 0
  8430                                          ENTER
    44 00005ED2 C8000000            <1>  enter 0, 0
    45 00005ED6 4883E4F0            <1>  and rsp, ~15
  8431 00005EDA E8(00000000)                    call printf
  8432                                          LEAVE
    49 00005EDF C9                  <1>  leave
  8433 00005EE0 48FF0C24                        dec qword [rsp]
  8434 00005EE4 48FF442408                      inc qword [rsp + 8*1]
  8435 00005EE9 E97CFFFFFF                      jmp .Lstring_loop
  8436                                  
  8437                                  .Lstring_char_7:
  8438 00005EEE 48BF-                           mov rdi, fmt_string_char_7
  8438 00005EF0 [250E000000000000] 
  8439 00005EF8 EBD3                            jmp .Lstring_char_emit
  8440                                  
  8441                                  .Lstring_char_8:
  8442 00005EFA 48BF-                           mov rdi, fmt_string_char_8
  8442 00005EFC [280E000000000000] 
  8443 00005F04 EBC7                            jmp .Lstring_char_emit
  8444                                          
  8445                                  .Lstring_char_9:
  8446 00005F06 48BF-                           mov rdi, fmt_string_char_9
  8446 00005F08 [2B0E000000000000] 
  8447 00005F10 EBBB                            jmp .Lstring_char_emit
  8448                                  
  8449                                  .Lstring_char_10:
  8450 00005F12 48BF-                           mov rdi, fmt_string_char_10
  8450 00005F14 [2E0E000000000000] 
  8451 00005F1C EBAF                            jmp .Lstring_char_emit
  8452                                  
  8453                                  .Lstring_char_11:
  8454 00005F1E 48BF-                           mov rdi, fmt_string_char_11
  8454 00005F20 [310E000000000000] 
  8455 00005F28 EBA3                            jmp .Lstring_char_emit
  8456                                  
  8457                                  .Lstring_char_12:
  8458 00005F2A 48BF-                           mov rdi, fmt_string_char_12
  8458 00005F2C [340E000000000000] 
  8459 00005F34 EB97                            jmp .Lstring_char_emit
  8460                                  
  8461                                  .Lstring_char_13:
  8462 00005F36 48BF-                           mov rdi, fmt_string_char_13
  8462 00005F38 [370E000000000000] 
  8463 00005F40 EB8B                            jmp .Lstring_char_emit
  8464                                  
  8465                                  .Lstring_char_34:
  8466 00005F42 48BF-                           mov rdi, fmt_string_char_34
  8466 00005F44 [3A0E000000000000] 
  8467 00005F4C E97CFFFFFF                      jmp .Lstring_char_emit
  8468                                  
  8469                                  .Lstring_char_92:
  8470 00005F51 48BF-                           mov rdi, fmt_string_char_92
  8470 00005F53 [3D0E000000000000] 
  8471 00005F5B E96DFFFFFF                      jmp .Lstring_char_emit
  8472                                  
  8473                                  .Lstring_char_hex:
  8474 00005F60 48BF-                           mov rdi, fmt_string_char_hex
  8474 00005F62 [400E000000000000] 
  8475 00005F6A 4889C6                          mov rsi, rax
  8476 00005F6D E95BFFFFFF                      jmp .Lstring_char_emit        
  8477                                  
  8478                                  .Lstring_end:
  8479 00005F72 4883C410                	add rsp, 8 * 2
  8480 00005F76 48BF-                   	mov rdi, fmt_dquote
  8480 00005F78 [200E000000000000] 
  8481 00005F80 EB33                    	jmp .Lemit
  8482                                  
  8483                                  .Lunknown_sexpr_type:
  8484 00005F82 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  8484 00005F84 [DB0D000000000000] 
  8485 00005F8C 4825FF000000            	and rax, 255
  8486 00005F92 4889C2                  	mov rdx, rax
  8487 00005F95 4889F9                  	mov rcx, rdi
  8488 00005F98 488B3C25[00000000]      	mov rdi, qword [stderr]
  8489 00005FA0 B800000000              	mov rax, 0
  8490                                          ENTER
    44 00005FA5 C8000000            <1>  enter 0, 0
    45 00005FA9 4883E4F0            <1>  and rsp, ~15
  8491 00005FAD E8(00000000)            	call fprintf
  8492                                          LEAVE
    49 00005FB2 C9                  <1>  leave
  8493 00005FB3 C9                              leave
  8494 00005FB4 C3                              ret
  8495                                  
  8496                                  .Lemit:
  8497 00005FB5 B800000000              	mov rax, 0
  8498                                          ENTER
    44 00005FBA C8000000            <1>  enter 0, 0
    45 00005FBE 4883E4F0            <1>  and rsp, ~15
  8499 00005FC2 E8(00000000)            	call printf
  8500                                          LEAVE
    49 00005FC7 C9                  <1>  leave
  8501 00005FC8 EB00                    	jmp .Lend
  8502                                  
  8503                                  .Lend:
  8504                                  	LEAVE
    49 00005FCA C9                  <1>  leave
  8505 00005FCB C3                      	ret
  8506                                  
  8507                                  ;;; rdi: address of free variable
  8508                                  ;;; rsi: address of code-pointer
  8509                                  bind_primitive:
  8510 00005FCC C8000000                        enter 0, 0
  8511 00005FD0 57                              push rdi
  8512 00005FD1 BF11000000                      mov rdi, (1 + 8 + 8)
  8513 00005FD6 E8C1F7FFFF                      call malloc
  8514 00005FDB 5F                              pop rdi
  8515 00005FDC C60004                          mov byte [rax], T_closure
  8516 00005FDF 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  8517 00005FE7 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  8518 00005FEB 488907                          mov qword [rdi], rax
  8519 00005FEE 48B8-                           mov rax, sob_void
  8519 00005FF0 [0000000000000000] 
  8520 00005FF8 C9                              leave
  8521 00005FF9 C3                              ret
  8522                                  
  8523                                  L_code_ptr_ash:
  8524 00005FFA C8000000                        enter 0, 0
  8525 00005FFE 48837D1802                      cmp COUNT, 2
  8526 00006003 0F8597140000                    jne L_error_arg_count_2
  8527 00006009 488B7D20                        mov rdi, PARAM(0)
  8528                                          assert_integer(rdi)
    53 0000600D 803F11              <1>  cmp byte [%1], %2
    54 00006010 0F8529150000        <1>  jne L_error_incorrect_type
  8529 00006016 488B4D28                        mov rcx, PARAM(1)
  8530                                          assert_integer(rcx)
    53 0000601A 803911              <1>  cmp byte [%1], %2
    54 0000601D 0F851C150000        <1>  jne L_error_incorrect_type
  8531 00006023 488B7F01                        mov rdi, qword [rdi + 1]
  8532 00006027 488B4901                        mov rcx, qword [rcx + 1]
  8533 0000602B 4883F900                        cmp rcx, 0
  8534 0000602F 7C0F                            jl .L_negative
  8535                                  .L_loop_positive:
  8536 00006031 4883F900                        cmp rcx, 0
  8537 00006035 741B                            je .L_exit
  8538 00006037 48D3E7                          sal rdi, cl
  8539 0000603A 48C1E908                        shr rcx, 8
  8540 0000603E EBF1                            jmp .L_loop_positive
  8541                                  .L_negative:
  8542 00006040 48F7D9                          neg rcx
  8543                                  .L_loop_negative:
  8544 00006043 4883F900                        cmp rcx, 0
  8545 00006047 7409                            je .L_exit
  8546 00006049 48D3FF                          sar rdi, cl
  8547 0000604C 48C1E908                        shr rcx, 8
  8548 00006050 EBF1                            jmp .L_loop_negative
  8549                                  .L_exit:
  8550 00006052 E863130000                      call make_integer
  8551 00006057 C9                              leave
  8552 00006058 C22000                          ret AND_KILL_FRAME(2)
  8553                                  
  8554                                  L_code_ptr_logand:
  8555 0000605B C8000000                        enter 0, 0
  8556 0000605F 48837D1802                      cmp COUNT, 2
  8557 00006064 0F8536140000                    jne L_error_arg_count_2
  8558 0000606A 4C8B4520                        mov r8, PARAM(0)
  8559                                          assert_integer(r8)
    53 0000606E 41803811            <1>  cmp byte [%1], %2
    54 00006072 0F85C7140000        <1>  jne L_error_incorrect_type
  8560 00006078 4C8B4D28                        mov r9, PARAM(1)
  8561                                          assert_integer(r9)
    53 0000607C 41803911            <1>  cmp byte [%1], %2
    54 00006080 0F85B9140000        <1>  jne L_error_incorrect_type
  8562 00006086 498B7801                        mov rdi, qword [r8 + 1]
  8563 0000608A 49237901                        and rdi, qword [r9 + 1]
  8564 0000608E E827130000                      call make_integer
  8565 00006093 C9                              leave
  8566 00006094 C22000                          ret AND_KILL_FRAME(2)
  8567                                  
  8568                                  L_code_ptr_logor:
  8569 00006097 C8000000                        enter 0, 0
  8570 0000609B 48837D1802                      cmp COUNT, 2
  8571 000060A0 0F85FA130000                    jne L_error_arg_count_2
  8572 000060A6 4C8B4520                        mov r8, PARAM(0)
  8573                                          assert_integer(r8)
    53 000060AA 41803811            <1>  cmp byte [%1], %2
    54 000060AE 0F858B140000        <1>  jne L_error_incorrect_type
  8574 000060B4 4C8B4D28                        mov r9, PARAM(1)
  8575                                          assert_integer(r9)
    53 000060B8 41803911            <1>  cmp byte [%1], %2
    54 000060BC 0F857D140000        <1>  jne L_error_incorrect_type
  8576 000060C2 498B7801                        mov rdi, qword [r8 + 1]
  8577 000060C6 490B7901                        or rdi, qword [r9 + 1]
  8578 000060CA E8EB120000                      call make_integer
  8579 000060CF C9                              leave
  8580 000060D0 C22000                          ret AND_KILL_FRAME(2)
  8581                                  
  8582                                  L_code_ptr_logxor:
  8583 000060D3 C8000000                        enter 0, 0
  8584 000060D7 48837D1802                      cmp COUNT, 2
  8585 000060DC 0F85BE130000                    jne L_error_arg_count_2
  8586 000060E2 4C8B4520                        mov r8, PARAM(0)
  8587                                          assert_integer(r8)
    53 000060E6 41803811            <1>  cmp byte [%1], %2
    54 000060EA 0F854F140000        <1>  jne L_error_incorrect_type
  8588 000060F0 4C8B4D28                        mov r9, PARAM(1)
  8589                                          assert_integer(r9)
    53 000060F4 41803911            <1>  cmp byte [%1], %2
    54 000060F8 0F8541140000        <1>  jne L_error_incorrect_type
  8590 000060FE 498B7801                        mov rdi, qword [r8 + 1]
  8591 00006102 49337901                        xor rdi, qword [r9 + 1]
  8592 00006106 E8AF120000                      call make_integer
  8593                                          LEAVE
    49 0000610B C9                  <1>  leave
  8594 0000610C C22000                          ret AND_KILL_FRAME(2)
  8595                                  
  8596                                  L_code_ptr_lognot:
  8597 0000610F C8000000                        enter 0, 0
  8598 00006113 48837D1801                      cmp COUNT, 1
  8599 00006118 0F854D130000                    jne L_error_arg_count_1
  8600 0000611E 4C8B4520                        mov r8, PARAM(0)
  8601                                          assert_integer(r8)
    53 00006122 41803811            <1>  cmp byte [%1], %2
    54 00006126 0F8513140000        <1>  jne L_error_incorrect_type
  8602 0000612C 498B7801                        mov rdi, qword [r8 + 1]
  8603 00006130 48F7D7                          not rdi
  8604 00006133 E882120000                      call make_integer
  8605 00006138 C9                              leave
  8606 00006139 C21800                          ret AND_KILL_FRAME(1)
  8607                                  
  8608                                  ;;; fill in for final project!
  8609                                  L_code_ptr_bin_apply:
  8610 0000613C 4989E8                  mov r8, rbp
  8611 0000613F FF7500                  push  qword [rbp]
  8612 00006142 4889E5                  mov rbp, rsp
  8613                                  
  8614                                  ;calc args
  8615 00006145 4C8B4D28                mov r9, PARAM(1) ; save for later start of the params
  8616 00006149 4D89CA                  mov r10, r9 
  8617 0000614C B900000000              mov rcx, 0 ;args count
  8618                                  
  8619                                  .L_args_loop:
  8620 00006151 4981FA[01000000]                cmp r10, sob_nil
  8621 00006158 7413                            je .L_args_end
  8622                                          assert_pair(r10)
    53 0000615A 41803A21            <1>  cmp byte [%1], %2
    54 0000615E 0F85DB130000        <1>  jne L_error_incorrect_type
  8623 00006164 4D8B5209                        mov r10, SOB_PAIR_CDR(r10)
  8624 00006168 48FFC1                          inc rcx
  8625 0000616B EBE4                            jmp .L_args_loop
  8626                                  
  8627                                  .L_args_end:
  8628                                          ;set place in the stack
  8629 0000616D 4C8D14CDE8FFFFFF                lea r10, [8*(rcx -3)]
  8630 00006175 4C29D4                          sub rsp, r10
  8631                                  
  8632                                          ;save ret afddress
  8633 00006178 4C8B5508                        mov r10, RET_ADDR
  8634 0000617C 4C891424                        mov qword [rsp], r10
  8635                                  
  8636                                          ;save lexical env
  8637 00006180 488B7520                        mov rsi, PARAM(0)
  8638                                          assert_closure(rsi)
    53 00006184 803E04              <1>  cmp byte [%1], %2
    54 00006187 0F85B2130000        <1>  jne L_error_incorrect_type
  8639 0000618D 4C8B5601                        mov r10, SOB_CLOSURE_ENV(rsi)
  8640 00006191 4C89542408                      mov qword [rsp + 8], r10
  8641                                  
  8642                                          ;save argc
  8643 00006196 48894C2410                      mov qword [rsp + 2*8], rcx
  8644                                  
  8645                                          ;save params
  8646 0000619B 4C8D542418                      lea r10, [rsp + 3*8]
  8647 000061A0 4D89CB                          mov r11, r9
  8648                                          .L_params_loop:
  8649 000061A3 4981FB[01000000]                        cmp r11, sob_nil
  8650 000061AA 7411                                    je .L_params_end
  8651 000061AC 4D8B6301                                mov r12, SOB_PAIR_CAR(r11)
  8652 000061B0 4D8922                                  mov qword [r10], r12
  8653 000061B3 4D8B5B09                                mov r11, SOB_PAIR_CDR(r11)
  8654 000061B7 4983C208                                add r10, 8
  8655 000061BB EBE6                                    jmp .L_params_loop
  8656                                          .L_params_end:
  8657 000061BD 4C89C5                                  mov rbp, r8
  8658 000061C0 FF6609                                  jmp SOB_CLOSURE_CODE(rsi)
  8659                                  
  8660                                  L_code_ptr_is_null:
  8661 000061C3 C8000000                        enter 0, 0
  8662 000061C7 48837D1801                      cmp COUNT, 1
  8663 000061CC 0F8599120000                    jne L_error_arg_count_1
  8664 000061D2 488B4520                        mov rax, PARAM(0)
  8665 000061D6 803801                          cmp byte [rax], T_nil
  8666 000061D9 750C                            jne .L_false
  8667 000061DB 48B8-                           mov rax, sob_boolean_true
  8667 000061DD [0300000000000000] 
  8668 000061E5 EB0A                            jmp .L_end
  8669                                  .L_false:
  8670 000061E7 48B8-                           mov rax, sob_boolean_false
  8670 000061E9 [0200000000000000] 
  8671                                  .L_end:
  8672 000061F1 C9                              leave
  8673 000061F2 C21800                          ret AND_KILL_FRAME(1)
  8674                                  
  8675                                  L_code_ptr_is_pair:
  8676 000061F5 C8000000                        enter 0, 0
  8677 000061F9 48837D1801                      cmp COUNT, 1
  8678 000061FE 0F8567120000                    jne L_error_arg_count_1
  8679 00006204 488B4520                        mov rax, PARAM(0)
  8680 00006208 803821                          cmp byte [rax], T_pair
  8681 0000620B 750C                            jne .L_false
  8682 0000620D 48B8-                           mov rax, sob_boolean_true
  8682 0000620F [0300000000000000] 
  8683 00006217 EB0A                            jmp .L_end
  8684                                  .L_false:
  8685 00006219 48B8-                           mov rax, sob_boolean_false
  8685 0000621B [0200000000000000] 
  8686                                  .L_end:
  8687 00006223 C9                              leave
  8688 00006224 C21800                          ret AND_KILL_FRAME(1)
  8689                                          
  8690                                  L_code_ptr_is_void:
  8691 00006227 C8000000                        enter 0, 0
  8692 0000622B 48837D1801                      cmp COUNT, 1
  8693 00006230 0F8535120000                    jne L_error_arg_count_1
  8694 00006236 488B4520                        mov rax, PARAM(0)
  8695 0000623A 803800                          cmp byte [rax], T_void
  8696 0000623D 750C                            jne .L_false
  8697 0000623F 48B8-                           mov rax, sob_boolean_true
  8697 00006241 [0300000000000000] 
  8698 00006249 EB0A                            jmp .L_end
  8699                                  .L_false:
  8700 0000624B 48B8-                           mov rax, sob_boolean_false
  8700 0000624D [0200000000000000] 
  8701                                  .L_end:
  8702 00006255 C9                              leave
  8703 00006256 C21800                          ret AND_KILL_FRAME(1)
  8704                                  
  8705                                  L_code_ptr_is_char:
  8706 00006259 C8000000                        enter 0, 0
  8707 0000625D 48837D1801                      cmp COUNT, 1
  8708 00006262 0F8503120000                    jne L_error_arg_count_1
  8709 00006268 488B4520                        mov rax, PARAM(0)
  8710 0000626C 803802                          cmp byte [rax], T_char
  8711 0000626F 750C                            jne .L_false
  8712 00006271 48B8-                           mov rax, sob_boolean_true
  8712 00006273 [0300000000000000] 
  8713 0000627B EB0A                            jmp .L_end
  8714                                  .L_false:
  8715 0000627D 48B8-                           mov rax, sob_boolean_false
  8715 0000627F [0200000000000000] 
  8716                                  .L_end:
  8717 00006287 C9                              leave
  8718 00006288 C21800                          ret AND_KILL_FRAME(1)
  8719                                  
  8720                                  L_code_ptr_is_string:
  8721 0000628B C8000000                        enter 0, 0
  8722 0000628F 48837D1801                      cmp COUNT, 1
  8723 00006294 0F85D1110000                    jne L_error_arg_count_1
  8724 0000629A 488B4520                        mov rax, PARAM(0)
  8725 0000629E 803803                          cmp byte [rax], T_string
  8726 000062A1 750C                            jne .L_false
  8727 000062A3 48B8-                           mov rax, sob_boolean_true
  8727 000062A5 [0300000000000000] 
  8728 000062AD EB0A                            jmp .L_end
  8729                                  .L_false:
  8730 000062AF 48B8-                           mov rax, sob_boolean_false
  8730 000062B1 [0200000000000000] 
  8731                                  .L_end:
  8732 000062B9 C9                              leave
  8733 000062BA C21800                          ret AND_KILL_FRAME(1)
  8734                                  
  8735                                  L_code_ptr_is_symbol:
  8736 000062BD C8000000                        enter 0, 0
  8737 000062C1 48837D1801                      cmp COUNT, 1
  8738 000062C6 0F859F110000                    jne L_error_arg_count_1
  8739 000062CC 4C8B4520                        mov r8, PARAM(0)
  8740 000062D0 41802040                        and byte [r8], T_symbol
  8741 000062D4 740C                            jz .L_false
  8742 000062D6 48B8-                           mov rax, sob_boolean_true
  8742 000062D8 [0300000000000000] 
  8743 000062E0 EB0A                            jmp .L_exit
  8744                                  .L_false:
  8745 000062E2 48B8-                           mov rax, sob_boolean_false
  8745 000062E4 [0200000000000000] 
  8746                                  .L_exit:
  8747 000062EC C9                              leave
  8748 000062ED C21800                          ret AND_KILL_FRAME(1)
  8749                                  
  8750                                  L_code_ptr_is_uninterned_symbol:
  8751 000062F0 C8000000                        enter 0, 0
  8752 000062F4 48837D1801                      cmp COUNT, 1
  8753 000062F9 0F856C110000                    jne L_error_arg_count_1
  8754 000062FF 4C8B4520                        mov r8, PARAM(0)
  8755 00006303 41803842                        cmp byte [r8], T_uninterned_symbol
  8756 00006307 750C                            jne .L_false
  8757 00006309 48B8-                           mov rax, sob_boolean_true
  8757 0000630B [0300000000000000] 
  8758 00006313 EB0A                            jmp .L_exit
  8759                                  .L_false:
  8760 00006315 48B8-                           mov rax, sob_boolean_false
  8760 00006317 [0200000000000000] 
  8761                                  .L_exit:
  8762 0000631F C9                              leave
  8763 00006320 C21800                          ret AND_KILL_FRAME(1)
  8764                                  
  8765                                  L_code_ptr_is_interned_symbol:
  8766 00006323 C8000000                        enter 0, 0
  8767 00006327 48837D1801                      cmp COUNT, 1
  8768 0000632C 0F8539110000                    jne L_error_arg_count_1
  8769 00006332 488B4520                        mov rax, PARAM(0)
  8770 00006336 803841                          cmp byte [rax], T_interned_symbol
  8771 00006339 750C                            jne .L_false
  8772 0000633B 48B8-                           mov rax, sob_boolean_true
  8772 0000633D [0300000000000000] 
  8773 00006345 EB0A                            jmp .L_end
  8774                                  .L_false:
  8775 00006347 48B8-                           mov rax, sob_boolean_false
  8775 00006349 [0200000000000000] 
  8776                                  .L_end:
  8777 00006351 C9                              leave
  8778 00006352 C21800                          ret AND_KILL_FRAME(1)
  8779                                  
  8780                                  L_code_ptr_gensym:
  8781 00006355 C8000000                        enter 0, 0
  8782 00006359 48837D1800                      cmp COUNT, 0
  8783 0000635E 0F85D2100000                    jne L_error_arg_count_0
  8784 00006364 48FF0425[460E0000]              inc qword [gensym_count]
  8785 0000636C BF09000000                      mov rdi, (1 + 8)
  8786 00006371 E826F4FFFF                      call malloc
  8787 00006376 C60042                          mov byte [rax], T_uninterned_symbol
  8788 00006379 488B0C25[460E0000]              mov rcx, qword [gensym_count]
  8789 00006381 48894801                        mov qword [rax + 1], rcx
  8790 00006385 C9                              leave
  8791 00006386 C21000                          ret AND_KILL_FRAME(0)
  8792                                  
  8793                                  L_code_ptr_is_vector:
  8794 00006389 C8000000                        enter 0, 0
  8795 0000638D 48837D1801                      cmp COUNT, 1
  8796 00006392 0F85D3100000                    jne L_error_arg_count_1
  8797 00006398 488B4520                        mov rax, PARAM(0)
  8798 0000639C 803822                          cmp byte [rax], T_vector
  8799 0000639F 750C                            jne .L_false
  8800 000063A1 48B8-                           mov rax, sob_boolean_true
  8800 000063A3 [0300000000000000] 
  8801 000063AB EB0A                            jmp .L_end
  8802                                  .L_false:
  8803 000063AD 48B8-                           mov rax, sob_boolean_false
  8803 000063AF [0200000000000000] 
  8804                                  .L_end:
  8805 000063B7 C9                              leave
  8806 000063B8 C21800                          ret AND_KILL_FRAME(1)
  8807                                  
  8808                                  L_code_ptr_is_closure:
  8809 000063BB C8000000                        enter 0, 0
  8810 000063BF 48837D1801                      cmp COUNT, 1
  8811 000063C4 0F85A1100000                    jne L_error_arg_count_1
  8812 000063CA 488B4520                        mov rax, PARAM(0)
  8813 000063CE 803804                          cmp byte [rax], T_closure
  8814 000063D1 750C                            jne .L_false
  8815 000063D3 48B8-                           mov rax, sob_boolean_true
  8815 000063D5 [0300000000000000] 
  8816 000063DD EB0A                            jmp .L_end
  8817                                  .L_false:
  8818 000063DF 48B8-                           mov rax, sob_boolean_false
  8818 000063E1 [0200000000000000] 
  8819                                  .L_end:
  8820 000063E9 C9                              leave
  8821 000063EA C21800                          ret AND_KILL_FRAME(1)
  8822                                  
  8823                                  L_code_ptr_is_real:
  8824 000063ED C8000000                        enter 0, 0
  8825 000063F1 48837D1801                      cmp COUNT, 1
  8826 000063F6 0F856F100000                    jne L_error_arg_count_1
  8827 000063FC 488B4520                        mov rax, PARAM(0)
  8828 00006400 803813                          cmp byte [rax], T_real
  8829 00006403 750C                            jne .L_false
  8830 00006405 48B8-                           mov rax, sob_boolean_true
  8830 00006407 [0300000000000000] 
  8831 0000640F EB0A                            jmp .L_end
  8832                                  .L_false:
  8833 00006411 48B8-                           mov rax, sob_boolean_false
  8833 00006413 [0200000000000000] 
  8834                                  .L_end:
  8835 0000641B C9                              leave
  8836 0000641C C21800                          ret AND_KILL_FRAME(1)
  8837                                  
  8838                                  L_code_ptr_is_fraction:
  8839 0000641F C8000000                        enter 0, 0
  8840 00006423 48837D1801                      cmp COUNT, 1
  8841 00006428 0F853D100000                    jne L_error_arg_count_1
  8842 0000642E 488B4520                        mov rax, PARAM(0)
  8843 00006432 803812                          cmp byte [rax], T_fraction
  8844 00006435 750C                            jne .L_false
  8845 00006437 48B8-                           mov rax, sob_boolean_true
  8845 00006439 [0300000000000000] 
  8846 00006441 EB0A                            jmp .L_end
  8847                                  .L_false:
  8848 00006443 48B8-                           mov rax, sob_boolean_false
  8848 00006445 [0200000000000000] 
  8849                                  .L_end:
  8850 0000644D C9                              leave
  8851 0000644E C21800                          ret AND_KILL_FRAME(1)
  8852                                  
  8853                                  L_code_ptr_is_boolean:
  8854 00006451 C8000000                        enter 0, 0
  8855 00006455 48837D1801                      cmp COUNT, 1
  8856 0000645A 0F850B100000                    jne L_error_arg_count_1
  8857 00006460 488B4520                        mov rax, PARAM(0)
  8858 00006464 8A18                            mov bl, byte [rax]
  8859 00006466 80E308                          and bl, T_boolean
  8860 00006469 740C                            je .L_false
  8861 0000646B 48B8-                           mov rax, sob_boolean_true
  8861 0000646D [0300000000000000] 
  8862 00006475 EB0A                            jmp .L_end
  8863                                  .L_false:
  8864 00006477 48B8-                           mov rax, sob_boolean_false
  8864 00006479 [0200000000000000] 
  8865                                  .L_end:
  8866 00006481 C9                              leave
  8867 00006482 C21800                          ret AND_KILL_FRAME(1)
  8868                                          
  8869                                  L_code_ptr_is_boolean_false:
  8870 00006485 C8000000                        enter 0, 0
  8871 00006489 48837D1801                      cmp COUNT, 1
  8872 0000648E 0F85D70F0000                    jne L_error_arg_count_1
  8873 00006494 488B4520                        mov rax, PARAM(0)
  8874 00006498 8A18                            mov bl, byte [rax]
  8875 0000649A 80FB09                          cmp bl, T_boolean_false
  8876 0000649D 750C                            jne .L_false
  8877 0000649F 48B8-                           mov rax, sob_boolean_true
  8877 000064A1 [0300000000000000] 
  8878 000064A9 EB0A                            jmp .L_end
  8879                                  .L_false:
  8880 000064AB 48B8-                           mov rax, sob_boolean_false
  8880 000064AD [0200000000000000] 
  8881                                  .L_end:
  8882 000064B5 C9                              leave
  8883 000064B6 C21800                          ret AND_KILL_FRAME(1)
  8884                                  
  8885                                  L_code_ptr_is_boolean_true:
  8886 000064B9 C8000000                        enter 0, 0
  8887 000064BD 48837D1801                      cmp COUNT, 1
  8888 000064C2 0F85A30F0000                    jne L_error_arg_count_1
  8889 000064C8 488B4520                        mov rax, PARAM(0)
  8890 000064CC 8A18                            mov bl, byte [rax]
  8891 000064CE 80FB0A                          cmp bl, T_boolean_true
  8892 000064D1 750C                            jne .L_false
  8893 000064D3 48B8-                           mov rax, sob_boolean_true
  8893 000064D5 [0300000000000000] 
  8894 000064DD EB0A                            jmp .L_end
  8895                                  .L_false:
  8896 000064DF 48B8-                           mov rax, sob_boolean_false
  8896 000064E1 [0200000000000000] 
  8897                                  .L_end:
  8898 000064E9 C9                              leave
  8899 000064EA C21800                          ret AND_KILL_FRAME(1)
  8900                                  
  8901                                  L_code_ptr_is_number:
  8902 000064ED C8000000                        enter 0, 0
  8903 000064F1 48837D1801                      cmp COUNT, 1
  8904 000064F6 0F856F0F0000                    jne L_error_arg_count_1
  8905 000064FC 488B4520                        mov rax, PARAM(0)
  8906 00006500 8A18                            mov bl, byte [rax]
  8907 00006502 80E310                          and bl, T_number
  8908 00006505 740C                            jz .L_false
  8909 00006507 48B8-                           mov rax, sob_boolean_true
  8909 00006509 [0300000000000000] 
  8910 00006511 EB0A                            jmp .L_end
  8911                                  .L_false:
  8912 00006513 48B8-                           mov rax, sob_boolean_false
  8912 00006515 [0200000000000000] 
  8913                                  .L_end:
  8914 0000651D C9                              leave
  8915 0000651E C21800                          ret AND_KILL_FRAME(1)
  8916                                          
  8917                                  L_code_ptr_is_collection:
  8918 00006521 C8000000                        enter 0, 0
  8919 00006525 48837D1801                      cmp COUNT, 1
  8920 0000652A 0F853B0F0000                    jne L_error_arg_count_1
  8921 00006530 488B4520                        mov rax, PARAM(0)
  8922 00006534 8A18                            mov bl, byte [rax]
  8923 00006536 80E320                          and bl, T_collection
  8924 00006539 740C                            je .L_false
  8925 0000653B 48B8-                           mov rax, sob_boolean_true
  8925 0000653D [0300000000000000] 
  8926 00006545 EB0A                            jmp .L_end
  8927                                  .L_false:
  8928 00006547 48B8-                           mov rax, sob_boolean_false
  8928 00006549 [0200000000000000] 
  8929                                  .L_end:
  8930 00006551 C9                              leave
  8931 00006552 C21800                          ret AND_KILL_FRAME(1)
  8932                                  
  8933                                  L_code_ptr_cons:
  8934 00006555 C8000000                        enter 0, 0
  8935 00006559 48837D1802                      cmp COUNT, 2
  8936 0000655E 0F853C0F0000                    jne L_error_arg_count_2
  8937 00006564 BF11000000                      mov rdi, (1 + 8 + 8)
  8938 00006569 E82EF2FFFF                      call malloc
  8939 0000656E C60021                          mov byte [rax], T_pair
  8940 00006571 488B5D20                        mov rbx, PARAM(0)
  8941 00006575 48895801                        mov SOB_PAIR_CAR(rax), rbx
  8942 00006579 488B5D28                        mov rbx, PARAM(1)
  8943 0000657D 48895809                        mov SOB_PAIR_CDR(rax), rbx
  8944 00006581 C9                              leave
  8945 00006582 C22000                          ret AND_KILL_FRAME(2)
  8946                                  
  8947                                  L_code_ptr_display_sexpr:
  8948 00006585 C8000000                        enter 0, 0
  8949 00006589 48837D1801                      cmp COUNT, 1
  8950 0000658E 0F85D70E0000                    jne L_error_arg_count_1
  8951 00006594 488B7D20                        mov rdi, PARAM(0)
  8952 00006598 E880F4FFFF                      call print_sexpr
  8953 0000659D 48B8-                           mov rax, sob_void
  8953 0000659F [0000000000000000] 
  8954 000065A7 C9                              leave
  8955 000065A8 C21800                          ret AND_KILL_FRAME(1)
  8956                                  
  8957                                  L_code_ptr_write_char:
  8958 000065AB C8000000                        enter 0, 0
  8959 000065AF 48837D1801                      cmp COUNT, 1
  8960 000065B4 0F85B10E0000                    jne L_error_arg_count_1
  8961 000065BA 488B4520                        mov rax, PARAM(0)
  8962                                          assert_char(rax)
    53 000065BE 803802              <1>  cmp byte [%1], %2
    54 000065C1 0F85780F0000        <1>  jne L_error_incorrect_type
  8963 000065C7 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  8964 000065CA 4825FF000000                    and rax, 255
  8965 000065D0 48BF-                           mov rdi, fmt_char
  8965 000065D2 [4E0E000000000000] 
  8966 000065DA 4889C6                          mov rsi, rax
  8967 000065DD B800000000                      mov rax, 0
  8968                                          ENTER
    44 000065E2 C8000000            <1>  enter 0, 0
    45 000065E6 4883E4F0            <1>  and rsp, ~15
  8969 000065EA E8(00000000)                    call printf
  8970                                          LEAVE
    49 000065EF C9                  <1>  leave
  8971 000065F0 48B8-                           mov rax, sob_void
  8971 000065F2 [0000000000000000] 
  8972 000065FA C9                              leave
  8973 000065FB C21800                          ret AND_KILL_FRAME(1)
  8974                                  
  8975                                  L_code_ptr_car:
  8976 000065FE C8000000                        enter 0, 0
  8977 00006602 48837D1801                      cmp COUNT, 1
  8978 00006607 0F855E0E0000                    jne L_error_arg_count_1
  8979 0000660D 488B4520                        mov rax, PARAM(0)
  8980                                          assert_pair(rax)
    53 00006611 803821              <1>  cmp byte [%1], %2
    54 00006614 0F85250F0000        <1>  jne L_error_incorrect_type
  8981 0000661A 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  8982 0000661E C9                              leave
  8983 0000661F C21800                          ret AND_KILL_FRAME(1)
  8984                                          
  8985                                  L_code_ptr_cdr:
  8986 00006622 C8000000                        enter 0, 0
  8987 00006626 48837D1801                      cmp COUNT, 1
  8988 0000662B 0F853A0E0000                    jne L_error_arg_count_1
  8989 00006631 488B4520                        mov rax, PARAM(0)
  8990                                          assert_pair(rax)
    53 00006635 803821              <1>  cmp byte [%1], %2
    54 00006638 0F85010F0000        <1>  jne L_error_incorrect_type
  8991 0000663E 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  8992 00006642 C9                              leave
  8993 00006643 C21800                          ret AND_KILL_FRAME(1)
  8994                                          
  8995                                  L_code_ptr_string_length:
  8996 00006646 C8000000                        enter 0, 0
  8997 0000664A 48837D1801                      cmp COUNT, 1
  8998 0000664F 0F85160E0000                    jne L_error_arg_count_1
  8999 00006655 488B4520                        mov rax, PARAM(0)
  9000                                          assert_string(rax)
    53 00006659 803803              <1>  cmp byte [%1], %2
    54 0000665C 0F85DD0E0000        <1>  jne L_error_incorrect_type
  9001 00006662 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  9002 00006666 E84F0D0000                      call make_integer
  9003 0000666B C9                              leave
  9004 0000666C C21800                          ret AND_KILL_FRAME(1)
  9005                                  
  9006                                  L_code_ptr_vector_length:
  9007 0000666F C8000000                        enter 0, 0
  9008 00006673 48837D1801                      cmp COUNT, 1
  9009 00006678 0F85ED0D0000                    jne L_error_arg_count_1
  9010 0000667E 488B4520                        mov rax, PARAM(0)
  9011                                          assert_vector(rax)
    53 00006682 803822              <1>  cmp byte [%1], %2
    54 00006685 0F85B40E0000        <1>  jne L_error_incorrect_type
  9012 0000668B 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  9013 0000668F E8260D0000                      call make_integer
  9014 00006694 C9                              leave
  9015 00006695 C21800                          ret AND_KILL_FRAME(1)
  9016                                  
  9017                                  L_code_ptr_real_to_integer:
  9018 00006698 C8000000                        enter 0, 0
  9019 0000669C 48837D1801                      cmp COUNT, 1
  9020 000066A1 0F85C40D0000                    jne L_error_arg_count_1
  9021 000066A7 488B5D20                        mov rbx, PARAM(0)
  9022                                          assert_real(rbx)
    53 000066AB 803B13              <1>  cmp byte [%1], %2
    54 000066AE 0F858B0E0000        <1>  jne L_error_incorrect_type
  9023 000066B4 F20F104301                      movsd xmm0, qword [rbx + 1]
  9024 000066B9 F2480F2CF8                      cvttsd2si rdi, xmm0
  9025 000066BE E8F70C0000                      call make_integer
  9026 000066C3 C9                              leave
  9027 000066C4 C21800                          ret AND_KILL_FRAME(1)
  9028                                  
  9029                                  L_code_ptr_exit:
  9030 000066C7 C8000000                        enter 0, 0
  9031 000066CB 48837D1800                      cmp COUNT, 0
  9032 000066D0 0F85600D0000                    jne L_error_arg_count_0
  9033 000066D6 B800000000                      mov rax, 0
  9034 000066DB E8(00000000)                    call exit
  9035                                  
  9036                                  L_code_ptr_integer_to_real:
  9037 000066E0 C8000000                        enter 0, 0
  9038 000066E4 48837D1801                      cmp COUNT, 1
  9039 000066E9 0F857C0D0000                    jne L_error_arg_count_1
  9040 000066EF 488B4520                        mov rax, PARAM(0)
  9041                                          assert_integer(rax)
    53 000066F3 803811              <1>  cmp byte [%1], %2
    54 000066F6 0F85430E0000        <1>  jne L_error_incorrect_type
  9042 000066FC FF7001                          push qword [rax + 1]
  9043 000066FF F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  9044 00006705 E8980C0000                      call make_real
  9045 0000670A C9                              leave
  9046 0000670B C21800                          ret AND_KILL_FRAME(1)
  9047                                  
  9048                                  L_code_ptr_fraction_to_real:
  9049 0000670E C8000000                        enter 0, 0
  9050 00006712 48837D1801                      cmp COUNT, 1
  9051 00006717 0F854E0D0000                    jne L_error_arg_count_1
  9052 0000671D 488B4520                        mov rax, PARAM(0)
  9053                                          assert_fraction(rax)
    53 00006721 803812              <1>  cmp byte [%1], %2
    54 00006724 0F85150E0000        <1>  jne L_error_incorrect_type
  9054 0000672A FF7001                          push qword [rax + 1]
  9055 0000672D F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  9056 00006733 FF7009                          push qword [rax + 1 + 8]
  9057 00006736 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  9058 0000673C F20F5EC1                        divsd xmm0, xmm1
  9059 00006740 E85D0C0000                      call make_real
  9060 00006745 C9                              leave
  9061 00006746 C21800                          ret AND_KILL_FRAME(1)
  9062                                  
  9063                                  L_code_ptr_char_to_integer:
  9064 00006749 C8000000                        enter 0, 0
  9065 0000674D 48837D1801                      cmp COUNT, 1
  9066 00006752 0F85130D0000                    jne L_error_arg_count_1
  9067 00006758 488B4520                        mov rax, PARAM(0)
  9068                                          assert_char(rax)
    53 0000675C 803802              <1>  cmp byte [%1], %2
    54 0000675F 0F85DA0D0000        <1>  jne L_error_incorrect_type
  9069 00006765 8A4001                          mov al, byte [rax + 1]
  9070 00006768 4825FF000000                    and rax, 255
  9071 0000676E 4889C7                          mov rdi, rax
  9072 00006771 E8440C0000                      call make_integer
  9073 00006776 C9                              leave
  9074 00006777 C21800                          ret AND_KILL_FRAME(1)
  9075                                  
  9076                                  L_code_ptr_integer_to_fraction:
  9077 0000677A C8000000                        enter 0, 0
  9078 0000677E 48837D1801                      cmp COUNT, 1
  9079 00006783 0F85E20C0000                    jne L_error_arg_count_1
  9080 00006789 4C8B4520                        mov r8, PARAM(0)
  9081                                          assert_integer(r8)
    53 0000678D 41803811            <1>  cmp byte [%1], %2
    54 00006791 0F85A80D0000        <1>  jne L_error_incorrect_type
  9082 00006797 BF11000000                      mov rdi, (1 + 8 + 8)
  9083 0000679C E8FBEFFFFF                      call malloc
  9084 000067A1 498B5801                        mov rbx, qword [r8 + 1]
  9085 000067A5 C60012                          mov byte [rax], T_fraction
  9086 000067A8 48895801                        mov qword [rax + 1], rbx
  9087 000067AC 48C7400901000000                mov qword [rax + 1 + 8], 1
  9088 000067B4 C9                              leave
  9089 000067B5 C21800                          ret AND_KILL_FRAME(1)
  9090                                  
  9091                                  L_code_ptr_integer_to_char:
  9092 000067B8 C8000000                        enter 0, 0
  9093 000067BC 48837D1801                      cmp COUNT, 1
  9094 000067C1 0F85A40C0000                    jne L_error_arg_count_1
  9095 000067C7 488B4520                        mov rax, PARAM(0)
  9096                                          assert_integer(rax)
    53 000067CB 803811              <1>  cmp byte [%1], %2
    54 000067CE 0F856B0D0000        <1>  jne L_error_incorrect_type
  9097 000067D4 488B5801                        mov rbx, qword [rax + 1]
  9098 000067D8 4883FB00                        cmp rbx, 0
  9099 000067DC 0F8EF20B0000                    jle L_error_integer_range
  9100 000067E2 4881FB00010000                  cmp rbx, 256
  9101 000067E9 0F8DE50B0000                    jge L_error_integer_range
  9102 000067EF BF02000000                      mov rdi, (1 + 1)
  9103 000067F4 E8A3EFFFFF                      call malloc
  9104 000067F9 C60002                          mov byte [rax], T_char
  9105 000067FC 885801                          mov byte [rax + 1], bl
  9106 000067FF C9                              leave
  9107 00006800 C21800                          ret AND_KILL_FRAME(1)
  9108                                  
  9109                                  L_code_ptr_trng:
  9110 00006803 C8000000                        enter 0, 0
  9111 00006807 48837D1800                      cmp COUNT, 0
  9112 0000680C 0F85240C0000                    jne L_error_arg_count_0
  9113 00006812 480FC7F7                        rdrand rdi
  9114 00006816 48D1EF                          shr rdi, 1
  9115 00006819 E89C0B0000                      call make_integer
  9116 0000681E C9                              leave
  9117 0000681F C21000                          ret AND_KILL_FRAME(0)
  9118                                  
  9119                                  L_code_ptr_is_zero:
  9120 00006822 C8000000                        enter 0, 0
  9121 00006826 48837D1801                      cmp COUNT, 1
  9122 0000682B 0F853A0C0000                    jne L_error_arg_count_1
  9123 00006831 488B4520                        mov rax, PARAM(0)
  9124 00006835 803811                          cmp byte [rax], T_integer
  9125 00006838 740F                            je .L_integer
  9126 0000683A 803812                          cmp byte [rax], T_fraction
  9127 0000683D 7413                            je .L_fraction
  9128 0000683F 803813                          cmp byte [rax], T_real
  9129 00006842 7417                            je .L_real
  9130 00006844 E9F60C0000                      jmp L_error_incorrect_type
  9131                                  .L_integer:
  9132 00006849 4883780100                      cmp qword [rax + 1], 0
  9133 0000684E 7429                            je .L_zero
  9134 00006850 EB1B                            jmp .L_not_zero
  9135                                  .L_fraction:
  9136 00006852 4883780100                      cmp qword [rax + 1], 0
  9137 00006857 7420                            je .L_zero
  9138 00006859 EB12                            jmp .L_not_zero
  9139                                  .L_real:
  9140 0000685B 660FEFC0                        pxor xmm0, xmm0
  9141 0000685F FF7001                          push qword [rax + 1]
  9142 00006862 F20F100C24                      movsd xmm1, qword [rsp]
  9143 00006867 660F2EC1                        ucomisd xmm0, xmm1
  9144 0000686B 740C                            je .L_zero
  9145                                  .L_not_zero:
  9146 0000686D 48B8-                           mov rax, sob_boolean_false
  9146 0000686F [0200000000000000] 
  9147 00006877 EB0A                            jmp .L_end
  9148                                  .L_zero:
  9149 00006879 48B8-                           mov rax, sob_boolean_true
  9149 0000687B [0300000000000000] 
  9150                                  .L_end:
  9151 00006883 C9                              leave
  9152 00006884 C21800                          ret AND_KILL_FRAME(1)
  9153                                  
  9154                                  L_code_ptr_is_integer:
  9155 00006887 C8000000                        enter 0, 0
  9156 0000688B 48837D1801                      cmp COUNT, 1
  9157 00006890 0F85D50B0000                    jne L_error_arg_count_1
  9158 00006896 488B4520                        mov rax, PARAM(0)
  9159 0000689A 803811                          cmp byte [rax], T_integer
  9160 0000689D 750C                            jne .L_false
  9161 0000689F 48B8-                           mov rax, sob_boolean_true
  9161 000068A1 [0300000000000000] 
  9162 000068A9 EB0A                            jmp .L_exit
  9163                                  .L_false:
  9164 000068AB 48B8-                           mov rax, sob_boolean_false
  9164 000068AD [0200000000000000] 
  9165                                  .L_exit:
  9166 000068B5 C9                              leave
  9167 000068B6 C21800                          ret AND_KILL_FRAME(1)
  9168                                  
  9169                                  L_code_ptr_raw_bin_add_rr:
  9170 000068B9 C8000000                        enter 0, 0
  9171 000068BD 48837D1802                      cmp COUNT, 2
  9172 000068C2 0F85D80B0000                    jne L_error_arg_count_2
  9173 000068C8 488B5D20                        mov rbx, PARAM(0)
  9174                                          assert_real(rbx)
    53 000068CC 803B13              <1>  cmp byte [%1], %2
    54 000068CF 0F856A0C0000        <1>  jne L_error_incorrect_type
  9175 000068D5 488B4D28                        mov rcx, PARAM(1)
  9176                                          assert_real(rcx)
    53 000068D9 803913              <1>  cmp byte [%1], %2
    54 000068DC 0F855D0C0000        <1>  jne L_error_incorrect_type
  9177 000068E2 F20F104301                      movsd xmm0, qword [rbx + 1]
  9178 000068E7 F20F104901                      movsd xmm1, qword [rcx + 1]
  9179 000068EC F20F58C1                        addsd xmm0, xmm1
  9180 000068F0 E8AD0A0000                      call make_real
  9181 000068F5 C9                              leave
  9182 000068F6 C22000                          ret AND_KILL_FRAME(2)
  9183                                  
  9184                                  L_code_ptr_raw_bin_sub_rr:
  9185 000068F9 C8000000                        enter 0, 0
  9186 000068FD 48837D1802                      cmp COUNT, 2
  9187 00006902 0F85980B0000                    jne L_error_arg_count_2
  9188 00006908 488B5D20                        mov rbx, PARAM(0)
  9189                                          assert_real(rbx)
    53 0000690C 803B13              <1>  cmp byte [%1], %2
    54 0000690F 0F852A0C0000        <1>  jne L_error_incorrect_type
  9190 00006915 488B4D28                        mov rcx, PARAM(1)
  9191                                          assert_real(rcx)
    53 00006919 803913              <1>  cmp byte [%1], %2
    54 0000691C 0F851D0C0000        <1>  jne L_error_incorrect_type
  9192 00006922 F20F104301                      movsd xmm0, qword [rbx + 1]
  9193 00006927 F20F104901                      movsd xmm1, qword [rcx + 1]
  9194 0000692C F20F5CC1                        subsd xmm0, xmm1
  9195 00006930 E86D0A0000                      call make_real
  9196 00006935 C9                              leave
  9197 00006936 C22000                          ret AND_KILL_FRAME(2)
  9198                                  
  9199                                  L_code_ptr_raw_bin_mul_rr:
  9200 00006939 C8000000                        enter 0, 0
  9201 0000693D 48837D1802                      cmp COUNT, 2
  9202 00006942 0F85580B0000                    jne L_error_arg_count_2
  9203 00006948 488B5D20                        mov rbx, PARAM(0)
  9204                                          assert_real(rbx)
    53 0000694C 803B13              <1>  cmp byte [%1], %2
    54 0000694F 0F85EA0B0000        <1>  jne L_error_incorrect_type
  9205 00006955 488B4D28                        mov rcx, PARAM(1)
  9206                                          assert_real(rcx)
    53 00006959 803913              <1>  cmp byte [%1], %2
    54 0000695C 0F85DD0B0000        <1>  jne L_error_incorrect_type
  9207 00006962 F20F104301                      movsd xmm0, qword [rbx + 1]
  9208 00006967 F20F104901                      movsd xmm1, qword [rcx + 1]
  9209 0000696C F20F59C1                        mulsd xmm0, xmm1
  9210 00006970 E82D0A0000                      call make_real
  9211 00006975 C9                              leave
  9212 00006976 C22000                          ret AND_KILL_FRAME(2)
  9213                                  
  9214                                  L_code_ptr_raw_bin_div_rr:
  9215 00006979 C8000000                        enter 0, 0
  9216 0000697D 48837D1802                      cmp COUNT, 2
  9217 00006982 0F85180B0000                    jne L_error_arg_count_2
  9218 00006988 488B5D20                        mov rbx, PARAM(0)
  9219                                          assert_real(rbx)
    53 0000698C 803B13              <1>  cmp byte [%1], %2
    54 0000698F 0F85AA0B0000        <1>  jne L_error_incorrect_type
  9220 00006995 488B4D28                        mov rcx, PARAM(1)
  9221                                          assert_real(rcx)
    53 00006999 803913              <1>  cmp byte [%1], %2
    54 0000699C 0F859D0B0000        <1>  jne L_error_incorrect_type
  9222 000069A2 F20F104301                      movsd xmm0, qword [rbx + 1]
  9223 000069A7 F20F104901                      movsd xmm1, qword [rcx + 1]
  9224 000069AC 660FEFD2                        pxor xmm2, xmm2
  9225 000069B0 660F2ECA                        ucomisd xmm1, xmm2
  9226 000069B4 0F84B60B0000                    je L_error_division_by_zero
  9227 000069BA F20F5EC1                        divsd xmm0, xmm1
  9228 000069BE E8DF090000                      call make_real
  9229 000069C3 C9                              leave
  9230 000069C4 C22000                          ret AND_KILL_FRAME(2)
  9231                                  
  9232                                  L_code_ptr_raw_bin_add_zz:
  9233 000069C7 C8000000                	enter 0, 0
  9234 000069CB 48837D1802              	cmp COUNT, 2
  9235 000069D0 0F85CA0A0000            	jne L_error_arg_count_2
  9236 000069D6 4C8B4520                	mov r8, PARAM(0)
  9237                                  	assert_integer(r8)
    53 000069DA 41803811            <1>  cmp byte [%1], %2
    54 000069DE 0F855B0B0000        <1>  jne L_error_incorrect_type
  9238 000069E4 4C8B4D28                	mov r9, PARAM(1)
  9239                                  	assert_integer(r9)
    53 000069E8 41803911            <1>  cmp byte [%1], %2
    54 000069EC 0F854D0B0000        <1>  jne L_error_incorrect_type
  9240 000069F2 498B7801                	mov rdi, qword [r8 + 1]
  9241 000069F6 49037901                	add rdi, qword [r9 + 1]
  9242 000069FA E8BB090000              	call make_integer
  9243 000069FF C9                      	leave
  9244 00006A00 C22000                  	ret AND_KILL_FRAME(2)
  9245                                  
  9246                                  L_code_ptr_raw_bin_add_qq:
  9247 00006A03 C8000000                        enter 0, 0
  9248 00006A07 48837D1802                      cmp COUNT, 2
  9249 00006A0C 0F858E0A0000                    jne L_error_arg_count_2
  9250 00006A12 4C8B4520                        mov r8, PARAM(0)
  9251                                          assert_fraction(r8)
    53 00006A16 41803812            <1>  cmp byte [%1], %2
    54 00006A1A 0F851F0B0000        <1>  jne L_error_incorrect_type
  9252 00006A20 4C8B4D28                        mov r9, PARAM(1)
  9253                                          assert_fraction(r9)
    53 00006A24 41803912            <1>  cmp byte [%1], %2
    54 00006A28 0F85110B0000        <1>  jne L_error_incorrect_type
  9254 00006A2E 498B4001                        mov rax, qword [r8 + 1] ; num1
  9255 00006A32 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  9256 00006A36 4899                            cqo
  9257 00006A38 48F7EB                          imul rbx
  9258 00006A3B 4889C6                          mov rsi, rax
  9259 00006A3E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  9260 00006A42 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  9261 00006A46 4899                            cqo
  9262 00006A48 48F7EB                          imul rbx
  9263 00006A4B 4801C6                          add rsi, rax
  9264 00006A4E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  9265 00006A52 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  9266 00006A56 4899                            cqo
  9267 00006A58 48F7EB                          imul rbx
  9268 00006A5B 4889C7                          mov rdi, rax
  9269 00006A5E E8DE010000                      call normalize_fraction
  9270 00006A63 C9                              leave
  9271 00006A64 C22000                          ret AND_KILL_FRAME(2)
  9272                                  
  9273                                  L_code_ptr_raw_bin_sub_zz:
  9274 00006A67 C8000000                	enter 0, 0
  9275 00006A6B 48837D1802              	cmp COUNT, 2
  9276 00006A70 0F852A0A0000            	jne L_error_arg_count_2
  9277 00006A76 4C8B4520                	mov r8, PARAM(0)
  9278                                  	assert_integer(r8)
    53 00006A7A 41803811            <1>  cmp byte [%1], %2
    54 00006A7E 0F85BB0A0000        <1>  jne L_error_incorrect_type
  9279 00006A84 4C8B4D28                	mov r9, PARAM(1)
  9280                                  	assert_integer(r9)
    53 00006A88 41803911            <1>  cmp byte [%1], %2
    54 00006A8C 0F85AD0A0000        <1>  jne L_error_incorrect_type
  9281 00006A92 498B7801                	mov rdi, qword [r8 + 1]
  9282 00006A96 492B7901                	sub rdi, qword [r9 + 1]
  9283 00006A9A E81B090000              	call make_integer
  9284 00006A9F C9                      	leave
  9285 00006AA0 C22000                  	ret AND_KILL_FRAME(2)
  9286                                  
  9287                                  L_code_ptr_raw_bin_sub_qq:
  9288 00006AA3 C8000000                        enter 0, 0
  9289 00006AA7 48837D1802                      cmp COUNT, 2
  9290 00006AAC 0F85EE090000                    jne L_error_arg_count_2
  9291 00006AB2 4C8B4520                        mov r8, PARAM(0)
  9292                                          assert_fraction(r8)
    53 00006AB6 41803812            <1>  cmp byte [%1], %2
    54 00006ABA 0F857F0A0000        <1>  jne L_error_incorrect_type
  9293 00006AC0 4C8B4D28                        mov r9, PARAM(1)
  9294                                          assert_fraction(r9)
    53 00006AC4 41803912            <1>  cmp byte [%1], %2
    54 00006AC8 0F85710A0000        <1>  jne L_error_incorrect_type
  9295 00006ACE 498B4001                        mov rax, qword [r8 + 1] ; num1
  9296 00006AD2 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  9297 00006AD6 4899                            cqo
  9298 00006AD8 48F7EB                          imul rbx
  9299 00006ADB 4889C6                          mov rsi, rax
  9300 00006ADE 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  9301 00006AE2 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  9302 00006AE6 4899                            cqo
  9303 00006AE8 48F7EB                          imul rbx
  9304 00006AEB 4829C6                          sub rsi, rax
  9305 00006AEE 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  9306 00006AF2 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  9307 00006AF6 4899                            cqo
  9308 00006AF8 48F7EB                          imul rbx
  9309 00006AFB 4889C7                          mov rdi, rax
  9310 00006AFE E83E010000                      call normalize_fraction
  9311 00006B03 C9                              leave
  9312 00006B04 C22000                          ret AND_KILL_FRAME(2)
  9313                                  
  9314                                  L_code_ptr_raw_bin_mul_zz:
  9315 00006B07 C8000000                	enter 0, 0
  9316 00006B0B 48837D1802              	cmp COUNT, 2
  9317 00006B10 0F858A090000            	jne L_error_arg_count_2
  9318 00006B16 4C8B4520                	mov r8, PARAM(0)
  9319                                  	assert_integer(r8)
    53 00006B1A 41803811            <1>  cmp byte [%1], %2
    54 00006B1E 0F851B0A0000        <1>  jne L_error_incorrect_type
  9320 00006B24 4C8B4D28                	mov r9, PARAM(1)
  9321                                  	assert_integer(r9)
    53 00006B28 41803911            <1>  cmp byte [%1], %2
    54 00006B2C 0F850D0A0000        <1>  jne L_error_incorrect_type
  9322 00006B32 4899                    	cqo
  9323 00006B34 498B4001                	mov rax, qword [r8 + 1]
  9324 00006B38 49F76101                	mul qword [r9 + 1]
  9325 00006B3C 4889C7                  	mov rdi, rax
  9326 00006B3F E876080000              	call make_integer
  9327 00006B44 C9                      	leave
  9328 00006B45 C22000                  	ret AND_KILL_FRAME(2)
  9329                                  
  9330                                  L_code_ptr_raw_bin_mul_qq:
  9331 00006B48 C8000000                        enter 0, 0
  9332 00006B4C 48837D1802                      cmp COUNT, 2
  9333 00006B51 0F8549090000                    jne L_error_arg_count_2
  9334 00006B57 4C8B4520                        mov r8, PARAM(0)
  9335                                          assert_fraction(r8)
    53 00006B5B 41803812            <1>  cmp byte [%1], %2
    54 00006B5F 0F85DA090000        <1>  jne L_error_incorrect_type
  9336 00006B65 4C8B4D28                        mov r9, PARAM(1)
  9337                                          assert_fraction(r9)
    53 00006B69 41803912            <1>  cmp byte [%1], %2
    54 00006B6D 0F85CC090000        <1>  jne L_error_incorrect_type
  9338 00006B73 498B4001                        mov rax, qword [r8 + 1] ; num1
  9339 00006B77 498B5901                        mov rbx, qword [r9 + 1] ; num2
  9340 00006B7B 4899                            cqo
  9341 00006B7D 48F7EB                          imul rbx
  9342 00006B80 4889C6                          mov rsi, rax
  9343 00006B83 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  9344 00006B87 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  9345 00006B8B 4899                            cqo
  9346 00006B8D 48F7EB                          imul rbx
  9347 00006B90 4889C7                          mov rdi, rax
  9348 00006B93 E8A9000000                      call normalize_fraction
  9349 00006B98 C9                              leave
  9350 00006B99 C22000                          ret AND_KILL_FRAME(2)
  9351                                          
  9352                                  L_code_ptr_raw_bin_div_zz:
  9353 00006B9C C8000000                	enter 0, 0
  9354 00006BA0 48837D1802              	cmp COUNT, 2
  9355 00006BA5 0F85F5080000            	jne L_error_arg_count_2
  9356 00006BAB 4C8B4520                	mov r8, PARAM(0)
  9357                                  	assert_integer(r8)
    53 00006BAF 41803811            <1>  cmp byte [%1], %2
    54 00006BB3 0F8586090000        <1>  jne L_error_incorrect_type
  9358 00006BB9 4C8B4D28                	mov r9, PARAM(1)
  9359                                  	assert_integer(r9)
    53 00006BBD 41803911            <1>  cmp byte [%1], %2
    54 00006BC1 0F8578090000        <1>  jne L_error_incorrect_type
  9360 00006BC7 498B7901                	mov rdi, qword [r9 + 1]
  9361 00006BCB 4883FF00                	cmp rdi, 0
  9362 00006BCF 0F849B090000            	je L_error_division_by_zero
  9363 00006BD5 498B7001                	mov rsi, qword [r8 + 1]
  9364 00006BD9 E863000000              	call normalize_fraction
  9365 00006BDE C9                      	leave
  9366 00006BDF C22000                  	ret AND_KILL_FRAME(2)
  9367                                  
  9368                                  L_code_ptr_raw_bin_div_qq:
  9369 00006BE2 C8000000                        enter 0, 0
  9370 00006BE6 48837D1802                      cmp COUNT, 2
  9371 00006BEB 0F85AF080000                    jne L_error_arg_count_2
  9372 00006BF1 4C8B4520                        mov r8, PARAM(0)
  9373                                          assert_fraction(r8)
    53 00006BF5 41803812            <1>  cmp byte [%1], %2
    54 00006BF9 0F8540090000        <1>  jne L_error_incorrect_type
  9374 00006BFF 4C8B4D28                        mov r9, PARAM(1)
  9375                                          assert_fraction(r9)
    53 00006C03 41803912            <1>  cmp byte [%1], %2
    54 00006C07 0F8532090000        <1>  jne L_error_incorrect_type
  9376 00006C0D 4983790100                      cmp qword [r9 + 1], 0
  9377 00006C12 0F8458090000                    je L_error_division_by_zero
  9378 00006C18 498B4001                        mov rax, qword [r8 + 1] ; num1
  9379 00006C1C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  9380 00006C20 4899                            cqo
  9381 00006C22 48F7EB                          imul rbx
  9382 00006C25 4889C6                          mov rsi, rax
  9383 00006C28 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  9384 00006C2C 498B5901                        mov rbx, qword [r9 + 1] ; num2
  9385 00006C30 4899                            cqo
  9386 00006C32 48F7EB                          imul rbx
  9387 00006C35 4889C7                          mov rdi, rax
  9388 00006C38 E804000000                      call normalize_fraction
  9389 00006C3D C9                              leave
  9390 00006C3E C22000                          ret AND_KILL_FRAME(2)
  9391                                          
  9392                                  normalize_fraction:
  9393 00006C41 56                              push rsi
  9394 00006C42 57                              push rdi
  9395 00006C43 E859000000                      call gcd
  9396 00006C48 4889C3                          mov rbx, rax
  9397 00006C4B 58                              pop rax
  9398 00006C4C 4899                            cqo
  9399 00006C4E 48F7FB                          idiv rbx
  9400 00006C51 4989C0                          mov r8, rax
  9401 00006C54 58                              pop rax
  9402 00006C55 4899                            cqo
  9403 00006C57 48F7FB                          idiv rbx
  9404 00006C5A 4989C1                          mov r9, rax
  9405 00006C5D 4983F900                        cmp r9, 0
  9406 00006C61 741C                            je .L_zero
  9407 00006C63 4983F801                        cmp r8, 1
  9408 00006C67 7421                            je .L_int
  9409 00006C69 BF11000000                      mov rdi, (1 + 8 + 8)
  9410 00006C6E E829EBFFFF                      call malloc
  9411 00006C73 C60012                          mov byte [rax], T_fraction
  9412 00006C76 4C894801                        mov qword [rax + 1], r9
  9413 00006C7A 4C894009                        mov qword [rax + 1 + 8], r8
  9414 00006C7E C3                              ret
  9415                                  .L_zero:
  9416 00006C7F BF00000000                      mov rdi, 0
  9417 00006C84 E831070000                      call make_integer
  9418 00006C89 C3                              ret
  9419                                  .L_int:
  9420 00006C8A 4C89CF                          mov rdi, r9
  9421 00006C8D E828070000                      call make_integer
  9422 00006C92 C3                              ret
  9423                                  
  9424                                  iabs:
  9425 00006C93 4889F8                          mov rax, rdi
  9426 00006C96 4883F800                        cmp rax, 0
  9427 00006C9A 7C01                            jl .Lneg
  9428 00006C9C C3                              ret
  9429                                  .Lneg:
  9430 00006C9D 48F7D8                          neg rax
  9431 00006CA0 C3                              ret
  9432                                  
  9433                                  gcd:
  9434 00006CA1 E8EDFFFFFF                      call iabs
  9435 00006CA6 4889C3                          mov rbx, rax
  9436 00006CA9 4889F7                          mov rdi, rsi
  9437 00006CAC E8E2FFFFFF                      call iabs
  9438 00006CB1 4883F800                        cmp rax, 0
  9439 00006CB5 7502                            jne .L0
  9440 00006CB7 4893                            xchg rax, rbx
  9441                                  .L0:
  9442 00006CB9 4883FB00                        cmp rbx, 0
  9443 00006CBD 740C                            je .L1
  9444 00006CBF 4899                            cqo
  9445 00006CC1 48F7F3                          div rbx
  9446 00006CC4 4889D0                          mov rax, rdx
  9447 00006CC7 4893                            xchg rax, rbx
  9448 00006CC9 EBEE                            jmp .L0
  9449                                  .L1:
  9450 00006CCB C3                              ret
  9451                                  
  9452                                  L_code_ptr_error:
  9453 00006CCC C8000000                        enter 0, 0
  9454 00006CD0 48837D1802                      cmp COUNT, 2
  9455 00006CD5 0F85C5070000                    jne L_error_arg_count_2
  9456 00006CDB 488B7520                        mov rsi, PARAM(0)
  9457                                          assert_interned_symbol(rsi)
    53 00006CDF 803E41              <1>  cmp byte [%1], %2
    54 00006CE2 0F8557080000        <1>  jne L_error_incorrect_type
  9458 00006CE8 488B7528                        mov rsi, PARAM(1)
  9459                                          assert_string(rsi)
    53 00006CEC 803E03              <1>  cmp byte [%1], %2
    54 00006CEF 0F854A080000        <1>  jne L_error_incorrect_type
  9460 00006CF5 48BF-                           mov rdi, fmt_scheme_error_part_1
  9460 00006CF7 [AC0F000000000000] 
  9461 00006CFF B800000000                      mov rax, 0
  9462                                          ENTER
    44 00006D04 C8000000            <1>  enter 0, 0
    45 00006D08 4883E4F0            <1>  and rsp, ~15
  9463 00006D0C E8(00000000)                    call printf
  9464                                          LEAVE
    49 00006D11 C9                  <1>  leave
  9465 00006D12 488B7D20                        mov rdi, PARAM(0)
  9466 00006D16 E802EDFFFF                      call print_sexpr
  9467 00006D1B 48BF-                           mov rdi, fmt_scheme_error_part_2
  9467 00006D1D [C00F000000000000] 
  9468 00006D25 B800000000                      mov rax, 0
  9469                                          ENTER
    44 00006D2A C8000000            <1>  enter 0, 0
    45 00006D2E 4883E4F0            <1>  and rsp, ~15
  9470 00006D32 E8(00000000)                    call printf
  9471                                          LEAVE
    49 00006D37 C9                  <1>  leave
  9472 00006D38 488B4528                        mov rax, PARAM(1)       ; sob_string
  9473 00006D3C BE01000000                      mov rsi, 1              ; size = 1 byte
  9474 00006D41 488B5001                        mov rdx, qword [rax + 1] ; length
  9475 00006D45 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  9476 00006D49 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  9477                                  	ENTER
    44 00006D51 C8000000            <1>  enter 0, 0
    45 00006D55 4883E4F0            <1>  and rsp, ~15
  9478 00006D59 E8(00000000)                    call fwrite
  9479                                  	LEAVE
    49 00006D5E C9                  <1>  leave
  9480 00006D5F 48BF-                           mov rdi, fmt_scheme_error_part_3
  9480 00006D61 [0210000000000000] 
  9481 00006D69 B800000000                      mov rax, 0
  9482                                          ENTER
    44 00006D6E C8000000            <1>  enter 0, 0
    45 00006D72 4883E4F0            <1>  and rsp, ~15
  9483 00006D76 E8(00000000)                    call printf
  9484                                          LEAVE
    49 00006D7B C9                  <1>  leave
  9485 00006D7C 48C7C0F7FFFFFF                  mov rax, -9
  9486 00006D83 E8(00000000)                    call exit
  9487                                  
  9488                                  L_code_ptr_raw_less_than_rr:
  9489 00006D88 C8000000                        enter 0, 0
  9490 00006D8C 48837D1802                      cmp COUNT, 2
  9491 00006D91 0F8509070000                    jne L_error_arg_count_2
  9492 00006D97 488B7520                        mov rsi, PARAM(0)
  9493                                          assert_real(rsi)
    53 00006D9B 803E13              <1>  cmp byte [%1], %2
    54 00006D9E 0F859B070000        <1>  jne L_error_incorrect_type
  9494 00006DA4 488B7D28                        mov rdi, PARAM(1)
  9495                                          assert_real(rdi)
    53 00006DA8 803F13              <1>  cmp byte [%1], %2
    54 00006DAB 0F858E070000        <1>  jne L_error_incorrect_type
  9496 00006DB1 F20F104601                      movsd xmm0, qword [rsi + 1]
  9497 00006DB6 F20F104F01                      movsd xmm1, qword [rdi + 1]
  9498 00006DBB 660F2FC1                        comisd xmm0, xmm1
  9499 00006DBF 730C                            jae .L_false
  9500 00006DC1 48B8-                           mov rax, sob_boolean_true
  9500 00006DC3 [0300000000000000] 
  9501 00006DCB EB0A                            jmp .L_exit
  9502                                  .L_false:
  9503 00006DCD 48B8-                           mov rax, sob_boolean_false
  9503 00006DCF [0200000000000000] 
  9504                                  .L_exit:
  9505 00006DD7 C9                              leave
  9506 00006DD8 C22000                          ret AND_KILL_FRAME(2)
  9507                                          
  9508                                  L_code_ptr_raw_less_than_zz:
  9509 00006DDB C8000000                	enter 0, 0
  9510 00006DDF 48837D1802              	cmp COUNT, 2
  9511 00006DE4 0F85B6060000            	jne L_error_arg_count_2
  9512 00006DEA 4C8B4520                	mov r8, PARAM(0)
  9513                                  	assert_integer(r8)
    53 00006DEE 41803811            <1>  cmp byte [%1], %2
    54 00006DF2 0F8547070000        <1>  jne L_error_incorrect_type
  9514 00006DF8 4C8B4D28                	mov r9, PARAM(1)
  9515                                  	assert_integer(r9)
    53 00006DFC 41803911            <1>  cmp byte [%1], %2
    54 00006E00 0F8539070000        <1>  jne L_error_incorrect_type
  9516 00006E06 498B7801                	mov rdi, qword [r8 + 1]
  9517 00006E0A 493B7901                	cmp rdi, qword [r9 + 1]
  9518 00006E0E 7D0C                    	jge .L_false
  9519 00006E10 48B8-                   	mov rax, sob_boolean_true
  9519 00006E12 [0300000000000000] 
  9520 00006E1A EB0A                    	jmp .L_exit
  9521                                  .L_false:
  9522 00006E1C 48B8-                   	mov rax, sob_boolean_false
  9522 00006E1E [0200000000000000] 
  9523                                  .L_exit:
  9524 00006E26 C9                      	leave
  9525 00006E27 C22000                  	ret AND_KILL_FRAME(2)
  9526                                  
  9527                                  L_code_ptr_raw_less_than_qq:
  9528 00006E2A C8000000                        enter 0, 0
  9529 00006E2E 48837D1802                      cmp COUNT, 2
  9530 00006E33 0F8567060000                    jne L_error_arg_count_2
  9531 00006E39 488B7520                        mov rsi, PARAM(0)
  9532                                          assert_fraction(rsi)
    53 00006E3D 803E12              <1>  cmp byte [%1], %2
    54 00006E40 0F85F9060000        <1>  jne L_error_incorrect_type
  9533 00006E46 488B7D28                        mov rdi, PARAM(1)
  9534                                          assert_fraction(rdi)
    53 00006E4A 803F12              <1>  cmp byte [%1], %2
    54 00006E4D 0F85EC060000        <1>  jne L_error_incorrect_type
  9535 00006E53 488B4601                        mov rax, qword [rsi + 1] ; num1
  9536 00006E57 4899                            cqo
  9537 00006E59 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  9538 00006E5D 4889C1                          mov rcx, rax
  9539 00006E60 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  9540 00006E64 4899                            cqo
  9541 00006E66 48F76F01                        imul qword [rdi + 1]          ; num2
  9542 00006E6A 4829C1                          sub rcx, rax
  9543 00006E6D 7D0C                            jge .L_false
  9544 00006E6F 48B8-                           mov rax, sob_boolean_true
  9544 00006E71 [0300000000000000] 
  9545 00006E79 EB0A                            jmp .L_exit
  9546                                  .L_false:
  9547 00006E7B 48B8-                           mov rax, sob_boolean_false
  9547 00006E7D [0200000000000000] 
  9548                                  .L_exit:
  9549 00006E85 C9                              leave
  9550 00006E86 C22000                          ret AND_KILL_FRAME(2)
  9551                                  
  9552                                  L_code_ptr_raw_equal_rr:
  9553 00006E89 C8000000                        enter 0, 0
  9554 00006E8D 48837D1802                      cmp COUNT, 2
  9555 00006E92 0F8508060000                    jne L_error_arg_count_2
  9556 00006E98 488B7520                        mov rsi, PARAM(0)
  9557                                          assert_real(rsi)
    53 00006E9C 803E13              <1>  cmp byte [%1], %2
    54 00006E9F 0F859A060000        <1>  jne L_error_incorrect_type
  9558 00006EA5 488B7D28                        mov rdi, PARAM(1)
  9559                                          assert_real(rdi)
    53 00006EA9 803F13              <1>  cmp byte [%1], %2
    54 00006EAC 0F858D060000        <1>  jne L_error_incorrect_type
  9560 00006EB2 F20F104601                      movsd xmm0, qword [rsi + 1]
  9561 00006EB7 F20F104F01                      movsd xmm1, qword [rdi + 1]
  9562 00006EBC 660F2FC1                        comisd xmm0, xmm1
  9563 00006EC0 750C                            jne .L_false
  9564 00006EC2 48B8-                           mov rax, sob_boolean_true
  9564 00006EC4 [0300000000000000] 
  9565 00006ECC EB0A                            jmp .L_exit
  9566                                  .L_false:
  9567 00006ECE 48B8-                           mov rax, sob_boolean_false
  9567 00006ED0 [0200000000000000] 
  9568                                  .L_exit:
  9569 00006ED8 C9                              leave
  9570 00006ED9 C22000                          ret AND_KILL_FRAME(2)
  9571                                          
  9572                                  L_code_ptr_raw_equal_zz:
  9573 00006EDC C8000000                	enter 0, 0
  9574 00006EE0 48837D1802              	cmp COUNT, 2
  9575 00006EE5 0F85B5050000            	jne L_error_arg_count_2
  9576 00006EEB 4C8B4520                	mov r8, PARAM(0)
  9577                                  	assert_integer(r8)
    53 00006EEF 41803811            <1>  cmp byte [%1], %2
    54 00006EF3 0F8546060000        <1>  jne L_error_incorrect_type
  9578 00006EF9 4C8B4D28                	mov r9, PARAM(1)
  9579                                  	assert_integer(r9)
    53 00006EFD 41803911            <1>  cmp byte [%1], %2
    54 00006F01 0F8538060000        <1>  jne L_error_incorrect_type
  9580 00006F07 498B7801                	mov rdi, qword [r8 + 1]
  9581 00006F0B 493B7901                	cmp rdi, qword [r9 + 1]
  9582 00006F0F 750C                    	jne .L_false
  9583 00006F11 48B8-                   	mov rax, sob_boolean_true
  9583 00006F13 [0300000000000000] 
  9584 00006F1B EB0A                    	jmp .L_exit
  9585                                  .L_false:
  9586 00006F1D 48B8-                   	mov rax, sob_boolean_false
  9586 00006F1F [0200000000000000] 
  9587                                  .L_exit:
  9588 00006F27 C9                      	leave
  9589 00006F28 C22000                  	ret AND_KILL_FRAME(2)
  9590                                  
  9591                                  L_code_ptr_raw_equal_qq:
  9592 00006F2B C8000000                        enter 0, 0
  9593 00006F2F 48837D1802                      cmp COUNT, 2
  9594 00006F34 0F8566050000                    jne L_error_arg_count_2
  9595 00006F3A 488B7520                        mov rsi, PARAM(0)
  9596                                          assert_fraction(rsi)
    53 00006F3E 803E12              <1>  cmp byte [%1], %2
    54 00006F41 0F85F8050000        <1>  jne L_error_incorrect_type
  9597 00006F47 488B7D28                        mov rdi, PARAM(1)
  9598                                          assert_fraction(rdi)
    53 00006F4B 803F12              <1>  cmp byte [%1], %2
    54 00006F4E 0F85EB050000        <1>  jne L_error_incorrect_type
  9599 00006F54 488B4601                        mov rax, qword [rsi + 1] ; num1
  9600 00006F58 4899                            cqo
  9601 00006F5A 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  9602 00006F5E 4889C1                          mov rcx, rax
  9603 00006F61 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  9604 00006F65 4899                            cqo
  9605 00006F67 48F76F01                        imul qword [rdi + 1]          ; num2
  9606 00006F6B 4829C1                          sub rcx, rax
  9607 00006F6E 750C                            jne .L_false
  9608 00006F70 48B8-                           mov rax, sob_boolean_true
  9608 00006F72 [0300000000000000] 
  9609 00006F7A EB0A                            jmp .L_exit
  9610                                  .L_false:
  9611 00006F7C 48B8-                           mov rax, sob_boolean_false
  9611 00006F7E [0200000000000000] 
  9612                                  .L_exit:
  9613 00006F86 C9                              leave
  9614 00006F87 C22000                          ret AND_KILL_FRAME(2)
  9615                                  
  9616                                  L_code_ptr_quotient:
  9617 00006F8A C8000000                        enter 0, 0
  9618 00006F8E 48837D1802                      cmp COUNT, 2
  9619 00006F93 0F8507050000                    jne L_error_arg_count_2
  9620 00006F99 488B7520                        mov rsi, PARAM(0)
  9621                                          assert_integer(rsi)
    53 00006F9D 803E11              <1>  cmp byte [%1], %2
    54 00006FA0 0F8599050000        <1>  jne L_error_incorrect_type
  9622 00006FA6 488B7D28                        mov rdi, PARAM(1)
  9623                                          assert_integer(rdi)
    53 00006FAA 803F11              <1>  cmp byte [%1], %2
    54 00006FAD 0F858C050000        <1>  jne L_error_incorrect_type
  9624 00006FB3 488B4601                        mov rax, qword [rsi + 1]
  9625 00006FB7 488B5F01                        mov rbx, qword [rdi + 1]
  9626 00006FBB 4883FB00                        cmp rbx, 0
  9627 00006FBF 0F84AB050000                    je L_error_division_by_zero
  9628 00006FC5 4899                            cqo
  9629 00006FC7 48F7FB                          idiv rbx
  9630 00006FCA 4889C7                          mov rdi, rax
  9631 00006FCD E8E8030000                      call make_integer
  9632 00006FD2 C9                              leave
  9633 00006FD3 C22000                          ret AND_KILL_FRAME(2)
  9634                                          
  9635                                  L_code_ptr_remainder:
  9636 00006FD6 C8000000                        enter 0, 0
  9637 00006FDA 48837D1802                      cmp COUNT, 2
  9638 00006FDF 0F85BB040000                    jne L_error_arg_count_2
  9639 00006FE5 488B7520                        mov rsi, PARAM(0)
  9640                                          assert_integer(rsi)
    53 00006FE9 803E11              <1>  cmp byte [%1], %2
    54 00006FEC 0F854D050000        <1>  jne L_error_incorrect_type
  9641 00006FF2 488B7D28                        mov rdi, PARAM(1)
  9642                                          assert_integer(rdi)
    53 00006FF6 803F11              <1>  cmp byte [%1], %2
    54 00006FF9 0F8540050000        <1>  jne L_error_incorrect_type
  9643 00006FFF 488B4601                        mov rax, qword [rsi + 1]
  9644 00007003 488B5F01                        mov rbx, qword [rdi + 1]
  9645 00007007 4883FB00                        cmp rbx, 0
  9646 0000700B 0F845F050000                    je L_error_division_by_zero
  9647 00007011 4899                            cqo
  9648 00007013 48F7FB                          idiv rbx
  9649 00007016 4889D7                          mov rdi, rdx
  9650 00007019 E89C030000                      call make_integer
  9651 0000701E C9                              leave
  9652 0000701F C22000                          ret AND_KILL_FRAME(2)
  9653                                  
  9654                                  L_code_ptr_set_car:
  9655 00007022 C8000000                        enter 0, 0
  9656 00007026 48837D1802                      cmp COUNT, 2
  9657 0000702B 0F856F040000                    jne L_error_arg_count_2
  9658 00007031 488B4520                        mov rax, PARAM(0)
  9659                                          assert_pair(rax)
    53 00007035 803821              <1>  cmp byte [%1], %2
    54 00007038 0F8501050000        <1>  jne L_error_incorrect_type
  9660 0000703E 488B5D28                        mov rbx, PARAM(1)
  9661 00007042 48895801                        mov SOB_PAIR_CAR(rax), rbx
  9662 00007046 48B8-                           mov rax, sob_void
  9662 00007048 [0000000000000000] 
  9663 00007050 C9                              leave
  9664 00007051 C22000                          ret AND_KILL_FRAME(2)
  9665                                  
  9666                                  L_code_ptr_set_cdr:
  9667 00007054 C8000000                        enter 0, 0
  9668 00007058 48837D1802                      cmp COUNT, 2
  9669 0000705D 0F853D040000                    jne L_error_arg_count_2
  9670 00007063 488B4520                        mov rax, PARAM(0)
  9671                                          assert_pair(rax)
    53 00007067 803821              <1>  cmp byte [%1], %2
    54 0000706A 0F85CF040000        <1>  jne L_error_incorrect_type
  9672 00007070 488B5D28                        mov rbx, PARAM(1)
  9673 00007074 48895809                        mov SOB_PAIR_CDR(rax), rbx
  9674 00007078 48B8-                           mov rax, sob_void
  9674 0000707A [0000000000000000] 
  9675 00007082 C9                              leave
  9676 00007083 C22000                          ret AND_KILL_FRAME(2)
  9677                                  
  9678                                  L_code_ptr_string_ref:
  9679 00007086 C8000000                        enter 0, 0
  9680 0000708A 48837D1802                      cmp COUNT, 2
  9681 0000708F 0F850B040000                    jne L_error_arg_count_2
  9682 00007095 488B7D20                        mov rdi, PARAM(0)
  9683                                          assert_string(rdi)
    53 00007099 803F03              <1>  cmp byte [%1], %2
    54 0000709C 0F859D040000        <1>  jne L_error_incorrect_type
  9684 000070A2 488B7528                        mov rsi, PARAM(1)
  9685                                          assert_integer(rsi)
    53 000070A6 803E11              <1>  cmp byte [%1], %2
    54 000070A9 0F8590040000        <1>  jne L_error_incorrect_type
  9686 000070AF 488B5701                        mov rdx, qword [rdi + 1]
  9687 000070B3 488B4E01                        mov rcx, qword [rsi + 1]
  9688 000070B7 4839D1                          cmp rcx, rdx
  9689 000070BA 0F8D14030000                    jge L_error_integer_range
  9690 000070C0 4883F900                        cmp rcx, 0
  9691 000070C4 0F8C0A030000                    jl L_error_integer_range
  9692 000070CA 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  9693 000070CE BF02000000                      mov rdi, 2
  9694 000070D3 E8C4E6FFFF                      call malloc
  9695 000070D8 C60002                          mov byte [rax], T_char
  9696 000070DB 885801                          mov byte [rax + 1], bl
  9697 000070DE C9                              leave
  9698 000070DF C22000                          ret AND_KILL_FRAME(2)
  9699                                  
  9700                                  L_code_ptr_vector_ref:
  9701 000070E2 C8000000                        enter 0, 0
  9702 000070E6 48837D1802                      cmp COUNT, 2
  9703 000070EB 0F85AF030000                    jne L_error_arg_count_2
  9704 000070F1 488B7D20                        mov rdi, PARAM(0)
  9705                                          assert_vector(rdi)
    53 000070F5 803F22              <1>  cmp byte [%1], %2
    54 000070F8 0F8541040000        <1>  jne L_error_incorrect_type
  9706 000070FE 488B7528                        mov rsi, PARAM(1)
  9707                                          assert_integer(rsi)
    53 00007102 803E11              <1>  cmp byte [%1], %2
    54 00007105 0F8534040000        <1>  jne L_error_incorrect_type
  9708 0000710B 488B5701                        mov rdx, qword [rdi + 1]
  9709 0000710F 488B4E01                        mov rcx, qword [rsi + 1]
  9710 00007113 4839D1                          cmp rcx, rdx
  9711 00007116 0F8DB8020000                    jge L_error_integer_range
  9712 0000711C 4883F900                        cmp rcx, 0
  9713 00007120 0F8CAE020000                    jl L_error_integer_range
  9714 00007126 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  9715 0000712B C9                              leave
  9716 0000712C C22000                          ret AND_KILL_FRAME(2)
  9717                                  
  9718                                  L_code_ptr_vector_set:
  9719 0000712F C8000000                        enter 0, 0
  9720 00007133 48837D1803                      cmp COUNT, 3
  9721 00007138 0F85CC030000                    jne L_error_arg_count_3
  9722 0000713E 488B7D20                        mov rdi, PARAM(0)
  9723                                          assert_vector(rdi)
    53 00007142 803F22              <1>  cmp byte [%1], %2
    54 00007145 0F85F4030000        <1>  jne L_error_incorrect_type
  9724 0000714B 488B7528                        mov rsi, PARAM(1)
  9725                                          assert_integer(rsi)
    53 0000714F 803E11              <1>  cmp byte [%1], %2
    54 00007152 0F85E7030000        <1>  jne L_error_incorrect_type
  9726 00007158 488B5701                        mov rdx, qword [rdi + 1]
  9727 0000715C 488B4E01                        mov rcx, qword [rsi + 1]
  9728 00007160 4839D1                          cmp rcx, rdx
  9729 00007163 0F8D6B020000                    jge L_error_integer_range
  9730 00007169 4883F900                        cmp rcx, 0
  9731 0000716D 0F8C61020000                    jl L_error_integer_range
  9732 00007173 488B4530                        mov rax, PARAM(2)
  9733 00007177 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  9734 0000717C 48B8-                           mov rax, sob_void
  9734 0000717E [0000000000000000] 
  9735 00007186 C9                              leave
  9736 00007187 C22800                          ret AND_KILL_FRAME(3)
  9737                                  
  9738                                  L_code_ptr_string_set:
  9739 0000718A C8000000                        enter 0, 0
  9740 0000718E 48837D1803                      cmp COUNT, 3
  9741 00007193 0F8571030000                    jne L_error_arg_count_3
  9742 00007199 488B7D20                        mov rdi, PARAM(0)
  9743                                          assert_string(rdi)
    53 0000719D 803F03              <1>  cmp byte [%1], %2
    54 000071A0 0F8599030000        <1>  jne L_error_incorrect_type
  9744 000071A6 488B7528                        mov rsi, PARAM(1)
  9745                                          assert_integer(rsi)
    53 000071AA 803E11              <1>  cmp byte [%1], %2
    54 000071AD 0F858C030000        <1>  jne L_error_incorrect_type
  9746 000071B3 488B5701                        mov rdx, qword [rdi + 1]
  9747 000071B7 488B4E01                        mov rcx, qword [rsi + 1]
  9748 000071BB 4839D1                          cmp rcx, rdx
  9749 000071BE 0F8D10020000                    jge L_error_integer_range
  9750 000071C4 4883F900                        cmp rcx, 0
  9751 000071C8 0F8C06020000                    jl L_error_integer_range
  9752 000071CE 488B4530                        mov rax, PARAM(2)
  9753                                          assert_char(rax)
    53 000071D2 803802              <1>  cmp byte [%1], %2
    54 000071D5 0F8564030000        <1>  jne L_error_incorrect_type
  9754 000071DB 8A4001                          mov al, byte [rax + 1]
  9755 000071DE 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  9756 000071E2 48B8-                           mov rax, sob_void
  9756 000071E4 [0000000000000000] 
  9757 000071EC C9                              leave
  9758 000071ED C22800                          ret AND_KILL_FRAME(3)
  9759                                  
  9760                                  L_code_ptr_make_vector:
  9761 000071F0 C8000000                        enter 0, 0
  9762 000071F4 48837D1802                      cmp COUNT, 2
  9763 000071F9 0F85A1020000                    jne L_error_arg_count_2
  9764 000071FF 488B4D20                        mov rcx, PARAM(0)
  9765                                          assert_integer(rcx)
    53 00007203 803911              <1>  cmp byte [%1], %2
    54 00007206 0F8533030000        <1>  jne L_error_incorrect_type
  9766 0000720C 488B4901                        mov rcx, qword [rcx + 1]
  9767 00007210 4883F900                        cmp rcx, 0
  9768 00007214 0F8CBA010000                    jl L_error_integer_range
  9769 0000721A 488B5528                        mov rdx, PARAM(1)
  9770 0000721E 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  9771 00007226 E871E5FFFF                      call malloc
  9772 0000722B C60022                          mov byte [rax], T_vector
  9773 0000722E 48894801                        mov qword [rax + 1], rcx
  9774 00007232 41B800000000                    mov r8, 0
  9775                                  .L0:
  9776 00007238 4939C8                          cmp r8, rcx
  9777 0000723B 740A                            je .L1
  9778 0000723D 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  9779 00007242 49FFC0                          inc r8
  9780 00007245 EBF1                            jmp .L0
  9781                                  .L1:
  9782 00007247 C9                              leave
  9783 00007248 C22000                          ret AND_KILL_FRAME(2)
  9784                                          
  9785                                  L_code_ptr_make_string:
  9786 0000724B C8000000                        enter 0, 0
  9787 0000724F 48837D1802                      cmp COUNT, 2
  9788 00007254 0F8546020000                    jne L_error_arg_count_2
  9789 0000725A 488B4D20                        mov rcx, PARAM(0)
  9790                                          assert_integer(rcx)
    53 0000725E 803911              <1>  cmp byte [%1], %2
    54 00007261 0F85D8020000        <1>  jne L_error_incorrect_type
  9791 00007267 488B4901                        mov rcx, qword [rcx + 1]
  9792 0000726B 4883F900                        cmp rcx, 0
  9793 0000726F 0F8C5F010000                    jl L_error_integer_range
  9794 00007275 488B5528                        mov rdx, PARAM(1)
  9795                                          assert_char(rdx)
    53 00007279 803A02              <1>  cmp byte [%1], %2
    54 0000727C 0F85BD020000        <1>  jne L_error_incorrect_type
  9796 00007282 8A5201                          mov dl, byte [rdx + 1]
  9797 00007285 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  9798 00007289 E80EE5FFFF                      call malloc
  9799 0000728E C60003                          mov byte [rax], T_string
  9800 00007291 48894801                        mov qword [rax + 1], rcx
  9801 00007295 41B800000000                    mov r8, 0
  9802                                  .L0:
  9803 0000729B 4939C8                          cmp r8, rcx
  9804 0000729E 740A                            je .L1
  9805 000072A0 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  9806 000072A5 49FFC0                          inc r8
  9807 000072A8 EBF1                            jmp .L0
  9808                                  .L1:
  9809 000072AA C9                              leave
  9810 000072AB C22000                          ret AND_KILL_FRAME(2)
  9811                                  
  9812                                  L_code_ptr_numerator:
  9813 000072AE C8000000                        enter 0, 0
  9814 000072B2 48837D1801                      cmp COUNT, 1
  9815 000072B7 0F85AE010000                    jne L_error_arg_count_1
  9816 000072BD 488B4520                        mov rax, PARAM(0)
  9817                                          assert_fraction(rax)
    53 000072C1 803812              <1>  cmp byte [%1], %2
    54 000072C4 0F8575020000        <1>  jne L_error_incorrect_type
  9818 000072CA 488B7801                        mov rdi, qword [rax + 1]
  9819 000072CE E8E7000000                      call make_integer
  9820 000072D3 C9                              leave
  9821 000072D4 C21800                          ret AND_KILL_FRAME(1)
  9822                                          
  9823                                  L_code_ptr_denominator:
  9824 000072D7 C8000000                        enter 0, 0
  9825 000072DB 48837D1801                      cmp COUNT, 1
  9826 000072E0 0F8585010000                    jne L_error_arg_count_1
  9827 000072E6 488B4520                        mov rax, PARAM(0)
  9828                                          assert_fraction(rax)
    53 000072EA 803812              <1>  cmp byte [%1], %2
    54 000072ED 0F854C020000        <1>  jne L_error_incorrect_type
  9829 000072F3 488B7809                        mov rdi, qword [rax + 1 + 8]
  9830 000072F7 E8BE000000                      call make_integer
  9831 000072FC C9                              leave
  9832 000072FD C21800                          ret AND_KILL_FRAME(1)
  9833                                  
  9834                                  L_code_ptr_is_eq:
  9835 00007300 C8000000                	enter 0, 0
  9836 00007304 48837D1802              	cmp COUNT, 2
  9837 00007309 0F8591010000            	jne L_error_arg_count_2
  9838 0000730F 488B7D20                	mov rdi, PARAM(0)
  9839 00007313 488B7528                	mov rsi, PARAM(1)
  9840 00007317 4839F7                  	cmp rdi, rsi
  9841 0000731A 746C                    	je .L_eq_true
  9842 0000731C 8A17                    	mov dl, byte [rdi]
  9843 0000731E 3A16                    	cmp dl, byte [rsi]
  9844 00007320 7572                    	jne .L_eq_false
  9845 00007322 80FA02                  	cmp dl, T_char
  9846 00007325 7459                    	je .L_char
  9847 00007327 80FA41                  	cmp dl, T_interned_symbol
  9848 0000732A 7440                    	je .L_interned_symbol
  9849 0000732C 80FA42                          cmp dl, T_uninterned_symbol
  9850 0000732F 7443                            je .L_uninterned_symbol
  9851 00007331 80FA13                  	cmp dl, T_real
  9852 00007334 742E                    	je .L_real
  9853 00007336 80FA12                  	cmp dl, T_fraction
  9854 00007339 7413                    	je .L_fraction
  9855 0000733B 80FA11                          cmp dl, T_integer
  9856 0000733E 7402                            je .L_integer
  9857 00007340 EB52                    	jmp .L_eq_false
  9858                                  .L_integer:
  9859 00007342 488B4601                        mov rax, qword [rsi + 1]
  9860 00007346 483B4701                        cmp rax, qword [rdi + 1]
  9861 0000734A 7548                            jne .L_eq_false
  9862 0000734C EB3A                            jmp .L_eq_true
  9863                                  .L_fraction:
  9864 0000734E 488B4601                	mov rax, qword [rsi + 1]
  9865 00007352 483B4701                	cmp rax, qword [rdi + 1]
  9866 00007356 753C                    	jne .L_eq_false
  9867 00007358 488B4609                	mov rax, qword [rsi + 1 + 8]
  9868 0000735C 483B4709                	cmp rax, qword [rdi + 1 + 8]
  9869 00007360 7532                    	jne .L_eq_false
  9870 00007362 EB24                    	jmp .L_eq_true
  9871                                  .L_real:
  9872 00007364 488B4601                	mov rax, qword [rsi + 1]
  9873 00007368 483B4701                	cmp rax, qword [rdi + 1]
  9874                                  .L_interned_symbol:
  9875                                  	; never reached, because interned_symbols are static!
  9876                                  	; but I'm keeping it in case, I'll ever change
  9877                                  	; the implementation
  9878 0000736C 488B4601                	mov rax, qword [rsi + 1]
  9879 00007370 483B4701                	cmp rax, qword [rdi + 1]
  9880                                  .L_uninterned_symbol:
  9881 00007374 4C8B4701                        mov r8, qword [rdi + 1]
  9882 00007378 4C3B4601                        cmp r8, qword [rsi + 1]
  9883 0000737C 7516                            jne .L_eq_false
  9884 0000737E EB08                            jmp .L_eq_true
  9885                                  .L_char:
  9886 00007380 8A5E01                  	mov bl, byte [rsi + 1]
  9887 00007383 3A5F01                  	cmp bl, byte [rdi + 1]
  9888 00007386 750C                    	jne .L_eq_false
  9889                                  .L_eq_true:
  9890 00007388 48B8-                   	mov rax, sob_boolean_true
  9890 0000738A [0300000000000000] 
  9891 00007392 EB0A                    	jmp .L_eq_exit
  9892                                  .L_eq_false:
  9893 00007394 48B8-                   	mov rax, sob_boolean_false
  9893 00007396 [0200000000000000] 
  9894                                  .L_eq_exit:
  9895 0000739E C9                      	leave
  9896 0000739F C22000                  	ret AND_KILL_FRAME(2)
  9897                                  
  9898                                  make_real:
  9899 000073A2 C8000000                        enter 0, 0
  9900 000073A6 BF09000000                      mov rdi, (1 + 8)
  9901 000073AB E8ECE3FFFF                      call malloc
  9902 000073B0 C60013                          mov byte [rax], T_real
  9903 000073B3 F20F114001                      movsd qword [rax + 1], xmm0
  9904 000073B8 C9                              leave 
  9905 000073B9 C3                              ret
  9906                                          
  9907                                  make_integer:
  9908 000073BA C8000000                        enter 0, 0
  9909 000073BE 4889FE                          mov rsi, rdi
  9910 000073C1 BF09000000                      mov rdi, (1 + 8)
  9911 000073C6 E8D1E3FFFF                      call malloc
  9912 000073CB C60011                          mov byte [rax], T_integer
  9913 000073CE 48897001                        mov qword [rax + 1], rsi
  9914 000073D2 C9                              leave
  9915 000073D3 C3                              ret
  9916                                          
  9917                                  L_error_integer_range:
  9918 000073D4 488B3C25[00000000]              mov rdi, qword [stderr]
  9919 000073DC 48BE-                           mov rsi, fmt_integer_range
  9919 000073DE [790F000000000000] 
  9920 000073E6 B800000000                      mov rax, 0
  9921                                          ENTER
    44 000073EB C8000000            <1>  enter 0, 0
    45 000073EF 4883E4F0            <1>  and rsp, ~15
  9922 000073F3 E8(00000000)                    call fprintf
  9923                                          LEAVE
    49 000073F8 C9                  <1>  leave
  9924 000073F9 48C7C0FBFFFFFF                  mov rax, -5
  9925 00007400 E8(00000000)                    call exit
  9926                                  
  9927                                  L_error_arg_negative:
  9928 00007405 488B3C25[00000000]              mov rdi, qword [stderr]
  9929 0000740D 48BE-                           mov rsi, fmt_arg_negative
  9929 0000740F [510E000000000000] 
  9930 00007417 B800000000                      mov rax, 0
  9931                                          ENTER
    44 0000741C C8000000            <1>  enter 0, 0
    45 00007420 4883E4F0            <1>  and rsp, ~15
  9932 00007424 E8(00000000)                    call fprintf
  9933                                          LEAVE
    49 00007429 C9                  <1>  leave
  9934 0000742A 48C7C0FDFFFFFF                  mov rax, -3
  9935 00007431 E8(00000000)                    call exit
  9936                                  
  9937                                  L_error_arg_count_0:
  9938 00007436 488B3C25[00000000]              mov rdi, qword [stderr]
  9939 0000743E 48BE-                           mov rsi, fmt_arg_count_0
  9939 00007440 [770E000000000000] 
  9940 00007448 488B5518                        mov rdx, COUNT
  9941 0000744C B800000000                      mov rax, 0
  9942                                          ENTER
    44 00007451 C8000000            <1>  enter 0, 0
    45 00007455 4883E4F0            <1>  and rsp, ~15
  9943 00007459 E8(00000000)                    call fprintf
  9944                                          LEAVE
    49 0000745E C9                  <1>  leave
  9945 0000745F 48C7C0FDFFFFFF                  mov rax, -3
  9946 00007466 E8(00000000)                    call exit
  9947                                  
  9948                                  L_error_arg_count_1:
  9949 0000746B 488B3C25[00000000]              mov rdi, qword [stderr]
  9950 00007473 48BE-                           mov rsi, fmt_arg_count_1
  9950 00007475 [9F0E000000000000] 
  9951 0000747D 488B5518                        mov rdx, COUNT
  9952 00007481 B800000000                      mov rax, 0
  9953                                          ENTER
    44 00007486 C8000000            <1>  enter 0, 0
    45 0000748A 4883E4F0            <1>  and rsp, ~15
  9954 0000748E E8(00000000)                    call fprintf
  9955                                          LEAVE
    49 00007493 C9                  <1>  leave
  9956 00007494 48C7C0FDFFFFFF                  mov rax, -3
  9957 0000749B E8(00000000)                    call exit
  9958                                  
  9959                                  L_error_arg_count_2:
  9960 000074A0 488B3C25[00000000]              mov rdi, qword [stderr]
  9961 000074A8 48BE-                           mov rsi, fmt_arg_count_2
  9961 000074AA [050F000000000000] 
  9962 000074B2 488B5518                        mov rdx, COUNT
  9963 000074B6 B800000000                      mov rax, 0
  9964                                          ENTER
    44 000074BB C8000000            <1>  enter 0, 0
    45 000074BF 4883E4F0            <1>  and rsp, ~15
  9965 000074C3 E8(00000000)                    call fprintf
  9966                                          LEAVE
    49 000074C8 C9                  <1>  leave
  9967 000074C9 48C7C0FDFFFFFF                  mov rax, -3
  9968 000074D0 E8(00000000)                    call exit
  9969                                  
  9970                                  L_error_arg_count_12:
  9971 000074D5 488B3C25[00000000]              mov rdi, qword [stderr]
  9972 000074DD 48BE-                           mov rsi, fmt_arg_count_12
  9972 000074DF [C50E000000000000] 
  9973 000074E7 488B5518                        mov rdx, COUNT
  9974 000074EB B800000000                      mov rax, 0
  9975                                          ENTER
    44 000074F0 C8000000            <1>  enter 0, 0
    45 000074F4 4883E4F0            <1>  and rsp, ~15
  9976 000074F8 E8(00000000)                    call fprintf
  9977                                          LEAVE
    49 000074FD C9                  <1>  leave
  9978 000074FE 48C7C0FDFFFFFF                  mov rax, -3
  9979 00007505 E8(00000000)                    call exit
  9980                                  
  9981                                  L_error_arg_count_3:
  9982 0000750A 488B3C25[00000000]              mov rdi, qword [stderr]
  9983 00007512 48BE-                           mov rsi, fmt_arg_count_3
  9983 00007514 [2C0F000000000000] 
  9984 0000751C 488B5518                        mov rdx, COUNT
  9985 00007520 B800000000                      mov rax, 0
  9986                                          ENTER
    44 00007525 C8000000            <1>  enter 0, 0
    45 00007529 4883E4F0            <1>  and rsp, ~15
  9987 0000752D E8(00000000)                    call fprintf
  9988                                          LEAVE
    49 00007532 C9                  <1>  leave
  9989 00007533 48C7C0FDFFFFFF                  mov rax, -3
  9990 0000753A E8(00000000)                    call exit
  9991                                          
  9992                                  L_error_incorrect_type:
  9993 0000753F 488B3C25[00000000]              mov rdi, qword [stderr]
  9994 00007547 48BE-                           mov rsi, fmt_type
  9994 00007549 [550F000000000000] 
  9995 00007551 B800000000                      mov rax, 0
  9996                                          ENTER
    44 00007556 C8000000            <1>  enter 0, 0
    45 0000755A 4883E4F0            <1>  and rsp, ~15
  9997 0000755E E8(00000000)                    call fprintf
  9998                                          LEAVE
    49 00007563 C9                  <1>  leave
  9999 00007564 48C7C0FCFFFFFF                  mov rax, -4
 10000 0000756B E8(00000000)                    call exit
 10001                                  
 10002                                  L_error_division_by_zero:
 10003 00007570 488B3C25[00000000]              mov rdi, qword [stderr]
 10004 00007578 48BE-                           mov rsi, fmt_division_by_zero
 10004 0000757A [960F000000000000] 
 10005 00007582 B800000000                      mov rax, 0
 10006                                          ENTER
    44 00007587 C8000000            <1>  enter 0, 0
    45 0000758B 4883E4F0            <1>  and rsp, ~15
 10007 0000758F E8(00000000)                    call fprintf
 10008                                          LEAVE
    49 00007594 C9                  <1>  leave
 10009 00007595 48C7C0F8FFFFFF                  mov rax, -8
 10010 0000759C E8(00000000)                    call exit
 10011                                  
 10012                                  section .data
 10013                                  gensym_count:
 10014 00000E46 0000000000000000                dq 0
 10015                                  fmt_char:
 10016 00000E4E 256300                          db `%c\0`
 10017                                  fmt_arg_negative:
 10018 00000E51 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
 10018 00000E5A 7267756D656E742063-
 10018 00000E63 616E6E6F7420626520-
 10018 00000E6C 6E656761746976652E-
 10018 00000E75 0A00               
 10019                                  fmt_arg_count_0:
 10020 00000E77 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 10020 00000E80 74696E67207A65726F-
 10020 00000E89 20617267756D656E74-
 10020 00000E92 732E20466F756E6420-
 10020 00000E9B 25640A00           
 10021                                  fmt_arg_count_1:
 10022 00000E9F 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 10022 00000EA8 74696E67206F6E6520-
 10022 00000EB1 617267756D656E742E-
 10022 00000EBA 20466F756E64202564-
 10022 00000EC3 0A00               
 10023                                  fmt_arg_count_12:
 10024 00000EC5 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 10024 00000ECE 74696E67206F6E6520-
 10024 00000ED7 726571756972656420-
 10024 00000EE0 616E64206F6E65206F-
 10024 00000EE9 7074696F6E616C2061-
 10024 00000EF2 7267756D656E742E20-
 10024 00000EFB 466F756E642025640A-
 10024 00000F04 00                 
 10025                                  fmt_arg_count_2:
 10026 00000F05 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 10026 00000F0E 74696E672074776F20-
 10026 00000F17 617267756D656E7473-
 10026 00000F20 2E20466F756E642025-
 10026 00000F29 640A00             
 10027                                  fmt_arg_count_3:
 10028 00000F2C 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 10028 00000F35 74696E672074687265-
 10028 00000F3E 6520617267756D656E-
 10028 00000F47 74732E20466F756E64-
 10028 00000F50 2025640A00         
 10029                                  fmt_type:
 10030 00000F55 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 10030 00000F5E 696F6E207061737365-
 10030 00000F67 6420696E636F727265-
 10030 00000F70 637420747970650A00 
 10031                                  fmt_integer_range:
 10032 00000F79 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 10032 00000F82 7265637420696E7465-
 10032 00000F8B 6765722072616E6765-
 10032 00000F94 0A00               
 10033                                  fmt_division_by_zero:
 10034 00000F96 212121204469766973-             db `!!! Division by zero\n\0`
 10034 00000F9F 696F6E206279207A65-
 10034 00000FA8 726F0A00           
 10035                                  fmt_scheme_error_part_1:
 10036 00000FAC 0A2121212054686520-             db `\n!!! The procedure \0`
 10036 00000FB5 70726F636564757265-
 10036 00000FBE 2000               
 10037                                  fmt_scheme_error_part_2:
 10038 00000FC0 2061736B656420746F-             db ` asked to terminate the program\n`
 10038 00000FC9 207465726D696E6174-
 10038 00000FD2 65207468652070726F-
 10038 00000FDB 6772616D0A         
 10039 00000FE0 202020207769746820-             db `    with the following message:\n\n\0`
 10039 00000FE9 74686520666F6C6C6F-
 10039 00000FF2 77696E67206D657373-
 10039 00000FFB 6167653A0A0A00     
 10040                                  fmt_scheme_error_part_3:
 10041 00001002 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 10041 0000100B 210A0A00           
