     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "caar"
   469 000005DE 0400000000000000        	dq 4
   470 000005E6 63616172                	db 0x63, 0x61, 0x61, 0x72
   471                                  	; L_constants + 1514:
   472 000005EA 03                      	db T_string	; "cadr"
   473 000005EB 0400000000000000        	dq 4
   474 000005F3 63616472                	db 0x63, 0x61, 0x64, 0x72
   475                                  	; L_constants + 1527:
   476 000005F7 03                      	db T_string	; "cdar"
   477 000005F8 0400000000000000        	dq 4
   478 00000600 63646172                	db 0x63, 0x64, 0x61, 0x72
   479                                  	; L_constants + 1540:
   480 00000604 03                      	db T_string	; "cddr"
   481 00000605 0400000000000000        	dq 4
   482 0000060D 63646472                	db 0x63, 0x64, 0x64, 0x72
   483                                  	; L_constants + 1553:
   484 00000611 03                      	db T_string	; "caaar"
   485 00000612 0500000000000000        	dq 5
   486 0000061A 6361616172              	db 0x63, 0x61, 0x61, 0x61, 0x72
   487                                  	; L_constants + 1567:
   488 0000061F 03                      	db T_string	; "caadr"
   489 00000620 0500000000000000        	dq 5
   490 00000628 6361616472              	db 0x63, 0x61, 0x61, 0x64, 0x72
   491                                  	; L_constants + 1581:
   492 0000062D 03                      	db T_string	; "cadar"
   493 0000062E 0500000000000000        	dq 5
   494 00000636 6361646172              	db 0x63, 0x61, 0x64, 0x61, 0x72
   495                                  	; L_constants + 1595:
   496 0000063B 03                      	db T_string	; "caddr"
   497 0000063C 0500000000000000        	dq 5
   498 00000644 6361646472              	db 0x63, 0x61, 0x64, 0x64, 0x72
   499                                  	; L_constants + 1609:
   500 00000649 03                      	db T_string	; "cdaar"
   501 0000064A 0500000000000000        	dq 5
   502 00000652 6364616172              	db 0x63, 0x64, 0x61, 0x61, 0x72
   503                                  	; L_constants + 1623:
   504 00000657 03                      	db T_string	; "cdadr"
   505 00000658 0500000000000000        	dq 5
   506 00000660 6364616472              	db 0x63, 0x64, 0x61, 0x64, 0x72
   507                                  	; L_constants + 1637:
   508 00000665 03                      	db T_string	; "cddar"
   509 00000666 0500000000000000        	dq 5
   510 0000066E 6364646172              	db 0x63, 0x64, 0x64, 0x61, 0x72
   511                                  	; L_constants + 1651:
   512 00000673 03                      	db T_string	; "cdddr"
   513 00000674 0500000000000000        	dq 5
   514 0000067C 6364646472              	db 0x63, 0x64, 0x64, 0x64, 0x72
   515                                  	; L_constants + 1665:
   516 00000681 03                      	db T_string	; "caaaar"
   517 00000682 0600000000000000        	dq 6
   518 0000068A 636161616172            	db 0x63, 0x61, 0x61, 0x61, 0x61, 0x72
   519                                  	; L_constants + 1680:
   520 00000690 03                      	db T_string	; "caaadr"
   521 00000691 0600000000000000        	dq 6
   522 00000699 636161616472            	db 0x63, 0x61, 0x61, 0x61, 0x64, 0x72
   523                                  	; L_constants + 1695:
   524 0000069F 03                      	db T_string	; "caadar"
   525 000006A0 0600000000000000        	dq 6
   526 000006A8 636161646172            	db 0x63, 0x61, 0x61, 0x64, 0x61, 0x72
   527                                  	; L_constants + 1710:
   528 000006AE 03                      	db T_string	; "caaddr"
   529 000006AF 0600000000000000        	dq 6
   530 000006B7 636161646472            	db 0x63, 0x61, 0x61, 0x64, 0x64, 0x72
   531                                  	; L_constants + 1725:
   532 000006BD 03                      	db T_string	; "cadaar"
   533 000006BE 0600000000000000        	dq 6
   534 000006C6 636164616172            	db 0x63, 0x61, 0x64, 0x61, 0x61, 0x72
   535                                  	; L_constants + 1740:
   536 000006CC 03                      	db T_string	; "cadadr"
   537 000006CD 0600000000000000        	dq 6
   538 000006D5 636164616472            	db 0x63, 0x61, 0x64, 0x61, 0x64, 0x72
   539                                  	; L_constants + 1755:
   540 000006DB 03                      	db T_string	; "caddar"
   541 000006DC 0600000000000000        	dq 6
   542 000006E4 636164646172            	db 0x63, 0x61, 0x64, 0x64, 0x61, 0x72
   543                                  	; L_constants + 1770:
   544 000006EA 03                      	db T_string	; "cadddr"
   545 000006EB 0600000000000000        	dq 6
   546 000006F3 636164646472            	db 0x63, 0x61, 0x64, 0x64, 0x64, 0x72
   547                                  	; L_constants + 1785:
   548 000006F9 03                      	db T_string	; "cdaaar"
   549 000006FA 0600000000000000        	dq 6
   550 00000702 636461616172            	db 0x63, 0x64, 0x61, 0x61, 0x61, 0x72
   551                                  	; L_constants + 1800:
   552 00000708 03                      	db T_string	; "cdaadr"
   553 00000709 0600000000000000        	dq 6
   554 00000711 636461616472            	db 0x63, 0x64, 0x61, 0x61, 0x64, 0x72
   555                                  	; L_constants + 1815:
   556 00000717 03                      	db T_string	; "cdadar"
   557 00000718 0600000000000000        	dq 6
   558 00000720 636461646172            	db 0x63, 0x64, 0x61, 0x64, 0x61, 0x72
   559                                  	; L_constants + 1830:
   560 00000726 03                      	db T_string	; "cdaddr"
   561 00000727 0600000000000000        	dq 6
   562 0000072F 636461646472            	db 0x63, 0x64, 0x61, 0x64, 0x64, 0x72
   563                                  	; L_constants + 1845:
   564 00000735 03                      	db T_string	; "cddaar"
   565 00000736 0600000000000000        	dq 6
   566 0000073E 636464616172            	db 0x63, 0x64, 0x64, 0x61, 0x61, 0x72
   567                                  	; L_constants + 1860:
   568 00000744 03                      	db T_string	; "cddadr"
   569 00000745 0600000000000000        	dq 6
   570 0000074D 636464616472            	db 0x63, 0x64, 0x64, 0x61, 0x64, 0x72
   571                                  	; L_constants + 1875:
   572 00000753 03                      	db T_string	; "cdddar"
   573 00000754 0600000000000000        	dq 6
   574 0000075C 636464646172            	db 0x63, 0x64, 0x64, 0x64, 0x61, 0x72
   575                                  	; L_constants + 1890:
   576 00000762 03                      	db T_string	; "cddddr"
   577 00000763 0600000000000000        	dq 6
   578 0000076B 636464646472            	db 0x63, 0x64, 0x64, 0x64, 0x64, 0x72
   579                                  	; L_constants + 1905:
   580 00000771 03                      	db T_string	; "list?"
   581 00000772 0500000000000000        	dq 5
   582 0000077A 6C6973743F              	db 0x6C, 0x69, 0x73, 0x74, 0x3F
   583                                  	; L_constants + 1919:
   584 0000077F 03                      	db T_string	; "list"
   585 00000780 0400000000000000        	dq 4
   586 00000788 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   587                                  	; L_constants + 1932:
   588 0000078C 03                      	db T_string	; "args"
   589 0000078D 0400000000000000        	dq 4
   590 00000795 61726773                	db 0x61, 0x72, 0x67, 0x73
   591                                  	; L_constants + 1945:
   592 00000799 03                      	db T_string	; "not"
   593 0000079A 0300000000000000        	dq 3
   594 000007A2 6E6F74                  	db 0x6E, 0x6F, 0x74
   595                                  	; L_constants + 1957:
   596 000007A5 03                      	db T_string	; "rational?"
   597 000007A6 0900000000000000        	dq 9
   598 000007AE 726174696F6E616C        	db 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C
   599 000007B6 3F                      	db 0x3F
   600                                  	; L_constants + 1975:
   601 000007B7 03                      	db T_string	; "test"
   602 000007B8 0400000000000000        	dq 4
   603 000007C0 74657374                	db 0x74, 0x65, 0x73, 0x74
   604                                  	; L_constants + 1988:
   605 000007C4 03                      	db T_string	; "+"
   606 000007C5 0100000000000000        	dq 1
   607 000007CD 2B                      	db 0x2B
   608                                  	; L_constants + 1998:
   609 000007CE 11                      	db T_integer	; 3
   610 000007CF 0300000000000000        	dq 3
   611                                  	; L_constants + 2007:
   612 000007D7 11                      	db T_integer	; 2
   613 000007D8 0200000000000000        	dq 2
   614                                  	; L_constants + 2016:
   615 000007E0 03                      	db T_string	; "free_var"
   616 000007E1 0800000000000000        	dq 8
   617 000007E9 667265655F766172        	db 0x66, 0x72, 0x65, 0x65, 0x5F, 0x76, 0x61, 0x72
   618                                  	; L_constants + 2033:
   619 000007F1 03                      	db T_string	; "tail_lambda"
   620 000007F2 0B00000000000000        	dq 11
   621 000007FA 7461696C5F6C616D        	db 0x74, 0x61, 0x69, 0x6C, 0x5F, 0x6C, 0x61, 0x6D
   622 00000802 626461                  	db 0x62, 0x64, 0x61
   623                                  	; L_constants + 2053:
   624 00000805 03                      	db T_string	; "arg_lambda"
   625 00000806 0A00000000000000        	dq 10
   626 0000080E 6172675F6C616D62        	db 0x61, 0x72, 0x67, 0x5F, 0x6C, 0x61, 0x6D, 0x62
   627 00000816 6461                    	db 0x64, 0x61
   628                                  	; L_constants + 2072:
   629 00000818 03                      	db T_string	; "free_var_lambda"
   630 00000819 0F00000000000000        	dq 15
   631 00000821 667265655F766172        	db 0x66, 0x72, 0x65, 0x65, 0x5F, 0x76, 0x61, 0x72
   632 00000829 5F6C616D626461          	db 0x5F, 0x6C, 0x61, 0x6D, 0x62, 0x64, 0x61
   633                                  free_var_0:	; location of +
   634 00000830 [3808000000000000]      	dq .undefined_object
   635                                  .undefined_object:
   636 00000838 05                      	db T_undefined
   637 00000839 [C407000000000000]      	dq L_constants + 1988
   638                                  
   639                                  free_var_1:	; location of arg_lambda
   640 00000841 [4908000000000000]      	dq .undefined_object
   641                                  .undefined_object:
   642 00000849 05                      	db T_undefined
   643 0000084A [0508000000000000]      	dq L_constants + 2053
   644                                  
   645                                  free_var_2:	; location of args
   646 00000852 [5A08000000000000]      	dq .undefined_object
   647                                  .undefined_object:
   648 0000085A 05                      	db T_undefined
   649 0000085B [8C07000000000000]      	dq L_constants + 1932
   650                                  
   651                                  free_var_3:	; location of caaaar
   652 00000863 [6B08000000000000]      	dq .undefined_object
   653                                  .undefined_object:
   654 0000086B 05                      	db T_undefined
   655 0000086C [8106000000000000]      	dq L_constants + 1665
   656                                  
   657                                  free_var_4:	; location of caaadr
   658 00000874 [7C08000000000000]      	dq .undefined_object
   659                                  .undefined_object:
   660 0000087C 05                      	db T_undefined
   661 0000087D [9006000000000000]      	dq L_constants + 1680
   662                                  
   663                                  free_var_5:	; location of caaar
   664 00000885 [8D08000000000000]      	dq .undefined_object
   665                                  .undefined_object:
   666 0000088D 05                      	db T_undefined
   667 0000088E [1106000000000000]      	dq L_constants + 1553
   668                                  
   669                                  free_var_6:	; location of caadar
   670 00000896 [9E08000000000000]      	dq .undefined_object
   671                                  .undefined_object:
   672 0000089E 05                      	db T_undefined
   673 0000089F [9F06000000000000]      	dq L_constants + 1695
   674                                  
   675                                  free_var_7:	; location of caaddr
   676 000008A7 [AF08000000000000]      	dq .undefined_object
   677                                  .undefined_object:
   678 000008AF 05                      	db T_undefined
   679 000008B0 [AE06000000000000]      	dq L_constants + 1710
   680                                  
   681                                  free_var_8:	; location of caadr
   682 000008B8 [C008000000000000]      	dq .undefined_object
   683                                  .undefined_object:
   684 000008C0 05                      	db T_undefined
   685 000008C1 [1F06000000000000]      	dq L_constants + 1567
   686                                  
   687                                  free_var_9:	; location of caar
   688 000008C9 [D108000000000000]      	dq .undefined_object
   689                                  .undefined_object:
   690 000008D1 05                      	db T_undefined
   691 000008D2 [DD05000000000000]      	dq L_constants + 1501
   692                                  
   693                                  free_var_10:	; location of cadaar
   694 000008DA [E208000000000000]      	dq .undefined_object
   695                                  .undefined_object:
   696 000008E2 05                      	db T_undefined
   697 000008E3 [BD06000000000000]      	dq L_constants + 1725
   698                                  
   699                                  free_var_11:	; location of cadadr
   700 000008EB [F308000000000000]      	dq .undefined_object
   701                                  .undefined_object:
   702 000008F3 05                      	db T_undefined
   703 000008F4 [CC06000000000000]      	dq L_constants + 1740
   704                                  
   705                                  free_var_12:	; location of cadar
   706 000008FC [0409000000000000]      	dq .undefined_object
   707                                  .undefined_object:
   708 00000904 05                      	db T_undefined
   709 00000905 [2D06000000000000]      	dq L_constants + 1581
   710                                  
   711                                  free_var_13:	; location of caddar
   712 0000090D [1509000000000000]      	dq .undefined_object
   713                                  .undefined_object:
   714 00000915 05                      	db T_undefined
   715 00000916 [DB06000000000000]      	dq L_constants + 1755
   716                                  
   717                                  free_var_14:	; location of cadddr
   718 0000091E [2609000000000000]      	dq .undefined_object
   719                                  .undefined_object:
   720 00000926 05                      	db T_undefined
   721 00000927 [EA06000000000000]      	dq L_constants + 1770
   722                                  
   723                                  free_var_15:	; location of caddr
   724 0000092F [3709000000000000]      	dq .undefined_object
   725                                  .undefined_object:
   726 00000937 05                      	db T_undefined
   727 00000938 [3B06000000000000]      	dq L_constants + 1595
   728                                  
   729                                  free_var_16:	; location of cadr
   730 00000940 [4809000000000000]      	dq .undefined_object
   731                                  .undefined_object:
   732 00000948 05                      	db T_undefined
   733 00000949 [EA05000000000000]      	dq L_constants + 1514
   734                                  
   735                                  free_var_17:	; location of car
   736 00000951 [5909000000000000]      	dq .undefined_object
   737                                  .undefined_object:
   738 00000959 05                      	db T_undefined
   739 0000095A [1501000000000000]      	dq L_constants + 277
   740                                  
   741                                  free_var_18:	; location of cdaaar
   742 00000962 [6A09000000000000]      	dq .undefined_object
   743                                  .undefined_object:
   744 0000096A 05                      	db T_undefined
   745 0000096B [F906000000000000]      	dq L_constants + 1785
   746                                  
   747                                  free_var_19:	; location of cdaadr
   748 00000973 [7B09000000000000]      	dq .undefined_object
   749                                  .undefined_object:
   750 0000097B 05                      	db T_undefined
   751 0000097C [0807000000000000]      	dq L_constants + 1800
   752                                  
   753                                  free_var_20:	; location of cdaar
   754 00000984 [8C09000000000000]      	dq .undefined_object
   755                                  .undefined_object:
   756 0000098C 05                      	db T_undefined
   757 0000098D [4906000000000000]      	dq L_constants + 1609
   758                                  
   759                                  free_var_21:	; location of cdadar
   760 00000995 [9D09000000000000]      	dq .undefined_object
   761                                  .undefined_object:
   762 0000099D 05                      	db T_undefined
   763 0000099E [1707000000000000]      	dq L_constants + 1815
   764                                  
   765                                  free_var_22:	; location of cdaddr
   766 000009A6 [AE09000000000000]      	dq .undefined_object
   767                                  .undefined_object:
   768 000009AE 05                      	db T_undefined
   769 000009AF [2607000000000000]      	dq L_constants + 1830
   770                                  
   771                                  free_var_23:	; location of cdadr
   772 000009B7 [BF09000000000000]      	dq .undefined_object
   773                                  .undefined_object:
   774 000009BF 05                      	db T_undefined
   775 000009C0 [5706000000000000]      	dq L_constants + 1623
   776                                  
   777                                  free_var_24:	; location of cdar
   778 000009C8 [D009000000000000]      	dq .undefined_object
   779                                  .undefined_object:
   780 000009D0 05                      	db T_undefined
   781 000009D1 [F705000000000000]      	dq L_constants + 1527
   782                                  
   783                                  free_var_25:	; location of cddaar
   784 000009D9 [E109000000000000]      	dq .undefined_object
   785                                  .undefined_object:
   786 000009E1 05                      	db T_undefined
   787 000009E2 [3507000000000000]      	dq L_constants + 1845
   788                                  
   789                                  free_var_26:	; location of cddadr
   790 000009EA [F209000000000000]      	dq .undefined_object
   791                                  .undefined_object:
   792 000009F2 05                      	db T_undefined
   793 000009F3 [4407000000000000]      	dq L_constants + 1860
   794                                  
   795                                  free_var_27:	; location of cddar
   796 000009FB [030A000000000000]      	dq .undefined_object
   797                                  .undefined_object:
   798 00000A03 05                      	db T_undefined
   799 00000A04 [6506000000000000]      	dq L_constants + 1637
   800                                  
   801                                  free_var_28:	; location of cdddar
   802 00000A0C [140A000000000000]      	dq .undefined_object
   803                                  .undefined_object:
   804 00000A14 05                      	db T_undefined
   805 00000A15 [5307000000000000]      	dq L_constants + 1875
   806                                  
   807                                  free_var_29:	; location of cddddr
   808 00000A1D [250A000000000000]      	dq .undefined_object
   809                                  .undefined_object:
   810 00000A25 05                      	db T_undefined
   811 00000A26 [6207000000000000]      	dq L_constants + 1890
   812                                  
   813                                  free_var_30:	; location of cdddr
   814 00000A2E [360A000000000000]      	dq .undefined_object
   815                                  .undefined_object:
   816 00000A36 05                      	db T_undefined
   817 00000A37 [7306000000000000]      	dq L_constants + 1651
   818                                  
   819                                  free_var_31:	; location of cddr
   820 00000A3F [470A000000000000]      	dq .undefined_object
   821                                  .undefined_object:
   822 00000A47 05                      	db T_undefined
   823 00000A48 [0406000000000000]      	dq L_constants + 1540
   824                                  
   825                                  free_var_32:	; location of cdr
   826 00000A50 [580A000000000000]      	dq .undefined_object
   827                                  .undefined_object:
   828 00000A58 05                      	db T_undefined
   829 00000A59 [2101000000000000]      	dq L_constants + 289
   830                                  
   831                                  free_var_33:	; location of fraction?
   832 00000A61 [690A000000000000]      	dq .undefined_object
   833                                  .undefined_object:
   834 00000A69 05                      	db T_undefined
   835 00000A6A [9800000000000000]      	dq L_constants + 152
   836                                  
   837                                  free_var_34:	; location of free_var
   838 00000A72 [7A0A000000000000]      	dq .undefined_object
   839                                  .undefined_object:
   840 00000A7A 05                      	db T_undefined
   841 00000A7B [E007000000000000]      	dq L_constants + 2016
   842                                  
   843                                  free_var_35:	; location of free_var_lambda
   844 00000A83 [8B0A000000000000]      	dq .undefined_object
   845                                  .undefined_object:
   846 00000A8B 05                      	db T_undefined
   847 00000A8C [1808000000000000]      	dq L_constants + 2072
   848                                  
   849                                  free_var_36:	; location of integer?
   850 00000A94 [9C0A000000000000]      	dq .undefined_object
   851                                  .undefined_object:
   852 00000A9C 05                      	db T_undefined
   853 00000A9D [F001000000000000]      	dq L_constants + 496
   854                                  
   855                                  free_var_37:	; location of list
   856 00000AA5 [AD0A000000000000]      	dq .undefined_object
   857                                  .undefined_object:
   858 00000AAD 05                      	db T_undefined
   859 00000AAE [7F07000000000000]      	dq L_constants + 1919
   860                                  
   861                                  free_var_38:	; location of list?
   862 00000AB6 [BE0A000000000000]      	dq .undefined_object
   863                                  .undefined_object:
   864 00000ABE 05                      	db T_undefined
   865 00000ABF [7107000000000000]      	dq L_constants + 1905
   866                                  
   867                                  free_var_39:	; location of not
   868 00000AC7 [CF0A000000000000]      	dq .undefined_object
   869                                  .undefined_object:
   870 00000ACF 05                      	db T_undefined
   871 00000AD0 [9907000000000000]      	dq L_constants + 1945
   872                                  
   873                                  free_var_40:	; location of null?
   874 00000AD8 [E00A000000000000]      	dq .undefined_object
   875                                  .undefined_object:
   876 00000AE0 05                      	db T_undefined
   877 00000AE1 [0600000000000000]      	dq L_constants + 6
   878                                  
   879                                  free_var_41:	; location of pair?
   880 00000AE9 [F10A000000000000]      	dq .undefined_object
   881                                  .undefined_object:
   882 00000AF1 05                      	db T_undefined
   883 00000AF2 [1400000000000000]      	dq L_constants + 20
   884                                  
   885                                  free_var_42:	; location of rational?
   886 00000AFA [020B000000000000]      	dq .undefined_object
   887                                  .undefined_object:
   888 00000B02 05                      	db T_undefined
   889 00000B03 [A507000000000000]      	dq L_constants + 1957
   890                                  
   891                                  free_var_43:	; location of tail_lambda
   892 00000B0B [130B000000000000]      	dq .undefined_object
   893                                  .undefined_object:
   894 00000B13 05                      	db T_undefined
   895 00000B14 [F107000000000000]      	dq L_constants + 2033
   896                                  
   897                                  free_var_44:	; location of test
   898 00000B1C [240B000000000000]      	dq .undefined_object
   899                                  .undefined_object:
   900 00000B24 05                      	db T_undefined
   901 00000B25 [B707000000000000]      	dq L_constants + 1975
   902                                  
   903                                  
   904                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   905                                  global main
   906                                  section .text
   907                                  main:
   908 00000000 C8000000                        enter 0, 0
   909 00000004 6A00                            push 0
   910 00000006 6A00                            push 0
   911 00000008 68[052C0000]                    push Lend
   912 0000000D C8000000                        enter 0, 0
   913                                  	; building closure for null?
   914 00000011 48BF-                   	mov rdi, free_var_40
   914 00000013 [D80A000000000000] 
   915 0000001B 48BE-                   	mov rsi, L_code_ptr_is_null
   915 0000001D [7037000000000000] 
   916 00000025 E876350000              	call bind_primitive
   917                                  
   918                                  	; building closure for pair?
   919 0000002A 48BF-                   	mov rdi, free_var_41
   919 0000002C [E90A000000000000] 
   920 00000034 48BE-                   	mov rsi, L_code_ptr_is_pair
   920 00000036 [A237000000000000] 
   921 0000003E E85D350000              	call bind_primitive
   922                                  
   923                                  	; building closure for fraction?
   924 00000043 48BF-                   	mov rdi, free_var_33
   924 00000045 [610A000000000000] 
   925 0000004D 48BE-                   	mov rsi, L_code_ptr_is_fraction
   925 0000004F [CC39000000000000] 
   926 00000057 E844350000              	call bind_primitive
   927                                  
   928                                  	; building closure for car
   929 0000005C 48BF-                   	mov rdi, free_var_17
   929 0000005E [5109000000000000] 
   930 00000066 48BE-                   	mov rsi, L_code_ptr_car
   930 00000068 [AB3B000000000000] 
   931 00000070 E82B350000              	call bind_primitive
   932                                  
   933                                  	; building closure for cdr
   934 00000075 48BF-                   	mov rdi, free_var_32
   934 00000077 [500A000000000000] 
   935 0000007F 48BE-                   	mov rsi, L_code_ptr_cdr
   935 00000081 [CF3B000000000000] 
   936 00000089 E812350000              	call bind_primitive
   937                                  
   938                                  	; building closure for integer?
   939 0000008E 48BF-                   	mov rdi, free_var_36
   939 00000090 [940A000000000000] 
   940 00000098 48BE-                   	mov rsi, L_code_ptr_is_integer
   940 0000009A [343E000000000000] 
   941 000000A2 E8F9340000              	call bind_primitive
   942                                  
   943 000000A7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   944 000000AC E8BF2C0000              	call malloc
   945 000000B1 50                      	push rax
   946 000000B2 BF00000000              	mov rdi, 8 * 0	; new rib
   947 000000B7 E8B42C0000              	call malloc
   948 000000BC 50                      	push rax
   949 000000BD BF08000000              	mov rdi, 8 * 1	; extended env
   950 000000C2 E8A92C0000              	call malloc
   951 000000C7 488B7D10                	mov rdi, ENV
   952 000000CB BE00000000              	mov rsi, 0
   953 000000D0 BA01000000              	mov rdx, 1
   954                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   955 000000D5 4883FE00                	cmp rsi, 0
   956 000000D9 7410                    	je .L_lambda_simple_env_end_0001
   957 000000DB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   958 000000DF 48890CD0                	mov qword [rax + 8 * rdx], rcx
   959 000000E3 48FFC6                  	inc rsi
   960 000000E6 48FFC2                  	inc rdx
   961 000000E9 EBEA                    	jmp .L_lambda_simple_env_loop_0001
   962                                  .L_lambda_simple_env_end_0001:
   963 000000EB 5B                      	pop rbx
   964 000000EC BE00000000              	mov rsi, 0
   965                                  .L_lambda_simple_params_loop_0001:	; copy params
   966 000000F1 4883FE00                	cmp rsi, 0
   967 000000F5 740E                    	je .L_lambda_simple_params_end_0001
   968 000000F7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   969 000000FC 488914F3                	mov qword [rbx + 8 * rsi], rdx
   970 00000100 48FFC6                  	inc rsi
   971 00000103 EBEC                    	jmp .L_lambda_simple_params_loop_0001
   972                                  .L_lambda_simple_params_end_0001:
   973 00000105 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   974 00000108 4889C3                  	mov rbx, rax
   975 0000010B 58                      	pop rax
   976 0000010C C60004                  	mov byte [rax], T_closure
   977 0000010F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   978 00000113 48C74009[20010000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
   979 0000011B E9A4000000              	jmp .L_lambda_simple_end_0001
   980                                  .L_lambda_simple_code_0001:	; lambda-simple body
   981 00000120 48837C241001            	cmp qword [rsp + 8 * 2], 1
   982 00000126 740B                    	je .L_lambda_simple_arity_check_ok_0001
   983 00000128 FF742410                	push qword [rsp + 8 * 2]
   984 0000012C 6A01                    	push 1
   985 0000012E E9F62B0000              	jmp L_error_incorrect_arity_simple
   986                                  .L_lambda_simple_arity_check_ok_0001:
   987 00000133 C8000000                	enter 0, 0
   988                                  	; preparing a tail-call
   989                                  	; preparing a non-tail-call
   990 00000137 488B4520                	mov rax, PARAM(0)	; param x
   991 0000013B 50                      	push rax
   992 0000013C 6A01                    	push 1	; arg count
   993 0000013E 488B0425[51090000]      	mov rax, qword [free_var_17]	; free var car
   994 00000146 803805                  	cmp byte [rax], T_undefined
   995 00000149 0F84F42A0000            	je L_error_fvar_undefined
   996 0000014F 803804                  	cmp byte [rax], T_closure
   997 00000152 0F856F2B0000            	jne L_error_non_closure
   998 00000158 FF7001                  	push SOB_CLOSURE_ENV(rax)
   999 0000015B FF5009                  	call SOB_CLOSURE_CODE(rax)
  1000 0000015E 50                      	push rax
  1001 0000015F 6A01                    	push 1	; arg count
  1002 00000161 488B0425[51090000]      	mov rax, qword [free_var_17]	; free var car
  1003 00000169 803805                  	cmp byte [rax], T_undefined
  1004 0000016C 0F84D12A0000            	je L_error_fvar_undefined
  1005 00000172 803804                  	cmp byte [rax], T_closure
  1006 00000175 0F854C2B0000            	jne L_error_non_closure
  1007 0000017B FF7001                  	push SOB_CLOSURE_ENV(rax)
  1008 0000017E FF7508                  	push qword [rbp + 8 * 1]
  1009                                   ; old ret addr
  1010 00000181 FF7500                  	push qword [rbp]
  1011                                   ; restore the old rbp
  1012 00000184 BB01000000              	mov rbx, 1
  1013 00000189 4883C303                	add rbx, 3
  1014 0000018D 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1015 00000191 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1016 00000196 4C8D4DF8                	lea r9, [rbp - 8]
  1017 0000019A B905000000              	mov rcx, 5
  1018                                  .L_tc_recycle_frame_loop_0001:
  1019 0000019F 4883F900                	cmp rcx, 0
  1020 000001A3 7413                    	je .L_tc_recycle_frame_done_0001
  1021 000001A5 4D8B11                  	mov r10, qword [r9]
  1022 000001A8 4D8910                  	mov qword [r8], r10
  1023 000001AB 4983E808                	sub r8, 8
  1024 000001AF 4983E908                	sub r9, 8
  1025 000001B3 48FFC9                  	dec rcx
  1026 000001B6 EBE7                    	jmp .L_tc_recycle_frame_loop_0001
  1027                                  .L_tc_recycle_frame_done_0001:
  1028 000001B8 498D6008                	lea rsp, [r8 + 8]
  1029 000001BC 5D                      	pop rbp ; restore the old rbp
  1030 000001BD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1031 000001C0 C9                      	leave
  1032 000001C1 C21800                  	ret AND_KILL_FRAME(1)
  1033                                  .L_lambda_simple_end_0001:	; new closure is in rax
  1034 000001C4 48890425[C9080000]      	mov qword [free_var_9], rax
  1035 000001CC 48B8-                   	mov rax, sob_void
  1035 000001CE [0000000000000000] 
  1036                                  
  1037 000001D6 4889C7                  	mov rdi, rax
  1038 000001D9 E8E72D0000              	call print_sexpr_if_not_void
  1039 000001DE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1040 000001E3 E8882B0000              	call malloc
  1041 000001E8 50                      	push rax
  1042 000001E9 BF00000000              	mov rdi, 8 * 0	; new rib
  1043 000001EE E87D2B0000              	call malloc
  1044 000001F3 50                      	push rax
  1045 000001F4 BF08000000              	mov rdi, 8 * 1	; extended env
  1046 000001F9 E8722B0000              	call malloc
  1047 000001FE 488B7D10                	mov rdi, ENV
  1048 00000202 BE00000000              	mov rsi, 0
  1049 00000207 BA01000000              	mov rdx, 1
  1050                                  .L_lambda_simple_env_loop_0002:	; ext_env[i + 1] <-- env[i]
  1051 0000020C 4883FE00                	cmp rsi, 0
  1052 00000210 7410                    	je .L_lambda_simple_env_end_0002
  1053 00000212 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1054 00000216 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1055 0000021A 48FFC6                  	inc rsi
  1056 0000021D 48FFC2                  	inc rdx
  1057 00000220 EBEA                    	jmp .L_lambda_simple_env_loop_0002
  1058                                  .L_lambda_simple_env_end_0002:
  1059 00000222 5B                      	pop rbx
  1060 00000223 BE00000000              	mov rsi, 0
  1061                                  .L_lambda_simple_params_loop_0002:	; copy params
  1062 00000228 4883FE00                	cmp rsi, 0
  1063 0000022C 740E                    	je .L_lambda_simple_params_end_0002
  1064 0000022E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1065 00000233 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1066 00000237 48FFC6                  	inc rsi
  1067 0000023A EBEC                    	jmp .L_lambda_simple_params_loop_0002
  1068                                  .L_lambda_simple_params_end_0002:
  1069 0000023C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1070 0000023F 4889C3                  	mov rbx, rax
  1071 00000242 58                      	pop rax
  1072 00000243 C60004                  	mov byte [rax], T_closure
  1073 00000246 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1074 0000024A 48C74009[57020000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0002
  1075 00000252 E9A4000000              	jmp .L_lambda_simple_end_0002
  1076                                  .L_lambda_simple_code_0002:	; lambda-simple body
  1077 00000257 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1078 0000025D 740B                    	je .L_lambda_simple_arity_check_ok_0002
  1079 0000025F FF742410                	push qword [rsp + 8 * 2]
  1080 00000263 6A01                    	push 1
  1081 00000265 E9BF2A0000              	jmp L_error_incorrect_arity_simple
  1082                                  .L_lambda_simple_arity_check_ok_0002:
  1083 0000026A C8000000                	enter 0, 0
  1084                                  	; preparing a tail-call
  1085                                  	; preparing a non-tail-call
  1086 0000026E 488B4520                	mov rax, PARAM(0)	; param x
  1087 00000272 50                      	push rax
  1088 00000273 6A01                    	push 1	; arg count
  1089 00000275 488B0425[500A0000]      	mov rax, qword [free_var_32]	; free var cdr
  1090 0000027D 803805                  	cmp byte [rax], T_undefined
  1091 00000280 0F84BD290000            	je L_error_fvar_undefined
  1092 00000286 803804                  	cmp byte [rax], T_closure
  1093 00000289 0F85382A0000            	jne L_error_non_closure
  1094 0000028F FF7001                  	push SOB_CLOSURE_ENV(rax)
  1095 00000292 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1096 00000295 50                      	push rax
  1097 00000296 6A01                    	push 1	; arg count
  1098 00000298 488B0425[51090000]      	mov rax, qword [free_var_17]	; free var car
  1099 000002A0 803805                  	cmp byte [rax], T_undefined
  1100 000002A3 0F849A290000            	je L_error_fvar_undefined
  1101 000002A9 803804                  	cmp byte [rax], T_closure
  1102 000002AC 0F85152A0000            	jne L_error_non_closure
  1103 000002B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1104 000002B5 FF7508                  	push qword [rbp + 8 * 1]
  1105                                   ; old ret addr
  1106 000002B8 FF7500                  	push qword [rbp]
  1107                                   ; restore the old rbp
  1108 000002BB BB01000000              	mov rbx, 1
  1109 000002C0 4883C303                	add rbx, 3
  1110 000002C4 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1111 000002C8 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1112 000002CD 4C8D4DF8                	lea r9, [rbp - 8]
  1113 000002D1 B905000000              	mov rcx, 5
  1114                                  .L_tc_recycle_frame_loop_0002:
  1115 000002D6 4883F900                	cmp rcx, 0
  1116 000002DA 7413                    	je .L_tc_recycle_frame_done_0002
  1117 000002DC 4D8B11                  	mov r10, qword [r9]
  1118 000002DF 4D8910                  	mov qword [r8], r10
  1119 000002E2 4983E808                	sub r8, 8
  1120 000002E6 4983E908                	sub r9, 8
  1121 000002EA 48FFC9                  	dec rcx
  1122 000002ED EBE7                    	jmp .L_tc_recycle_frame_loop_0002
  1123                                  .L_tc_recycle_frame_done_0002:
  1124 000002EF 498D6008                	lea rsp, [r8 + 8]
  1125 000002F3 5D                      	pop rbp ; restore the old rbp
  1126 000002F4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1127 000002F7 C9                      	leave
  1128 000002F8 C21800                  	ret AND_KILL_FRAME(1)
  1129                                  .L_lambda_simple_end_0002:	; new closure is in rax
  1130 000002FB 48890425[40090000]      	mov qword [free_var_16], rax
  1131 00000303 48B8-                   	mov rax, sob_void
  1131 00000305 [0000000000000000] 
  1132                                  
  1133 0000030D 4889C7                  	mov rdi, rax
  1134 00000310 E8B02C0000              	call print_sexpr_if_not_void
  1135 00000315 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1136 0000031A E8512A0000              	call malloc
  1137 0000031F 50                      	push rax
  1138 00000320 BF00000000              	mov rdi, 8 * 0	; new rib
  1139 00000325 E8462A0000              	call malloc
  1140 0000032A 50                      	push rax
  1141 0000032B BF08000000              	mov rdi, 8 * 1	; extended env
  1142 00000330 E83B2A0000              	call malloc
  1143 00000335 488B7D10                	mov rdi, ENV
  1144 00000339 BE00000000              	mov rsi, 0
  1145 0000033E BA01000000              	mov rdx, 1
  1146                                  .L_lambda_simple_env_loop_0003:	; ext_env[i + 1] <-- env[i]
  1147 00000343 4883FE00                	cmp rsi, 0
  1148 00000347 7410                    	je .L_lambda_simple_env_end_0003
  1149 00000349 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1150 0000034D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1151 00000351 48FFC6                  	inc rsi
  1152 00000354 48FFC2                  	inc rdx
  1153 00000357 EBEA                    	jmp .L_lambda_simple_env_loop_0003
  1154                                  .L_lambda_simple_env_end_0003:
  1155 00000359 5B                      	pop rbx
  1156 0000035A BE00000000              	mov rsi, 0
  1157                                  .L_lambda_simple_params_loop_0003:	; copy params
  1158 0000035F 4883FE00                	cmp rsi, 0
  1159 00000363 740E                    	je .L_lambda_simple_params_end_0003
  1160 00000365 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1161 0000036A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1162 0000036E 48FFC6                  	inc rsi
  1163 00000371 EBEC                    	jmp .L_lambda_simple_params_loop_0003
  1164                                  .L_lambda_simple_params_end_0003:
  1165 00000373 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1166 00000376 4889C3                  	mov rbx, rax
  1167 00000379 58                      	pop rax
  1168 0000037A C60004                  	mov byte [rax], T_closure
  1169 0000037D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1170 00000381 48C74009[8E030000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0003
  1171 00000389 E9A4000000              	jmp .L_lambda_simple_end_0003
  1172                                  .L_lambda_simple_code_0003:	; lambda-simple body
  1173 0000038E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1174 00000394 740B                    	je .L_lambda_simple_arity_check_ok_0003
  1175 00000396 FF742410                	push qword [rsp + 8 * 2]
  1176 0000039A 6A01                    	push 1
  1177 0000039C E988290000              	jmp L_error_incorrect_arity_simple
  1178                                  .L_lambda_simple_arity_check_ok_0003:
  1179 000003A1 C8000000                	enter 0, 0
  1180                                  	; preparing a tail-call
  1181                                  	; preparing a non-tail-call
  1182 000003A5 488B4520                	mov rax, PARAM(0)	; param x
  1183 000003A9 50                      	push rax
  1184 000003AA 6A01                    	push 1	; arg count
  1185 000003AC 488B0425[51090000]      	mov rax, qword [free_var_17]	; free var car
  1186 000003B4 803805                  	cmp byte [rax], T_undefined
  1187 000003B7 0F8486280000            	je L_error_fvar_undefined
  1188 000003BD 803804                  	cmp byte [rax], T_closure
  1189 000003C0 0F8501290000            	jne L_error_non_closure
  1190 000003C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1191 000003C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1192 000003CC 50                      	push rax
  1193 000003CD 6A01                    	push 1	; arg count
  1194 000003CF 488B0425[500A0000]      	mov rax, qword [free_var_32]	; free var cdr
  1195 000003D7 803805                  	cmp byte [rax], T_undefined
  1196 000003DA 0F8463280000            	je L_error_fvar_undefined
  1197 000003E0 803804                  	cmp byte [rax], T_closure
  1198 000003E3 0F85DE280000            	jne L_error_non_closure
  1199 000003E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1200 000003EC FF7508                  	push qword [rbp + 8 * 1]
  1201                                   ; old ret addr
  1202 000003EF FF7500                  	push qword [rbp]
  1203                                   ; restore the old rbp
  1204 000003F2 BB01000000              	mov rbx, 1
  1205 000003F7 4883C303                	add rbx, 3
  1206 000003FB 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1207 000003FF 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1208 00000404 4C8D4DF8                	lea r9, [rbp - 8]
  1209 00000408 B905000000              	mov rcx, 5
  1210                                  .L_tc_recycle_frame_loop_0003:
  1211 0000040D 4883F900                	cmp rcx, 0
  1212 00000411 7413                    	je .L_tc_recycle_frame_done_0003
  1213 00000413 4D8B11                  	mov r10, qword [r9]
  1214 00000416 4D8910                  	mov qword [r8], r10
  1215 00000419 4983E808                	sub r8, 8
  1216 0000041D 4983E908                	sub r9, 8
  1217 00000421 48FFC9                  	dec rcx
  1218 00000424 EBE7                    	jmp .L_tc_recycle_frame_loop_0003
  1219                                  .L_tc_recycle_frame_done_0003:
  1220 00000426 498D6008                	lea rsp, [r8 + 8]
  1221 0000042A 5D                      	pop rbp ; restore the old rbp
  1222 0000042B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1223 0000042E C9                      	leave
  1224 0000042F C21800                  	ret AND_KILL_FRAME(1)
  1225                                  .L_lambda_simple_end_0003:	; new closure is in rax
  1226 00000432 48890425[C8090000]      	mov qword [free_var_24], rax
  1227 0000043A 48B8-                   	mov rax, sob_void
  1227 0000043C [0000000000000000] 
  1228                                  
  1229 00000444 4889C7                  	mov rdi, rax
  1230 00000447 E8792B0000              	call print_sexpr_if_not_void
  1231 0000044C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1232 00000451 E81A290000              	call malloc
  1233 00000456 50                      	push rax
  1234 00000457 BF00000000              	mov rdi, 8 * 0	; new rib
  1235 0000045C E80F290000              	call malloc
  1236 00000461 50                      	push rax
  1237 00000462 BF08000000              	mov rdi, 8 * 1	; extended env
  1238 00000467 E804290000              	call malloc
  1239 0000046C 488B7D10                	mov rdi, ENV
  1240 00000470 BE00000000              	mov rsi, 0
  1241 00000475 BA01000000              	mov rdx, 1
  1242                                  .L_lambda_simple_env_loop_0004:	; ext_env[i + 1] <-- env[i]
  1243 0000047A 4883FE00                	cmp rsi, 0
  1244 0000047E 7410                    	je .L_lambda_simple_env_end_0004
  1245 00000480 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1246 00000484 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1247 00000488 48FFC6                  	inc rsi
  1248 0000048B 48FFC2                  	inc rdx
  1249 0000048E EBEA                    	jmp .L_lambda_simple_env_loop_0004
  1250                                  .L_lambda_simple_env_end_0004:
  1251 00000490 5B                      	pop rbx
  1252 00000491 BE00000000              	mov rsi, 0
  1253                                  .L_lambda_simple_params_loop_0004:	; copy params
  1254 00000496 4883FE00                	cmp rsi, 0
  1255 0000049A 740E                    	je .L_lambda_simple_params_end_0004
  1256 0000049C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1257 000004A1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1258 000004A5 48FFC6                  	inc rsi
  1259 000004A8 EBEC                    	jmp .L_lambda_simple_params_loop_0004
  1260                                  .L_lambda_simple_params_end_0004:
  1261 000004AA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1262 000004AD 4889C3                  	mov rbx, rax
  1263 000004B0 58                      	pop rax
  1264 000004B1 C60004                  	mov byte [rax], T_closure
  1265 000004B4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1266 000004B8 48C74009[C5040000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0004
  1267 000004C0 E9A4000000              	jmp .L_lambda_simple_end_0004
  1268                                  .L_lambda_simple_code_0004:	; lambda-simple body
  1269 000004C5 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1270 000004CB 740B                    	je .L_lambda_simple_arity_check_ok_0004
  1271 000004CD FF742410                	push qword [rsp + 8 * 2]
  1272 000004D1 6A01                    	push 1
  1273 000004D3 E951280000              	jmp L_error_incorrect_arity_simple
  1274                                  .L_lambda_simple_arity_check_ok_0004:
  1275 000004D8 C8000000                	enter 0, 0
  1276                                  	; preparing a tail-call
  1277                                  	; preparing a non-tail-call
  1278 000004DC 488B4520                	mov rax, PARAM(0)	; param x
  1279 000004E0 50                      	push rax
  1280 000004E1 6A01                    	push 1	; arg count
  1281 000004E3 488B0425[500A0000]      	mov rax, qword [free_var_32]	; free var cdr
  1282 000004EB 803805                  	cmp byte [rax], T_undefined
  1283 000004EE 0F844F270000            	je L_error_fvar_undefined
  1284 000004F4 803804                  	cmp byte [rax], T_closure
  1285 000004F7 0F85CA270000            	jne L_error_non_closure
  1286 000004FD FF7001                  	push SOB_CLOSURE_ENV(rax)
  1287 00000500 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1288 00000503 50                      	push rax
  1289 00000504 6A01                    	push 1	; arg count
  1290 00000506 488B0425[500A0000]      	mov rax, qword [free_var_32]	; free var cdr
  1291 0000050E 803805                  	cmp byte [rax], T_undefined
  1292 00000511 0F842C270000            	je L_error_fvar_undefined
  1293 00000517 803804                  	cmp byte [rax], T_closure
  1294 0000051A 0F85A7270000            	jne L_error_non_closure
  1295 00000520 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1296 00000523 FF7508                  	push qword [rbp + 8 * 1]
  1297                                   ; old ret addr
  1298 00000526 FF7500                  	push qword [rbp]
  1299                                   ; restore the old rbp
  1300 00000529 BB01000000              	mov rbx, 1
  1301 0000052E 4883C303                	add rbx, 3
  1302 00000532 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1303 00000536 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1304 0000053B 4C8D4DF8                	lea r9, [rbp - 8]
  1305 0000053F B905000000              	mov rcx, 5
  1306                                  .L_tc_recycle_frame_loop_0004:
  1307 00000544 4883F900                	cmp rcx, 0
  1308 00000548 7413                    	je .L_tc_recycle_frame_done_0004
  1309 0000054A 4D8B11                  	mov r10, qword [r9]
  1310 0000054D 4D8910                  	mov qword [r8], r10
  1311 00000550 4983E808                	sub r8, 8
  1312 00000554 4983E908                	sub r9, 8
  1313 00000558 48FFC9                  	dec rcx
  1314 0000055B EBE7                    	jmp .L_tc_recycle_frame_loop_0004
  1315                                  .L_tc_recycle_frame_done_0004:
  1316 0000055D 498D6008                	lea rsp, [r8 + 8]
  1317 00000561 5D                      	pop rbp ; restore the old rbp
  1318 00000562 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1319 00000565 C9                      	leave
  1320 00000566 C21800                  	ret AND_KILL_FRAME(1)
  1321                                  .L_lambda_simple_end_0004:	; new closure is in rax
  1322 00000569 48890425[3F0A0000]      	mov qword [free_var_31], rax
  1323 00000571 48B8-                   	mov rax, sob_void
  1323 00000573 [0000000000000000] 
  1324                                  
  1325 0000057B 4889C7                  	mov rdi, rax
  1326 0000057E E8422A0000              	call print_sexpr_if_not_void
  1327 00000583 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1328 00000588 E8E3270000              	call malloc
  1329 0000058D 50                      	push rax
  1330 0000058E BF00000000              	mov rdi, 8 * 0	; new rib
  1331 00000593 E8D8270000              	call malloc
  1332 00000598 50                      	push rax
  1333 00000599 BF08000000              	mov rdi, 8 * 1	; extended env
  1334 0000059E E8CD270000              	call malloc
  1335 000005A3 488B7D10                	mov rdi, ENV
  1336 000005A7 BE00000000              	mov rsi, 0
  1337 000005AC BA01000000              	mov rdx, 1
  1338                                  .L_lambda_simple_env_loop_0005:	; ext_env[i + 1] <-- env[i]
  1339 000005B1 4883FE00                	cmp rsi, 0
  1340 000005B5 7410                    	je .L_lambda_simple_env_end_0005
  1341 000005B7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1342 000005BB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1343 000005BF 48FFC6                  	inc rsi
  1344 000005C2 48FFC2                  	inc rdx
  1345 000005C5 EBEA                    	jmp .L_lambda_simple_env_loop_0005
  1346                                  .L_lambda_simple_env_end_0005:
  1347 000005C7 5B                      	pop rbx
  1348 000005C8 BE00000000              	mov rsi, 0
  1349                                  .L_lambda_simple_params_loop_0005:	; copy params
  1350 000005CD 4883FE00                	cmp rsi, 0
  1351 000005D1 740E                    	je .L_lambda_simple_params_end_0005
  1352 000005D3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1353 000005D8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1354 000005DC 48FFC6                  	inc rsi
  1355 000005DF EBEC                    	jmp .L_lambda_simple_params_loop_0005
  1356                                  .L_lambda_simple_params_end_0005:
  1357 000005E1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1358 000005E4 4889C3                  	mov rbx, rax
  1359 000005E7 58                      	pop rax
  1360 000005E8 C60004                  	mov byte [rax], T_closure
  1361 000005EB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1362 000005EF 48C74009[FC050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0005
  1363 000005F7 E9A4000000              	jmp .L_lambda_simple_end_0005
  1364                                  .L_lambda_simple_code_0005:	; lambda-simple body
  1365 000005FC 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1366 00000602 740B                    	je .L_lambda_simple_arity_check_ok_0005
  1367 00000604 FF742410                	push qword [rsp + 8 * 2]
  1368 00000608 6A01                    	push 1
  1369 0000060A E91A270000              	jmp L_error_incorrect_arity_simple
  1370                                  .L_lambda_simple_arity_check_ok_0005:
  1371 0000060F C8000000                	enter 0, 0
  1372                                  	; preparing a tail-call
  1373                                  	; preparing a non-tail-call
  1374 00000613 488B4520                	mov rax, PARAM(0)	; param x
  1375 00000617 50                      	push rax
  1376 00000618 6A01                    	push 1	; arg count
  1377 0000061A 488B0425[C9080000]      	mov rax, qword [free_var_9]	; free var caar
  1378 00000622 803805                  	cmp byte [rax], T_undefined
  1379 00000625 0F8418260000            	je L_error_fvar_undefined
  1380 0000062B 803804                  	cmp byte [rax], T_closure
  1381 0000062E 0F8593260000            	jne L_error_non_closure
  1382 00000634 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1383 00000637 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1384 0000063A 50                      	push rax
  1385 0000063B 6A01                    	push 1	; arg count
  1386 0000063D 488B0425[51090000]      	mov rax, qword [free_var_17]	; free var car
  1387 00000645 803805                  	cmp byte [rax], T_undefined
  1388 00000648 0F84F5250000            	je L_error_fvar_undefined
  1389 0000064E 803804                  	cmp byte [rax], T_closure
  1390 00000651 0F8570260000            	jne L_error_non_closure
  1391 00000657 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1392 0000065A FF7508                  	push qword [rbp + 8 * 1]
  1393                                   ; old ret addr
  1394 0000065D FF7500                  	push qword [rbp]
  1395                                   ; restore the old rbp
  1396 00000660 BB01000000              	mov rbx, 1
  1397 00000665 4883C303                	add rbx, 3
  1398 00000669 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1399 0000066D 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1400 00000672 4C8D4DF8                	lea r9, [rbp - 8]
  1401 00000676 B905000000              	mov rcx, 5
  1402                                  .L_tc_recycle_frame_loop_0005:
  1403 0000067B 4883F900                	cmp rcx, 0
  1404 0000067F 7413                    	je .L_tc_recycle_frame_done_0005
  1405 00000681 4D8B11                  	mov r10, qword [r9]
  1406 00000684 4D8910                  	mov qword [r8], r10
  1407 00000687 4983E808                	sub r8, 8
  1408 0000068B 4983E908                	sub r9, 8
  1409 0000068F 48FFC9                  	dec rcx
  1410 00000692 EBE7                    	jmp .L_tc_recycle_frame_loop_0005
  1411                                  .L_tc_recycle_frame_done_0005:
  1412 00000694 498D6008                	lea rsp, [r8 + 8]
  1413 00000698 5D                      	pop rbp ; restore the old rbp
  1414 00000699 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1415 0000069C C9                      	leave
  1416 0000069D C21800                  	ret AND_KILL_FRAME(1)
  1417                                  .L_lambda_simple_end_0005:	; new closure is in rax
  1418 000006A0 48890425[85080000]      	mov qword [free_var_5], rax
  1419 000006A8 48B8-                   	mov rax, sob_void
  1419 000006AA [0000000000000000] 
  1420                                  
  1421 000006B2 4889C7                  	mov rdi, rax
  1422 000006B5 E80B290000              	call print_sexpr_if_not_void
  1423 000006BA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1424 000006BF E8AC260000              	call malloc
  1425 000006C4 50                      	push rax
  1426 000006C5 BF00000000              	mov rdi, 8 * 0	; new rib
  1427 000006CA E8A1260000              	call malloc
  1428 000006CF 50                      	push rax
  1429 000006D0 BF08000000              	mov rdi, 8 * 1	; extended env
  1430 000006D5 E896260000              	call malloc
  1431 000006DA 488B7D10                	mov rdi, ENV
  1432 000006DE BE00000000              	mov rsi, 0
  1433 000006E3 BA01000000              	mov rdx, 1
  1434                                  .L_lambda_simple_env_loop_0006:	; ext_env[i + 1] <-- env[i]
  1435 000006E8 4883FE00                	cmp rsi, 0
  1436 000006EC 7410                    	je .L_lambda_simple_env_end_0006
  1437 000006EE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1438 000006F2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1439 000006F6 48FFC6                  	inc rsi
  1440 000006F9 48FFC2                  	inc rdx
  1441 000006FC EBEA                    	jmp .L_lambda_simple_env_loop_0006
  1442                                  .L_lambda_simple_env_end_0006:
  1443 000006FE 5B                      	pop rbx
  1444 000006FF BE00000000              	mov rsi, 0
  1445                                  .L_lambda_simple_params_loop_0006:	; copy params
  1446 00000704 4883FE00                	cmp rsi, 0
  1447 00000708 740E                    	je .L_lambda_simple_params_end_0006
  1448 0000070A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1449 0000070F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1450 00000713 48FFC6                  	inc rsi
  1451 00000716 EBEC                    	jmp .L_lambda_simple_params_loop_0006
  1452                                  .L_lambda_simple_params_end_0006:
  1453 00000718 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1454 0000071B 4889C3                  	mov rbx, rax
  1455 0000071E 58                      	pop rax
  1456 0000071F C60004                  	mov byte [rax], T_closure
  1457 00000722 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1458 00000726 48C74009[33070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0006
  1459 0000072E E9A4000000              	jmp .L_lambda_simple_end_0006
  1460                                  .L_lambda_simple_code_0006:	; lambda-simple body
  1461 00000733 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1462 00000739 740B                    	je .L_lambda_simple_arity_check_ok_0006
  1463 0000073B FF742410                	push qword [rsp + 8 * 2]
  1464 0000073F 6A01                    	push 1
  1465 00000741 E9E3250000              	jmp L_error_incorrect_arity_simple
  1466                                  .L_lambda_simple_arity_check_ok_0006:
  1467 00000746 C8000000                	enter 0, 0
  1468                                  	; preparing a tail-call
  1469                                  	; preparing a non-tail-call
  1470 0000074A 488B4520                	mov rax, PARAM(0)	; param x
  1471 0000074E 50                      	push rax
  1472 0000074F 6A01                    	push 1	; arg count
  1473 00000751 488B0425[40090000]      	mov rax, qword [free_var_16]	; free var cadr
  1474 00000759 803805                  	cmp byte [rax], T_undefined
  1475 0000075C 0F84E1240000            	je L_error_fvar_undefined
  1476 00000762 803804                  	cmp byte [rax], T_closure
  1477 00000765 0F855C250000            	jne L_error_non_closure
  1478 0000076B FF7001                  	push SOB_CLOSURE_ENV(rax)
  1479 0000076E FF5009                  	call SOB_CLOSURE_CODE(rax)
  1480 00000771 50                      	push rax
  1481 00000772 6A01                    	push 1	; arg count
  1482 00000774 488B0425[51090000]      	mov rax, qword [free_var_17]	; free var car
  1483 0000077C 803805                  	cmp byte [rax], T_undefined
  1484 0000077F 0F84BE240000            	je L_error_fvar_undefined
  1485 00000785 803804                  	cmp byte [rax], T_closure
  1486 00000788 0F8539250000            	jne L_error_non_closure
  1487 0000078E FF7001                  	push SOB_CLOSURE_ENV(rax)
  1488 00000791 FF7508                  	push qword [rbp + 8 * 1]
  1489                                   ; old ret addr
  1490 00000794 FF7500                  	push qword [rbp]
  1491                                   ; restore the old rbp
  1492 00000797 BB01000000              	mov rbx, 1
  1493 0000079C 4883C303                	add rbx, 3
  1494 000007A0 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1495 000007A4 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1496 000007A9 4C8D4DF8                	lea r9, [rbp - 8]
  1497 000007AD B905000000              	mov rcx, 5
  1498                                  .L_tc_recycle_frame_loop_0006:
  1499 000007B2 4883F900                	cmp rcx, 0
  1500 000007B6 7413                    	je .L_tc_recycle_frame_done_0006
  1501 000007B8 4D8B11                  	mov r10, qword [r9]
  1502 000007BB 4D8910                  	mov qword [r8], r10
  1503 000007BE 4983E808                	sub r8, 8
  1504 000007C2 4983E908                	sub r9, 8
  1505 000007C6 48FFC9                  	dec rcx
  1506 000007C9 EBE7                    	jmp .L_tc_recycle_frame_loop_0006
  1507                                  .L_tc_recycle_frame_done_0006:
  1508 000007CB 498D6008                	lea rsp, [r8 + 8]
  1509 000007CF 5D                      	pop rbp ; restore the old rbp
  1510 000007D0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1511 000007D3 C9                      	leave
  1512 000007D4 C21800                  	ret AND_KILL_FRAME(1)
  1513                                  .L_lambda_simple_end_0006:	; new closure is in rax
  1514 000007D7 48890425[B8080000]      	mov qword [free_var_8], rax
  1515 000007DF 48B8-                   	mov rax, sob_void
  1515 000007E1 [0000000000000000] 
  1516                                  
  1517 000007E9 4889C7                  	mov rdi, rax
  1518 000007EC E8D4270000              	call print_sexpr_if_not_void
  1519 000007F1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1520 000007F6 E875250000              	call malloc
  1521 000007FB 50                      	push rax
  1522 000007FC BF00000000              	mov rdi, 8 * 0	; new rib
  1523 00000801 E86A250000              	call malloc
  1524 00000806 50                      	push rax
  1525 00000807 BF08000000              	mov rdi, 8 * 1	; extended env
  1526 0000080C E85F250000              	call malloc
  1527 00000811 488B7D10                	mov rdi, ENV
  1528 00000815 BE00000000              	mov rsi, 0
  1529 0000081A BA01000000              	mov rdx, 1
  1530                                  .L_lambda_simple_env_loop_0007:	; ext_env[i + 1] <-- env[i]
  1531 0000081F 4883FE00                	cmp rsi, 0
  1532 00000823 7410                    	je .L_lambda_simple_env_end_0007
  1533 00000825 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1534 00000829 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1535 0000082D 48FFC6                  	inc rsi
  1536 00000830 48FFC2                  	inc rdx
  1537 00000833 EBEA                    	jmp .L_lambda_simple_env_loop_0007
  1538                                  .L_lambda_simple_env_end_0007:
  1539 00000835 5B                      	pop rbx
  1540 00000836 BE00000000              	mov rsi, 0
  1541                                  .L_lambda_simple_params_loop_0007:	; copy params
  1542 0000083B 4883FE00                	cmp rsi, 0
  1543 0000083F 740E                    	je .L_lambda_simple_params_end_0007
  1544 00000841 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1545 00000846 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1546 0000084A 48FFC6                  	inc rsi
  1547 0000084D EBEC                    	jmp .L_lambda_simple_params_loop_0007
  1548                                  .L_lambda_simple_params_end_0007:
  1549 0000084F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1550 00000852 4889C3                  	mov rbx, rax
  1551 00000855 58                      	pop rax
  1552 00000856 C60004                  	mov byte [rax], T_closure
  1553 00000859 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1554 0000085D 48C74009[6A080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0007
  1555 00000865 E9A4000000              	jmp .L_lambda_simple_end_0007
  1556                                  .L_lambda_simple_code_0007:	; lambda-simple body
  1557 0000086A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1558 00000870 740B                    	je .L_lambda_simple_arity_check_ok_0007
  1559 00000872 FF742410                	push qword [rsp + 8 * 2]
  1560 00000876 6A01                    	push 1
  1561 00000878 E9AC240000              	jmp L_error_incorrect_arity_simple
  1562                                  .L_lambda_simple_arity_check_ok_0007:
  1563 0000087D C8000000                	enter 0, 0
  1564                                  	; preparing a tail-call
  1565                                  	; preparing a non-tail-call
  1566 00000881 488B4520                	mov rax, PARAM(0)	; param x
  1567 00000885 50                      	push rax
  1568 00000886 6A01                    	push 1	; arg count
  1569 00000888 488B0425[C8090000]      	mov rax, qword [free_var_24]	; free var cdar
  1570 00000890 803805                  	cmp byte [rax], T_undefined
  1571 00000893 0F84AA230000            	je L_error_fvar_undefined
  1572 00000899 803804                  	cmp byte [rax], T_closure
  1573 0000089C 0F8525240000            	jne L_error_non_closure
  1574 000008A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1575 000008A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1576 000008A8 50                      	push rax
  1577 000008A9 6A01                    	push 1	; arg count
  1578 000008AB 488B0425[51090000]      	mov rax, qword [free_var_17]	; free var car
  1579 000008B3 803805                  	cmp byte [rax], T_undefined
  1580 000008B6 0F8487230000            	je L_error_fvar_undefined
  1581 000008BC 803804                  	cmp byte [rax], T_closure
  1582 000008BF 0F8502240000            	jne L_error_non_closure
  1583 000008C5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1584 000008C8 FF7508                  	push qword [rbp + 8 * 1]
  1585                                   ; old ret addr
  1586 000008CB FF7500                  	push qword [rbp]
  1587                                   ; restore the old rbp
  1588 000008CE BB01000000              	mov rbx, 1
  1589 000008D3 4883C303                	add rbx, 3
  1590 000008D7 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1591 000008DB 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1592 000008E0 4C8D4DF8                	lea r9, [rbp - 8]
  1593 000008E4 B905000000              	mov rcx, 5
  1594                                  .L_tc_recycle_frame_loop_0007:
  1595 000008E9 4883F900                	cmp rcx, 0
  1596 000008ED 7413                    	je .L_tc_recycle_frame_done_0007
  1597 000008EF 4D8B11                  	mov r10, qword [r9]
  1598 000008F2 4D8910                  	mov qword [r8], r10
  1599 000008F5 4983E808                	sub r8, 8
  1600 000008F9 4983E908                	sub r9, 8
  1601 000008FD 48FFC9                  	dec rcx
  1602 00000900 EBE7                    	jmp .L_tc_recycle_frame_loop_0007
  1603                                  .L_tc_recycle_frame_done_0007:
  1604 00000902 498D6008                	lea rsp, [r8 + 8]
  1605 00000906 5D                      	pop rbp ; restore the old rbp
  1606 00000907 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1607 0000090A C9                      	leave
  1608 0000090B C21800                  	ret AND_KILL_FRAME(1)
  1609                                  .L_lambda_simple_end_0007:	; new closure is in rax
  1610 0000090E 48890425[FC080000]      	mov qword [free_var_12], rax
  1611 00000916 48B8-                   	mov rax, sob_void
  1611 00000918 [0000000000000000] 
  1612                                  
  1613 00000920 4889C7                  	mov rdi, rax
  1614 00000923 E89D260000              	call print_sexpr_if_not_void
  1615 00000928 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1616 0000092D E83E240000              	call malloc
  1617 00000932 50                      	push rax
  1618 00000933 BF00000000              	mov rdi, 8 * 0	; new rib
  1619 00000938 E833240000              	call malloc
  1620 0000093D 50                      	push rax
  1621 0000093E BF08000000              	mov rdi, 8 * 1	; extended env
  1622 00000943 E828240000              	call malloc
  1623 00000948 488B7D10                	mov rdi, ENV
  1624 0000094C BE00000000              	mov rsi, 0
  1625 00000951 BA01000000              	mov rdx, 1
  1626                                  .L_lambda_simple_env_loop_0008:	; ext_env[i + 1] <-- env[i]
  1627 00000956 4883FE00                	cmp rsi, 0
  1628 0000095A 7410                    	je .L_lambda_simple_env_end_0008
  1629 0000095C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1630 00000960 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1631 00000964 48FFC6                  	inc rsi
  1632 00000967 48FFC2                  	inc rdx
  1633 0000096A EBEA                    	jmp .L_lambda_simple_env_loop_0008
  1634                                  .L_lambda_simple_env_end_0008:
  1635 0000096C 5B                      	pop rbx
  1636 0000096D BE00000000              	mov rsi, 0
  1637                                  .L_lambda_simple_params_loop_0008:	; copy params
  1638 00000972 4883FE00                	cmp rsi, 0
  1639 00000976 740E                    	je .L_lambda_simple_params_end_0008
  1640 00000978 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1641 0000097D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1642 00000981 48FFC6                  	inc rsi
  1643 00000984 EBEC                    	jmp .L_lambda_simple_params_loop_0008
  1644                                  .L_lambda_simple_params_end_0008:
  1645 00000986 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1646 00000989 4889C3                  	mov rbx, rax
  1647 0000098C 58                      	pop rax
  1648 0000098D C60004                  	mov byte [rax], T_closure
  1649 00000990 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1650 00000994 48C74009[A1090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0008
  1651 0000099C E9A4000000              	jmp .L_lambda_simple_end_0008
  1652                                  .L_lambda_simple_code_0008:	; lambda-simple body
  1653 000009A1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1654 000009A7 740B                    	je .L_lambda_simple_arity_check_ok_0008
  1655 000009A9 FF742410                	push qword [rsp + 8 * 2]
  1656 000009AD 6A01                    	push 1
  1657 000009AF E975230000              	jmp L_error_incorrect_arity_simple
  1658                                  .L_lambda_simple_arity_check_ok_0008:
  1659 000009B4 C8000000                	enter 0, 0
  1660                                  	; preparing a tail-call
  1661                                  	; preparing a non-tail-call
  1662 000009B8 488B4520                	mov rax, PARAM(0)	; param x
  1663 000009BC 50                      	push rax
  1664 000009BD 6A01                    	push 1	; arg count
  1665 000009BF 488B0425[3F0A0000]      	mov rax, qword [free_var_31]	; free var cddr
  1666 000009C7 803805                  	cmp byte [rax], T_undefined
  1667 000009CA 0F8473220000            	je L_error_fvar_undefined
  1668 000009D0 803804                  	cmp byte [rax], T_closure
  1669 000009D3 0F85EE220000            	jne L_error_non_closure
  1670 000009D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1671 000009DC FF5009                  	call SOB_CLOSURE_CODE(rax)
  1672 000009DF 50                      	push rax
  1673 000009E0 6A01                    	push 1	; arg count
  1674 000009E2 488B0425[51090000]      	mov rax, qword [free_var_17]	; free var car
  1675 000009EA 803805                  	cmp byte [rax], T_undefined
  1676 000009ED 0F8450220000            	je L_error_fvar_undefined
  1677 000009F3 803804                  	cmp byte [rax], T_closure
  1678 000009F6 0F85CB220000            	jne L_error_non_closure
  1679 000009FC FF7001                  	push SOB_CLOSURE_ENV(rax)
  1680 000009FF FF7508                  	push qword [rbp + 8 * 1]
  1681                                   ; old ret addr
  1682 00000A02 FF7500                  	push qword [rbp]
  1683                                   ; restore the old rbp
  1684 00000A05 BB01000000              	mov rbx, 1
  1685 00000A0A 4883C303                	add rbx, 3
  1686 00000A0E 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1687 00000A12 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1688 00000A17 4C8D4DF8                	lea r9, [rbp - 8]
  1689 00000A1B B905000000              	mov rcx, 5
  1690                                  .L_tc_recycle_frame_loop_0008:
  1691 00000A20 4883F900                	cmp rcx, 0
  1692 00000A24 7413                    	je .L_tc_recycle_frame_done_0008
  1693 00000A26 4D8B11                  	mov r10, qword [r9]
  1694 00000A29 4D8910                  	mov qword [r8], r10
  1695 00000A2C 4983E808                	sub r8, 8
  1696 00000A30 4983E908                	sub r9, 8
  1697 00000A34 48FFC9                  	dec rcx
  1698 00000A37 EBE7                    	jmp .L_tc_recycle_frame_loop_0008
  1699                                  .L_tc_recycle_frame_done_0008:
  1700 00000A39 498D6008                	lea rsp, [r8 + 8]
  1701 00000A3D 5D                      	pop rbp ; restore the old rbp
  1702 00000A3E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1703 00000A41 C9                      	leave
  1704 00000A42 C21800                  	ret AND_KILL_FRAME(1)
  1705                                  .L_lambda_simple_end_0008:	; new closure is in rax
  1706 00000A45 48890425[2F090000]      	mov qword [free_var_15], rax
  1707 00000A4D 48B8-                   	mov rax, sob_void
  1707 00000A4F [0000000000000000] 
  1708                                  
  1709 00000A57 4889C7                  	mov rdi, rax
  1710 00000A5A E866250000              	call print_sexpr_if_not_void
  1711 00000A5F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1712 00000A64 E807230000              	call malloc
  1713 00000A69 50                      	push rax
  1714 00000A6A BF00000000              	mov rdi, 8 * 0	; new rib
  1715 00000A6F E8FC220000              	call malloc
  1716 00000A74 50                      	push rax
  1717 00000A75 BF08000000              	mov rdi, 8 * 1	; extended env
  1718 00000A7A E8F1220000              	call malloc
  1719 00000A7F 488B7D10                	mov rdi, ENV
  1720 00000A83 BE00000000              	mov rsi, 0
  1721 00000A88 BA01000000              	mov rdx, 1
  1722                                  .L_lambda_simple_env_loop_0009:	; ext_env[i + 1] <-- env[i]
  1723 00000A8D 4883FE00                	cmp rsi, 0
  1724 00000A91 7410                    	je .L_lambda_simple_env_end_0009
  1725 00000A93 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1726 00000A97 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1727 00000A9B 48FFC6                  	inc rsi
  1728 00000A9E 48FFC2                  	inc rdx
  1729 00000AA1 EBEA                    	jmp .L_lambda_simple_env_loop_0009
  1730                                  .L_lambda_simple_env_end_0009:
  1731 00000AA3 5B                      	pop rbx
  1732 00000AA4 BE00000000              	mov rsi, 0
  1733                                  .L_lambda_simple_params_loop_0009:	; copy params
  1734 00000AA9 4883FE00                	cmp rsi, 0
  1735 00000AAD 740E                    	je .L_lambda_simple_params_end_0009
  1736 00000AAF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1737 00000AB4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1738 00000AB8 48FFC6                  	inc rsi
  1739 00000ABB EBEC                    	jmp .L_lambda_simple_params_loop_0009
  1740                                  .L_lambda_simple_params_end_0009:
  1741 00000ABD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1742 00000AC0 4889C3                  	mov rbx, rax
  1743 00000AC3 58                      	pop rax
  1744 00000AC4 C60004                  	mov byte [rax], T_closure
  1745 00000AC7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1746 00000ACB 48C74009[D80A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0009
  1747 00000AD3 E9A4000000              	jmp .L_lambda_simple_end_0009
  1748                                  .L_lambda_simple_code_0009:	; lambda-simple body
  1749 00000AD8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1750 00000ADE 740B                    	je .L_lambda_simple_arity_check_ok_0009
  1751 00000AE0 FF742410                	push qword [rsp + 8 * 2]
  1752 00000AE4 6A01                    	push 1
  1753 00000AE6 E93E220000              	jmp L_error_incorrect_arity_simple
  1754                                  .L_lambda_simple_arity_check_ok_0009:
  1755 00000AEB C8000000                	enter 0, 0
  1756                                  	; preparing a tail-call
  1757                                  	; preparing a non-tail-call
  1758 00000AEF 488B4520                	mov rax, PARAM(0)	; param x
  1759 00000AF3 50                      	push rax
  1760 00000AF4 6A01                    	push 1	; arg count
  1761 00000AF6 488B0425[C9080000]      	mov rax, qword [free_var_9]	; free var caar
  1762 00000AFE 803805                  	cmp byte [rax], T_undefined
  1763 00000B01 0F843C210000            	je L_error_fvar_undefined
  1764 00000B07 803804                  	cmp byte [rax], T_closure
  1765 00000B0A 0F85B7210000            	jne L_error_non_closure
  1766 00000B10 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1767 00000B13 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1768 00000B16 50                      	push rax
  1769 00000B17 6A01                    	push 1	; arg count
  1770 00000B19 488B0425[500A0000]      	mov rax, qword [free_var_32]	; free var cdr
  1771 00000B21 803805                  	cmp byte [rax], T_undefined
  1772 00000B24 0F8419210000            	je L_error_fvar_undefined
  1773 00000B2A 803804                  	cmp byte [rax], T_closure
  1774 00000B2D 0F8594210000            	jne L_error_non_closure
  1775 00000B33 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1776 00000B36 FF7508                  	push qword [rbp + 8 * 1]
  1777                                   ; old ret addr
  1778 00000B39 FF7500                  	push qword [rbp]
  1779                                   ; restore the old rbp
  1780 00000B3C BB01000000              	mov rbx, 1
  1781 00000B41 4883C303                	add rbx, 3
  1782 00000B45 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1783 00000B49 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1784 00000B4E 4C8D4DF8                	lea r9, [rbp - 8]
  1785 00000B52 B905000000              	mov rcx, 5
  1786                                  .L_tc_recycle_frame_loop_0009:
  1787 00000B57 4883F900                	cmp rcx, 0
  1788 00000B5B 7413                    	je .L_tc_recycle_frame_done_0009
  1789 00000B5D 4D8B11                  	mov r10, qword [r9]
  1790 00000B60 4D8910                  	mov qword [r8], r10
  1791 00000B63 4983E808                	sub r8, 8
  1792 00000B67 4983E908                	sub r9, 8
  1793 00000B6B 48FFC9                  	dec rcx
  1794 00000B6E EBE7                    	jmp .L_tc_recycle_frame_loop_0009
  1795                                  .L_tc_recycle_frame_done_0009:
  1796 00000B70 498D6008                	lea rsp, [r8 + 8]
  1797 00000B74 5D                      	pop rbp ; restore the old rbp
  1798 00000B75 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1799 00000B78 C9                      	leave
  1800 00000B79 C21800                  	ret AND_KILL_FRAME(1)
  1801                                  .L_lambda_simple_end_0009:	; new closure is in rax
  1802 00000B7C 48890425[84090000]      	mov qword [free_var_20], rax
  1803 00000B84 48B8-                   	mov rax, sob_void
  1803 00000B86 [0000000000000000] 
  1804                                  
  1805 00000B8E 4889C7                  	mov rdi, rax
  1806 00000B91 E82F240000              	call print_sexpr_if_not_void
  1807 00000B96 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1808 00000B9B E8D0210000              	call malloc
  1809 00000BA0 50                      	push rax
  1810 00000BA1 BF00000000              	mov rdi, 8 * 0	; new rib
  1811 00000BA6 E8C5210000              	call malloc
  1812 00000BAB 50                      	push rax
  1813 00000BAC BF08000000              	mov rdi, 8 * 1	; extended env
  1814 00000BB1 E8BA210000              	call malloc
  1815 00000BB6 488B7D10                	mov rdi, ENV
  1816 00000BBA BE00000000              	mov rsi, 0
  1817 00000BBF BA01000000              	mov rdx, 1
  1818                                  .L_lambda_simple_env_loop_000a:	; ext_env[i + 1] <-- env[i]
  1819 00000BC4 4883FE00                	cmp rsi, 0
  1820 00000BC8 7410                    	je .L_lambda_simple_env_end_000a
  1821 00000BCA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1822 00000BCE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1823 00000BD2 48FFC6                  	inc rsi
  1824 00000BD5 48FFC2                  	inc rdx
  1825 00000BD8 EBEA                    	jmp .L_lambda_simple_env_loop_000a
  1826                                  .L_lambda_simple_env_end_000a:
  1827 00000BDA 5B                      	pop rbx
  1828 00000BDB BE00000000              	mov rsi, 0
  1829                                  .L_lambda_simple_params_loop_000a:	; copy params
  1830 00000BE0 4883FE00                	cmp rsi, 0
  1831 00000BE4 740E                    	je .L_lambda_simple_params_end_000a
  1832 00000BE6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1833 00000BEB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1834 00000BEF 48FFC6                  	inc rsi
  1835 00000BF2 EBEC                    	jmp .L_lambda_simple_params_loop_000a
  1836                                  .L_lambda_simple_params_end_000a:
  1837 00000BF4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1838 00000BF7 4889C3                  	mov rbx, rax
  1839 00000BFA 58                      	pop rax
  1840 00000BFB C60004                  	mov byte [rax], T_closure
  1841 00000BFE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1842 00000C02 48C74009[0F0C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000a
  1843 00000C0A E9A4000000              	jmp .L_lambda_simple_end_000a
  1844                                  .L_lambda_simple_code_000a:	; lambda-simple body
  1845 00000C0F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1846 00000C15 740B                    	je .L_lambda_simple_arity_check_ok_000a
  1847 00000C17 FF742410                	push qword [rsp + 8 * 2]
  1848 00000C1B 6A01                    	push 1
  1849 00000C1D E907210000              	jmp L_error_incorrect_arity_simple
  1850                                  .L_lambda_simple_arity_check_ok_000a:
  1851 00000C22 C8000000                	enter 0, 0
  1852                                  	; preparing a tail-call
  1853                                  	; preparing a non-tail-call
  1854 00000C26 488B4520                	mov rax, PARAM(0)	; param x
  1855 00000C2A 50                      	push rax
  1856 00000C2B 6A01                    	push 1	; arg count
  1857 00000C2D 488B0425[40090000]      	mov rax, qword [free_var_16]	; free var cadr
  1858 00000C35 803805                  	cmp byte [rax], T_undefined
  1859 00000C38 0F8405200000            	je L_error_fvar_undefined
  1860 00000C3E 803804                  	cmp byte [rax], T_closure
  1861 00000C41 0F8580200000            	jne L_error_non_closure
  1862 00000C47 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1863 00000C4A FF5009                  	call SOB_CLOSURE_CODE(rax)
  1864 00000C4D 50                      	push rax
  1865 00000C4E 6A01                    	push 1	; arg count
  1866 00000C50 488B0425[500A0000]      	mov rax, qword [free_var_32]	; free var cdr
  1867 00000C58 803805                  	cmp byte [rax], T_undefined
  1868 00000C5B 0F84E21F0000            	je L_error_fvar_undefined
  1869 00000C61 803804                  	cmp byte [rax], T_closure
  1870 00000C64 0F855D200000            	jne L_error_non_closure
  1871 00000C6A FF7001                  	push SOB_CLOSURE_ENV(rax)
  1872 00000C6D FF7508                  	push qword [rbp + 8 * 1]
  1873                                   ; old ret addr
  1874 00000C70 FF7500                  	push qword [rbp]
  1875                                   ; restore the old rbp
  1876 00000C73 BB01000000              	mov rbx, 1
  1877 00000C78 4883C303                	add rbx, 3
  1878 00000C7C 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1879 00000C80 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1880 00000C85 4C8D4DF8                	lea r9, [rbp - 8]
  1881 00000C89 B905000000              	mov rcx, 5
  1882                                  .L_tc_recycle_frame_loop_000a:
  1883 00000C8E 4883F900                	cmp rcx, 0
  1884 00000C92 7413                    	je .L_tc_recycle_frame_done_000a
  1885 00000C94 4D8B11                  	mov r10, qword [r9]
  1886 00000C97 4D8910                  	mov qword [r8], r10
  1887 00000C9A 4983E808                	sub r8, 8
  1888 00000C9E 4983E908                	sub r9, 8
  1889 00000CA2 48FFC9                  	dec rcx
  1890 00000CA5 EBE7                    	jmp .L_tc_recycle_frame_loop_000a
  1891                                  .L_tc_recycle_frame_done_000a:
  1892 00000CA7 498D6008                	lea rsp, [r8 + 8]
  1893 00000CAB 5D                      	pop rbp ; restore the old rbp
  1894 00000CAC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1895 00000CAF C9                      	leave
  1896 00000CB0 C21800                  	ret AND_KILL_FRAME(1)
  1897                                  .L_lambda_simple_end_000a:	; new closure is in rax
  1898 00000CB3 48890425[B7090000]      	mov qword [free_var_23], rax
  1899 00000CBB 48B8-                   	mov rax, sob_void
  1899 00000CBD [0000000000000000] 
  1900                                  
  1901 00000CC5 4889C7                  	mov rdi, rax
  1902 00000CC8 E8F8220000              	call print_sexpr_if_not_void
  1903 00000CCD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1904 00000CD2 E899200000              	call malloc
  1905 00000CD7 50                      	push rax
  1906 00000CD8 BF00000000              	mov rdi, 8 * 0	; new rib
  1907 00000CDD E88E200000              	call malloc
  1908 00000CE2 50                      	push rax
  1909 00000CE3 BF08000000              	mov rdi, 8 * 1	; extended env
  1910 00000CE8 E883200000              	call malloc
  1911 00000CED 488B7D10                	mov rdi, ENV
  1912 00000CF1 BE00000000              	mov rsi, 0
  1913 00000CF6 BA01000000              	mov rdx, 1
  1914                                  .L_lambda_simple_env_loop_000b:	; ext_env[i + 1] <-- env[i]
  1915 00000CFB 4883FE00                	cmp rsi, 0
  1916 00000CFF 7410                    	je .L_lambda_simple_env_end_000b
  1917 00000D01 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1918 00000D05 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1919 00000D09 48FFC6                  	inc rsi
  1920 00000D0C 48FFC2                  	inc rdx
  1921 00000D0F EBEA                    	jmp .L_lambda_simple_env_loop_000b
  1922                                  .L_lambda_simple_env_end_000b:
  1923 00000D11 5B                      	pop rbx
  1924 00000D12 BE00000000              	mov rsi, 0
  1925                                  .L_lambda_simple_params_loop_000b:	; copy params
  1926 00000D17 4883FE00                	cmp rsi, 0
  1927 00000D1B 740E                    	je .L_lambda_simple_params_end_000b
  1928 00000D1D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1929 00000D22 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1930 00000D26 48FFC6                  	inc rsi
  1931 00000D29 EBEC                    	jmp .L_lambda_simple_params_loop_000b
  1932                                  .L_lambda_simple_params_end_000b:
  1933 00000D2B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1934 00000D2E 4889C3                  	mov rbx, rax
  1935 00000D31 58                      	pop rax
  1936 00000D32 C60004                  	mov byte [rax], T_closure
  1937 00000D35 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1938 00000D39 48C74009[460D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000b
  1939 00000D41 E9A4000000              	jmp .L_lambda_simple_end_000b
  1940                                  .L_lambda_simple_code_000b:	; lambda-simple body
  1941 00000D46 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1942 00000D4C 740B                    	je .L_lambda_simple_arity_check_ok_000b
  1943 00000D4E FF742410                	push qword [rsp + 8 * 2]
  1944 00000D52 6A01                    	push 1
  1945 00000D54 E9D01F0000              	jmp L_error_incorrect_arity_simple
  1946                                  .L_lambda_simple_arity_check_ok_000b:
  1947 00000D59 C8000000                	enter 0, 0
  1948                                  	; preparing a tail-call
  1949                                  	; preparing a non-tail-call
  1950 00000D5D 488B4520                	mov rax, PARAM(0)	; param x
  1951 00000D61 50                      	push rax
  1952 00000D62 6A01                    	push 1	; arg count
  1953 00000D64 488B0425[C8090000]      	mov rax, qword [free_var_24]	; free var cdar
  1954 00000D6C 803805                  	cmp byte [rax], T_undefined
  1955 00000D6F 0F84CE1E0000            	je L_error_fvar_undefined
  1956 00000D75 803804                  	cmp byte [rax], T_closure
  1957 00000D78 0F85491F0000            	jne L_error_non_closure
  1958 00000D7E FF7001                  	push SOB_CLOSURE_ENV(rax)
  1959 00000D81 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1960 00000D84 50                      	push rax
  1961 00000D85 6A01                    	push 1	; arg count
  1962 00000D87 488B0425[500A0000]      	mov rax, qword [free_var_32]	; free var cdr
  1963 00000D8F 803805                  	cmp byte [rax], T_undefined
  1964 00000D92 0F84AB1E0000            	je L_error_fvar_undefined
  1965 00000D98 803804                  	cmp byte [rax], T_closure
  1966 00000D9B 0F85261F0000            	jne L_error_non_closure
  1967 00000DA1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1968 00000DA4 FF7508                  	push qword [rbp + 8 * 1]
  1969                                   ; old ret addr
  1970 00000DA7 FF7500                  	push qword [rbp]
  1971                                   ; restore the old rbp
  1972 00000DAA BB01000000              	mov rbx, 1
  1973 00000DAF 4883C303                	add rbx, 3
  1974 00000DB3 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1975 00000DB7 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1976 00000DBC 4C8D4DF8                	lea r9, [rbp - 8]
  1977 00000DC0 B905000000              	mov rcx, 5
  1978                                  .L_tc_recycle_frame_loop_000b:
  1979 00000DC5 4883F900                	cmp rcx, 0
  1980 00000DC9 7413                    	je .L_tc_recycle_frame_done_000b
  1981 00000DCB 4D8B11                  	mov r10, qword [r9]
  1982 00000DCE 4D8910                  	mov qword [r8], r10
  1983 00000DD1 4983E808                	sub r8, 8
  1984 00000DD5 4983E908                	sub r9, 8
  1985 00000DD9 48FFC9                  	dec rcx
  1986 00000DDC EBE7                    	jmp .L_tc_recycle_frame_loop_000b
  1987                                  .L_tc_recycle_frame_done_000b:
  1988 00000DDE 498D6008                	lea rsp, [r8 + 8]
  1989 00000DE2 5D                      	pop rbp ; restore the old rbp
  1990 00000DE3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1991 00000DE6 C9                      	leave
  1992 00000DE7 C21800                  	ret AND_KILL_FRAME(1)
  1993                                  .L_lambda_simple_end_000b:	; new closure is in rax
  1994 00000DEA 48890425[FB090000]      	mov qword [free_var_27], rax
  1995 00000DF2 48B8-                   	mov rax, sob_void
  1995 00000DF4 [0000000000000000] 
  1996                                  
  1997 00000DFC 4889C7                  	mov rdi, rax
  1998 00000DFF E8C1210000              	call print_sexpr_if_not_void
  1999 00000E04 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2000 00000E09 E8621F0000              	call malloc
  2001 00000E0E 50                      	push rax
  2002 00000E0F BF00000000              	mov rdi, 8 * 0	; new rib
  2003 00000E14 E8571F0000              	call malloc
  2004 00000E19 50                      	push rax
  2005 00000E1A BF08000000              	mov rdi, 8 * 1	; extended env
  2006 00000E1F E84C1F0000              	call malloc
  2007 00000E24 488B7D10                	mov rdi, ENV
  2008 00000E28 BE00000000              	mov rsi, 0
  2009 00000E2D BA01000000              	mov rdx, 1
  2010                                  .L_lambda_simple_env_loop_000c:	; ext_env[i + 1] <-- env[i]
  2011 00000E32 4883FE00                	cmp rsi, 0
  2012 00000E36 7410                    	je .L_lambda_simple_env_end_000c
  2013 00000E38 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2014 00000E3C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2015 00000E40 48FFC6                  	inc rsi
  2016 00000E43 48FFC2                  	inc rdx
  2017 00000E46 EBEA                    	jmp .L_lambda_simple_env_loop_000c
  2018                                  .L_lambda_simple_env_end_000c:
  2019 00000E48 5B                      	pop rbx
  2020 00000E49 BE00000000              	mov rsi, 0
  2021                                  .L_lambda_simple_params_loop_000c:	; copy params
  2022 00000E4E 4883FE00                	cmp rsi, 0
  2023 00000E52 740E                    	je .L_lambda_simple_params_end_000c
  2024 00000E54 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2025 00000E59 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2026 00000E5D 48FFC6                  	inc rsi
  2027 00000E60 EBEC                    	jmp .L_lambda_simple_params_loop_000c
  2028                                  .L_lambda_simple_params_end_000c:
  2029 00000E62 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2030 00000E65 4889C3                  	mov rbx, rax
  2031 00000E68 58                      	pop rax
  2032 00000E69 C60004                  	mov byte [rax], T_closure
  2033 00000E6C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2034 00000E70 48C74009[7D0E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000c
  2035 00000E78 E9A4000000              	jmp .L_lambda_simple_end_000c
  2036                                  .L_lambda_simple_code_000c:	; lambda-simple body
  2037 00000E7D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2038 00000E83 740B                    	je .L_lambda_simple_arity_check_ok_000c
  2039 00000E85 FF742410                	push qword [rsp + 8 * 2]
  2040 00000E89 6A01                    	push 1
  2041 00000E8B E9991E0000              	jmp L_error_incorrect_arity_simple
  2042                                  .L_lambda_simple_arity_check_ok_000c:
  2043 00000E90 C8000000                	enter 0, 0
  2044                                  	; preparing a tail-call
  2045                                  	; preparing a non-tail-call
  2046 00000E94 488B4520                	mov rax, PARAM(0)	; param x
  2047 00000E98 50                      	push rax
  2048 00000E99 6A01                    	push 1	; arg count
  2049 00000E9B 488B0425[3F0A0000]      	mov rax, qword [free_var_31]	; free var cddr
  2050 00000EA3 803805                  	cmp byte [rax], T_undefined
  2051 00000EA6 0F84971D0000            	je L_error_fvar_undefined
  2052 00000EAC 803804                  	cmp byte [rax], T_closure
  2053 00000EAF 0F85121E0000            	jne L_error_non_closure
  2054 00000EB5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2055 00000EB8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2056 00000EBB 50                      	push rax
  2057 00000EBC 6A01                    	push 1	; arg count
  2058 00000EBE 488B0425[500A0000]      	mov rax, qword [free_var_32]	; free var cdr
  2059 00000EC6 803805                  	cmp byte [rax], T_undefined
  2060 00000EC9 0F84741D0000            	je L_error_fvar_undefined
  2061 00000ECF 803804                  	cmp byte [rax], T_closure
  2062 00000ED2 0F85EF1D0000            	jne L_error_non_closure
  2063 00000ED8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2064 00000EDB FF7508                  	push qword [rbp + 8 * 1]
  2065                                   ; old ret addr
  2066 00000EDE FF7500                  	push qword [rbp]
  2067                                   ; restore the old rbp
  2068 00000EE1 BB01000000              	mov rbx, 1
  2069 00000EE6 4883C303                	add rbx, 3
  2070 00000EEA 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2071 00000EEE 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2072 00000EF3 4C8D4DF8                	lea r9, [rbp - 8]
  2073 00000EF7 B905000000              	mov rcx, 5
  2074                                  .L_tc_recycle_frame_loop_000c:
  2075 00000EFC 4883F900                	cmp rcx, 0
  2076 00000F00 7413                    	je .L_tc_recycle_frame_done_000c
  2077 00000F02 4D8B11                  	mov r10, qword [r9]
  2078 00000F05 4D8910                  	mov qword [r8], r10
  2079 00000F08 4983E808                	sub r8, 8
  2080 00000F0C 4983E908                	sub r9, 8
  2081 00000F10 48FFC9                  	dec rcx
  2082 00000F13 EBE7                    	jmp .L_tc_recycle_frame_loop_000c
  2083                                  .L_tc_recycle_frame_done_000c:
  2084 00000F15 498D6008                	lea rsp, [r8 + 8]
  2085 00000F19 5D                      	pop rbp ; restore the old rbp
  2086 00000F1A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2087 00000F1D C9                      	leave
  2088 00000F1E C21800                  	ret AND_KILL_FRAME(1)
  2089                                  .L_lambda_simple_end_000c:	; new closure is in rax
  2090 00000F21 48890425[2E0A0000]      	mov qword [free_var_30], rax
  2091 00000F29 48B8-                   	mov rax, sob_void
  2091 00000F2B [0000000000000000] 
  2092                                  
  2093 00000F33 4889C7                  	mov rdi, rax
  2094 00000F36 E88A200000              	call print_sexpr_if_not_void
  2095 00000F3B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2096 00000F40 E82B1E0000              	call malloc
  2097 00000F45 50                      	push rax
  2098 00000F46 BF00000000              	mov rdi, 8 * 0	; new rib
  2099 00000F4B E8201E0000              	call malloc
  2100 00000F50 50                      	push rax
  2101 00000F51 BF08000000              	mov rdi, 8 * 1	; extended env
  2102 00000F56 E8151E0000              	call malloc
  2103 00000F5B 488B7D10                	mov rdi, ENV
  2104 00000F5F BE00000000              	mov rsi, 0
  2105 00000F64 BA01000000              	mov rdx, 1
  2106                                  .L_lambda_simple_env_loop_000d:	; ext_env[i + 1] <-- env[i]
  2107 00000F69 4883FE00                	cmp rsi, 0
  2108 00000F6D 7410                    	je .L_lambda_simple_env_end_000d
  2109 00000F6F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2110 00000F73 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2111 00000F77 48FFC6                  	inc rsi
  2112 00000F7A 48FFC2                  	inc rdx
  2113 00000F7D EBEA                    	jmp .L_lambda_simple_env_loop_000d
  2114                                  .L_lambda_simple_env_end_000d:
  2115 00000F7F 5B                      	pop rbx
  2116 00000F80 BE00000000              	mov rsi, 0
  2117                                  .L_lambda_simple_params_loop_000d:	; copy params
  2118 00000F85 4883FE00                	cmp rsi, 0
  2119 00000F89 740E                    	je .L_lambda_simple_params_end_000d
  2120 00000F8B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2121 00000F90 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2122 00000F94 48FFC6                  	inc rsi
  2123 00000F97 EBEC                    	jmp .L_lambda_simple_params_loop_000d
  2124                                  .L_lambda_simple_params_end_000d:
  2125 00000F99 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2126 00000F9C 4889C3                  	mov rbx, rax
  2127 00000F9F 58                      	pop rax
  2128 00000FA0 C60004                  	mov byte [rax], T_closure
  2129 00000FA3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2130 00000FA7 48C74009[B40F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000d
  2131 00000FAF E9A4000000              	jmp .L_lambda_simple_end_000d
  2132                                  .L_lambda_simple_code_000d:	; lambda-simple body
  2133 00000FB4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2134 00000FBA 740B                    	je .L_lambda_simple_arity_check_ok_000d
  2135 00000FBC FF742410                	push qword [rsp + 8 * 2]
  2136 00000FC0 6A01                    	push 1
  2137 00000FC2 E9621D0000              	jmp L_error_incorrect_arity_simple
  2138                                  .L_lambda_simple_arity_check_ok_000d:
  2139 00000FC7 C8000000                	enter 0, 0
  2140                                  	; preparing a tail-call
  2141                                  	; preparing a non-tail-call
  2142 00000FCB 488B4520                	mov rax, PARAM(0)	; param x
  2143 00000FCF 50                      	push rax
  2144 00000FD0 6A01                    	push 1	; arg count
  2145 00000FD2 488B0425[C9080000]      	mov rax, qword [free_var_9]	; free var caar
  2146 00000FDA 803805                  	cmp byte [rax], T_undefined
  2147 00000FDD 0F84601C0000            	je L_error_fvar_undefined
  2148 00000FE3 803804                  	cmp byte [rax], T_closure
  2149 00000FE6 0F85DB1C0000            	jne L_error_non_closure
  2150 00000FEC FF7001                  	push SOB_CLOSURE_ENV(rax)
  2151 00000FEF FF5009                  	call SOB_CLOSURE_CODE(rax)
  2152 00000FF2 50                      	push rax
  2153 00000FF3 6A01                    	push 1	; arg count
  2154 00000FF5 488B0425[C9080000]      	mov rax, qword [free_var_9]	; free var caar
  2155 00000FFD 803805                  	cmp byte [rax], T_undefined
  2156 00001000 0F843D1C0000            	je L_error_fvar_undefined
  2157 00001006 803804                  	cmp byte [rax], T_closure
  2158 00001009 0F85B81C0000            	jne L_error_non_closure
  2159 0000100F FF7001                  	push SOB_CLOSURE_ENV(rax)
  2160 00001012 FF7508                  	push qword [rbp + 8 * 1]
  2161                                   ; old ret addr
  2162 00001015 FF7500                  	push qword [rbp]
  2163                                   ; restore the old rbp
  2164 00001018 BB01000000              	mov rbx, 1
  2165 0000101D 4883C303                	add rbx, 3
  2166 00001021 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2167 00001025 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2168 0000102A 4C8D4DF8                	lea r9, [rbp - 8]
  2169 0000102E B905000000              	mov rcx, 5
  2170                                  .L_tc_recycle_frame_loop_000d:
  2171 00001033 4883F900                	cmp rcx, 0
  2172 00001037 7413                    	je .L_tc_recycle_frame_done_000d
  2173 00001039 4D8B11                  	mov r10, qword [r9]
  2174 0000103C 4D8910                  	mov qword [r8], r10
  2175 0000103F 4983E808                	sub r8, 8
  2176 00001043 4983E908                	sub r9, 8
  2177 00001047 48FFC9                  	dec rcx
  2178 0000104A EBE7                    	jmp .L_tc_recycle_frame_loop_000d
  2179                                  .L_tc_recycle_frame_done_000d:
  2180 0000104C 498D6008                	lea rsp, [r8 + 8]
  2181 00001050 5D                      	pop rbp ; restore the old rbp
  2182 00001051 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2183 00001054 C9                      	leave
  2184 00001055 C21800                  	ret AND_KILL_FRAME(1)
  2185                                  .L_lambda_simple_end_000d:	; new closure is in rax
  2186 00001058 48890425[63080000]      	mov qword [free_var_3], rax
  2187 00001060 48B8-                   	mov rax, sob_void
  2187 00001062 [0000000000000000] 
  2188                                  
  2189 0000106A 4889C7                  	mov rdi, rax
  2190 0000106D E8531F0000              	call print_sexpr_if_not_void
  2191 00001072 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2192 00001077 E8F41C0000              	call malloc
  2193 0000107C 50                      	push rax
  2194 0000107D BF00000000              	mov rdi, 8 * 0	; new rib
  2195 00001082 E8E91C0000              	call malloc
  2196 00001087 50                      	push rax
  2197 00001088 BF08000000              	mov rdi, 8 * 1	; extended env
  2198 0000108D E8DE1C0000              	call malloc
  2199 00001092 488B7D10                	mov rdi, ENV
  2200 00001096 BE00000000              	mov rsi, 0
  2201 0000109B BA01000000              	mov rdx, 1
  2202                                  .L_lambda_simple_env_loop_000e:	; ext_env[i + 1] <-- env[i]
  2203 000010A0 4883FE00                	cmp rsi, 0
  2204 000010A4 7410                    	je .L_lambda_simple_env_end_000e
  2205 000010A6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2206 000010AA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2207 000010AE 48FFC6                  	inc rsi
  2208 000010B1 48FFC2                  	inc rdx
  2209 000010B4 EBEA                    	jmp .L_lambda_simple_env_loop_000e
  2210                                  .L_lambda_simple_env_end_000e:
  2211 000010B6 5B                      	pop rbx
  2212 000010B7 BE00000000              	mov rsi, 0
  2213                                  .L_lambda_simple_params_loop_000e:	; copy params
  2214 000010BC 4883FE00                	cmp rsi, 0
  2215 000010C0 740E                    	je .L_lambda_simple_params_end_000e
  2216 000010C2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2217 000010C7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2218 000010CB 48FFC6                  	inc rsi
  2219 000010CE EBEC                    	jmp .L_lambda_simple_params_loop_000e
  2220                                  .L_lambda_simple_params_end_000e:
  2221 000010D0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2222 000010D3 4889C3                  	mov rbx, rax
  2223 000010D6 58                      	pop rax
  2224 000010D7 C60004                  	mov byte [rax], T_closure
  2225 000010DA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2226 000010DE 48C74009[EB100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000e
  2227 000010E6 E9A4000000              	jmp .L_lambda_simple_end_000e
  2228                                  .L_lambda_simple_code_000e:	; lambda-simple body
  2229 000010EB 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2230 000010F1 740B                    	je .L_lambda_simple_arity_check_ok_000e
  2231 000010F3 FF742410                	push qword [rsp + 8 * 2]
  2232 000010F7 6A01                    	push 1
  2233 000010F9 E92B1C0000              	jmp L_error_incorrect_arity_simple
  2234                                  .L_lambda_simple_arity_check_ok_000e:
  2235 000010FE C8000000                	enter 0, 0
  2236                                  	; preparing a tail-call
  2237                                  	; preparing a non-tail-call
  2238 00001102 488B4520                	mov rax, PARAM(0)	; param x
  2239 00001106 50                      	push rax
  2240 00001107 6A01                    	push 1	; arg count
  2241 00001109 488B0425[40090000]      	mov rax, qword [free_var_16]	; free var cadr
  2242 00001111 803805                  	cmp byte [rax], T_undefined
  2243 00001114 0F84291B0000            	je L_error_fvar_undefined
  2244 0000111A 803804                  	cmp byte [rax], T_closure
  2245 0000111D 0F85A41B0000            	jne L_error_non_closure
  2246 00001123 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2247 00001126 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2248 00001129 50                      	push rax
  2249 0000112A 6A01                    	push 1	; arg count
  2250 0000112C 488B0425[C9080000]      	mov rax, qword [free_var_9]	; free var caar
  2251 00001134 803805                  	cmp byte [rax], T_undefined
  2252 00001137 0F84061B0000            	je L_error_fvar_undefined
  2253 0000113D 803804                  	cmp byte [rax], T_closure
  2254 00001140 0F85811B0000            	jne L_error_non_closure
  2255 00001146 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2256 00001149 FF7508                  	push qword [rbp + 8 * 1]
  2257                                   ; old ret addr
  2258 0000114C FF7500                  	push qword [rbp]
  2259                                   ; restore the old rbp
  2260 0000114F BB01000000              	mov rbx, 1
  2261 00001154 4883C303                	add rbx, 3
  2262 00001158 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2263 0000115C 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2264 00001161 4C8D4DF8                	lea r9, [rbp - 8]
  2265 00001165 B905000000              	mov rcx, 5
  2266                                  .L_tc_recycle_frame_loop_000e:
  2267 0000116A 4883F900                	cmp rcx, 0
  2268 0000116E 7413                    	je .L_tc_recycle_frame_done_000e
  2269 00001170 4D8B11                  	mov r10, qword [r9]
  2270 00001173 4D8910                  	mov qword [r8], r10
  2271 00001176 4983E808                	sub r8, 8
  2272 0000117A 4983E908                	sub r9, 8
  2273 0000117E 48FFC9                  	dec rcx
  2274 00001181 EBE7                    	jmp .L_tc_recycle_frame_loop_000e
  2275                                  .L_tc_recycle_frame_done_000e:
  2276 00001183 498D6008                	lea rsp, [r8 + 8]
  2277 00001187 5D                      	pop rbp ; restore the old rbp
  2278 00001188 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2279 0000118B C9                      	leave
  2280 0000118C C21800                  	ret AND_KILL_FRAME(1)
  2281                                  .L_lambda_simple_end_000e:	; new closure is in rax
  2282 0000118F 48890425[74080000]      	mov qword [free_var_4], rax
  2283 00001197 48B8-                   	mov rax, sob_void
  2283 00001199 [0000000000000000] 
  2284                                  
  2285 000011A1 4889C7                  	mov rdi, rax
  2286 000011A4 E81C1E0000              	call print_sexpr_if_not_void
  2287 000011A9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2288 000011AE E8BD1B0000              	call malloc
  2289 000011B3 50                      	push rax
  2290 000011B4 BF00000000              	mov rdi, 8 * 0	; new rib
  2291 000011B9 E8B21B0000              	call malloc
  2292 000011BE 50                      	push rax
  2293 000011BF BF08000000              	mov rdi, 8 * 1	; extended env
  2294 000011C4 E8A71B0000              	call malloc
  2295 000011C9 488B7D10                	mov rdi, ENV
  2296 000011CD BE00000000              	mov rsi, 0
  2297 000011D2 BA01000000              	mov rdx, 1
  2298                                  .L_lambda_simple_env_loop_000f:	; ext_env[i + 1] <-- env[i]
  2299 000011D7 4883FE00                	cmp rsi, 0
  2300 000011DB 7410                    	je .L_lambda_simple_env_end_000f
  2301 000011DD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2302 000011E1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2303 000011E5 48FFC6                  	inc rsi
  2304 000011E8 48FFC2                  	inc rdx
  2305 000011EB EBEA                    	jmp .L_lambda_simple_env_loop_000f
  2306                                  .L_lambda_simple_env_end_000f:
  2307 000011ED 5B                      	pop rbx
  2308 000011EE BE00000000              	mov rsi, 0
  2309                                  .L_lambda_simple_params_loop_000f:	; copy params
  2310 000011F3 4883FE00                	cmp rsi, 0
  2311 000011F7 740E                    	je .L_lambda_simple_params_end_000f
  2312 000011F9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2313 000011FE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2314 00001202 48FFC6                  	inc rsi
  2315 00001205 EBEC                    	jmp .L_lambda_simple_params_loop_000f
  2316                                  .L_lambda_simple_params_end_000f:
  2317 00001207 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2318 0000120A 4889C3                  	mov rbx, rax
  2319 0000120D 58                      	pop rax
  2320 0000120E C60004                  	mov byte [rax], T_closure
  2321 00001211 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2322 00001215 48C74009[22120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000f
  2323 0000121D E9A4000000              	jmp .L_lambda_simple_end_000f
  2324                                  .L_lambda_simple_code_000f:	; lambda-simple body
  2325 00001222 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2326 00001228 740B                    	je .L_lambda_simple_arity_check_ok_000f
  2327 0000122A FF742410                	push qword [rsp + 8 * 2]
  2328 0000122E 6A01                    	push 1
  2329 00001230 E9F41A0000              	jmp L_error_incorrect_arity_simple
  2330                                  .L_lambda_simple_arity_check_ok_000f:
  2331 00001235 C8000000                	enter 0, 0
  2332                                  	; preparing a tail-call
  2333                                  	; preparing a non-tail-call
  2334 00001239 488B4520                	mov rax, PARAM(0)	; param x
  2335 0000123D 50                      	push rax
  2336 0000123E 6A01                    	push 1	; arg count
  2337 00001240 488B0425[C8090000]      	mov rax, qword [free_var_24]	; free var cdar
  2338 00001248 803805                  	cmp byte [rax], T_undefined
  2339 0000124B 0F84F2190000            	je L_error_fvar_undefined
  2340 00001251 803804                  	cmp byte [rax], T_closure
  2341 00001254 0F856D1A0000            	jne L_error_non_closure
  2342 0000125A FF7001                  	push SOB_CLOSURE_ENV(rax)
  2343 0000125D FF5009                  	call SOB_CLOSURE_CODE(rax)
  2344 00001260 50                      	push rax
  2345 00001261 6A01                    	push 1	; arg count
  2346 00001263 488B0425[C9080000]      	mov rax, qword [free_var_9]	; free var caar
  2347 0000126B 803805                  	cmp byte [rax], T_undefined
  2348 0000126E 0F84CF190000            	je L_error_fvar_undefined
  2349 00001274 803804                  	cmp byte [rax], T_closure
  2350 00001277 0F854A1A0000            	jne L_error_non_closure
  2351 0000127D FF7001                  	push SOB_CLOSURE_ENV(rax)
  2352 00001280 FF7508                  	push qword [rbp + 8 * 1]
  2353                                   ; old ret addr
  2354 00001283 FF7500                  	push qword [rbp]
  2355                                   ; restore the old rbp
  2356 00001286 BB01000000              	mov rbx, 1
  2357 0000128B 4883C303                	add rbx, 3
  2358 0000128F 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2359 00001293 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2360 00001298 4C8D4DF8                	lea r9, [rbp - 8]
  2361 0000129C B905000000              	mov rcx, 5
  2362                                  .L_tc_recycle_frame_loop_000f:
  2363 000012A1 4883F900                	cmp rcx, 0
  2364 000012A5 7413                    	je .L_tc_recycle_frame_done_000f
  2365 000012A7 4D8B11                  	mov r10, qword [r9]
  2366 000012AA 4D8910                  	mov qword [r8], r10
  2367 000012AD 4983E808                	sub r8, 8
  2368 000012B1 4983E908                	sub r9, 8
  2369 000012B5 48FFC9                  	dec rcx
  2370 000012B8 EBE7                    	jmp .L_tc_recycle_frame_loop_000f
  2371                                  .L_tc_recycle_frame_done_000f:
  2372 000012BA 498D6008                	lea rsp, [r8 + 8]
  2373 000012BE 5D                      	pop rbp ; restore the old rbp
  2374 000012BF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2375 000012C2 C9                      	leave
  2376 000012C3 C21800                  	ret AND_KILL_FRAME(1)
  2377                                  .L_lambda_simple_end_000f:	; new closure is in rax
  2378 000012C6 48890425[96080000]      	mov qword [free_var_6], rax
  2379 000012CE 48B8-                   	mov rax, sob_void
  2379 000012D0 [0000000000000000] 
  2380                                  
  2381 000012D8 4889C7                  	mov rdi, rax
  2382 000012DB E8E51C0000              	call print_sexpr_if_not_void
  2383 000012E0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2384 000012E5 E8861A0000              	call malloc
  2385 000012EA 50                      	push rax
  2386 000012EB BF00000000              	mov rdi, 8 * 0	; new rib
  2387 000012F0 E87B1A0000              	call malloc
  2388 000012F5 50                      	push rax
  2389 000012F6 BF08000000              	mov rdi, 8 * 1	; extended env
  2390 000012FB E8701A0000              	call malloc
  2391 00001300 488B7D10                	mov rdi, ENV
  2392 00001304 BE00000000              	mov rsi, 0
  2393 00001309 BA01000000              	mov rdx, 1
  2394                                  .L_lambda_simple_env_loop_0010:	; ext_env[i + 1] <-- env[i]
  2395 0000130E 4883FE00                	cmp rsi, 0
  2396 00001312 7410                    	je .L_lambda_simple_env_end_0010
  2397 00001314 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2398 00001318 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2399 0000131C 48FFC6                  	inc rsi
  2400 0000131F 48FFC2                  	inc rdx
  2401 00001322 EBEA                    	jmp .L_lambda_simple_env_loop_0010
  2402                                  .L_lambda_simple_env_end_0010:
  2403 00001324 5B                      	pop rbx
  2404 00001325 BE00000000              	mov rsi, 0
  2405                                  .L_lambda_simple_params_loop_0010:	; copy params
  2406 0000132A 4883FE00                	cmp rsi, 0
  2407 0000132E 740E                    	je .L_lambda_simple_params_end_0010
  2408 00001330 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2409 00001335 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2410 00001339 48FFC6                  	inc rsi
  2411 0000133C EBEC                    	jmp .L_lambda_simple_params_loop_0010
  2412                                  .L_lambda_simple_params_end_0010:
  2413 0000133E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2414 00001341 4889C3                  	mov rbx, rax
  2415 00001344 58                      	pop rax
  2416 00001345 C60004                  	mov byte [rax], T_closure
  2417 00001348 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2418 0000134C 48C74009[59130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0010
  2419 00001354 E9A4000000              	jmp .L_lambda_simple_end_0010
  2420                                  .L_lambda_simple_code_0010:	; lambda-simple body
  2421 00001359 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2422 0000135F 740B                    	je .L_lambda_simple_arity_check_ok_0010
  2423 00001361 FF742410                	push qword [rsp + 8 * 2]
  2424 00001365 6A01                    	push 1
  2425 00001367 E9BD190000              	jmp L_error_incorrect_arity_simple
  2426                                  .L_lambda_simple_arity_check_ok_0010:
  2427 0000136C C8000000                	enter 0, 0
  2428                                  	; preparing a tail-call
  2429                                  	; preparing a non-tail-call
  2430 00001370 488B4520                	mov rax, PARAM(0)	; param x
  2431 00001374 50                      	push rax
  2432 00001375 6A01                    	push 1	; arg count
  2433 00001377 488B0425[3F0A0000]      	mov rax, qword [free_var_31]	; free var cddr
  2434 0000137F 803805                  	cmp byte [rax], T_undefined
  2435 00001382 0F84BB180000            	je L_error_fvar_undefined
  2436 00001388 803804                  	cmp byte [rax], T_closure
  2437 0000138B 0F8536190000            	jne L_error_non_closure
  2438 00001391 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2439 00001394 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2440 00001397 50                      	push rax
  2441 00001398 6A01                    	push 1	; arg count
  2442 0000139A 488B0425[C9080000]      	mov rax, qword [free_var_9]	; free var caar
  2443 000013A2 803805                  	cmp byte [rax], T_undefined
  2444 000013A5 0F8498180000            	je L_error_fvar_undefined
  2445 000013AB 803804                  	cmp byte [rax], T_closure
  2446 000013AE 0F8513190000            	jne L_error_non_closure
  2447 000013B4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2448 000013B7 FF7508                  	push qword [rbp + 8 * 1]
  2449                                   ; old ret addr
  2450 000013BA FF7500                  	push qword [rbp]
  2451                                   ; restore the old rbp
  2452 000013BD BB01000000              	mov rbx, 1
  2453 000013C2 4883C303                	add rbx, 3
  2454 000013C6 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2455 000013CA 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2456 000013CF 4C8D4DF8                	lea r9, [rbp - 8]
  2457 000013D3 B905000000              	mov rcx, 5
  2458                                  .L_tc_recycle_frame_loop_0010:
  2459 000013D8 4883F900                	cmp rcx, 0
  2460 000013DC 7413                    	je .L_tc_recycle_frame_done_0010
  2461 000013DE 4D8B11                  	mov r10, qword [r9]
  2462 000013E1 4D8910                  	mov qword [r8], r10
  2463 000013E4 4983E808                	sub r8, 8
  2464 000013E8 4983E908                	sub r9, 8
  2465 000013EC 48FFC9                  	dec rcx
  2466 000013EF EBE7                    	jmp .L_tc_recycle_frame_loop_0010
  2467                                  .L_tc_recycle_frame_done_0010:
  2468 000013F1 498D6008                	lea rsp, [r8 + 8]
  2469 000013F5 5D                      	pop rbp ; restore the old rbp
  2470 000013F6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2471 000013F9 C9                      	leave
  2472 000013FA C21800                  	ret AND_KILL_FRAME(1)
  2473                                  .L_lambda_simple_end_0010:	; new closure is in rax
  2474 000013FD 48890425[A7080000]      	mov qword [free_var_7], rax
  2475 00001405 48B8-                   	mov rax, sob_void
  2475 00001407 [0000000000000000] 
  2476                                  
  2477 0000140F 4889C7                  	mov rdi, rax
  2478 00001412 E8AE1B0000              	call print_sexpr_if_not_void
  2479 00001417 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2480 0000141C E84F190000              	call malloc
  2481 00001421 50                      	push rax
  2482 00001422 BF00000000              	mov rdi, 8 * 0	; new rib
  2483 00001427 E844190000              	call malloc
  2484 0000142C 50                      	push rax
  2485 0000142D BF08000000              	mov rdi, 8 * 1	; extended env
  2486 00001432 E839190000              	call malloc
  2487 00001437 488B7D10                	mov rdi, ENV
  2488 0000143B BE00000000              	mov rsi, 0
  2489 00001440 BA01000000              	mov rdx, 1
  2490                                  .L_lambda_simple_env_loop_0011:	; ext_env[i + 1] <-- env[i]
  2491 00001445 4883FE00                	cmp rsi, 0
  2492 00001449 7410                    	je .L_lambda_simple_env_end_0011
  2493 0000144B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2494 0000144F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2495 00001453 48FFC6                  	inc rsi
  2496 00001456 48FFC2                  	inc rdx
  2497 00001459 EBEA                    	jmp .L_lambda_simple_env_loop_0011
  2498                                  .L_lambda_simple_env_end_0011:
  2499 0000145B 5B                      	pop rbx
  2500 0000145C BE00000000              	mov rsi, 0
  2501                                  .L_lambda_simple_params_loop_0011:	; copy params
  2502 00001461 4883FE00                	cmp rsi, 0
  2503 00001465 740E                    	je .L_lambda_simple_params_end_0011
  2504 00001467 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2505 0000146C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2506 00001470 48FFC6                  	inc rsi
  2507 00001473 EBEC                    	jmp .L_lambda_simple_params_loop_0011
  2508                                  .L_lambda_simple_params_end_0011:
  2509 00001475 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2510 00001478 4889C3                  	mov rbx, rax
  2511 0000147B 58                      	pop rax
  2512 0000147C C60004                  	mov byte [rax], T_closure
  2513 0000147F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2514 00001483 48C74009[90140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0011
  2515 0000148B E9A4000000              	jmp .L_lambda_simple_end_0011
  2516                                  .L_lambda_simple_code_0011:	; lambda-simple body
  2517 00001490 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2518 00001496 740B                    	je .L_lambda_simple_arity_check_ok_0011
  2519 00001498 FF742410                	push qword [rsp + 8 * 2]
  2520 0000149C 6A01                    	push 1
  2521 0000149E E986180000              	jmp L_error_incorrect_arity_simple
  2522                                  .L_lambda_simple_arity_check_ok_0011:
  2523 000014A3 C8000000                	enter 0, 0
  2524                                  	; preparing a tail-call
  2525                                  	; preparing a non-tail-call
  2526 000014A7 488B4520                	mov rax, PARAM(0)	; param x
  2527 000014AB 50                      	push rax
  2528 000014AC 6A01                    	push 1	; arg count
  2529 000014AE 488B0425[C9080000]      	mov rax, qword [free_var_9]	; free var caar
  2530 000014B6 803805                  	cmp byte [rax], T_undefined
  2531 000014B9 0F8484170000            	je L_error_fvar_undefined
  2532 000014BF 803804                  	cmp byte [rax], T_closure
  2533 000014C2 0F85FF170000            	jne L_error_non_closure
  2534 000014C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2535 000014CB FF5009                  	call SOB_CLOSURE_CODE(rax)
  2536 000014CE 50                      	push rax
  2537 000014CF 6A01                    	push 1	; arg count
  2538 000014D1 488B0425[40090000]      	mov rax, qword [free_var_16]	; free var cadr
  2539 000014D9 803805                  	cmp byte [rax], T_undefined
  2540 000014DC 0F8461170000            	je L_error_fvar_undefined
  2541 000014E2 803804                  	cmp byte [rax], T_closure
  2542 000014E5 0F85DC170000            	jne L_error_non_closure
  2543 000014EB FF7001                  	push SOB_CLOSURE_ENV(rax)
  2544 000014EE FF7508                  	push qword [rbp + 8 * 1]
  2545                                   ; old ret addr
  2546 000014F1 FF7500                  	push qword [rbp]
  2547                                   ; restore the old rbp
  2548 000014F4 BB01000000              	mov rbx, 1
  2549 000014F9 4883C303                	add rbx, 3
  2550 000014FD 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2551 00001501 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2552 00001506 4C8D4DF8                	lea r9, [rbp - 8]
  2553 0000150A B905000000              	mov rcx, 5
  2554                                  .L_tc_recycle_frame_loop_0011:
  2555 0000150F 4883F900                	cmp rcx, 0
  2556 00001513 7413                    	je .L_tc_recycle_frame_done_0011
  2557 00001515 4D8B11                  	mov r10, qword [r9]
  2558 00001518 4D8910                  	mov qword [r8], r10
  2559 0000151B 4983E808                	sub r8, 8
  2560 0000151F 4983E908                	sub r9, 8
  2561 00001523 48FFC9                  	dec rcx
  2562 00001526 EBE7                    	jmp .L_tc_recycle_frame_loop_0011
  2563                                  .L_tc_recycle_frame_done_0011:
  2564 00001528 498D6008                	lea rsp, [r8 + 8]
  2565 0000152C 5D                      	pop rbp ; restore the old rbp
  2566 0000152D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2567 00001530 C9                      	leave
  2568 00001531 C21800                  	ret AND_KILL_FRAME(1)
  2569                                  .L_lambda_simple_end_0011:	; new closure is in rax
  2570 00001534 48890425[DA080000]      	mov qword [free_var_10], rax
  2571 0000153C 48B8-                   	mov rax, sob_void
  2571 0000153E [0000000000000000] 
  2572                                  
  2573 00001546 4889C7                  	mov rdi, rax
  2574 00001549 E8771A0000              	call print_sexpr_if_not_void
  2575 0000154E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2576 00001553 E818180000              	call malloc
  2577 00001558 50                      	push rax
  2578 00001559 BF00000000              	mov rdi, 8 * 0	; new rib
  2579 0000155E E80D180000              	call malloc
  2580 00001563 50                      	push rax
  2581 00001564 BF08000000              	mov rdi, 8 * 1	; extended env
  2582 00001569 E802180000              	call malloc
  2583 0000156E 488B7D10                	mov rdi, ENV
  2584 00001572 BE00000000              	mov rsi, 0
  2585 00001577 BA01000000              	mov rdx, 1
  2586                                  .L_lambda_simple_env_loop_0012:	; ext_env[i + 1] <-- env[i]
  2587 0000157C 4883FE00                	cmp rsi, 0
  2588 00001580 7410                    	je .L_lambda_simple_env_end_0012
  2589 00001582 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2590 00001586 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2591 0000158A 48FFC6                  	inc rsi
  2592 0000158D 48FFC2                  	inc rdx
  2593 00001590 EBEA                    	jmp .L_lambda_simple_env_loop_0012
  2594                                  .L_lambda_simple_env_end_0012:
  2595 00001592 5B                      	pop rbx
  2596 00001593 BE00000000              	mov rsi, 0
  2597                                  .L_lambda_simple_params_loop_0012:	; copy params
  2598 00001598 4883FE00                	cmp rsi, 0
  2599 0000159C 740E                    	je .L_lambda_simple_params_end_0012
  2600 0000159E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2601 000015A3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2602 000015A7 48FFC6                  	inc rsi
  2603 000015AA EBEC                    	jmp .L_lambda_simple_params_loop_0012
  2604                                  .L_lambda_simple_params_end_0012:
  2605 000015AC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2606 000015AF 4889C3                  	mov rbx, rax
  2607 000015B2 58                      	pop rax
  2608 000015B3 C60004                  	mov byte [rax], T_closure
  2609 000015B6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2610 000015BA 48C74009[C7150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0012
  2611 000015C2 E9A4000000              	jmp .L_lambda_simple_end_0012
  2612                                  .L_lambda_simple_code_0012:	; lambda-simple body
  2613 000015C7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2614 000015CD 740B                    	je .L_lambda_simple_arity_check_ok_0012
  2615 000015CF FF742410                	push qword [rsp + 8 * 2]
  2616 000015D3 6A01                    	push 1
  2617 000015D5 E94F170000              	jmp L_error_incorrect_arity_simple
  2618                                  .L_lambda_simple_arity_check_ok_0012:
  2619 000015DA C8000000                	enter 0, 0
  2620                                  	; preparing a tail-call
  2621                                  	; preparing a non-tail-call
  2622 000015DE 488B4520                	mov rax, PARAM(0)	; param x
  2623 000015E2 50                      	push rax
  2624 000015E3 6A01                    	push 1	; arg count
  2625 000015E5 488B0425[40090000]      	mov rax, qword [free_var_16]	; free var cadr
  2626 000015ED 803805                  	cmp byte [rax], T_undefined
  2627 000015F0 0F844D160000            	je L_error_fvar_undefined
  2628 000015F6 803804                  	cmp byte [rax], T_closure
  2629 000015F9 0F85C8160000            	jne L_error_non_closure
  2630 000015FF FF7001                  	push SOB_CLOSURE_ENV(rax)
  2631 00001602 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2632 00001605 50                      	push rax
  2633 00001606 6A01                    	push 1	; arg count
  2634 00001608 488B0425[40090000]      	mov rax, qword [free_var_16]	; free var cadr
  2635 00001610 803805                  	cmp byte [rax], T_undefined
  2636 00001613 0F842A160000            	je L_error_fvar_undefined
  2637 00001619 803804                  	cmp byte [rax], T_closure
  2638 0000161C 0F85A5160000            	jne L_error_non_closure
  2639 00001622 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2640 00001625 FF7508                  	push qword [rbp + 8 * 1]
  2641                                   ; old ret addr
  2642 00001628 FF7500                  	push qword [rbp]
  2643                                   ; restore the old rbp
  2644 0000162B BB01000000              	mov rbx, 1
  2645 00001630 4883C303                	add rbx, 3
  2646 00001634 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2647 00001638 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2648 0000163D 4C8D4DF8                	lea r9, [rbp - 8]
  2649 00001641 B905000000              	mov rcx, 5
  2650                                  .L_tc_recycle_frame_loop_0012:
  2651 00001646 4883F900                	cmp rcx, 0
  2652 0000164A 7413                    	je .L_tc_recycle_frame_done_0012
  2653 0000164C 4D8B11                  	mov r10, qword [r9]
  2654 0000164F 4D8910                  	mov qword [r8], r10
  2655 00001652 4983E808                	sub r8, 8
  2656 00001656 4983E908                	sub r9, 8
  2657 0000165A 48FFC9                  	dec rcx
  2658 0000165D EBE7                    	jmp .L_tc_recycle_frame_loop_0012
  2659                                  .L_tc_recycle_frame_done_0012:
  2660 0000165F 498D6008                	lea rsp, [r8 + 8]
  2661 00001663 5D                      	pop rbp ; restore the old rbp
  2662 00001664 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2663 00001667 C9                      	leave
  2664 00001668 C21800                  	ret AND_KILL_FRAME(1)
  2665                                  .L_lambda_simple_end_0012:	; new closure is in rax
  2666 0000166B 48890425[EB080000]      	mov qword [free_var_11], rax
  2667 00001673 48B8-                   	mov rax, sob_void
  2667 00001675 [0000000000000000] 
  2668                                  
  2669 0000167D 4889C7                  	mov rdi, rax
  2670 00001680 E840190000              	call print_sexpr_if_not_void
  2671 00001685 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2672 0000168A E8E1160000              	call malloc
  2673 0000168F 50                      	push rax
  2674 00001690 BF00000000              	mov rdi, 8 * 0	; new rib
  2675 00001695 E8D6160000              	call malloc
  2676 0000169A 50                      	push rax
  2677 0000169B BF08000000              	mov rdi, 8 * 1	; extended env
  2678 000016A0 E8CB160000              	call malloc
  2679 000016A5 488B7D10                	mov rdi, ENV
  2680 000016A9 BE00000000              	mov rsi, 0
  2681 000016AE BA01000000              	mov rdx, 1
  2682                                  .L_lambda_simple_env_loop_0013:	; ext_env[i + 1] <-- env[i]
  2683 000016B3 4883FE00                	cmp rsi, 0
  2684 000016B7 7410                    	je .L_lambda_simple_env_end_0013
  2685 000016B9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2686 000016BD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2687 000016C1 48FFC6                  	inc rsi
  2688 000016C4 48FFC2                  	inc rdx
  2689 000016C7 EBEA                    	jmp .L_lambda_simple_env_loop_0013
  2690                                  .L_lambda_simple_env_end_0013:
  2691 000016C9 5B                      	pop rbx
  2692 000016CA BE00000000              	mov rsi, 0
  2693                                  .L_lambda_simple_params_loop_0013:	; copy params
  2694 000016CF 4883FE00                	cmp rsi, 0
  2695 000016D3 740E                    	je .L_lambda_simple_params_end_0013
  2696 000016D5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2697 000016DA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2698 000016DE 48FFC6                  	inc rsi
  2699 000016E1 EBEC                    	jmp .L_lambda_simple_params_loop_0013
  2700                                  .L_lambda_simple_params_end_0013:
  2701 000016E3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2702 000016E6 4889C3                  	mov rbx, rax
  2703 000016E9 58                      	pop rax
  2704 000016EA C60004                  	mov byte [rax], T_closure
  2705 000016ED 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2706 000016F1 48C74009[FE160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0013
  2707 000016F9 E9A4000000              	jmp .L_lambda_simple_end_0013
  2708                                  .L_lambda_simple_code_0013:	; lambda-simple body
  2709 000016FE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2710 00001704 740B                    	je .L_lambda_simple_arity_check_ok_0013
  2711 00001706 FF742410                	push qword [rsp + 8 * 2]
  2712 0000170A 6A01                    	push 1
  2713 0000170C E918160000              	jmp L_error_incorrect_arity_simple
  2714                                  .L_lambda_simple_arity_check_ok_0013:
  2715 00001711 C8000000                	enter 0, 0
  2716                                  	; preparing a tail-call
  2717                                  	; preparing a non-tail-call
  2718 00001715 488B4520                	mov rax, PARAM(0)	; param x
  2719 00001719 50                      	push rax
  2720 0000171A 6A01                    	push 1	; arg count
  2721 0000171C 488B0425[C8090000]      	mov rax, qword [free_var_24]	; free var cdar
  2722 00001724 803805                  	cmp byte [rax], T_undefined
  2723 00001727 0F8416150000            	je L_error_fvar_undefined
  2724 0000172D 803804                  	cmp byte [rax], T_closure
  2725 00001730 0F8591150000            	jne L_error_non_closure
  2726 00001736 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2727 00001739 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2728 0000173C 50                      	push rax
  2729 0000173D 6A01                    	push 1	; arg count
  2730 0000173F 488B0425[40090000]      	mov rax, qword [free_var_16]	; free var cadr
  2731 00001747 803805                  	cmp byte [rax], T_undefined
  2732 0000174A 0F84F3140000            	je L_error_fvar_undefined
  2733 00001750 803804                  	cmp byte [rax], T_closure
  2734 00001753 0F856E150000            	jne L_error_non_closure
  2735 00001759 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2736 0000175C FF7508                  	push qword [rbp + 8 * 1]
  2737                                   ; old ret addr
  2738 0000175F FF7500                  	push qword [rbp]
  2739                                   ; restore the old rbp
  2740 00001762 BB01000000              	mov rbx, 1
  2741 00001767 4883C303                	add rbx, 3
  2742 0000176B 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2743 0000176F 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2744 00001774 4C8D4DF8                	lea r9, [rbp - 8]
  2745 00001778 B905000000              	mov rcx, 5
  2746                                  .L_tc_recycle_frame_loop_0013:
  2747 0000177D 4883F900                	cmp rcx, 0
  2748 00001781 7413                    	je .L_tc_recycle_frame_done_0013
  2749 00001783 4D8B11                  	mov r10, qword [r9]
  2750 00001786 4D8910                  	mov qword [r8], r10
  2751 00001789 4983E808                	sub r8, 8
  2752 0000178D 4983E908                	sub r9, 8
  2753 00001791 48FFC9                  	dec rcx
  2754 00001794 EBE7                    	jmp .L_tc_recycle_frame_loop_0013
  2755                                  .L_tc_recycle_frame_done_0013:
  2756 00001796 498D6008                	lea rsp, [r8 + 8]
  2757 0000179A 5D                      	pop rbp ; restore the old rbp
  2758 0000179B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2759 0000179E C9                      	leave
  2760 0000179F C21800                  	ret AND_KILL_FRAME(1)
  2761                                  .L_lambda_simple_end_0013:	; new closure is in rax
  2762 000017A2 48890425[0D090000]      	mov qword [free_var_13], rax
  2763 000017AA 48B8-                   	mov rax, sob_void
  2763 000017AC [0000000000000000] 
  2764                                  
  2765 000017B4 4889C7                  	mov rdi, rax
  2766 000017B7 E809180000              	call print_sexpr_if_not_void
  2767 000017BC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2768 000017C1 E8AA150000              	call malloc
  2769 000017C6 50                      	push rax
  2770 000017C7 BF00000000              	mov rdi, 8 * 0	; new rib
  2771 000017CC E89F150000              	call malloc
  2772 000017D1 50                      	push rax
  2773 000017D2 BF08000000              	mov rdi, 8 * 1	; extended env
  2774 000017D7 E894150000              	call malloc
  2775 000017DC 488B7D10                	mov rdi, ENV
  2776 000017E0 BE00000000              	mov rsi, 0
  2777 000017E5 BA01000000              	mov rdx, 1
  2778                                  .L_lambda_simple_env_loop_0014:	; ext_env[i + 1] <-- env[i]
  2779 000017EA 4883FE00                	cmp rsi, 0
  2780 000017EE 7410                    	je .L_lambda_simple_env_end_0014
  2781 000017F0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2782 000017F4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2783 000017F8 48FFC6                  	inc rsi
  2784 000017FB 48FFC2                  	inc rdx
  2785 000017FE EBEA                    	jmp .L_lambda_simple_env_loop_0014
  2786                                  .L_lambda_simple_env_end_0014:
  2787 00001800 5B                      	pop rbx
  2788 00001801 BE00000000              	mov rsi, 0
  2789                                  .L_lambda_simple_params_loop_0014:	; copy params
  2790 00001806 4883FE00                	cmp rsi, 0
  2791 0000180A 740E                    	je .L_lambda_simple_params_end_0014
  2792 0000180C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2793 00001811 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2794 00001815 48FFC6                  	inc rsi
  2795 00001818 EBEC                    	jmp .L_lambda_simple_params_loop_0014
  2796                                  .L_lambda_simple_params_end_0014:
  2797 0000181A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2798 0000181D 4889C3                  	mov rbx, rax
  2799 00001820 58                      	pop rax
  2800 00001821 C60004                  	mov byte [rax], T_closure
  2801 00001824 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2802 00001828 48C74009[35180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0014
  2803 00001830 E9A4000000              	jmp .L_lambda_simple_end_0014
  2804                                  .L_lambda_simple_code_0014:	; lambda-simple body
  2805 00001835 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2806 0000183B 740B                    	je .L_lambda_simple_arity_check_ok_0014
  2807 0000183D FF742410                	push qword [rsp + 8 * 2]
  2808 00001841 6A01                    	push 1
  2809 00001843 E9E1140000              	jmp L_error_incorrect_arity_simple
  2810                                  .L_lambda_simple_arity_check_ok_0014:
  2811 00001848 C8000000                	enter 0, 0
  2812                                  	; preparing a tail-call
  2813                                  	; preparing a non-tail-call
  2814 0000184C 488B4520                	mov rax, PARAM(0)	; param x
  2815 00001850 50                      	push rax
  2816 00001851 6A01                    	push 1	; arg count
  2817 00001853 488B0425[3F0A0000]      	mov rax, qword [free_var_31]	; free var cddr
  2818 0000185B 803805                  	cmp byte [rax], T_undefined
  2819 0000185E 0F84DF130000            	je L_error_fvar_undefined
  2820 00001864 803804                  	cmp byte [rax], T_closure
  2821 00001867 0F855A140000            	jne L_error_non_closure
  2822 0000186D FF7001                  	push SOB_CLOSURE_ENV(rax)
  2823 00001870 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2824 00001873 50                      	push rax
  2825 00001874 6A01                    	push 1	; arg count
  2826 00001876 488B0425[40090000]      	mov rax, qword [free_var_16]	; free var cadr
  2827 0000187E 803805                  	cmp byte [rax], T_undefined
  2828 00001881 0F84BC130000            	je L_error_fvar_undefined
  2829 00001887 803804                  	cmp byte [rax], T_closure
  2830 0000188A 0F8537140000            	jne L_error_non_closure
  2831 00001890 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2832 00001893 FF7508                  	push qword [rbp + 8 * 1]
  2833                                   ; old ret addr
  2834 00001896 FF7500                  	push qword [rbp]
  2835                                   ; restore the old rbp
  2836 00001899 BB01000000              	mov rbx, 1
  2837 0000189E 4883C303                	add rbx, 3
  2838 000018A2 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2839 000018A6 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2840 000018AB 4C8D4DF8                	lea r9, [rbp - 8]
  2841 000018AF B905000000              	mov rcx, 5
  2842                                  .L_tc_recycle_frame_loop_0014:
  2843 000018B4 4883F900                	cmp rcx, 0
  2844 000018B8 7413                    	je .L_tc_recycle_frame_done_0014
  2845 000018BA 4D8B11                  	mov r10, qword [r9]
  2846 000018BD 4D8910                  	mov qword [r8], r10
  2847 000018C0 4983E808                	sub r8, 8
  2848 000018C4 4983E908                	sub r9, 8
  2849 000018C8 48FFC9                  	dec rcx
  2850 000018CB EBE7                    	jmp .L_tc_recycle_frame_loop_0014
  2851                                  .L_tc_recycle_frame_done_0014:
  2852 000018CD 498D6008                	lea rsp, [r8 + 8]
  2853 000018D1 5D                      	pop rbp ; restore the old rbp
  2854 000018D2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2855 000018D5 C9                      	leave
  2856 000018D6 C21800                  	ret AND_KILL_FRAME(1)
  2857                                  .L_lambda_simple_end_0014:	; new closure is in rax
  2858 000018D9 48890425[1E090000]      	mov qword [free_var_14], rax
  2859 000018E1 48B8-                   	mov rax, sob_void
  2859 000018E3 [0000000000000000] 
  2860                                  
  2861 000018EB 4889C7                  	mov rdi, rax
  2862 000018EE E8D2160000              	call print_sexpr_if_not_void
  2863 000018F3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2864 000018F8 E873140000              	call malloc
  2865 000018FD 50                      	push rax
  2866 000018FE BF00000000              	mov rdi, 8 * 0	; new rib
  2867 00001903 E868140000              	call malloc
  2868 00001908 50                      	push rax
  2869 00001909 BF08000000              	mov rdi, 8 * 1	; extended env
  2870 0000190E E85D140000              	call malloc
  2871 00001913 488B7D10                	mov rdi, ENV
  2872 00001917 BE00000000              	mov rsi, 0
  2873 0000191C BA01000000              	mov rdx, 1
  2874                                  .L_lambda_simple_env_loop_0015:	; ext_env[i + 1] <-- env[i]
  2875 00001921 4883FE00                	cmp rsi, 0
  2876 00001925 7410                    	je .L_lambda_simple_env_end_0015
  2877 00001927 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2878 0000192B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2879 0000192F 48FFC6                  	inc rsi
  2880 00001932 48FFC2                  	inc rdx
  2881 00001935 EBEA                    	jmp .L_lambda_simple_env_loop_0015
  2882                                  .L_lambda_simple_env_end_0015:
  2883 00001937 5B                      	pop rbx
  2884 00001938 BE00000000              	mov rsi, 0
  2885                                  .L_lambda_simple_params_loop_0015:	; copy params
  2886 0000193D 4883FE00                	cmp rsi, 0
  2887 00001941 740E                    	je .L_lambda_simple_params_end_0015
  2888 00001943 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2889 00001948 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2890 0000194C 48FFC6                  	inc rsi
  2891 0000194F EBEC                    	jmp .L_lambda_simple_params_loop_0015
  2892                                  .L_lambda_simple_params_end_0015:
  2893 00001951 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2894 00001954 4889C3                  	mov rbx, rax
  2895 00001957 58                      	pop rax
  2896 00001958 C60004                  	mov byte [rax], T_closure
  2897 0000195B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2898 0000195F 48C74009[6C190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0015
  2899 00001967 E9A4000000              	jmp .L_lambda_simple_end_0015
  2900                                  .L_lambda_simple_code_0015:	; lambda-simple body
  2901 0000196C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2902 00001972 740B                    	je .L_lambda_simple_arity_check_ok_0015
  2903 00001974 FF742410                	push qword [rsp + 8 * 2]
  2904 00001978 6A01                    	push 1
  2905 0000197A E9AA130000              	jmp L_error_incorrect_arity_simple
  2906                                  .L_lambda_simple_arity_check_ok_0015:
  2907 0000197F C8000000                	enter 0, 0
  2908                                  	; preparing a tail-call
  2909                                  	; preparing a non-tail-call
  2910 00001983 488B4520                	mov rax, PARAM(0)	; param x
  2911 00001987 50                      	push rax
  2912 00001988 6A01                    	push 1	; arg count
  2913 0000198A 488B0425[C9080000]      	mov rax, qword [free_var_9]	; free var caar
  2914 00001992 803805                  	cmp byte [rax], T_undefined
  2915 00001995 0F84A8120000            	je L_error_fvar_undefined
  2916 0000199B 803804                  	cmp byte [rax], T_closure
  2917 0000199E 0F8523130000            	jne L_error_non_closure
  2918 000019A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2919 000019A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2920 000019AA 50                      	push rax
  2921 000019AB 6A01                    	push 1	; arg count
  2922 000019AD 488B0425[C8090000]      	mov rax, qword [free_var_24]	; free var cdar
  2923 000019B5 803805                  	cmp byte [rax], T_undefined
  2924 000019B8 0F8485120000            	je L_error_fvar_undefined
  2925 000019BE 803804                  	cmp byte [rax], T_closure
  2926 000019C1 0F8500130000            	jne L_error_non_closure
  2927 000019C7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2928 000019CA FF7508                  	push qword [rbp + 8 * 1]
  2929                                   ; old ret addr
  2930 000019CD FF7500                  	push qword [rbp]
  2931                                   ; restore the old rbp
  2932 000019D0 BB01000000              	mov rbx, 1
  2933 000019D5 4883C303                	add rbx, 3
  2934 000019D9 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2935 000019DD 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2936 000019E2 4C8D4DF8                	lea r9, [rbp - 8]
  2937 000019E6 B905000000              	mov rcx, 5
  2938                                  .L_tc_recycle_frame_loop_0015:
  2939 000019EB 4883F900                	cmp rcx, 0
  2940 000019EF 7413                    	je .L_tc_recycle_frame_done_0015
  2941 000019F1 4D8B11                  	mov r10, qword [r9]
  2942 000019F4 4D8910                  	mov qword [r8], r10
  2943 000019F7 4983E808                	sub r8, 8
  2944 000019FB 4983E908                	sub r9, 8
  2945 000019FF 48FFC9                  	dec rcx
  2946 00001A02 EBE7                    	jmp .L_tc_recycle_frame_loop_0015
  2947                                  .L_tc_recycle_frame_done_0015:
  2948 00001A04 498D6008                	lea rsp, [r8 + 8]
  2949 00001A08 5D                      	pop rbp ; restore the old rbp
  2950 00001A09 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2951 00001A0C C9                      	leave
  2952 00001A0D C21800                  	ret AND_KILL_FRAME(1)
  2953                                  .L_lambda_simple_end_0015:	; new closure is in rax
  2954 00001A10 48890425[62090000]      	mov qword [free_var_18], rax
  2955 00001A18 48B8-                   	mov rax, sob_void
  2955 00001A1A [0000000000000000] 
  2956                                  
  2957 00001A22 4889C7                  	mov rdi, rax
  2958 00001A25 E89B150000              	call print_sexpr_if_not_void
  2959 00001A2A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2960 00001A2F E83C130000              	call malloc
  2961 00001A34 50                      	push rax
  2962 00001A35 BF00000000              	mov rdi, 8 * 0	; new rib
  2963 00001A3A E831130000              	call malloc
  2964 00001A3F 50                      	push rax
  2965 00001A40 BF08000000              	mov rdi, 8 * 1	; extended env
  2966 00001A45 E826130000              	call malloc
  2967 00001A4A 488B7D10                	mov rdi, ENV
  2968 00001A4E BE00000000              	mov rsi, 0
  2969 00001A53 BA01000000              	mov rdx, 1
  2970                                  .L_lambda_simple_env_loop_0016:	; ext_env[i + 1] <-- env[i]
  2971 00001A58 4883FE00                	cmp rsi, 0
  2972 00001A5C 7410                    	je .L_lambda_simple_env_end_0016
  2973 00001A5E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2974 00001A62 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2975 00001A66 48FFC6                  	inc rsi
  2976 00001A69 48FFC2                  	inc rdx
  2977 00001A6C EBEA                    	jmp .L_lambda_simple_env_loop_0016
  2978                                  .L_lambda_simple_env_end_0016:
  2979 00001A6E 5B                      	pop rbx
  2980 00001A6F BE00000000              	mov rsi, 0
  2981                                  .L_lambda_simple_params_loop_0016:	; copy params
  2982 00001A74 4883FE00                	cmp rsi, 0
  2983 00001A78 740E                    	je .L_lambda_simple_params_end_0016
  2984 00001A7A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2985 00001A7F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2986 00001A83 48FFC6                  	inc rsi
  2987 00001A86 EBEC                    	jmp .L_lambda_simple_params_loop_0016
  2988                                  .L_lambda_simple_params_end_0016:
  2989 00001A88 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2990 00001A8B 4889C3                  	mov rbx, rax
  2991 00001A8E 58                      	pop rax
  2992 00001A8F C60004                  	mov byte [rax], T_closure
  2993 00001A92 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2994 00001A96 48C74009[A31A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0016
  2995 00001A9E E9A4000000              	jmp .L_lambda_simple_end_0016
  2996                                  .L_lambda_simple_code_0016:	; lambda-simple body
  2997 00001AA3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2998 00001AA9 740B                    	je .L_lambda_simple_arity_check_ok_0016
  2999 00001AAB FF742410                	push qword [rsp + 8 * 2]
  3000 00001AAF 6A01                    	push 1
  3001 00001AB1 E973120000              	jmp L_error_incorrect_arity_simple
  3002                                  .L_lambda_simple_arity_check_ok_0016:
  3003 00001AB6 C8000000                	enter 0, 0
  3004                                  	; preparing a tail-call
  3005                                  	; preparing a non-tail-call
  3006 00001ABA 488B4520                	mov rax, PARAM(0)	; param x
  3007 00001ABE 50                      	push rax
  3008 00001ABF 6A01                    	push 1	; arg count
  3009 00001AC1 488B0425[40090000]      	mov rax, qword [free_var_16]	; free var cadr
  3010 00001AC9 803805                  	cmp byte [rax], T_undefined
  3011 00001ACC 0F8471110000            	je L_error_fvar_undefined
  3012 00001AD2 803804                  	cmp byte [rax], T_closure
  3013 00001AD5 0F85EC110000            	jne L_error_non_closure
  3014 00001ADB FF7001                  	push SOB_CLOSURE_ENV(rax)
  3015 00001ADE FF5009                  	call SOB_CLOSURE_CODE(rax)
  3016 00001AE1 50                      	push rax
  3017 00001AE2 6A01                    	push 1	; arg count
  3018 00001AE4 488B0425[C8090000]      	mov rax, qword [free_var_24]	; free var cdar
  3019 00001AEC 803805                  	cmp byte [rax], T_undefined
  3020 00001AEF 0F844E110000            	je L_error_fvar_undefined
  3021 00001AF5 803804                  	cmp byte [rax], T_closure
  3022 00001AF8 0F85C9110000            	jne L_error_non_closure
  3023 00001AFE FF7001                  	push SOB_CLOSURE_ENV(rax)
  3024 00001B01 FF7508                  	push qword [rbp + 8 * 1]
  3025                                   ; old ret addr
  3026 00001B04 FF7500                  	push qword [rbp]
  3027                                   ; restore the old rbp
  3028 00001B07 BB01000000              	mov rbx, 1
  3029 00001B0C 4883C303                	add rbx, 3
  3030 00001B10 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3031 00001B14 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3032 00001B19 4C8D4DF8                	lea r9, [rbp - 8]
  3033 00001B1D B905000000              	mov rcx, 5
  3034                                  .L_tc_recycle_frame_loop_0016:
  3035 00001B22 4883F900                	cmp rcx, 0
  3036 00001B26 7413                    	je .L_tc_recycle_frame_done_0016
  3037 00001B28 4D8B11                  	mov r10, qword [r9]
  3038 00001B2B 4D8910                  	mov qword [r8], r10
  3039 00001B2E 4983E808                	sub r8, 8
  3040 00001B32 4983E908                	sub r9, 8
  3041 00001B36 48FFC9                  	dec rcx
  3042 00001B39 EBE7                    	jmp .L_tc_recycle_frame_loop_0016
  3043                                  .L_tc_recycle_frame_done_0016:
  3044 00001B3B 498D6008                	lea rsp, [r8 + 8]
  3045 00001B3F 5D                      	pop rbp ; restore the old rbp
  3046 00001B40 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3047 00001B43 C9                      	leave
  3048 00001B44 C21800                  	ret AND_KILL_FRAME(1)
  3049                                  .L_lambda_simple_end_0016:	; new closure is in rax
  3050 00001B47 48890425[73090000]      	mov qword [free_var_19], rax
  3051 00001B4F 48B8-                   	mov rax, sob_void
  3051 00001B51 [0000000000000000] 
  3052                                  
  3053 00001B59 4889C7                  	mov rdi, rax
  3054 00001B5C E864140000              	call print_sexpr_if_not_void
  3055 00001B61 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3056 00001B66 E805120000              	call malloc
  3057 00001B6B 50                      	push rax
  3058 00001B6C BF00000000              	mov rdi, 8 * 0	; new rib
  3059 00001B71 E8FA110000              	call malloc
  3060 00001B76 50                      	push rax
  3061 00001B77 BF08000000              	mov rdi, 8 * 1	; extended env
  3062 00001B7C E8EF110000              	call malloc
  3063 00001B81 488B7D10                	mov rdi, ENV
  3064 00001B85 BE00000000              	mov rsi, 0
  3065 00001B8A BA01000000              	mov rdx, 1
  3066                                  .L_lambda_simple_env_loop_0017:	; ext_env[i + 1] <-- env[i]
  3067 00001B8F 4883FE00                	cmp rsi, 0
  3068 00001B93 7410                    	je .L_lambda_simple_env_end_0017
  3069 00001B95 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3070 00001B99 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3071 00001B9D 48FFC6                  	inc rsi
  3072 00001BA0 48FFC2                  	inc rdx
  3073 00001BA3 EBEA                    	jmp .L_lambda_simple_env_loop_0017
  3074                                  .L_lambda_simple_env_end_0017:
  3075 00001BA5 5B                      	pop rbx
  3076 00001BA6 BE00000000              	mov rsi, 0
  3077                                  .L_lambda_simple_params_loop_0017:	; copy params
  3078 00001BAB 4883FE00                	cmp rsi, 0
  3079 00001BAF 740E                    	je .L_lambda_simple_params_end_0017
  3080 00001BB1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3081 00001BB6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3082 00001BBA 48FFC6                  	inc rsi
  3083 00001BBD EBEC                    	jmp .L_lambda_simple_params_loop_0017
  3084                                  .L_lambda_simple_params_end_0017:
  3085 00001BBF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3086 00001BC2 4889C3                  	mov rbx, rax
  3087 00001BC5 58                      	pop rax
  3088 00001BC6 C60004                  	mov byte [rax], T_closure
  3089 00001BC9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3090 00001BCD 48C74009[DA1B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0017
  3091 00001BD5 E9A4000000              	jmp .L_lambda_simple_end_0017
  3092                                  .L_lambda_simple_code_0017:	; lambda-simple body
  3093 00001BDA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3094 00001BE0 740B                    	je .L_lambda_simple_arity_check_ok_0017
  3095 00001BE2 FF742410                	push qword [rsp + 8 * 2]
  3096 00001BE6 6A01                    	push 1
  3097 00001BE8 E93C110000              	jmp L_error_incorrect_arity_simple
  3098                                  .L_lambda_simple_arity_check_ok_0017:
  3099 00001BED C8000000                	enter 0, 0
  3100                                  	; preparing a tail-call
  3101                                  	; preparing a non-tail-call
  3102 00001BF1 488B4520                	mov rax, PARAM(0)	; param x
  3103 00001BF5 50                      	push rax
  3104 00001BF6 6A01                    	push 1	; arg count
  3105 00001BF8 488B0425[C8090000]      	mov rax, qword [free_var_24]	; free var cdar
  3106 00001C00 803805                  	cmp byte [rax], T_undefined
  3107 00001C03 0F843A100000            	je L_error_fvar_undefined
  3108 00001C09 803804                  	cmp byte [rax], T_closure
  3109 00001C0C 0F85B5100000            	jne L_error_non_closure
  3110 00001C12 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3111 00001C15 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3112 00001C18 50                      	push rax
  3113 00001C19 6A01                    	push 1	; arg count
  3114 00001C1B 488B0425[C8090000]      	mov rax, qword [free_var_24]	; free var cdar
  3115 00001C23 803805                  	cmp byte [rax], T_undefined
  3116 00001C26 0F8417100000            	je L_error_fvar_undefined
  3117 00001C2C 803804                  	cmp byte [rax], T_closure
  3118 00001C2F 0F8592100000            	jne L_error_non_closure
  3119 00001C35 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3120 00001C38 FF7508                  	push qword [rbp + 8 * 1]
  3121                                   ; old ret addr
  3122 00001C3B FF7500                  	push qword [rbp]
  3123                                   ; restore the old rbp
  3124 00001C3E BB01000000              	mov rbx, 1
  3125 00001C43 4883C303                	add rbx, 3
  3126 00001C47 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3127 00001C4B 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3128 00001C50 4C8D4DF8                	lea r9, [rbp - 8]
  3129 00001C54 B905000000              	mov rcx, 5
  3130                                  .L_tc_recycle_frame_loop_0017:
  3131 00001C59 4883F900                	cmp rcx, 0
  3132 00001C5D 7413                    	je .L_tc_recycle_frame_done_0017
  3133 00001C5F 4D8B11                  	mov r10, qword [r9]
  3134 00001C62 4D8910                  	mov qword [r8], r10
  3135 00001C65 4983E808                	sub r8, 8
  3136 00001C69 4983E908                	sub r9, 8
  3137 00001C6D 48FFC9                  	dec rcx
  3138 00001C70 EBE7                    	jmp .L_tc_recycle_frame_loop_0017
  3139                                  .L_tc_recycle_frame_done_0017:
  3140 00001C72 498D6008                	lea rsp, [r8 + 8]
  3141 00001C76 5D                      	pop rbp ; restore the old rbp
  3142 00001C77 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3143 00001C7A C9                      	leave
  3144 00001C7B C21800                  	ret AND_KILL_FRAME(1)
  3145                                  .L_lambda_simple_end_0017:	; new closure is in rax
  3146 00001C7E 48890425[95090000]      	mov qword [free_var_21], rax
  3147 00001C86 48B8-                   	mov rax, sob_void
  3147 00001C88 [0000000000000000] 
  3148                                  
  3149 00001C90 4889C7                  	mov rdi, rax
  3150 00001C93 E82D130000              	call print_sexpr_if_not_void
  3151 00001C98 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3152 00001C9D E8CE100000              	call malloc
  3153 00001CA2 50                      	push rax
  3154 00001CA3 BF00000000              	mov rdi, 8 * 0	; new rib
  3155 00001CA8 E8C3100000              	call malloc
  3156 00001CAD 50                      	push rax
  3157 00001CAE BF08000000              	mov rdi, 8 * 1	; extended env
  3158 00001CB3 E8B8100000              	call malloc
  3159 00001CB8 488B7D10                	mov rdi, ENV
  3160 00001CBC BE00000000              	mov rsi, 0
  3161 00001CC1 BA01000000              	mov rdx, 1
  3162                                  .L_lambda_simple_env_loop_0018:	; ext_env[i + 1] <-- env[i]
  3163 00001CC6 4883FE00                	cmp rsi, 0
  3164 00001CCA 7410                    	je .L_lambda_simple_env_end_0018
  3165 00001CCC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3166 00001CD0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3167 00001CD4 48FFC6                  	inc rsi
  3168 00001CD7 48FFC2                  	inc rdx
  3169 00001CDA EBEA                    	jmp .L_lambda_simple_env_loop_0018
  3170                                  .L_lambda_simple_env_end_0018:
  3171 00001CDC 5B                      	pop rbx
  3172 00001CDD BE00000000              	mov rsi, 0
  3173                                  .L_lambda_simple_params_loop_0018:	; copy params
  3174 00001CE2 4883FE00                	cmp rsi, 0
  3175 00001CE6 740E                    	je .L_lambda_simple_params_end_0018
  3176 00001CE8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3177 00001CED 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3178 00001CF1 48FFC6                  	inc rsi
  3179 00001CF4 EBEC                    	jmp .L_lambda_simple_params_loop_0018
  3180                                  .L_lambda_simple_params_end_0018:
  3181 00001CF6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3182 00001CF9 4889C3                  	mov rbx, rax
  3183 00001CFC 58                      	pop rax
  3184 00001CFD C60004                  	mov byte [rax], T_closure
  3185 00001D00 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3186 00001D04 48C74009[111D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0018
  3187 00001D0C E9A4000000              	jmp .L_lambda_simple_end_0018
  3188                                  .L_lambda_simple_code_0018:	; lambda-simple body
  3189 00001D11 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3190 00001D17 740B                    	je .L_lambda_simple_arity_check_ok_0018
  3191 00001D19 FF742410                	push qword [rsp + 8 * 2]
  3192 00001D1D 6A01                    	push 1
  3193 00001D1F E905100000              	jmp L_error_incorrect_arity_simple
  3194                                  .L_lambda_simple_arity_check_ok_0018:
  3195 00001D24 C8000000                	enter 0, 0
  3196                                  	; preparing a tail-call
  3197                                  	; preparing a non-tail-call
  3198 00001D28 488B4520                	mov rax, PARAM(0)	; param x
  3199 00001D2C 50                      	push rax
  3200 00001D2D 6A01                    	push 1	; arg count
  3201 00001D2F 488B0425[3F0A0000]      	mov rax, qword [free_var_31]	; free var cddr
  3202 00001D37 803805                  	cmp byte [rax], T_undefined
  3203 00001D3A 0F84030F0000            	je L_error_fvar_undefined
  3204 00001D40 803804                  	cmp byte [rax], T_closure
  3205 00001D43 0F857E0F0000            	jne L_error_non_closure
  3206 00001D49 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3207 00001D4C FF5009                  	call SOB_CLOSURE_CODE(rax)
  3208 00001D4F 50                      	push rax
  3209 00001D50 6A01                    	push 1	; arg count
  3210 00001D52 488B0425[C8090000]      	mov rax, qword [free_var_24]	; free var cdar
  3211 00001D5A 803805                  	cmp byte [rax], T_undefined
  3212 00001D5D 0F84E00E0000            	je L_error_fvar_undefined
  3213 00001D63 803804                  	cmp byte [rax], T_closure
  3214 00001D66 0F855B0F0000            	jne L_error_non_closure
  3215 00001D6C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3216 00001D6F FF7508                  	push qword [rbp + 8 * 1]
  3217                                   ; old ret addr
  3218 00001D72 FF7500                  	push qword [rbp]
  3219                                   ; restore the old rbp
  3220 00001D75 BB01000000              	mov rbx, 1
  3221 00001D7A 4883C303                	add rbx, 3
  3222 00001D7E 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3223 00001D82 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3224 00001D87 4C8D4DF8                	lea r9, [rbp - 8]
  3225 00001D8B B905000000              	mov rcx, 5
  3226                                  .L_tc_recycle_frame_loop_0018:
  3227 00001D90 4883F900                	cmp rcx, 0
  3228 00001D94 7413                    	je .L_tc_recycle_frame_done_0018
  3229 00001D96 4D8B11                  	mov r10, qword [r9]
  3230 00001D99 4D8910                  	mov qword [r8], r10
  3231 00001D9C 4983E808                	sub r8, 8
  3232 00001DA0 4983E908                	sub r9, 8
  3233 00001DA4 48FFC9                  	dec rcx
  3234 00001DA7 EBE7                    	jmp .L_tc_recycle_frame_loop_0018
  3235                                  .L_tc_recycle_frame_done_0018:
  3236 00001DA9 498D6008                	lea rsp, [r8 + 8]
  3237 00001DAD 5D                      	pop rbp ; restore the old rbp
  3238 00001DAE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3239 00001DB1 C9                      	leave
  3240 00001DB2 C21800                  	ret AND_KILL_FRAME(1)
  3241                                  .L_lambda_simple_end_0018:	; new closure is in rax
  3242 00001DB5 48890425[A6090000]      	mov qword [free_var_22], rax
  3243 00001DBD 48B8-                   	mov rax, sob_void
  3243 00001DBF [0000000000000000] 
  3244                                  
  3245 00001DC7 4889C7                  	mov rdi, rax
  3246 00001DCA E8F6110000              	call print_sexpr_if_not_void
  3247 00001DCF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3248 00001DD4 E8970F0000              	call malloc
  3249 00001DD9 50                      	push rax
  3250 00001DDA BF00000000              	mov rdi, 8 * 0	; new rib
  3251 00001DDF E88C0F0000              	call malloc
  3252 00001DE4 50                      	push rax
  3253 00001DE5 BF08000000              	mov rdi, 8 * 1	; extended env
  3254 00001DEA E8810F0000              	call malloc
  3255 00001DEF 488B7D10                	mov rdi, ENV
  3256 00001DF3 BE00000000              	mov rsi, 0
  3257 00001DF8 BA01000000              	mov rdx, 1
  3258                                  .L_lambda_simple_env_loop_0019:	; ext_env[i + 1] <-- env[i]
  3259 00001DFD 4883FE00                	cmp rsi, 0
  3260 00001E01 7410                    	je .L_lambda_simple_env_end_0019
  3261 00001E03 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3262 00001E07 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3263 00001E0B 48FFC6                  	inc rsi
  3264 00001E0E 48FFC2                  	inc rdx
  3265 00001E11 EBEA                    	jmp .L_lambda_simple_env_loop_0019
  3266                                  .L_lambda_simple_env_end_0019:
  3267 00001E13 5B                      	pop rbx
  3268 00001E14 BE00000000              	mov rsi, 0
  3269                                  .L_lambda_simple_params_loop_0019:	; copy params
  3270 00001E19 4883FE00                	cmp rsi, 0
  3271 00001E1D 740E                    	je .L_lambda_simple_params_end_0019
  3272 00001E1F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3273 00001E24 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3274 00001E28 48FFC6                  	inc rsi
  3275 00001E2B EBEC                    	jmp .L_lambda_simple_params_loop_0019
  3276                                  .L_lambda_simple_params_end_0019:
  3277 00001E2D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3278 00001E30 4889C3                  	mov rbx, rax
  3279 00001E33 58                      	pop rax
  3280 00001E34 C60004                  	mov byte [rax], T_closure
  3281 00001E37 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3282 00001E3B 48C74009[481E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0019
  3283 00001E43 E9A4000000              	jmp .L_lambda_simple_end_0019
  3284                                  .L_lambda_simple_code_0019:	; lambda-simple body
  3285 00001E48 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3286 00001E4E 740B                    	je .L_lambda_simple_arity_check_ok_0019
  3287 00001E50 FF742410                	push qword [rsp + 8 * 2]
  3288 00001E54 6A01                    	push 1
  3289 00001E56 E9CE0E0000              	jmp L_error_incorrect_arity_simple
  3290                                  .L_lambda_simple_arity_check_ok_0019:
  3291 00001E5B C8000000                	enter 0, 0
  3292                                  	; preparing a tail-call
  3293                                  	; preparing a non-tail-call
  3294 00001E5F 488B4520                	mov rax, PARAM(0)	; param x
  3295 00001E63 50                      	push rax
  3296 00001E64 6A01                    	push 1	; arg count
  3297 00001E66 488B0425[C9080000]      	mov rax, qword [free_var_9]	; free var caar
  3298 00001E6E 803805                  	cmp byte [rax], T_undefined
  3299 00001E71 0F84CC0D0000            	je L_error_fvar_undefined
  3300 00001E77 803804                  	cmp byte [rax], T_closure
  3301 00001E7A 0F85470E0000            	jne L_error_non_closure
  3302 00001E80 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3303 00001E83 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3304 00001E86 50                      	push rax
  3305 00001E87 6A01                    	push 1	; arg count
  3306 00001E89 488B0425[3F0A0000]      	mov rax, qword [free_var_31]	; free var cddr
  3307 00001E91 803805                  	cmp byte [rax], T_undefined
  3308 00001E94 0F84A90D0000            	je L_error_fvar_undefined
  3309 00001E9A 803804                  	cmp byte [rax], T_closure
  3310 00001E9D 0F85240E0000            	jne L_error_non_closure
  3311 00001EA3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3312 00001EA6 FF7508                  	push qword [rbp + 8 * 1]
  3313                                   ; old ret addr
  3314 00001EA9 FF7500                  	push qword [rbp]
  3315                                   ; restore the old rbp
  3316 00001EAC BB01000000              	mov rbx, 1
  3317 00001EB1 4883C303                	add rbx, 3
  3318 00001EB5 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3319 00001EB9 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3320 00001EBE 4C8D4DF8                	lea r9, [rbp - 8]
  3321 00001EC2 B905000000              	mov rcx, 5
  3322                                  .L_tc_recycle_frame_loop_0019:
  3323 00001EC7 4883F900                	cmp rcx, 0
  3324 00001ECB 7413                    	je .L_tc_recycle_frame_done_0019
  3325 00001ECD 4D8B11                  	mov r10, qword [r9]
  3326 00001ED0 4D8910                  	mov qword [r8], r10
  3327 00001ED3 4983E808                	sub r8, 8
  3328 00001ED7 4983E908                	sub r9, 8
  3329 00001EDB 48FFC9                  	dec rcx
  3330 00001EDE EBE7                    	jmp .L_tc_recycle_frame_loop_0019
  3331                                  .L_tc_recycle_frame_done_0019:
  3332 00001EE0 498D6008                	lea rsp, [r8 + 8]
  3333 00001EE4 5D                      	pop rbp ; restore the old rbp
  3334 00001EE5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3335 00001EE8 C9                      	leave
  3336 00001EE9 C21800                  	ret AND_KILL_FRAME(1)
  3337                                  .L_lambda_simple_end_0019:	; new closure is in rax
  3338 00001EEC 48890425[D9090000]      	mov qword [free_var_25], rax
  3339 00001EF4 48B8-                   	mov rax, sob_void
  3339 00001EF6 [0000000000000000] 
  3340                                  
  3341 00001EFE 4889C7                  	mov rdi, rax
  3342 00001F01 E8BF100000              	call print_sexpr_if_not_void
  3343 00001F06 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3344 00001F0B E8600E0000              	call malloc
  3345 00001F10 50                      	push rax
  3346 00001F11 BF00000000              	mov rdi, 8 * 0	; new rib
  3347 00001F16 E8550E0000              	call malloc
  3348 00001F1B 50                      	push rax
  3349 00001F1C BF08000000              	mov rdi, 8 * 1	; extended env
  3350 00001F21 E84A0E0000              	call malloc
  3351 00001F26 488B7D10                	mov rdi, ENV
  3352 00001F2A BE00000000              	mov rsi, 0
  3353 00001F2F BA01000000              	mov rdx, 1
  3354                                  .L_lambda_simple_env_loop_001a:	; ext_env[i + 1] <-- env[i]
  3355 00001F34 4883FE00                	cmp rsi, 0
  3356 00001F38 7410                    	je .L_lambda_simple_env_end_001a
  3357 00001F3A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3358 00001F3E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3359 00001F42 48FFC6                  	inc rsi
  3360 00001F45 48FFC2                  	inc rdx
  3361 00001F48 EBEA                    	jmp .L_lambda_simple_env_loop_001a
  3362                                  .L_lambda_simple_env_end_001a:
  3363 00001F4A 5B                      	pop rbx
  3364 00001F4B BE00000000              	mov rsi, 0
  3365                                  .L_lambda_simple_params_loop_001a:	; copy params
  3366 00001F50 4883FE00                	cmp rsi, 0
  3367 00001F54 740E                    	je .L_lambda_simple_params_end_001a
  3368 00001F56 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3369 00001F5B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3370 00001F5F 48FFC6                  	inc rsi
  3371 00001F62 EBEC                    	jmp .L_lambda_simple_params_loop_001a
  3372                                  .L_lambda_simple_params_end_001a:
  3373 00001F64 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3374 00001F67 4889C3                  	mov rbx, rax
  3375 00001F6A 58                      	pop rax
  3376 00001F6B C60004                  	mov byte [rax], T_closure
  3377 00001F6E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3378 00001F72 48C74009[7F1F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001a
  3379 00001F7A E9A4000000              	jmp .L_lambda_simple_end_001a
  3380                                  .L_lambda_simple_code_001a:	; lambda-simple body
  3381 00001F7F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3382 00001F85 740B                    	je .L_lambda_simple_arity_check_ok_001a
  3383 00001F87 FF742410                	push qword [rsp + 8 * 2]
  3384 00001F8B 6A01                    	push 1
  3385 00001F8D E9970D0000              	jmp L_error_incorrect_arity_simple
  3386                                  .L_lambda_simple_arity_check_ok_001a:
  3387 00001F92 C8000000                	enter 0, 0
  3388                                  	; preparing a tail-call
  3389                                  	; preparing a non-tail-call
  3390 00001F96 488B4520                	mov rax, PARAM(0)	; param x
  3391 00001F9A 50                      	push rax
  3392 00001F9B 6A01                    	push 1	; arg count
  3393 00001F9D 488B0425[40090000]      	mov rax, qword [free_var_16]	; free var cadr
  3394 00001FA5 803805                  	cmp byte [rax], T_undefined
  3395 00001FA8 0F84950C0000            	je L_error_fvar_undefined
  3396 00001FAE 803804                  	cmp byte [rax], T_closure
  3397 00001FB1 0F85100D0000            	jne L_error_non_closure
  3398 00001FB7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3399 00001FBA FF5009                  	call SOB_CLOSURE_CODE(rax)
  3400 00001FBD 50                      	push rax
  3401 00001FBE 6A01                    	push 1	; arg count
  3402 00001FC0 488B0425[3F0A0000]      	mov rax, qword [free_var_31]	; free var cddr
  3403 00001FC8 803805                  	cmp byte [rax], T_undefined
  3404 00001FCB 0F84720C0000            	je L_error_fvar_undefined
  3405 00001FD1 803804                  	cmp byte [rax], T_closure
  3406 00001FD4 0F85ED0C0000            	jne L_error_non_closure
  3407 00001FDA FF7001                  	push SOB_CLOSURE_ENV(rax)
  3408 00001FDD FF7508                  	push qword [rbp + 8 * 1]
  3409                                   ; old ret addr
  3410 00001FE0 FF7500                  	push qword [rbp]
  3411                                   ; restore the old rbp
  3412 00001FE3 BB01000000              	mov rbx, 1
  3413 00001FE8 4883C303                	add rbx, 3
  3414 00001FEC 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3415 00001FF0 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3416 00001FF5 4C8D4DF8                	lea r9, [rbp - 8]
  3417 00001FF9 B905000000              	mov rcx, 5
  3418                                  .L_tc_recycle_frame_loop_001a:
  3419 00001FFE 4883F900                	cmp rcx, 0
  3420 00002002 7413                    	je .L_tc_recycle_frame_done_001a
  3421 00002004 4D8B11                  	mov r10, qword [r9]
  3422 00002007 4D8910                  	mov qword [r8], r10
  3423 0000200A 4983E808                	sub r8, 8
  3424 0000200E 4983E908                	sub r9, 8
  3425 00002012 48FFC9                  	dec rcx
  3426 00002015 EBE7                    	jmp .L_tc_recycle_frame_loop_001a
  3427                                  .L_tc_recycle_frame_done_001a:
  3428 00002017 498D6008                	lea rsp, [r8 + 8]
  3429 0000201B 5D                      	pop rbp ; restore the old rbp
  3430 0000201C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3431 0000201F C9                      	leave
  3432 00002020 C21800                  	ret AND_KILL_FRAME(1)
  3433                                  .L_lambda_simple_end_001a:	; new closure is in rax
  3434 00002023 48890425[EA090000]      	mov qword [free_var_26], rax
  3435 0000202B 48B8-                   	mov rax, sob_void
  3435 0000202D [0000000000000000] 
  3436                                  
  3437 00002035 4889C7                  	mov rdi, rax
  3438 00002038 E8880F0000              	call print_sexpr_if_not_void
  3439 0000203D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3440 00002042 E8290D0000              	call malloc
  3441 00002047 50                      	push rax
  3442 00002048 BF00000000              	mov rdi, 8 * 0	; new rib
  3443 0000204D E81E0D0000              	call malloc
  3444 00002052 50                      	push rax
  3445 00002053 BF08000000              	mov rdi, 8 * 1	; extended env
  3446 00002058 E8130D0000              	call malloc
  3447 0000205D 488B7D10                	mov rdi, ENV
  3448 00002061 BE00000000              	mov rsi, 0
  3449 00002066 BA01000000              	mov rdx, 1
  3450                                  .L_lambda_simple_env_loop_001b:	; ext_env[i + 1] <-- env[i]
  3451 0000206B 4883FE00                	cmp rsi, 0
  3452 0000206F 7410                    	je .L_lambda_simple_env_end_001b
  3453 00002071 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3454 00002075 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3455 00002079 48FFC6                  	inc rsi
  3456 0000207C 48FFC2                  	inc rdx
  3457 0000207F EBEA                    	jmp .L_lambda_simple_env_loop_001b
  3458                                  .L_lambda_simple_env_end_001b:
  3459 00002081 5B                      	pop rbx
  3460 00002082 BE00000000              	mov rsi, 0
  3461                                  .L_lambda_simple_params_loop_001b:	; copy params
  3462 00002087 4883FE00                	cmp rsi, 0
  3463 0000208B 740E                    	je .L_lambda_simple_params_end_001b
  3464 0000208D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3465 00002092 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3466 00002096 48FFC6                  	inc rsi
  3467 00002099 EBEC                    	jmp .L_lambda_simple_params_loop_001b
  3468                                  .L_lambda_simple_params_end_001b:
  3469 0000209B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3470 0000209E 4889C3                  	mov rbx, rax
  3471 000020A1 58                      	pop rax
  3472 000020A2 C60004                  	mov byte [rax], T_closure
  3473 000020A5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3474 000020A9 48C74009[B6200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001b
  3475 000020B1 E9A4000000              	jmp .L_lambda_simple_end_001b
  3476                                  .L_lambda_simple_code_001b:	; lambda-simple body
  3477 000020B6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3478 000020BC 740B                    	je .L_lambda_simple_arity_check_ok_001b
  3479 000020BE FF742410                	push qword [rsp + 8 * 2]
  3480 000020C2 6A01                    	push 1
  3481 000020C4 E9600C0000              	jmp L_error_incorrect_arity_simple
  3482                                  .L_lambda_simple_arity_check_ok_001b:
  3483 000020C9 C8000000                	enter 0, 0
  3484                                  	; preparing a tail-call
  3485                                  	; preparing a non-tail-call
  3486 000020CD 488B4520                	mov rax, PARAM(0)	; param x
  3487 000020D1 50                      	push rax
  3488 000020D2 6A01                    	push 1	; arg count
  3489 000020D4 488B0425[C8090000]      	mov rax, qword [free_var_24]	; free var cdar
  3490 000020DC 803805                  	cmp byte [rax], T_undefined
  3491 000020DF 0F845E0B0000            	je L_error_fvar_undefined
  3492 000020E5 803804                  	cmp byte [rax], T_closure
  3493 000020E8 0F85D90B0000            	jne L_error_non_closure
  3494 000020EE FF7001                  	push SOB_CLOSURE_ENV(rax)
  3495 000020F1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3496 000020F4 50                      	push rax
  3497 000020F5 6A01                    	push 1	; arg count
  3498 000020F7 488B0425[3F0A0000]      	mov rax, qword [free_var_31]	; free var cddr
  3499 000020FF 803805                  	cmp byte [rax], T_undefined
  3500 00002102 0F843B0B0000            	je L_error_fvar_undefined
  3501 00002108 803804                  	cmp byte [rax], T_closure
  3502 0000210B 0F85B60B0000            	jne L_error_non_closure
  3503 00002111 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3504 00002114 FF7508                  	push qword [rbp + 8 * 1]
  3505                                   ; old ret addr
  3506 00002117 FF7500                  	push qword [rbp]
  3507                                   ; restore the old rbp
  3508 0000211A BB01000000              	mov rbx, 1
  3509 0000211F 4883C303                	add rbx, 3
  3510 00002123 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3511 00002127 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3512 0000212C 4C8D4DF8                	lea r9, [rbp - 8]
  3513 00002130 B905000000              	mov rcx, 5
  3514                                  .L_tc_recycle_frame_loop_001b:
  3515 00002135 4883F900                	cmp rcx, 0
  3516 00002139 7413                    	je .L_tc_recycle_frame_done_001b
  3517 0000213B 4D8B11                  	mov r10, qword [r9]
  3518 0000213E 4D8910                  	mov qword [r8], r10
  3519 00002141 4983E808                	sub r8, 8
  3520 00002145 4983E908                	sub r9, 8
  3521 00002149 48FFC9                  	dec rcx
  3522 0000214C EBE7                    	jmp .L_tc_recycle_frame_loop_001b
  3523                                  .L_tc_recycle_frame_done_001b:
  3524 0000214E 498D6008                	lea rsp, [r8 + 8]
  3525 00002152 5D                      	pop rbp ; restore the old rbp
  3526 00002153 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3527 00002156 C9                      	leave
  3528 00002157 C21800                  	ret AND_KILL_FRAME(1)
  3529                                  .L_lambda_simple_end_001b:	; new closure is in rax
  3530 0000215A 48890425[0C0A0000]      	mov qword [free_var_28], rax
  3531 00002162 48B8-                   	mov rax, sob_void
  3531 00002164 [0000000000000000] 
  3532                                  
  3533 0000216C 4889C7                  	mov rdi, rax
  3534 0000216F E8510E0000              	call print_sexpr_if_not_void
  3535 00002174 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3536 00002179 E8F20B0000              	call malloc
  3537 0000217E 50                      	push rax
  3538 0000217F BF00000000              	mov rdi, 8 * 0	; new rib
  3539 00002184 E8E70B0000              	call malloc
  3540 00002189 50                      	push rax
  3541 0000218A BF08000000              	mov rdi, 8 * 1	; extended env
  3542 0000218F E8DC0B0000              	call malloc
  3543 00002194 488B7D10                	mov rdi, ENV
  3544 00002198 BE00000000              	mov rsi, 0
  3545 0000219D BA01000000              	mov rdx, 1
  3546                                  .L_lambda_simple_env_loop_001c:	; ext_env[i + 1] <-- env[i]
  3547 000021A2 4883FE00                	cmp rsi, 0
  3548 000021A6 7410                    	je .L_lambda_simple_env_end_001c
  3549 000021A8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3550 000021AC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3551 000021B0 48FFC6                  	inc rsi
  3552 000021B3 48FFC2                  	inc rdx
  3553 000021B6 EBEA                    	jmp .L_lambda_simple_env_loop_001c
  3554                                  .L_lambda_simple_env_end_001c:
  3555 000021B8 5B                      	pop rbx
  3556 000021B9 BE00000000              	mov rsi, 0
  3557                                  .L_lambda_simple_params_loop_001c:	; copy params
  3558 000021BE 4883FE00                	cmp rsi, 0
  3559 000021C2 740E                    	je .L_lambda_simple_params_end_001c
  3560 000021C4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3561 000021C9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3562 000021CD 48FFC6                  	inc rsi
  3563 000021D0 EBEC                    	jmp .L_lambda_simple_params_loop_001c
  3564                                  .L_lambda_simple_params_end_001c:
  3565 000021D2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3566 000021D5 4889C3                  	mov rbx, rax
  3567 000021D8 58                      	pop rax
  3568 000021D9 C60004                  	mov byte [rax], T_closure
  3569 000021DC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3570 000021E0 48C74009[ED210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001c
  3571 000021E8 E9A4000000              	jmp .L_lambda_simple_end_001c
  3572                                  .L_lambda_simple_code_001c:	; lambda-simple body
  3573 000021ED 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3574 000021F3 740B                    	je .L_lambda_simple_arity_check_ok_001c
  3575 000021F5 FF742410                	push qword [rsp + 8 * 2]
  3576 000021F9 6A01                    	push 1
  3577 000021FB E9290B0000              	jmp L_error_incorrect_arity_simple
  3578                                  .L_lambda_simple_arity_check_ok_001c:
  3579 00002200 C8000000                	enter 0, 0
  3580                                  	; preparing a tail-call
  3581                                  	; preparing a non-tail-call
  3582 00002204 488B4520                	mov rax, PARAM(0)	; param x
  3583 00002208 50                      	push rax
  3584 00002209 6A01                    	push 1	; arg count
  3585 0000220B 488B0425[3F0A0000]      	mov rax, qword [free_var_31]	; free var cddr
  3586 00002213 803805                  	cmp byte [rax], T_undefined
  3587 00002216 0F84270A0000            	je L_error_fvar_undefined
  3588 0000221C 803804                  	cmp byte [rax], T_closure
  3589 0000221F 0F85A20A0000            	jne L_error_non_closure
  3590 00002225 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3591 00002228 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3592 0000222B 50                      	push rax
  3593 0000222C 6A01                    	push 1	; arg count
  3594 0000222E 488B0425[3F0A0000]      	mov rax, qword [free_var_31]	; free var cddr
  3595 00002236 803805                  	cmp byte [rax], T_undefined
  3596 00002239 0F84040A0000            	je L_error_fvar_undefined
  3597 0000223F 803804                  	cmp byte [rax], T_closure
  3598 00002242 0F857F0A0000            	jne L_error_non_closure
  3599 00002248 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3600 0000224B FF7508                  	push qword [rbp + 8 * 1]
  3601                                   ; old ret addr
  3602 0000224E FF7500                  	push qword [rbp]
  3603                                   ; restore the old rbp
  3604 00002251 BB01000000              	mov rbx, 1
  3605 00002256 4883C303                	add rbx, 3
  3606 0000225A 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3607 0000225E 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3608 00002263 4C8D4DF8                	lea r9, [rbp - 8]
  3609 00002267 B905000000              	mov rcx, 5
  3610                                  .L_tc_recycle_frame_loop_001c:
  3611 0000226C 4883F900                	cmp rcx, 0
  3612 00002270 7413                    	je .L_tc_recycle_frame_done_001c
  3613 00002272 4D8B11                  	mov r10, qword [r9]
  3614 00002275 4D8910                  	mov qword [r8], r10
  3615 00002278 4983E808                	sub r8, 8
  3616 0000227C 4983E908                	sub r9, 8
  3617 00002280 48FFC9                  	dec rcx
  3618 00002283 EBE7                    	jmp .L_tc_recycle_frame_loop_001c
  3619                                  .L_tc_recycle_frame_done_001c:
  3620 00002285 498D6008                	lea rsp, [r8 + 8]
  3621 00002289 5D                      	pop rbp ; restore the old rbp
  3622 0000228A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3623 0000228D C9                      	leave
  3624 0000228E C21800                  	ret AND_KILL_FRAME(1)
  3625                                  .L_lambda_simple_end_001c:	; new closure is in rax
  3626 00002291 48890425[1D0A0000]      	mov qword [free_var_29], rax
  3627 00002299 48B8-                   	mov rax, sob_void
  3627 0000229B [0000000000000000] 
  3628                                  
  3629 000022A3 4889C7                  	mov rdi, rax
  3630 000022A6 E81A0D0000              	call print_sexpr_if_not_void
  3631 000022AB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3632 000022B0 E8BB0A0000              	call malloc
  3633 000022B5 50                      	push rax
  3634 000022B6 BF00000000              	mov rdi, 8 * 0	; new rib
  3635 000022BB E8B00A0000              	call malloc
  3636 000022C0 50                      	push rax
  3637 000022C1 BF08000000              	mov rdi, 8 * 1	; extended env
  3638 000022C6 E8A50A0000              	call malloc
  3639 000022CB 488B7D10                	mov rdi, ENV
  3640 000022CF BE00000000              	mov rsi, 0
  3641 000022D4 BA01000000              	mov rdx, 1
  3642                                  .L_lambda_simple_env_loop_001d:	; ext_env[i + 1] <-- env[i]
  3643 000022D9 4883FE00                	cmp rsi, 0
  3644 000022DD 7410                    	je .L_lambda_simple_env_end_001d
  3645 000022DF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3646 000022E3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3647 000022E7 48FFC6                  	inc rsi
  3648 000022EA 48FFC2                  	inc rdx
  3649 000022ED EBEA                    	jmp .L_lambda_simple_env_loop_001d
  3650                                  .L_lambda_simple_env_end_001d:
  3651 000022EF 5B                      	pop rbx
  3652 000022F0 BE00000000              	mov rsi, 0
  3653                                  .L_lambda_simple_params_loop_001d:	; copy params
  3654 000022F5 4883FE00                	cmp rsi, 0
  3655 000022F9 740E                    	je .L_lambda_simple_params_end_001d
  3656 000022FB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3657 00002300 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3658 00002304 48FFC6                  	inc rsi
  3659 00002307 EBEC                    	jmp .L_lambda_simple_params_loop_001d
  3660                                  .L_lambda_simple_params_end_001d:
  3661 00002309 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3662 0000230C 4889C3                  	mov rbx, rax
  3663 0000230F 58                      	pop rax
  3664 00002310 C60004                  	mov byte [rax], T_closure
  3665 00002313 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3666 00002317 48C74009[24230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001d
  3667 0000231F E91E010000              	jmp .L_lambda_simple_end_001d
  3668                                  .L_lambda_simple_code_001d:	; lambda-simple body
  3669 00002324 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3670 0000232A 740B                    	je .L_lambda_simple_arity_check_ok_001d
  3671 0000232C FF742410                	push qword [rsp + 8 * 2]
  3672 00002330 6A01                    	push 1
  3673 00002332 E9F2090000              	jmp L_error_incorrect_arity_simple
  3674                                  .L_lambda_simple_arity_check_ok_001d:
  3675 00002337 C8000000                	enter 0, 0
  3676                                  	; preparing a non-tail-call
  3677 0000233B 488B4520                	mov rax, PARAM(0)	; param e
  3678 0000233F 50                      	push rax
  3679 00002340 6A01                    	push 1	; arg count
  3680 00002342 488B0425[D80A0000]      	mov rax, qword [free_var_40]	; free var null?
  3681 0000234A 803805                  	cmp byte [rax], T_undefined
  3682 0000234D 0F84F0080000            	je L_error_fvar_undefined
  3683 00002353 803804                  	cmp byte [rax], T_closure
  3684 00002356 0F856B090000            	jne L_error_non_closure
  3685 0000235C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3686 0000235F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3687 00002362 483D[02000000]          	cmp rax, sob_boolean_false
  3688 00002368 0F84D0000000            	je .L_or_end_0001
  3689                                  
  3690                                  	; preparing a non-tail-call
  3691 0000236E 488B4520                	mov rax, PARAM(0)	; param e
  3692 00002372 50                      	push rax
  3693 00002373 6A01                    	push 1	; arg count
  3694 00002375 488B0425[E90A0000]      	mov rax, qword [free_var_41]	; free var pair?
  3695 0000237D 803805                  	cmp byte [rax], T_undefined
  3696 00002380 0F84BD080000            	je L_error_fvar_undefined
  3697 00002386 803804                  	cmp byte [rax], T_closure
  3698 00002389 0F8538090000            	jne L_error_non_closure
  3699 0000238F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3700 00002392 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3701 00002395 483D[02000000]          	cmp rax, sob_boolean_false
  3702 0000239B 0F848B000000            	je .L_if_else_0001
  3703                                  	; preparing a tail-call
  3704                                  	; preparing a non-tail-call
  3705 000023A1 488B4520                	mov rax, PARAM(0)	; param e
  3706 000023A5 50                      	push rax
  3707 000023A6 6A01                    	push 1	; arg count
  3708 000023A8 488B0425[500A0000]      	mov rax, qword [free_var_32]	; free var cdr
  3709 000023B0 803805                  	cmp byte [rax], T_undefined
  3710 000023B3 0F848A080000            	je L_error_fvar_undefined
  3711 000023B9 803804                  	cmp byte [rax], T_closure
  3712 000023BC 0F8505090000            	jne L_error_non_closure
  3713 000023C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3714 000023C5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3715 000023C8 50                      	push rax
  3716 000023C9 6A01                    	push 1	; arg count
  3717 000023CB 488B0425[B60A0000]      	mov rax, qword [free_var_38]	; free var list?
  3718 000023D3 803805                  	cmp byte [rax], T_undefined
  3719 000023D6 0F8467080000            	je L_error_fvar_undefined
  3720 000023DC 803804                  	cmp byte [rax], T_closure
  3721 000023DF 0F85E2080000            	jne L_error_non_closure
  3722 000023E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3723 000023E8 FF7508                  	push qword [rbp + 8 * 1]
  3724                                   ; old ret addr
  3725 000023EB FF7500                  	push qword [rbp]
  3726                                   ; restore the old rbp
  3727 000023EE BB01000000              	mov rbx, 1
  3728 000023F3 4883C303                	add rbx, 3
  3729 000023F7 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3730 000023FB 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3731 00002400 4C8D4DF8                	lea r9, [rbp - 8]
  3732 00002404 B905000000              	mov rcx, 5
  3733                                  .L_tc_recycle_frame_loop_001d:
  3734 00002409 4883F900                	cmp rcx, 0
  3735 0000240D 7413                    	je .L_tc_recycle_frame_done_001d
  3736 0000240F 4D8B11                  	mov r10, qword [r9]
  3737 00002412 4D8910                  	mov qword [r8], r10
  3738 00002415 4983E808                	sub r8, 8
  3739 00002419 4983E908                	sub r9, 8
  3740 0000241D 48FFC9                  	dec rcx
  3741 00002420 EBE7                    	jmp .L_tc_recycle_frame_loop_001d
  3742                                  .L_tc_recycle_frame_done_001d:
  3743 00002422 498D6008                	lea rsp, [r8 + 8]
  3744 00002426 5D                      	pop rbp ; restore the old rbp
  3745 00002427 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3746 0000242A EB0A                    	jmp .L_if_end_0001
  3747                                  .L_if_else_0001:
  3748 0000242C 48B8-                   	mov rax, L_constants + 2
  3748 0000242E [0200000000000000] 
  3749                                  .L_if_end_0001:
  3750 00002436 483D[02000000]          	cmp rax, sob_boolean_false
  3751 0000243C 7400                    	je .L_or_end_0001
  3752                                  .L_or_end_0001:
  3753 0000243E C9                      	leave
  3754 0000243F C21800                  	ret AND_KILL_FRAME(1)
  3755                                  .L_lambda_simple_end_001d:	; new closure is in rax
  3756 00002442 48890425[B60A0000]      	mov qword [free_var_38], rax
  3757 0000244A 48B8-                   	mov rax, sob_void
  3757 0000244C [0000000000000000] 
  3758                                  
  3759 00002454 4889C7                  	mov rdi, rax
  3760 00002457 E8690B0000              	call print_sexpr_if_not_void
  3761 0000245C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3762 00002461 E80A090000              	call malloc
  3763 00002466 50                      	push rax
  3764 00002467 BF08000000              	mov rdi, 8 * 1	; new rib
  3765 0000246C E8FF080000              	call malloc
  3766 00002471 50                      	push rax
  3767 00002472 BF08000000              	mov rdi, 8 * 1	; extended env
  3768 00002477 E8F4080000              	call malloc
  3769 0000247C 488B7D10                	mov rdi, ENV
  3770 00002480 BE00000000              	mov rsi, 0
  3771 00002485 BA01000000              	mov rdx, 1
  3772                                  .L_lambda_opt_env_loop_0001:	; ext_env[i + 1] <-- env[i]
  3773 0000248A 4883FE00                	cmp rsi, 0
  3774 0000248E 7410                    	je .L_lambda_opt_env_end_0001
  3775 00002490 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3776 00002494 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3777 00002498 48FFC6                  	inc rsi
  3778 0000249B 48FFC2                  	inc rdx
  3779 0000249E EBEA                    	jmp .L_lambda_opt_env_loop_0001
  3780                                  .L_lambda_opt_env_end_0001:
  3781 000024A0 5B                      	pop rbx
  3782 000024A1 BE00000000              	mov rsi, 0
  3783                                  .L_lambda_opt_params_loop_0001:	; copy params
  3784 000024A6 4883FE00                	cmp rsi, 0
  3785 000024AA 740E                    	je .L_lambda_opt_params_end_0001
  3786 000024AC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3787 000024B1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3788 000024B5 48FFC6                  	inc rsi
  3789 000024B8 EBEC                    	jmp .L_lambda_opt_params_loop_0001
  3790                                  .L_lambda_opt_params_end_0001:
  3791 000024BA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3792 000024BD 4889C3                  	mov rbx, rax
  3793 000024C0 58                      	pop rax
  3794 000024C1 C60004                  	mov byte [rax], T_closure
  3795 000024C4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3796 000024C8 48C74009[D5240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
  3797 000024D0 E995000000              	jmp .L_lambda_opt_end_0001
  3798                                  .L_lambda_opt_code_0001:	; lambda-opt body
  3799 000024D5 48837C241000            	cmp qword [rsp + 8 * 2], 0
  3800 000024DB 745E                    	je .L_lambda_opt_arity_check_exact_0001
  3801 000024DD 7F0B                    	jg .L_lambda_opt_arity_check_more_0001
  3802 000024DF FF742410                	push qword [rsp + 8 * 2]
  3803 000024E3 6A00                    	push 0
  3804 000024E5 E93F080000              	jmp L_error_incorrect_arity_simple
  3805                                  .L_lambda_opt_arity_check_more_0001:
  3806 000024EA 53                      push rbx
  3807 000024EB 51                      push rcx
  3808 000024EC 488B4D10                mov rcx, [rbp + 8*2]
  3809 000024F0 BB00000000              mov rbx , 0
  3810 000024F5 4829D9                  sub rcx, rbx
  3811 000024F8 48FFC3                  inc rbx
  3812 000024FB 48895D10                mov [rbp + 8*2], rbx
  3813 000024FF 4889CF                  	 mov rdi, rcx 
  3814 00002502 48C1E703                	 shl rdi, 3 
  3815 00002506 E865080000              	call malloc
  3816 0000250B 50                      	push rax
  3817 0000250C 488B44DD18              	mov rax, [rbp + 8*2 + rbx*8 + 8]
  3818 00002511 4831FF                  xor rdi, rdi
  3819                                  .L_lambda_opt_stack_shrink_loop_0001:
  3820 00002514 4839CF                  	cmp rdi, rcx
  3821 00002517 741A                    	je .L_lambda_opt_stack_shrink_loop_exit_0001
  3822 00002519 488904FC                mov [rsp + rdi*8], rax
  3823 0000251D 48FFC7                  	inc rdi
  3824 00002520 4C8B04FD08000000        	mov r8, [rdi*8 + 8]
  3825 00002528 4E8B4C0510              	mov r9, [rbp + r8 + 8*2]
  3826 0000252D 498B04D9                mov rax,[r9 + rbx*8] 
  3827 00002531 EBE1                    jmp .L_lambda_opt_stack_shrink_loop_0001
  3828                                  .L_lambda_opt_stack_shrink_loop_exit_0001:
  3829 00002533 8F44DD18                	pop qword [rbp + 8*2 + rbx*8 + 8]
  3830 00002537 5B                      pop rbx
  3831 00002538 53                      push rbx
  3832 00002539 EB16                    jmp .L_lambda_opt_stack_adjusted_0001
  3833                                  .L_lambda_opt_arity_check_exact_0001:
  3834 0000253B 48B8-                   	mov rax, L_constants + 1
  3834 0000253D [0100000000000000] 
  3835 00002545 53                      push rbx
  3836 00002546 488B5C2410              mov rbx , [rsp + 8*2]
  3837 0000254B 488944DC10              mov [rsp + 8 * rbx + 8 * 2], rax
  3838 00002550 5B                      pop rbx
  3839                                  .L_lambda_opt_stack_adjusted_0001:	; new closure is in rax
  3840 00002551 C8000000                	enter 0, 0
  3841 00002555 488B0425[52080000]      	mov rax, qword [free_var_2]	; free var args
  3842 0000255D 803805                  	cmp byte [rax], T_undefined
  3843 00002560 0F84DD060000            	je L_error_fvar_undefined
  3844 00002566 C9                      	leave
  3845 00002567 C21000                  	ret AND_KILL_FRAME(0)
  3846                                  .L_lambda_opt_end_0001:	; new closure is in rax
  3847 0000256A 48890425[A50A0000]      	mov qword [free_var_37], rax
  3848 00002572 48B8-                   	mov rax, sob_void
  3848 00002574 [0000000000000000] 
  3849                                  
  3850 0000257C 4889C7                  	mov rdi, rax
  3851 0000257F E8410A0000              	call print_sexpr_if_not_void
  3852 00002584 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3853 00002589 E8E2070000              	call malloc
  3854 0000258E 50                      	push rax
  3855 0000258F BF00000000              	mov rdi, 8 * 0	; new rib
  3856 00002594 E8D7070000              	call malloc
  3857 00002599 50                      	push rax
  3858 0000259A BF08000000              	mov rdi, 8 * 1	; extended env
  3859 0000259F E8CC070000              	call malloc
  3860 000025A4 488B7D10                	mov rdi, ENV
  3861 000025A8 BE00000000              	mov rsi, 0
  3862 000025AD BA01000000              	mov rdx, 1
  3863                                  .L_lambda_simple_env_loop_001e:	; ext_env[i + 1] <-- env[i]
  3864 000025B2 4883FE00                	cmp rsi, 0
  3865 000025B6 7410                    	je .L_lambda_simple_env_end_001e
  3866 000025B8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3867 000025BC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3868 000025C0 48FFC6                  	inc rsi
  3869 000025C3 48FFC2                  	inc rdx
  3870 000025C6 EBEA                    	jmp .L_lambda_simple_env_loop_001e
  3871                                  .L_lambda_simple_env_end_001e:
  3872 000025C8 5B                      	pop rbx
  3873 000025C9 BE00000000              	mov rsi, 0
  3874                                  .L_lambda_simple_params_loop_001e:	; copy params
  3875 000025CE 4883FE00                	cmp rsi, 0
  3876 000025D2 740E                    	je .L_lambda_simple_params_end_001e
  3877 000025D4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3878 000025D9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3879 000025DD 48FFC6                  	inc rsi
  3880 000025E0 EBEC                    	jmp .L_lambda_simple_params_loop_001e
  3881                                  .L_lambda_simple_params_end_001e:
  3882 000025E2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3883 000025E5 4889C3                  	mov rbx, rax
  3884 000025E8 58                      	pop rax
  3885 000025E9 C60004                  	mov byte [rax], T_closure
  3886 000025EC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3887 000025F0 48C74009[FA250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001e
  3888 000025F8 EB3D                    	jmp .L_lambda_simple_end_001e
  3889                                  .L_lambda_simple_code_001e:	; lambda-simple body
  3890 000025FA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3891 00002600 740B                    	je .L_lambda_simple_arity_check_ok_001e
  3892 00002602 FF742410                	push qword [rsp + 8 * 2]
  3893 00002606 6A01                    	push 1
  3894 00002608 E91C070000              	jmp L_error_incorrect_arity_simple
  3895                                  .L_lambda_simple_arity_check_ok_001e:
  3896 0000260D C8000000                	enter 0, 0
  3897 00002611 488B4520                	mov rax, PARAM(0)	; param x
  3898 00002615 483D[02000000]          	cmp rax, sob_boolean_false
  3899 0000261B 740C                    	je .L_if_else_0002
  3900 0000261D 48B8-                   	mov rax, L_constants + 2
  3900 0000261F [0200000000000000] 
  3901 00002627 EB0A                    	jmp .L_if_end_0002
  3902                                  .L_if_else_0002:
  3903 00002629 48B8-                   	mov rax, L_constants + 3
  3903 0000262B [0300000000000000] 
  3904                                  .L_if_end_0002:
  3905 00002633 C9                      	leave
  3906 00002634 C21800                  	ret AND_KILL_FRAME(1)
  3907                                  .L_lambda_simple_end_001e:	; new closure is in rax
  3908 00002637 48890425[C70A0000]      	mov qword [free_var_39], rax
  3909 0000263F 48B8-                   	mov rax, sob_void
  3909 00002641 [0000000000000000] 
  3910                                  
  3911 00002649 4889C7                  	mov rdi, rax
  3912 0000264C E874090000              	call print_sexpr_if_not_void
  3913 00002651 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3914 00002656 E815070000              	call malloc
  3915 0000265B 50                      	push rax
  3916 0000265C BF00000000              	mov rdi, 8 * 0	; new rib
  3917 00002661 E80A070000              	call malloc
  3918 00002666 50                      	push rax
  3919 00002667 BF08000000              	mov rdi, 8 * 1	; extended env
  3920 0000266C E8FF060000              	call malloc
  3921 00002671 488B7D10                	mov rdi, ENV
  3922 00002675 BE00000000              	mov rsi, 0
  3923 0000267A BA01000000              	mov rdx, 1
  3924                                  .L_lambda_simple_env_loop_001f:	; ext_env[i + 1] <-- env[i]
  3925 0000267F 4883FE00                	cmp rsi, 0
  3926 00002683 7410                    	je .L_lambda_simple_env_end_001f
  3927 00002685 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3928 00002689 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3929 0000268D 48FFC6                  	inc rsi
  3930 00002690 48FFC2                  	inc rdx
  3931 00002693 EBEA                    	jmp .L_lambda_simple_env_loop_001f
  3932                                  .L_lambda_simple_env_end_001f:
  3933 00002695 5B                      	pop rbx
  3934 00002696 BE00000000              	mov rsi, 0
  3935                                  .L_lambda_simple_params_loop_001f:	; copy params
  3936 0000269B 4883FE00                	cmp rsi, 0
  3937 0000269F 740E                    	je .L_lambda_simple_params_end_001f
  3938 000026A1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3939 000026A6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3940 000026AA 48FFC6                  	inc rsi
  3941 000026AD EBEC                    	jmp .L_lambda_simple_params_loop_001f
  3942                                  .L_lambda_simple_params_end_001f:
  3943 000026AF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3944 000026B2 4889C3                  	mov rbx, rax
  3945 000026B5 58                      	pop rax
  3946 000026B6 C60004                  	mov byte [rax], T_closure
  3947 000026B9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3948 000026BD 48C74009[CA260000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001f
  3949 000026C5 E9B8000000              	jmp .L_lambda_simple_end_001f
  3950                                  .L_lambda_simple_code_001f:	; lambda-simple body
  3951 000026CA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3952 000026D0 740B                    	je .L_lambda_simple_arity_check_ok_001f
  3953 000026D2 FF742410                	push qword [rsp + 8 * 2]
  3954 000026D6 6A01                    	push 1
  3955 000026D8 E94C060000              	jmp L_error_incorrect_arity_simple
  3956                                  .L_lambda_simple_arity_check_ok_001f:
  3957 000026DD C8000000                	enter 0, 0
  3958                                  	; preparing a non-tail-call
  3959 000026E1 488B4520                	mov rax, PARAM(0)	; param q
  3960 000026E5 50                      	push rax
  3961 000026E6 6A01                    	push 1	; arg count
  3962 000026E8 488B0425[940A0000]      	mov rax, qword [free_var_36]	; free var integer?
  3963 000026F0 803805                  	cmp byte [rax], T_undefined
  3964 000026F3 0F844A050000            	je L_error_fvar_undefined
  3965 000026F9 803804                  	cmp byte [rax], T_closure
  3966 000026FC 0F85C5050000            	jne L_error_non_closure
  3967 00002702 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3968 00002705 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3969 00002708 483D[02000000]          	cmp rax, sob_boolean_false
  3970 0000270E 746E                    	je .L_or_end_0002
  3971                                  
  3972                                  	; preparing a tail-call
  3973 00002710 488B4520                	mov rax, PARAM(0)	; param q
  3974 00002714 50                      	push rax
  3975 00002715 6A01                    	push 1	; arg count
  3976 00002717 488B0425[610A0000]      	mov rax, qword [free_var_33]	; free var fraction?
  3977 0000271F 803805                  	cmp byte [rax], T_undefined
  3978 00002722 0F841B050000            	je L_error_fvar_undefined
  3979 00002728 803804                  	cmp byte [rax], T_closure
  3980 0000272B 0F8596050000            	jne L_error_non_closure
  3981 00002731 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3982 00002734 FF7508                  	push qword [rbp + 8 * 1]
  3983                                   ; old ret addr
  3984 00002737 FF7500                  	push qword [rbp]
  3985                                   ; restore the old rbp
  3986 0000273A BB01000000              	mov rbx, 1
  3987 0000273F 4883C303                	add rbx, 3
  3988 00002743 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3989 00002747 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3990 0000274C 4C8D4DF8                	lea r9, [rbp - 8]
  3991 00002750 B905000000              	mov rcx, 5
  3992                                  .L_tc_recycle_frame_loop_001e:
  3993 00002755 4883F900                	cmp rcx, 0
  3994 00002759 7413                    	je .L_tc_recycle_frame_done_001e
  3995 0000275B 4D8B11                  	mov r10, qword [r9]
  3996 0000275E 4D8910                  	mov qword [r8], r10
  3997 00002761 4983E808                	sub r8, 8
  3998 00002765 4983E908                	sub r9, 8
  3999 00002769 48FFC9                  	dec rcx
  4000 0000276C EBE7                    	jmp .L_tc_recycle_frame_loop_001e
  4001                                  .L_tc_recycle_frame_done_001e:
  4002 0000276E 498D6008                	lea rsp, [r8 + 8]
  4003 00002772 5D                      	pop rbp ; restore the old rbp
  4004 00002773 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4005 00002776 483D[02000000]          	cmp rax, sob_boolean_false
  4006 0000277C 7400                    	je .L_or_end_0002
  4007                                  .L_or_end_0002:
  4008 0000277E C9                      	leave
  4009 0000277F C21800                  	ret AND_KILL_FRAME(1)
  4010                                  .L_lambda_simple_end_001f:	; new closure is in rax
  4011 00002782 48890425[FA0A0000]      	mov qword [free_var_42], rax
  4012 0000278A 48B8-                   	mov rax, sob_void
  4012 0000278C [0000000000000000] 
  4013                                  
  4014 00002794 4889C7                  	mov rdi, rax
  4015 00002797 E829080000              	call print_sexpr_if_not_void
  4016                                  	; preparing a non-tail-call
  4017 0000279C 48B8-                   	mov rax, L_constants + 2007
  4017 0000279E [D707000000000000] 
  4018 000027A6 50                      	push rax
  4019 000027A7 6A01                    	push 1	; arg count
  4020 000027A9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4021 000027AE E8BD050000              	call malloc
  4022 000027B3 50                      	push rax
  4023 000027B4 BF00000000              	mov rdi, 8 * 0	; new rib
  4024 000027B9 E8B2050000              	call malloc
  4025 000027BE 50                      	push rax
  4026 000027BF BF08000000              	mov rdi, 8 * 1	; extended env
  4027 000027C4 E8A7050000              	call malloc
  4028 000027C9 488B7D10                	mov rdi, ENV
  4029 000027CD BE00000000              	mov rsi, 0
  4030 000027D2 BA01000000              	mov rdx, 1
  4031                                  .L_lambda_simple_env_loop_0020:	; ext_env[i + 1] <-- env[i]
  4032 000027D7 4883FE00                	cmp rsi, 0
  4033 000027DB 7410                    	je .L_lambda_simple_env_end_0020
  4034 000027DD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4035 000027E1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4036 000027E5 48FFC6                  	inc rsi
  4037 000027E8 48FFC2                  	inc rdx
  4038 000027EB EBEA                    	jmp .L_lambda_simple_env_loop_0020
  4039                                  .L_lambda_simple_env_end_0020:
  4040 000027ED 5B                      	pop rbx
  4041 000027EE BE00000000              	mov rsi, 0
  4042                                  .L_lambda_simple_params_loop_0020:	; copy params
  4043 000027F3 4883FE00                	cmp rsi, 0
  4044 000027F7 740E                    	je .L_lambda_simple_params_end_0020
  4045 000027F9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4046 000027FE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4047 00002802 48FFC6                  	inc rsi
  4048 00002805 EBEC                    	jmp .L_lambda_simple_params_loop_0020
  4049                                  .L_lambda_simple_params_end_0020:
  4050 00002807 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4051 0000280A 4889C3                  	mov rbx, rax
  4052 0000280D 58                      	pop rax
  4053 0000280E C60004                  	mov byte [rax], T_closure
  4054 00002811 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4055 00002815 48C74009[22280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0020
  4056 0000281D E933010000              	jmp .L_lambda_simple_end_0020
  4057                                  .L_lambda_simple_code_0020:	; lambda-simple body
  4058 00002822 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4059 00002828 740B                    	je .L_lambda_simple_arity_check_ok_0020
  4060 0000282A FF742410                	push qword [rsp + 8 * 2]
  4061 0000282E 6A01                    	push 1
  4062 00002830 E9F4040000              	jmp L_error_incorrect_arity_simple
  4063                                  .L_lambda_simple_arity_check_ok_0020:
  4064 00002835 C8000000                	enter 0, 0
  4065                                  	; preparing a tail-call
  4066                                  	; preparing a non-tail-call
  4067 00002839 48B8-                   	mov rax, L_constants + 1998
  4067 0000283B [CE07000000000000] 
  4068 00002843 50                      	push rax
  4069 00002844 488B4520                	mov rax, PARAM(0)	; param x
  4070 00002848 50                      	push rax
  4071 00002849 6A02                    	push 2	; arg count
  4072 0000284B 488B0425[30080000]      	mov rax, qword [free_var_0]	; free var +
  4073 00002853 803805                  	cmp byte [rax], T_undefined
  4074 00002856 0F84E7030000            	je L_error_fvar_undefined
  4075 0000285C 803804                  	cmp byte [rax], T_closure
  4076 0000285F 0F8562040000            	jne L_error_non_closure
  4077 00002865 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4078 00002868 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4079 0000286B 50                      	push rax
  4080 0000286C 6A01                    	push 1	; arg count
  4081 0000286E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4082 00002873 E8F8040000              	call malloc
  4083 00002878 50                      	push rax
  4084 00002879 BF08000000              	mov rdi, 8 * 1	; new rib
  4085 0000287E E8ED040000              	call malloc
  4086 00002883 50                      	push rax
  4087 00002884 BF10000000              	mov rdi, 8 * 2	; extended env
  4088 00002889 E8E2040000              	call malloc
  4089 0000288E 488B7D10                	mov rdi, ENV
  4090 00002892 BE00000000              	mov rsi, 0
  4091 00002897 BA01000000              	mov rdx, 1
  4092                                  .L_lambda_simple_env_loop_0021:	; ext_env[i + 1] <-- env[i]
  4093 0000289C 4883FE01                	cmp rsi, 1
  4094 000028A0 7410                    	je .L_lambda_simple_env_end_0021
  4095 000028A2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4096 000028A6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4097 000028AA 48FFC6                  	inc rsi
  4098 000028AD 48FFC2                  	inc rdx
  4099 000028B0 EBEA                    	jmp .L_lambda_simple_env_loop_0021
  4100                                  .L_lambda_simple_env_end_0021:
  4101 000028B2 5B                      	pop rbx
  4102 000028B3 BE00000000              	mov rsi, 0
  4103                                  .L_lambda_simple_params_loop_0021:	; copy params
  4104 000028B8 4883FE01                	cmp rsi, 1
  4105 000028BC 740E                    	je .L_lambda_simple_params_end_0021
  4106 000028BE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4107 000028C3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4108 000028C7 48FFC6                  	inc rsi
  4109 000028CA EBEC                    	jmp .L_lambda_simple_params_loop_0021
  4110                                  .L_lambda_simple_params_end_0021:
  4111 000028CC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4112 000028CF 4889C3                  	mov rbx, rax
  4113 000028D2 58                      	pop rax
  4114 000028D3 C60004                  	mov byte [rax], T_closure
  4115 000028D6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4116 000028DA 48C74009[E4280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0021
  4117 000028E2 EB1F                    	jmp .L_lambda_simple_end_0021
  4118                                  .L_lambda_simple_code_0021:	; lambda-simple body
  4119 000028E4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4120 000028EA 740B                    	je .L_lambda_simple_arity_check_ok_0021
  4121 000028EC FF742410                	push qword [rsp + 8 * 2]
  4122 000028F0 6A01                    	push 1
  4123 000028F2 E932040000              	jmp L_error_incorrect_arity_simple
  4124                                  .L_lambda_simple_arity_check_ok_0021:
  4125 000028F7 C8000000                	enter 0, 0
  4126 000028FB 488B4520                	mov rax, PARAM(0)	; param y
  4127 000028FF C9                      	leave
  4128 00002900 C21800                  	ret AND_KILL_FRAME(1)
  4129                                  .L_lambda_simple_end_0021:	; new closure is in rax
  4130 00002903 803804                  	cmp byte [rax], T_closure
  4131 00002906 0F85BB030000            	jne L_error_non_closure
  4132 0000290C FF7001                  	push SOB_CLOSURE_ENV(rax)
  4133 0000290F FF7508                  	push qword [rbp + 8 * 1]
  4134                                   ; old ret addr
  4135 00002912 FF7500                  	push qword [rbp]
  4136                                   ; restore the old rbp
  4137 00002915 BB01000000              	mov rbx, 1
  4138 0000291A 4883C303                	add rbx, 3
  4139 0000291E 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  4140 00002922 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  4141 00002927 4C8D4DF8                	lea r9, [rbp - 8]
  4142 0000292B B905000000              	mov rcx, 5
  4143                                  .L_tc_recycle_frame_loop_001f:
  4144 00002930 4883F900                	cmp rcx, 0
  4145 00002934 7413                    	je .L_tc_recycle_frame_done_001f
  4146 00002936 4D8B11                  	mov r10, qword [r9]
  4147 00002939 4D8910                  	mov qword [r8], r10
  4148 0000293C 4983E808                	sub r8, 8
  4149 00002940 4983E908                	sub r9, 8
  4150 00002944 48FFC9                  	dec rcx
  4151 00002947 EBE7                    	jmp .L_tc_recycle_frame_loop_001f
  4152                                  .L_tc_recycle_frame_done_001f:
  4153 00002949 498D6008                	lea rsp, [r8 + 8]
  4154 0000294D 5D                      	pop rbp ; restore the old rbp
  4155 0000294E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4156 00002951 C9                      	leave
  4157 00002952 C21800                  	ret AND_KILL_FRAME(1)
  4158                                  .L_lambda_simple_end_0020:	; new closure is in rax
  4159 00002955 803804                  	cmp byte [rax], T_closure
  4160 00002958 0F8569030000            	jne L_error_non_closure
  4161 0000295E FF7001                  	push SOB_CLOSURE_ENV(rax)
  4162 00002961 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4163 00002964 48890425[1C0B0000]      	mov qword [free_var_44], rax
  4164 0000296C 48B8-                   	mov rax, sob_void
  4164 0000296E [0000000000000000] 
  4165                                  
  4166 00002976 4889C7                  	mov rdi, rax
  4167 00002979 E847060000              	call print_sexpr_if_not_void
  4168 0000297E 48B8-                   	mov rax, L_constants + 2007
  4168 00002980 [D707000000000000] 
  4169 00002988 48890425[720A0000]      	mov qword [free_var_34], rax
  4170 00002990 48B8-                   	mov rax, sob_void
  4170 00002992 [0000000000000000] 
  4171                                  
  4172 0000299A 4889C7                  	mov rdi, rax
  4173 0000299D E823060000              	call print_sexpr_if_not_void
  4174 000029A2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4175 000029A7 E8C4030000              	call malloc
  4176 000029AC 50                      	push rax
  4177 000029AD BF00000000              	mov rdi, 8 * 0	; new rib
  4178 000029B2 E8B9030000              	call malloc
  4179 000029B7 50                      	push rax
  4180 000029B8 BF08000000              	mov rdi, 8 * 1	; extended env
  4181 000029BD E8AE030000              	call malloc
  4182 000029C2 488B7D10                	mov rdi, ENV
  4183 000029C6 BE00000000              	mov rsi, 0
  4184 000029CB BA01000000              	mov rdx, 1
  4185                                  .L_lambda_simple_env_loop_0022:	; ext_env[i + 1] <-- env[i]
  4186 000029D0 4883FE00                	cmp rsi, 0
  4187 000029D4 7410                    	je .L_lambda_simple_env_end_0022
  4188 000029D6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4189 000029DA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4190 000029DE 48FFC6                  	inc rsi
  4191 000029E1 48FFC2                  	inc rdx
  4192 000029E4 EBEA                    	jmp .L_lambda_simple_env_loop_0022
  4193                                  .L_lambda_simple_env_end_0022:
  4194 000029E6 5B                      	pop rbx
  4195 000029E7 BE00000000              	mov rsi, 0
  4196                                  .L_lambda_simple_params_loop_0022:	; copy params
  4197 000029EC 4883FE00                	cmp rsi, 0
  4198 000029F0 740E                    	je .L_lambda_simple_params_end_0022
  4199 000029F2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4200 000029F7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4201 000029FB 48FFC6                  	inc rsi
  4202 000029FE EBEC                    	jmp .L_lambda_simple_params_loop_0022
  4203                                  .L_lambda_simple_params_end_0022:
  4204 00002A00 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4205 00002A03 4889C3                  	mov rbx, rax
  4206 00002A06 58                      	pop rax
  4207 00002A07 C60004                  	mov byte [rax], T_closure
  4208 00002A0A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4209 00002A0E 48C74009[182A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0022
  4210 00002A16 EB74                    	jmp .L_lambda_simple_end_0022
  4211                                  .L_lambda_simple_code_0022:	; lambda-simple body
  4212 00002A18 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4213 00002A1E 740B                    	je .L_lambda_simple_arity_check_ok_0022
  4214 00002A20 FF742410                	push qword [rsp + 8 * 2]
  4215 00002A24 6A02                    	push 2
  4216 00002A26 E9FE020000              	jmp L_error_incorrect_arity_simple
  4217                                  .L_lambda_simple_arity_check_ok_0022:
  4218 00002A2B C8000000                	enter 0, 0
  4219                                  	; preparing a tail-call
  4220 00002A2F 488B4520                	mov rax, PARAM(0)	; param x
  4221 00002A33 50                      	push rax
  4222 00002A34 6A01                    	push 1	; arg count
  4223 00002A36 488B4528                	mov rax, PARAM(1)	; param f
  4224 00002A3A 803804                  	cmp byte [rax], T_closure
  4225 00002A3D 0F8584020000            	jne L_error_non_closure
  4226 00002A43 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4227 00002A46 FF7508                  	push qword [rbp + 8 * 1]
  4228                                   ; old ret addr
  4229 00002A49 FF7500                  	push qword [rbp]
  4230                                   ; restore the old rbp
  4231 00002A4C BB01000000              	mov rbx, 1
  4232 00002A51 4883C303                	add rbx, 3
  4233 00002A55 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  4234 00002A59 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  4235 00002A5E 4C8D4DF8                	lea r9, [rbp - 8]
  4236 00002A62 B905000000              	mov rcx, 5
  4237                                  .L_tc_recycle_frame_loop_0020:
  4238 00002A67 4883F900                	cmp rcx, 0
  4239 00002A6B 7413                    	je .L_tc_recycle_frame_done_0020
  4240 00002A6D 4D8B11                  	mov r10, qword [r9]
  4241 00002A70 4D8910                  	mov qword [r8], r10
  4242 00002A73 4983E808                	sub r8, 8
  4243 00002A77 4983E908                	sub r9, 8
  4244 00002A7B 48FFC9                  	dec rcx
  4245 00002A7E EBE7                    	jmp .L_tc_recycle_frame_loop_0020
  4246                                  .L_tc_recycle_frame_done_0020:
  4247 00002A80 498D6008                	lea rsp, [r8 + 8]
  4248 00002A84 5D                      	pop rbp ; restore the old rbp
  4249 00002A85 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4250 00002A88 C9                      	leave
  4251 00002A89 C22000                  	ret AND_KILL_FRAME(2)
  4252                                  .L_lambda_simple_end_0022:	; new closure is in rax
  4253 00002A8C 48890425[0B0B0000]      	mov qword [free_var_43], rax
  4254 00002A94 48B8-                   	mov rax, sob_void
  4254 00002A96 [0000000000000000] 
  4255                                  
  4256 00002A9E 4889C7                  	mov rdi, rax
  4257 00002AA1 E81F050000              	call print_sexpr_if_not_void
  4258 00002AA6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4259 00002AAB E8C0020000              	call malloc
  4260 00002AB0 50                      	push rax
  4261 00002AB1 BF00000000              	mov rdi, 8 * 0	; new rib
  4262 00002AB6 E8B5020000              	call malloc
  4263 00002ABB 50                      	push rax
  4264 00002ABC BF08000000              	mov rdi, 8 * 1	; extended env
  4265 00002AC1 E8AA020000              	call malloc
  4266 00002AC6 488B7D10                	mov rdi, ENV
  4267 00002ACA BE00000000              	mov rsi, 0
  4268 00002ACF BA01000000              	mov rdx, 1
  4269                                  .L_lambda_simple_env_loop_0023:	; ext_env[i + 1] <-- env[i]
  4270 00002AD4 4883FE00                	cmp rsi, 0
  4271 00002AD8 7410                    	je .L_lambda_simple_env_end_0023
  4272 00002ADA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4273 00002ADE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4274 00002AE2 48FFC6                  	inc rsi
  4275 00002AE5 48FFC2                  	inc rdx
  4276 00002AE8 EBEA                    	jmp .L_lambda_simple_env_loop_0023
  4277                                  .L_lambda_simple_env_end_0023:
  4278 00002AEA 5B                      	pop rbx
  4279 00002AEB BE00000000              	mov rsi, 0
  4280                                  .L_lambda_simple_params_loop_0023:	; copy params
  4281 00002AF0 4883FE00                	cmp rsi, 0
  4282 00002AF4 740E                    	je .L_lambda_simple_params_end_0023
  4283 00002AF6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4284 00002AFB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4285 00002AFF 48FFC6                  	inc rsi
  4286 00002B02 EBEC                    	jmp .L_lambda_simple_params_loop_0023
  4287                                  .L_lambda_simple_params_end_0023:
  4288 00002B04 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4289 00002B07 4889C3                  	mov rbx, rax
  4290 00002B0A 58                      	pop rax
  4291 00002B0B C60004                  	mov byte [rax], T_closure
  4292 00002B0E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4293 00002B12 48C74009[1C2B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0023
  4294 00002B1A EB1F                    	jmp .L_lambda_simple_end_0023
  4295                                  .L_lambda_simple_code_0023:	; lambda-simple body
  4296 00002B1C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4297 00002B22 740B                    	je .L_lambda_simple_arity_check_ok_0023
  4298 00002B24 FF742410                	push qword [rsp + 8 * 2]
  4299 00002B28 6A01                    	push 1
  4300 00002B2A E9FA010000              	jmp L_error_incorrect_arity_simple
  4301                                  .L_lambda_simple_arity_check_ok_0023:
  4302 00002B2F C8000000                	enter 0, 0
  4303 00002B33 488B4520                	mov rax, PARAM(0)	; param x
  4304 00002B37 C9                      	leave
  4305 00002B38 C21800                  	ret AND_KILL_FRAME(1)
  4306                                  .L_lambda_simple_end_0023:	; new closure is in rax
  4307 00002B3B 48890425[41080000]      	mov qword [free_var_1], rax
  4308 00002B43 48B8-                   	mov rax, sob_void
  4308 00002B45 [0000000000000000] 
  4309                                  
  4310 00002B4D 4889C7                  	mov rdi, rax
  4311 00002B50 E870040000              	call print_sexpr_if_not_void
  4312 00002B55 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4313 00002B5A E811020000              	call malloc
  4314 00002B5F 50                      	push rax
  4315 00002B60 BF00000000              	mov rdi, 8 * 0	; new rib
  4316 00002B65 E806020000              	call malloc
  4317 00002B6A 50                      	push rax
  4318 00002B6B BF08000000              	mov rdi, 8 * 1	; extended env
  4319 00002B70 E8FB010000              	call malloc
  4320 00002B75 488B7D10                	mov rdi, ENV
  4321 00002B79 BE00000000              	mov rsi, 0
  4322 00002B7E BA01000000              	mov rdx, 1
  4323                                  .L_lambda_simple_env_loop_0024:	; ext_env[i + 1] <-- env[i]
  4324 00002B83 4883FE00                	cmp rsi, 0
  4325 00002B87 7410                    	je .L_lambda_simple_env_end_0024
  4326 00002B89 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4327 00002B8D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4328 00002B91 48FFC6                  	inc rsi
  4329 00002B94 48FFC2                  	inc rdx
  4330 00002B97 EBEA                    	jmp .L_lambda_simple_env_loop_0024
  4331                                  .L_lambda_simple_env_end_0024:
  4332 00002B99 5B                      	pop rbx
  4333 00002B9A BE00000000              	mov rsi, 0
  4334                                  .L_lambda_simple_params_loop_0024:	; copy params
  4335 00002B9F 4883FE00                	cmp rsi, 0
  4336 00002BA3 740E                    	je .L_lambda_simple_params_end_0024
  4337 00002BA5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4338 00002BAA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4339 00002BAE 48FFC6                  	inc rsi
  4340 00002BB1 EBEC                    	jmp .L_lambda_simple_params_loop_0024
  4341                                  .L_lambda_simple_params_end_0024:
  4342 00002BB3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4343 00002BB6 4889C3                  	mov rbx, rax
  4344 00002BB9 58                      	pop rax
  4345 00002BBA C60004                  	mov byte [rax], T_closure
  4346 00002BBD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4347 00002BC1 48C74009[CB2B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0024
  4348 00002BC9 EB28                    	jmp .L_lambda_simple_end_0024
  4349                                  .L_lambda_simple_code_0024:	; lambda-simple body
  4350 00002BCB 48837C241000            	cmp qword [rsp + 8 * 2], 0
  4351 00002BD1 740B                    	je .L_lambda_simple_arity_check_ok_0024
  4352 00002BD3 FF742410                	push qword [rsp + 8 * 2]
  4353 00002BD7 6A00                    	push 0
  4354 00002BD9 E94B010000              	jmp L_error_incorrect_arity_simple
  4355                                  .L_lambda_simple_arity_check_ok_0024:
  4356 00002BDE C8000000                	enter 0, 0
  4357 00002BE2 488B0425[720A0000]      	mov rax, qword [free_var_34]	; free var free_var
  4358 00002BEA 803805                  	cmp byte [rax], T_undefined
  4359 00002BED 7454                    	je L_error_fvar_undefined
  4360 00002BEF C9                      	leave
  4361 00002BF0 C21000                  	ret AND_KILL_FRAME(0)
  4362                                  .L_lambda_simple_end_0024:	; new closure is in rax
  4363 00002BF3 48890425[830A0000]      	mov qword [free_var_35], rax
  4364 00002BFB 48B8-                   	mov rax, sob_void
  4364 00002BFD [0000000000000000] 
  4365                                  Lend:
  4366 00002C05 4889C7                  	mov rdi, rax
  4367 00002C08 E8B8030000              	call print_sexpr_if_not_void
  4368                                  
  4369 00002C0D 48BF-                           mov rdi, fmt_memory_usage
  4369 00002C0F [C50B000000000000] 
  4370 00002C17 488B3425[4B0C0000]              mov rsi, qword [top_of_memory]
  4371 00002C1F 4881EE[00000000]                sub rsi, memory
  4372 00002C26 B800000000                      mov rax, 0
  4373                                          ENTER
    44 00002C2B C8000000            <1>  enter 0, 0
    45 00002C2F 4883E4F0            <1>  and rsp, ~15
  4374 00002C33 E8(00000000)                    call printf
  4375                                          LEAVE
    49 00002C38 C9                  <1>  leave
  4376 00002C39 B800000000                      mov rax, 0
  4377 00002C3E E8(00000000)                    call exit
  4378                                  
  4379                                  L_error_fvar_undefined:
  4380 00002C43 50                              push rax
  4381 00002C44 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
  4382 00002C4C 48BE-                           mov rsi, fmt_undefined_free_var_1
  4382 00002C4E [2D0B000000000000] 
  4383 00002C56 B800000000                      mov rax, 0
  4384                                          ENTER
    44 00002C5B C8000000            <1>  enter 0, 0
    45 00002C5F 4883E4F0            <1>  and rsp, ~15
  4385 00002C63 E8(00000000)                    call fprintf
  4386                                          LEAVE
    49 00002C68 C9                  <1>  leave
  4387 00002C69 58                              pop rax
  4388 00002C6A 488B4001                        mov rax, qword [rax + 1] ; string
  4389 00002C6E 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  4390 00002C72 BE01000000                      mov rsi, 1               ; sizeof(char)
  4391 00002C77 488B5001                        mov rdx, qword [rax + 1] ; string-length
  4392 00002C7B 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
  4393 00002C83 B800000000                      mov rax, 0
  4394                                          ENTER
    44 00002C88 C8000000            <1>  enter 0, 0
    45 00002C8C 4883E4F0            <1>  and rsp, ~15
  4395 00002C90 E8(00000000)                    call fwrite
  4396                                          LEAVE
    49 00002C95 C9                  <1>  leave
  4397 00002C96 488B3C25[00000000]              mov rdi, [stderr]       ; destination
  4398 00002C9E 48BE-                           mov rsi, fmt_undefined_free_var_2
  4398 00002CA0 [440B000000000000] 
  4399 00002CA8 B800000000                      mov rax, 0
  4400                                          ENTER
    44 00002CAD C8000000            <1>  enter 0, 0
    45 00002CB1 4883E4F0            <1>  and rsp, ~15
  4401 00002CB5 E8(00000000)                    call fprintf
  4402                                          LEAVE
    49 00002CBA C9                  <1>  leave
  4403 00002CBB 48C7C0F6FFFFFF                  mov rax, -10
  4404 00002CC2 E8(00000000)                    call exit
  4405                                  
  4406                                  L_error_non_closure:
  4407 00002CC7 488B3C25[00000000]              mov rdi, qword [stderr]
  4408 00002CCF 48BE-                           mov rsi, fmt_non_closure
  4408 00002CD1 [FB0B000000000000] 
  4409 00002CD9 B800000000                      mov rax, 0
  4410                                          ENTER
    44 00002CDE C8000000            <1>  enter 0, 0
    45 00002CE2 4883E4F0            <1>  and rsp, ~15
  4411 00002CE6 E8(00000000)                    call fprintf
  4412                                          LEAVE
    49 00002CEB C9                  <1>  leave
  4413 00002CEC 48C7C0FEFFFFFF                  mov rax, -2
  4414 00002CF3 E8(00000000)                    call exit
  4415                                  
  4416                                  L_error_improper_list:
  4417 00002CF8 488B3C25[00000000]      	mov rdi, qword [stderr]
  4418 00002D00 48BE-                   	mov rsi, fmt_error_improper_list
  4418 00002D02 [230C000000000000] 
  4419 00002D0A B800000000              	mov rax, 0
  4420                                          ENTER
    44 00002D0F C8000000            <1>  enter 0, 0
    45 00002D13 4883E4F0            <1>  and rsp, ~15
  4421 00002D17 E8(00000000)            	call fprintf
  4422                                          LEAVE
    49 00002D1C C9                  <1>  leave
  4423 00002D1D 48C7C0F9FFFFFF          	mov rax, -7
  4424 00002D24 E8(00000000)            	call exit
  4425                                  
  4426                                  L_error_incorrect_arity_simple:
  4427 00002D29 488B3C25[00000000]              mov rdi, qword [stderr]
  4428 00002D31 48BE-                           mov rsi, fmt_incorrect_arity_simple
  4428 00002D33 [660B000000000000] 
  4429 00002D3B EB12                            jmp L_error_incorrect_arity_common
  4430                                  L_error_incorrect_arity_opt:
  4431 00002D3D 488B3C25[00000000]              mov rdi, qword [stderr]
  4432 00002D45 48BE-                           mov rsi, fmt_incorrect_arity_opt
  4432 00002D47 [910B000000000000] 
  4433                                  L_error_incorrect_arity_common:
  4434 00002D4F 5A                              pop rdx
  4435 00002D50 59                              pop rcx
  4436 00002D51 B800000000                      mov rax, 0
  4437                                          ENTER
    44 00002D56 C8000000            <1>  enter 0, 0
    45 00002D5A 4883E4F0            <1>  and rsp, ~15
  4438 00002D5E E8(00000000)                    call fprintf
  4439                                          LEAVE
    49 00002D63 C9                  <1>  leave
  4440 00002D64 48C7C0FAFFFFFF                  mov rax, -6
  4441 00002D6B E8(00000000)                    call exit
  4442                                  
  4443                                  section .data
  4444                                  fmt_undefined_free_var_1:
  4445 00000B2D 212121205468652066-             db `!!! The free variable \0`
  4445 00000B36 726565207661726961-
  4445 00000B3F 626C652000         
  4446                                  fmt_undefined_free_var_2:
  4447 00000B44 207761732075736564-             db ` was used before it was defined.\n\0`
  4447 00000B4D 206265666F72652069-
  4447 00000B56 742077617320646566-
  4447 00000B5F 696E65642E0A00     
  4448                                  fmt_incorrect_arity_simple:
  4449 00000B66 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
  4449 00000B6F 74656420256C642061-
  4449 00000B78 7267756D656E74732C-
  4449 00000B81 206275742067697665-
  4449 00000B8A 6E20256C640A00     
  4450                                  fmt_incorrect_arity_opt:
  4451 00000B91 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
  4451 00000B9A 746564206174206C65-
  4451 00000BA3 61737420256C642061-
  4451 00000BAC 7267756D656E74732C-
  4451 00000BB5 206275742067697665-
  4451 00000BBE 6E20256C640A00     
  4452                                  fmt_memory_usage:
  4453 00000BC5 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
  4453 00000BCE 20256C642062797465-
  4453 00000BD7 73206F662064796E61-
  4453 00000BE0 6D6963616C6C792D61-
  4453 00000BE9 6C6C6F636174656420-
  4453 00000BF2 6D656D6F72790A0A00 
  4454                                  fmt_non_closure:
  4455 00000BFB 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
  4455 00000C04 7074696E6720746F20-
  4455 00000C0D 6170706C792061206E-
  4455 00000C16 6F6E2D636C6F737572-
  4455 00000C1F 65210A00           
  4456                                  fmt_error_improper_list:
  4457 00000C23 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
  4457 00000C2C 7267756D656E742069-
  4457 00000C35 73206E6F7420612070-
  4457 00000C3E 726F706572206C6973-
  4457 00000C47 74210A00           
  4458                                  
  4459                                  section .bss
  4460                                  memory:
  4461 00000000 <res 40000000h>         	resb gbytes(1)
  4462                                  
  4463                                  section .data
  4464                                  top_of_memory:
  4465 00000C4B [0000000000000000]              dq memory
  4466                                  
  4467                                  section .text
  4468                                  malloc:
  4469 00002D70 488B0425[4B0C0000]              mov rax, qword [top_of_memory]
  4470 00002D78 48013C25[4B0C0000]              add qword [top_of_memory], rdi
  4471 00002D80 C3                              ret
  4472                                  
  4473                                  L_code_ptr_return:
  4474 00002D81 48837C241002            	cmp qword [rsp + 8*2], 2
  4475 00002D87 0F85C01C0000            	jne L_error_arg_count_2
  4476 00002D8D 488B4C2418              	mov rcx, qword [rsp + 8*3]
  4477                                  	assert_integer(rcx)
    53 00002D92 803911              <1>  cmp byte [%1], %2
    54 00002D95 0F85511D0000        <1>  jne L_error_incorrect_type
  4478 00002D9B 488B4901                	mov rcx, qword [rcx + 1]
  4479 00002D9F 4883F900                	cmp rcx, 0
  4480 00002DA3 0F8CD81B0000            	jl L_error_integer_range
  4481 00002DA9 488B442420              	mov rax, qword [rsp + 8*4]
  4482                                  .L0:
  4483 00002DAE 4883F900                        cmp rcx, 0
  4484 00002DB2 7409                            je .L1
  4485 00002DB4 488B6D00                	mov rbp, qword [rbp]
  4486 00002DB8 48FFC9                  	dec rcx
  4487 00002DBB 7FF1                    	jg .L0
  4488                                  .L1:
  4489 00002DBD 4889EC                  	mov rsp, rbp
  4490 00002DC0 5D                      	pop rbp
  4491 00002DC1 5B                              pop rbx
  4492 00002DC2 488B4C2408                      mov rcx, qword [rsp + 8*1]
  4493 00002DC7 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
  4494 00002DCC FFE3                    	jmp rbx
  4495                                  
  4496                                  L_code_ptr_make_list:
  4497 00002DCE C8000000                	enter 0, 0
  4498 00002DD2 48837D1801                      cmp COUNT, 1
  4499 00002DD7 740C                            je .L0
  4500 00002DD9 48837D1802                      cmp COUNT, 2
  4501 00002DDE 7411                            je .L1
  4502 00002DE0 E99D1C0000                      jmp L_error_arg_count_12
  4503                                  .L0:
  4504 00002DE5 49B9-                           mov r9, sob_void
  4504 00002DE7 [0000000000000000] 
  4505 00002DEF EB04                            jmp .L2
  4506                                  .L1:
  4507 00002DF1 4C8B4D28                        mov r9, PARAM(1)
  4508                                  .L2:
  4509 00002DF5 488B4D20                        mov rcx, PARAM(0)
  4510                                          assert_integer(rcx)
    53 00002DF9 803911              <1>  cmp byte [%1], %2
    54 00002DFC 0F85EA1C0000        <1>  jne L_error_incorrect_type
  4511 00002E02 488B4901                        mov rcx, qword [rcx + 1]
  4512 00002E06 4883F900                        cmp rcx, 0
  4513 00002E0A 0F8CA21B0000                    jl L_error_arg_negative
  4514 00002E10 49B8-                           mov r8, sob_nil
  4514 00002E12 [0100000000000000] 
  4515                                  .L3:
  4516 00002E1A 4883F900                        cmp rcx, 0
  4517 00002E1E 7E1D                            jle .L4
  4518 00002E20 BF11000000                      mov rdi, 1 + 8 + 8
  4519 00002E25 E846FFFFFF                      call malloc
  4520 00002E2A C60021                          mov byte [rax], T_pair
  4521 00002E2D 4C894801                        mov qword [rax + 1], r9
  4522 00002E31 4C894009                        mov qword [rax + 1 + 8], r8
  4523 00002E35 4989C0                          mov r8, rax
  4524 00002E38 48FFC9                          dec rcx
  4525 00002E3B EBDD                            jmp .L3
  4526                                  .L4:
  4527 00002E3D 4C89C0                          mov rax, r8
  4528 00002E40 48837D1802                      cmp COUNT, 2
  4529 00002E45 7404                            je .L5
  4530 00002E47 C9                              leave
  4531 00002E48 C21800                          ret AND_KILL_FRAME(1)
  4532                                  .L5:
  4533 00002E4B C9                      	leave
  4534 00002E4C C22000                  	ret AND_KILL_FRAME(2)
  4535                                  
  4536                                  L_code_ptr_is_primitive:
  4537 00002E4F C8000000                	enter 0, 0
  4538 00002E53 48837D1801              	cmp COUNT, 1
  4539 00002E58 0F85BA1B0000            	jne L_error_arg_count_1
  4540 00002E5E 488B4520                	mov rax, PARAM(0)
  4541                                  	assert_closure(rax)
    53 00002E62 803804              <1>  cmp byte [%1], %2
    54 00002E65 0F85811C0000        <1>  jne L_error_incorrect_type
  4542 00002E6B 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
  4543 00002E70 750C                    	jne .L_false
  4544 00002E72 48B8-                   	mov rax, sob_boolean_true
  4544 00002E74 [0300000000000000] 
  4545 00002E7C EB0A                    	jmp .L_end
  4546                                  .L_false:
  4547 00002E7E 48B8-                   	mov rax, sob_boolean_false
  4547 00002E80 [0200000000000000] 
  4548                                  .L_end:
  4549 00002E88 C9                      	leave
  4550 00002E89 C21800                  	ret AND_KILL_FRAME(1)
  4551                                  
  4552                                  L_code_ptr_length:
  4553 00002E8C C8000000                	enter 0, 0
  4554 00002E90 48837D1801              	cmp COUNT, 1
  4555 00002E95 0F857D1B0000            	jne L_error_arg_count_1
  4556 00002E9B 488B5D20                	mov rbx, PARAM(0)
  4557 00002E9F BF00000000              	mov rdi, 0
  4558                                  .L:
  4559 00002EA4 803B01                  	cmp byte [rbx], T_nil
  4560 00002EA7 7412                    	je .L_end
  4561                                  	assert_pair(rbx)
    53 00002EA9 803B21              <1>  cmp byte [%1], %2
    54 00002EAC 0F853A1C0000        <1>  jne L_error_incorrect_type
  4562 00002EB2 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
  4563 00002EB6 48FFC7                  	inc rdi
  4564 00002EB9 EBE9                    	jmp .L
  4565                                  .L_end:
  4566 00002EBB E8A71A0000              	call make_integer
  4567 00002EC0 C9                      	leave
  4568 00002EC1 C21800                  	ret AND_KILL_FRAME(1)
  4569                                  
  4570                                  L_code_ptr_break:
  4571 00002EC4 48837C241000                    cmp qword [rsp + 8 * 2], 0
  4572 00002ECA 0F85131B0000                    jne L_error_arg_count_0
  4573 00002ED0 CC                              int3
  4574 00002ED1 48B8-                           mov rax, sob_void
  4574 00002ED3 [0000000000000000] 
  4575 00002EDB C21000                          ret AND_KILL_FRAME(0)        
  4576                                  
  4577                                  L_code_ptr_frame:
  4578 00002EDE C8000000                        enter 0, 0
  4579 00002EE2 48837D1800                      cmp COUNT, 0
  4580 00002EE7 0F85F61A0000                    jne L_error_arg_count_0
  4581                                  
  4582 00002EED 48BF-                           mov rdi, fmt_frame
  4582 00002EEF [530C000000000000] 
  4583 00002EF7 488B7500                        mov rsi, qword [rbp]    ; old rbp
  4584 00002EFB 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
  4585 00002EFF 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
  4586 00002F03 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
  4587 00002F07 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
  4588 00002F0B 6A00                            push 0
  4589 00002F0D 4151                            push r9
  4590 00002F0F 4150                            push r8                   ; we'll use it when printing the params
  4591 00002F11 B800000000                      mov rax, 0
  4592                                          
  4593                                          ENTER
    44 00002F16 C8000000            <1>  enter 0, 0
    45 00002F1A 4883E4F0            <1>  and rsp, ~15
  4594 00002F1E E8(00000000)                    call printf
  4595                                          LEAVE
    49 00002F23 C9                  <1>  leave
  4596                                  
  4597                                  .L:
  4598 00002F24 488B0C24                        mov rcx, qword [rsp]
  4599 00002F28 4883F900                        cmp rcx, 0
  4600 00002F2C 7467                            je .L_out
  4601 00002F2E 48BF-                           mov rdi, fmt_frame_param_prefix
  4601 00002F30 [8C0C000000000000] 
  4602 00002F38 488B742410                      mov rsi, qword [rsp + 8*2]
  4603 00002F3D B800000000                      mov rax, 0
  4604                                          
  4605                                          ENTER
    44 00002F42 C8000000            <1>  enter 0, 0
    45 00002F46 4883E4F0            <1>  and rsp, ~15
  4606 00002F4A E8(00000000)                    call printf
  4607                                          LEAVE
    49 00002F4F C9                  <1>  leave
  4608                                  
  4609 00002F50 488B0C24                        mov rcx, qword [rsp]
  4610 00002F54 48FFC9                          dec rcx
  4611 00002F57 48890C24                        mov qword [rsp], rcx    ; dec arg count
  4612 00002F5B 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
  4613 00002F60 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
  4614 00002F65 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
  4615 00002F69 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
  4616 00002F6E 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
  4617 00002F71 E87B000000                      call print_sexpr
  4618 00002F76 48BF-                           mov rdi, fmt_newline
  4618 00002F78 [B80C000000000000] 
  4619 00002F80 B800000000                      mov rax, 0
  4620                                          ENTER
    44 00002F85 C8000000            <1>  enter 0, 0
    45 00002F89 4883E4F0            <1>  and rsp, ~15
  4621 00002F8D E8(00000000)                    call printf
  4622                                          LEAVE
    49 00002F92 C9                  <1>  leave
  4623 00002F93 EB8F                            jmp .L
  4624                                  .L_out:
  4625 00002F95 48BF-                           mov rdi, fmt_frame_continue
  4625 00002F97 [9D0C000000000000] 
  4626 00002F9F B800000000                      mov rax, 0
  4627                                          ENTER
    44 00002FA4 C8000000            <1>  enter 0, 0
    45 00002FA8 4883E4F0            <1>  and rsp, ~15
  4628 00002FAC E8(00000000)                    call printf
  4629 00002FB1 E8(00000000)                    call getchar
  4630                                          LEAVE
    49 00002FB6 C9                  <1>  leave
  4631                                          
  4632 00002FB7 48B8-                           mov rax, sob_void
  4632 00002FB9 [0000000000000000] 
  4633 00002FC1 C9                              leave
  4634 00002FC2 C21000                          ret AND_KILL_FRAME(0)
  4635                                          
  4636                                  print_sexpr_if_not_void:
  4637 00002FC5 4881FF[00000000]        	cmp rdi, sob_void
  4638 00002FCC 7422                    	je .done
  4639 00002FCE E81E000000              	call print_sexpr
  4640 00002FD3 48BF-                   	mov rdi, fmt_newline
  4640 00002FD5 [B80C000000000000] 
  4641 00002FDD B800000000              	mov rax, 0
  4642                                  	ENTER
    44 00002FE2 C8000000            <1>  enter 0, 0
    45 00002FE6 4883E4F0            <1>  and rsp, ~15
  4643 00002FEA E8(00000000)            	call printf
  4644                                  	LEAVE
    49 00002FEF C9                  <1>  leave
  4645                                  .done:
  4646 00002FF0 C3                      	ret
  4647                                  
  4648                                  section .data
  4649                                  fmt_frame:
  4650 00000C53 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
  4650 00000C5C 207265742061646472-
  4650 00000C65 203D2025703B206C65-
  4650 00000C6E 7820656E76203D2025-
  4650 00000C77 703B20706172616D20-
  4650 00000C80 636F756E74203D2025-
  4650 00000C89 640A00             
  4651                                  fmt_frame_param_prefix:
  4652 00000C8C 3D3D5B706172616D20-             db `==[param %d]==> \0`
  4652 00000C95 25645D3D3D3E2000   
  4653                                  fmt_frame_continue:
  4654 00000C9D 486974203C456E7465-             db `Hit <Enter> to continue...\0`
  4654 00000CA6 723E20746F20636F6E-
  4654 00000CAF 74696E75652E2E2E00 
  4655                                  fmt_newline:
  4656 00000CB8 0A00                    	db `\n\0`
  4657                                  fmt_void:
  4658 00000CBA 233C766F69643E00        	db `#<void>\0`
  4659                                  fmt_nil:
  4660 00000CC2 282900                  	db `()\0`
  4661                                  fmt_boolean_false:
  4662 00000CC5 236600                  	db `#f\0`
  4663                                  fmt_boolean_true:
  4664 00000CC8 237400                  	db `#t\0`
  4665                                  fmt_char_backslash:
  4666 00000CCB 235C5C00                	db `#\\\\\0`
  4667                                  fmt_char_dquote:
  4668 00000CCF 235C2200                	db `#\\"\0`
  4669                                  fmt_char_simple:
  4670 00000CD3 235C256300              	db `#\\%c\0`
  4671                                  fmt_char_null:
  4672 00000CD8 235C6E756C00            	db `#\\nul\0`
  4673                                  fmt_char_bell:
  4674 00000CDE 235C62656C6C00          	db `#\\bell\0`
  4675                                  fmt_char_backspace:
  4676 00000CE5 235C6261636B737061-     	db `#\\backspace\0`
  4676 00000CEE 636500             
  4677                                  fmt_char_tab:
  4678 00000CF1 235C74616200            	db `#\\tab\0`
  4679                                  fmt_char_newline:
  4680 00000CF7 235C6E65776C696E65-     	db `#\\newline\0`
  4680 00000D00 00                 
  4681                                  fmt_char_formfeed:
  4682 00000D01 235C7061676500          	db `#\\page\0`
  4683                                  fmt_char_return:
  4684 00000D08 235C72657475726E00      	db `#\\return\0`
  4685                                  fmt_char_escape:
  4686 00000D11 235C65736300            	db `#\\esc\0`
  4687                                  fmt_char_space:
  4688 00000D17 235C737061636500        	db `#\\space\0`
  4689                                  fmt_char_hex:
  4690 00000D1F 235C782530325800        	db `#\\x%02X\0`
  4691                                  fmt_gensym:
  4692 00000D27 47256C6400                      db `G%ld\0`
  4693                                  fmt_closure:
  4694 00000D2C 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  4694 00000D35 206174203078253038-
  4694 00000D3E 5820656E763D307825-
  4694 00000D47 30385820636F64653D-
  4694 00000D50 3078253038583E00   
  4695                                  fmt_lparen:
  4696 00000D58 2800                    	db `(\0`
  4697                                  fmt_dotted_pair:
  4698 00000D5A 202E2000                	db ` . \0`
  4699                                  fmt_rparen:
  4700 00000D5E 2900                    	db `)\0`
  4701                                  fmt_space:
  4702 00000D60 2000                    	db ` \0`
  4703                                  fmt_empty_vector:
  4704 00000D62 23282900                	db `#()\0`
  4705                                  fmt_vector:
  4706 00000D66 232800                  	db `#(\0`
  4707                                  fmt_real:
  4708 00000D69 256600                  	db `%f\0`
  4709                                  fmt_fraction:
  4710 00000D6C 256C642F256C6400        	db `%ld/%ld\0`
  4711                                  fmt_zero:
  4712 00000D74 3000                    	db `0\0`
  4713                                  fmt_int:
  4714 00000D76 256C6400                	db `%ld\0`
  4715                                  fmt_unknown_scheme_object_error:
  4716 00000D7A 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
  4716 00000D83 6F723A20556E6B6E6F-
  4716 00000D8C 776E20536368656D65-
  4716 00000D95 2D6F626A6563742028-
  4716 00000D9E 525454492030782530-
  4716 00000DA7 32582920           
  4717 00000DAB 617420616464726573-     	db `at address 0x%08X\n\n\0`
  4717 00000DB4 73203078253038580A-
  4717 00000DBD 0A00               
  4718                                  fmt_dquote:
  4719 00000DBF 2200                    	db `\"\0`
  4720                                  fmt_string_char:
  4721 00000DC1 256300                          db `%c\0`
  4722                                  fmt_string_char_7:
  4723 00000DC4 5C6100                          db `\\a\0`
  4724                                  fmt_string_char_8:
  4725 00000DC7 5C6200                          db `\\b\0`
  4726                                  fmt_string_char_9:
  4727 00000DCA 5C7400                          db `\\t\0`
  4728                                  fmt_string_char_10:
  4729 00000DCD 5C6E00                          db `\\n\0`
  4730                                  fmt_string_char_11:
  4731 00000DD0 5C7600                          db `\\v\0`
  4732                                  fmt_string_char_12:
  4733 00000DD3 5C6600                          db `\\f\0`
  4734                                  fmt_string_char_13:
  4735 00000DD6 5C7200                          db `\\r\0`
  4736                                  fmt_string_char_34:
  4737 00000DD9 5C2200                          db `\\"\0`
  4738                                  fmt_string_char_92:
  4739 00000DDC 5C5C00                          db `\\\\\0`
  4740                                  fmt_string_char_hex:
  4741 00000DDF 5C7825583B00                    db `\\x%X;\0`
  4742                                  
  4743                                  section .text
  4744                                  
  4745                                  print_sexpr:
  4746 00002FF1 C8000000                	enter 0, 0
  4747 00002FF5 8A07                    	mov al, byte [rdi]
  4748 00002FF7 3C00                    	cmp al, T_void
  4749 00002FF9 7465                    	je .Lvoid
  4750 00002FFB 3C01                    	cmp al, T_nil
  4751 00002FFD 7470                    	je .Lnil
  4752 00002FFF 3C09                    	cmp al, T_boolean_false
  4753 00003001 747B                    	je .Lboolean_false
  4754 00003003 3C0A                    	cmp al, T_boolean_true
  4755 00003005 0F8482000000            	je .Lboolean_true
  4756 0000300B 3C02                    	cmp al, T_char
  4757 0000300D 0F8489000000            	je .Lchar
  4758 00003013 3C41                    	cmp al, T_interned_symbol
  4759 00003015 0F84CB010000            	je .Linterned_symbol
  4760 0000301B 3C42                            cmp al, T_uninterned_symbol
  4761 0000301D 0F84EF010000                    je .Luninterned_symbol
  4762 00003023 3C21                    	cmp al, T_pair
  4763 00003025 0F84FA010000            	je .Lpair
  4764 0000302B 3C22                    	cmp al, T_vector
  4765 0000302D 0F84C3020000            	je .Lvector
  4766 00003033 3C04                    	cmp al, T_closure
  4767 00003035 0F8491010000            	je .Lclosure
  4768 0000303B 3C13                    	cmp al, T_real
  4769 0000303D 0F8454030000            	je .Lreal
  4770 00003043 3C12                    	cmp al, T_fraction
  4771 00003045 0F847A030000            	je .Lfraction
  4772 0000304B 3C11                    	cmp al, T_integer
  4773 0000304D 0F84B3030000            	je .Linteger
  4774 00003053 3C03                    	cmp al, T_string
  4775 00003055 0F84BE030000            	je .Lstring
  4776                                  
  4777 0000305B E9F6040000              	jmp .Lunknown_sexpr_type
  4778                                  
  4779                                  .Lvoid:
  4780 00003060 48BF-                   	mov rdi, fmt_void
  4780 00003062 [BA0C000000000000] 
  4781 0000306A E91A050000              	jmp .Lemit
  4782                                  
  4783                                  .Lnil:
  4784 0000306F 48BF-                   	mov rdi, fmt_nil
  4784 00003071 [C20C000000000000] 
  4785 00003079 E90B050000              	jmp .Lemit
  4786                                  
  4787                                  .Lboolean_false:
  4788 0000307E 48BF-                   	mov rdi, fmt_boolean_false
  4788 00003080 [C50C000000000000] 
  4789 00003088 E9FC040000              	jmp .Lemit
  4790                                  
  4791                                  .Lboolean_true:
  4792 0000308D 48BF-                   	mov rdi, fmt_boolean_true
  4792 0000308F [C80C000000000000] 
  4793 00003097 E9ED040000              	jmp .Lemit
  4794                                  
  4795                                  .Lchar:
  4796 0000309C 8A4701                  	mov al, byte [rdi + 1]
  4797 0000309F 3C20                    	cmp al, ' '
  4798 000030A1 7E28                    	jle .Lchar_whitespace
  4799 000030A3 3C5C                    	cmp al, 92 		; backslash
  4800 000030A5 0F847C000000            	je .Lchar_backslash
  4801 000030AB 3C22                    	cmp al, '"'
  4802 000030AD 0F8483000000            	je .Lchar_dquote
  4803 000030B3 4825FF000000            	and rax, 255
  4804 000030B9 48BF-                   	mov rdi, fmt_char_simple
  4804 000030BB [D30C000000000000] 
  4805 000030C3 4889C6                  	mov rsi, rax
  4806 000030C6 E9BE040000              	jmp .Lemit
  4807                                  
  4808                                  .Lchar_whitespace:
  4809 000030CB 3C00                    	cmp al, 0
  4810 000030CD 7476                    	je .Lchar_null
  4811 000030CF 3C07                    	cmp al, 7
  4812 000030D1 0F847D000000            	je .Lchar_bell
  4813 000030D7 3C08                    	cmp al, 8
  4814 000030D9 0F8484000000            	je .Lchar_backspace
  4815 000030DF 3C09                    	cmp al, 9
  4816 000030E1 0F848B000000            	je .Lchar_tab
  4817 000030E7 3C0A                    	cmp al, 10
  4818 000030E9 0F8492000000            	je .Lchar_newline
  4819 000030EF 3C0C                    	cmp al, 12
  4820 000030F1 0F8499000000            	je .Lchar_formfeed
  4821 000030F7 3C0D                    	cmp al, 13
  4822 000030F9 0F84A0000000            	je .Lchar_return
  4823 000030FF 3C1B                    	cmp al, 27
  4824 00003101 0F84A7000000            	je .Lchar_escape
  4825 00003107 4825FF000000            	and rax, 255
  4826 0000310D 3C20                    	cmp al, ' '
  4827 0000310F 0F84A8000000            	je .Lchar_space
  4828 00003115 48BF-                   	mov rdi, fmt_char_hex
  4828 00003117 [1F0D000000000000] 
  4829 0000311F 4889C6                  	mov rsi, rax
  4830 00003122 E962040000              	jmp .Lemit	
  4831                                  
  4832                                  .Lchar_backslash:
  4833 00003127 48BF-                   	mov rdi, fmt_char_backslash
  4833 00003129 [CB0C000000000000] 
  4834 00003131 E953040000              	jmp .Lemit
  4835                                  
  4836                                  .Lchar_dquote:
  4837 00003136 48BF-                   	mov rdi, fmt_char_dquote
  4837 00003138 [CF0C000000000000] 
  4838 00003140 E944040000              	jmp .Lemit
  4839                                  
  4840                                  .Lchar_null:
  4841 00003145 48BF-                   	mov rdi, fmt_char_null
  4841 00003147 [D80C000000000000] 
  4842 0000314F E935040000              	jmp .Lemit
  4843                                  
  4844                                  .Lchar_bell:
  4845 00003154 48BF-                   	mov rdi, fmt_char_bell
  4845 00003156 [DE0C000000000000] 
  4846 0000315E E926040000              	jmp .Lemit
  4847                                  
  4848                                  .Lchar_backspace:
  4849 00003163 48BF-                   	mov rdi, fmt_char_backspace
  4849 00003165 [E50C000000000000] 
  4850 0000316D E917040000              	jmp .Lemit
  4851                                  
  4852                                  .Lchar_tab:
  4853 00003172 48BF-                   	mov rdi, fmt_char_tab
  4853 00003174 [F10C000000000000] 
  4854 0000317C E908040000              	jmp .Lemit
  4855                                  
  4856                                  .Lchar_newline:
  4857 00003181 48BF-                   	mov rdi, fmt_char_newline
  4857 00003183 [F70C000000000000] 
  4858 0000318B E9F9030000              	jmp .Lemit
  4859                                  
  4860                                  .Lchar_formfeed:
  4861 00003190 48BF-                   	mov rdi, fmt_char_formfeed
  4861 00003192 [010D000000000000] 
  4862 0000319A E9EA030000              	jmp .Lemit
  4863                                  
  4864                                  .Lchar_return:
  4865 0000319F 48BF-                   	mov rdi, fmt_char_return
  4865 000031A1 [080D000000000000] 
  4866 000031A9 E9DB030000              	jmp .Lemit
  4867                                  
  4868                                  .Lchar_escape:
  4869 000031AE 48BF-                   	mov rdi, fmt_char_escape
  4869 000031B0 [110D000000000000] 
  4870 000031B8 E9CC030000              	jmp .Lemit
  4871                                  
  4872                                  .Lchar_space:
  4873 000031BD 48BF-                   	mov rdi, fmt_char_space
  4873 000031BF [170D000000000000] 
  4874 000031C7 E9BD030000              	jmp .Lemit
  4875                                  
  4876                                  .Lclosure:
  4877 000031CC 4889FE                  	mov rsi, qword rdi
  4878 000031CF 48BF-                   	mov rdi, fmt_closure
  4878 000031D1 [2C0D000000000000] 
  4879 000031D9 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  4880 000031DD 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  4881 000031E1 E9A3030000              	jmp .Lemit
  4882                                  
  4883                                  .Linterned_symbol:
  4884 000031E6 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  4885 000031EA BE01000000              	mov rsi, 1		 ; size = 1 byte
  4886 000031EF 488B5701                	mov rdx, qword [rdi + 1] ; length
  4887 000031F3 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  4888 000031F7 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  4889                                  	ENTER
    44 000031FF C8000000            <1>  enter 0, 0
    45 00003203 4883E4F0            <1>  and rsp, ~15
  4890 00003207 E8(00000000)            	call fwrite
  4891                                  	LEAVE
    49 0000320C C9                  <1>  leave
  4892 0000320D E98C030000              	jmp .Lend
  4893                                  
  4894                                  .Luninterned_symbol:
  4895 00003212 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  4896 00003216 48BF-                           mov rdi, fmt_gensym
  4896 00003218 [270D000000000000] 
  4897 00003220 E964030000                      jmp .Lemit
  4898                                  	
  4899                                  .Lpair:
  4900 00003225 57                      	push rdi
  4901 00003226 48BF-                   	mov rdi, fmt_lparen
  4901 00003228 [580D000000000000] 
  4902 00003230 B800000000              	mov rax, 0
  4903                                          ENTER
    44 00003235 C8000000            <1>  enter 0, 0
    45 00003239 4883E4F0            <1>  and rsp, ~15
  4904 0000323D E8(00000000)            	call printf
  4905                                          LEAVE
    49 00003242 C9                  <1>  leave
  4906 00003243 488B3C24                	mov rdi, qword [rsp] 	; pair
  4907 00003247 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  4908 0000324B E8A1FDFFFF              	call print_sexpr
  4909 00003250 5F                      	pop rdi 		; pair
  4910 00003251 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  4911                                  .Lcdr:
  4912 00003255 8A07                    	mov al, byte [rdi]
  4913 00003257 3C01                    	cmp al, T_nil
  4914 00003259 7447                    	je .Lcdr_nil
  4915 0000325B 3C21                    	cmp al, T_pair
  4916 0000325D 7462                    	je .Lcdr_pair
  4917 0000325F 57                      	push rdi
  4918 00003260 48BF-                   	mov rdi, fmt_dotted_pair
  4918 00003262 [5A0D000000000000] 
  4919 0000326A B800000000              	mov rax, 0
  4920                                          ENTER
    44 0000326F C8000000            <1>  enter 0, 0
    45 00003273 4883E4F0            <1>  and rsp, ~15
  4921 00003277 E8(00000000)            	call printf
  4922                                          LEAVE
    49 0000327C C9                  <1>  leave
  4923 0000327D 5F                      	pop rdi
  4924 0000327E E86EFDFFFF              	call print_sexpr
  4925 00003283 48BF-                   	mov rdi, fmt_rparen
  4925 00003285 [5E0D000000000000] 
  4926 0000328D B800000000              	mov rax, 0
  4927                                          ENTER
    44 00003292 C8000000            <1>  enter 0, 0
    45 00003296 4883E4F0            <1>  and rsp, ~15
  4928 0000329A E8(00000000)            	call printf
  4929                                          LEAVE
    49 0000329F C9                  <1>  leave
  4930 000032A0 C9                      	leave
  4931 000032A1 C3                      	ret
  4932                                  
  4933                                  .Lcdr_nil:
  4934 000032A2 48BF-                   	mov rdi, fmt_rparen
  4934 000032A4 [5E0D000000000000] 
  4935 000032AC B800000000              	mov rax, 0
  4936                                          ENTER
    44 000032B1 C8000000            <1>  enter 0, 0
    45 000032B5 4883E4F0            <1>  and rsp, ~15
  4937 000032B9 E8(00000000)            	call printf
  4938                                          LEAVE
    49 000032BE C9                  <1>  leave
  4939 000032BF C9                      	leave
  4940 000032C0 C3                      	ret
  4941                                  
  4942                                  .Lcdr_pair:
  4943 000032C1 57                      	push rdi
  4944 000032C2 48BF-                   	mov rdi, fmt_space
  4944 000032C4 [600D000000000000] 
  4945 000032CC B800000000              	mov rax, 0
  4946                                          ENTER
    44 000032D1 C8000000            <1>  enter 0, 0
    45 000032D5 4883E4F0            <1>  and rsp, ~15
  4947 000032D9 E8(00000000)            	call printf
  4948                                          LEAVE
    49 000032DE C9                  <1>  leave
  4949 000032DF 488B3C24                	mov rdi, qword [rsp]
  4950 000032E3 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  4951 000032E7 E805FDFFFF              	call print_sexpr
  4952 000032EC 5F                      	pop rdi
  4953 000032ED 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  4954 000032F1 E95FFFFFFF              	jmp .Lcdr
  4955                                  
  4956                                  .Lvector:
  4957 000032F6 488B4701                	mov rax, qword [rdi + 1] ; length
  4958 000032FA 4883F800                	cmp rax, 0
  4959 000032FE 0F8484000000            	je .Lvector_empty
  4960 00003304 57                      	push rdi
  4961 00003305 48BF-                   	mov rdi, fmt_vector
  4961 00003307 [660D000000000000] 
  4962 0000330F B800000000              	mov rax, 0
  4963                                          ENTER
    44 00003314 C8000000            <1>  enter 0, 0
    45 00003318 4883E4F0            <1>  and rsp, ~15
  4964 0000331C E8(00000000)            	call printf
  4965                                          LEAVE
    49 00003321 C9                  <1>  leave
  4966 00003322 488B3C24                	mov rdi, qword [rsp]
  4967 00003326 FF7701                  	push qword [rdi + 1]
  4968 00003329 6A01                    	push 1
  4969 0000332B 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  4970 0000332F E8BDFCFFFF              	call print_sexpr
  4971                                  .Lvector_loop:
  4972                                  	; [rsp] index
  4973                                  	; [rsp + 8*1] limit
  4974                                  	; [rsp + 8*2] vector
  4975 00003334 488B0424                	mov rax, qword [rsp]
  4976 00003338 483B442408              	cmp rax, qword [rsp + 8*1]
  4977 0000333D 7436                    	je .Lvector_end
  4978 0000333F 48BF-                   	mov rdi, fmt_space
  4978 00003341 [600D000000000000] 
  4979 00003349 B800000000              	mov rax, 0
  4980                                          ENTER
    44 0000334E C8000000            <1>  enter 0, 0
    45 00003352 4883E4F0            <1>  and rsp, ~15
  4981 00003356 E8(00000000)            	call printf
  4982                                          LEAVE
    49 0000335B C9                  <1>  leave
  4983 0000335C 488B0424                	mov rax, qword [rsp]
  4984 00003360 488B5C2410              	mov rbx, qword [rsp + 8*2]
  4985 00003365 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  4986 0000336A E882FCFFFF              	call print_sexpr
  4987 0000336F 48FF0424                	inc qword [rsp]
  4988 00003373 EBBF                    	jmp .Lvector_loop
  4989                                  
  4990                                  .Lvector_end:
  4991 00003375 4883C418                	add rsp, 8*3
  4992 00003379 48BF-                   	mov rdi, fmt_rparen
  4992 0000337B [5E0D000000000000] 
  4993 00003383 E901020000              	jmp .Lemit	
  4994                                  
  4995                                  .Lvector_empty:
  4996 00003388 48BF-                   	mov rdi, fmt_empty_vector
  4996 0000338A [620D000000000000] 
  4997 00003392 E9F2010000              	jmp .Lemit
  4998                                  
  4999                                  .Lreal:
  5000 00003397 FF7701                  	push qword [rdi + 1]
  5001 0000339A F20F100424              	movsd xmm0, qword [rsp]
  5002 0000339F 4883C408                	add rsp, 8*1
  5003 000033A3 48BF-                   	mov rdi, fmt_real
  5003 000033A5 [690D000000000000] 
  5004 000033AD B801000000              	mov rax, 1
  5005                                  	ENTER
    44 000033B2 C8000000            <1>  enter 0, 0
    45 000033B6 4883E4F0            <1>  and rsp, ~15
  5006 000033BA E8(00000000)            	call printf
  5007                                  	LEAVE
    49 000033BF C9                  <1>  leave
  5008 000033C0 E9D9010000              	jmp .Lend
  5009                                  
  5010                                  .Lfraction:
  5011 000033C5 488B7701                	mov rsi, qword [rdi + 1]
  5012 000033C9 488B5709                	mov rdx, qword [rdi + 1 + 8]
  5013 000033CD 4883FE00                	cmp rsi, 0
  5014 000033D1 7415                    	je .Lrat_zero
  5015 000033D3 4883FA01                	cmp rdx, 1
  5016 000033D7 741E                    	je .Lrat_int
  5017 000033D9 48BF-                   	mov rdi, fmt_fraction
  5017 000033DB [6C0D000000000000] 
  5018 000033E3 E9A1010000              	jmp .Lemit
  5019                                  
  5020                                  .Lrat_zero:
  5021 000033E8 48BF-                   	mov rdi, fmt_zero
  5021 000033EA [740D000000000000] 
  5022 000033F2 E992010000              	jmp .Lemit
  5023                                  
  5024                                  .Lrat_int:
  5025 000033F7 48BF-                   	mov rdi, fmt_int
  5025 000033F9 [760D000000000000] 
  5026 00003401 E983010000              	jmp .Lemit
  5027                                  
  5028                                  .Linteger:
  5029 00003406 488B7701                	mov rsi, qword [rdi + 1]
  5030 0000340A 48BF-                   	mov rdi, fmt_int
  5030 0000340C [760D000000000000] 
  5031 00003414 E970010000              	jmp .Lemit
  5032                                  
  5033                                  .Lstring:
  5034 00003419 488D4709                	lea rax, [rdi + 1 + 8]
  5035 0000341D 50                      	push rax
  5036 0000341E FF7701                  	push qword [rdi + 1]
  5037 00003421 48BF-                   	mov rdi, fmt_dquote
  5037 00003423 [BF0D000000000000] 
  5038 0000342B B800000000              	mov rax, 0
  5039                                  	ENTER
    44 00003430 C8000000            <1>  enter 0, 0
    45 00003434 4883E4F0            <1>  and rsp, ~15
  5040 00003438 E8(00000000)            	call printf
  5041                                  	LEAVE
    49 0000343D C9                  <1>  leave
  5042                                  .Lstring_loop:
  5043                                  	; qword [rsp]: limit
  5044                                  	; qword [rsp + 8*1]: char *
  5045 0000343E 48833C2400              	cmp qword [rsp], 0
  5046 00003443 0F84FD000000            	je .Lstring_end
  5047 00003449 488B442408              	mov rax, qword [rsp + 8*1]
  5048 0000344E 8A00                    	mov al, byte [rax]
  5049 00003450 4825FF000000            	and rax, 255
  5050 00003456 3C07                    	cmp al, 7
  5051 00003458 7468                            je .Lstring_char_7
  5052 0000345A 3C08                            cmp al, 8
  5053 0000345C 7470                            je .Lstring_char_8
  5054 0000345E 3C09                            cmp al, 9
  5055 00003460 7478                            je .Lstring_char_9
  5056 00003462 3C0A                            cmp al, 10
  5057 00003464 0F847C000000                    je .Lstring_char_10
  5058 0000346A 3C0B                            cmp al, 11
  5059 0000346C 0F8480000000                    je .Lstring_char_11
  5060 00003472 3C0C                            cmp al, 12
  5061 00003474 0F8484000000                    je .Lstring_char_12
  5062 0000347A 3C0D                            cmp al, 13
  5063 0000347C 0F8488000000                    je .Lstring_char_13
  5064 00003482 3C22                            cmp al, 34
  5065 00003484 0F848C000000                    je .Lstring_char_34
  5066 0000348A 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  5068 0000348C 3C20                            cmp al, ' '
  5069 0000348E 0F8CA0000000                    jl .Lstring_char_hex
  5070 00003494 48BF-                           mov rdi, fmt_string_char
  5070 00003496 [C10D000000000000] 
  5071 0000349E 4889C6                          mov rsi, rax
  5072                                  .Lstring_char_emit:
  5073 000034A1 B800000000                      mov rax, 0
  5074                                          ENTER
    44 000034A6 C8000000            <1>  enter 0, 0
    45 000034AA 4883E4F0            <1>  and rsp, ~15
  5075 000034AE E8(00000000)                    call printf
  5076                                          LEAVE
    49 000034B3 C9                  <1>  leave
  5077 000034B4 48FF0C24                        dec qword [rsp]
  5078 000034B8 48FF442408                      inc qword [rsp + 8*1]
  5079 000034BD E97CFFFFFF                      jmp .Lstring_loop
  5080                                  
  5081                                  .Lstring_char_7:
  5082 000034C2 48BF-                           mov rdi, fmt_string_char_7
  5082 000034C4 [C40D000000000000] 
  5083 000034CC EBD3                            jmp .Lstring_char_emit
  5084                                  
  5085                                  .Lstring_char_8:
  5086 000034CE 48BF-                           mov rdi, fmt_string_char_8
  5086 000034D0 [C70D000000000000] 
  5087 000034D8 EBC7                            jmp .Lstring_char_emit
  5088                                          
  5089                                  .Lstring_char_9:
  5090 000034DA 48BF-                           mov rdi, fmt_string_char_9
  5090 000034DC [CA0D000000000000] 
  5091 000034E4 EBBB                            jmp .Lstring_char_emit
  5092                                  
  5093                                  .Lstring_char_10:
  5094 000034E6 48BF-                           mov rdi, fmt_string_char_10
  5094 000034E8 [CD0D000000000000] 
  5095 000034F0 EBAF                            jmp .Lstring_char_emit
  5096                                  
  5097                                  .Lstring_char_11:
  5098 000034F2 48BF-                           mov rdi, fmt_string_char_11
  5098 000034F4 [D00D000000000000] 
  5099 000034FC EBA3                            jmp .Lstring_char_emit
  5100                                  
  5101                                  .Lstring_char_12:
  5102 000034FE 48BF-                           mov rdi, fmt_string_char_12
  5102 00003500 [D30D000000000000] 
  5103 00003508 EB97                            jmp .Lstring_char_emit
  5104                                  
  5105                                  .Lstring_char_13:
  5106 0000350A 48BF-                           mov rdi, fmt_string_char_13
  5106 0000350C [D60D000000000000] 
  5107 00003514 EB8B                            jmp .Lstring_char_emit
  5108                                  
  5109                                  .Lstring_char_34:
  5110 00003516 48BF-                           mov rdi, fmt_string_char_34
  5110 00003518 [D90D000000000000] 
  5111 00003520 E97CFFFFFF                      jmp .Lstring_char_emit
  5112                                  
  5113                                  .Lstring_char_92:
  5114 00003525 48BF-                           mov rdi, fmt_string_char_92
  5114 00003527 [DC0D000000000000] 
  5115 0000352F E96DFFFFFF                      jmp .Lstring_char_emit
  5116                                  
  5117                                  .Lstring_char_hex:
  5118 00003534 48BF-                           mov rdi, fmt_string_char_hex
  5118 00003536 [DF0D000000000000] 
  5119 0000353E 4889C6                          mov rsi, rax
  5120 00003541 E95BFFFFFF                      jmp .Lstring_char_emit        
  5121                                  
  5122                                  .Lstring_end:
  5123 00003546 4883C410                	add rsp, 8 * 2
  5124 0000354A 48BF-                   	mov rdi, fmt_dquote
  5124 0000354C [BF0D000000000000] 
  5125 00003554 EB33                    	jmp .Lemit
  5126                                  
  5127                                  .Lunknown_sexpr_type:
  5128 00003556 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  5128 00003558 [7A0D000000000000] 
  5129 00003560 4825FF000000            	and rax, 255
  5130 00003566 4889C2                  	mov rdx, rax
  5131 00003569 4889F9                  	mov rcx, rdi
  5132 0000356C 488B3C25[00000000]      	mov rdi, qword [stderr]
  5133 00003574 B800000000              	mov rax, 0
  5134                                          ENTER
    44 00003579 C8000000            <1>  enter 0, 0
    45 0000357D 4883E4F0            <1>  and rsp, ~15
  5135 00003581 E8(00000000)            	call fprintf
  5136                                          LEAVE
    49 00003586 C9                  <1>  leave
  5137 00003587 C9                              leave
  5138 00003588 C3                              ret
  5139                                  
  5140                                  .Lemit:
  5141 00003589 B800000000              	mov rax, 0
  5142                                          ENTER
    44 0000358E C8000000            <1>  enter 0, 0
    45 00003592 4883E4F0            <1>  and rsp, ~15
  5143 00003596 E8(00000000)            	call printf
  5144                                          LEAVE
    49 0000359B C9                  <1>  leave
  5145 0000359C EB00                    	jmp .Lend
  5146                                  
  5147                                  .Lend:
  5148                                  	LEAVE
    49 0000359E C9                  <1>  leave
  5149 0000359F C3                      	ret
  5150                                  
  5151                                  ;;; rdi: address of free variable
  5152                                  ;;; rsi: address of code-pointer
  5153                                  bind_primitive:
  5154 000035A0 C8000000                        enter 0, 0
  5155 000035A4 57                              push rdi
  5156 000035A5 BF11000000                      mov rdi, (1 + 8 + 8)
  5157 000035AA E8C1F7FFFF                      call malloc
  5158 000035AF 5F                              pop rdi
  5159 000035B0 C60004                          mov byte [rax], T_closure
  5160 000035B3 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  5161 000035BB 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  5162 000035BF 488907                          mov qword [rdi], rax
  5163 000035C2 48B8-                           mov rax, sob_void
  5163 000035C4 [0000000000000000] 
  5164 000035CC C9                              leave
  5165 000035CD C3                              ret
  5166                                  
  5167                                  L_code_ptr_ash:
  5168 000035CE C8000000                        enter 0, 0
  5169 000035D2 48837D1802                      cmp COUNT, 2
  5170 000035D7 0F8570140000                    jne L_error_arg_count_2
  5171 000035DD 488B7D20                        mov rdi, PARAM(0)
  5172                                          assert_integer(rdi)
    53 000035E1 803F11              <1>  cmp byte [%1], %2
    54 000035E4 0F8502150000        <1>  jne L_error_incorrect_type
  5173 000035EA 488B4D28                        mov rcx, PARAM(1)
  5174                                          assert_integer(rcx)
    53 000035EE 803911              <1>  cmp byte [%1], %2
    54 000035F1 0F85F5140000        <1>  jne L_error_incorrect_type
  5175 000035F7 488B7F01                        mov rdi, qword [rdi + 1]
  5176 000035FB 488B4901                        mov rcx, qword [rcx + 1]
  5177 000035FF 4883F900                        cmp rcx, 0
  5178 00003603 7C0F                            jl .L_negative
  5179                                  .L_loop_positive:
  5180 00003605 4883F900                        cmp rcx, 0
  5181 00003609 741B                            je .L_exit
  5182 0000360B 48D3E7                          sal rdi, cl
  5183 0000360E 48C1E908                        shr rcx, 8
  5184 00003612 EBF1                            jmp .L_loop_positive
  5185                                  .L_negative:
  5186 00003614 48F7D9                          neg rcx
  5187                                  .L_loop_negative:
  5188 00003617 4883F900                        cmp rcx, 0
  5189 0000361B 7409                            je .L_exit
  5190 0000361D 48D3FF                          sar rdi, cl
  5191 00003620 48C1E908                        shr rcx, 8
  5192 00003624 EBF1                            jmp .L_loop_negative
  5193                                  .L_exit:
  5194 00003626 E83C130000                      call make_integer
  5195 0000362B C9                              leave
  5196 0000362C C22000                          ret AND_KILL_FRAME(2)
  5197                                  
  5198                                  L_code_ptr_logand:
  5199 0000362F C8000000                        enter 0, 0
  5200 00003633 48837D1802                      cmp COUNT, 2
  5201 00003638 0F850F140000                    jne L_error_arg_count_2
  5202 0000363E 4C8B4520                        mov r8, PARAM(0)
  5203                                          assert_integer(r8)
    53 00003642 41803811            <1>  cmp byte [%1], %2
    54 00003646 0F85A0140000        <1>  jne L_error_incorrect_type
  5204 0000364C 4C8B4D28                        mov r9, PARAM(1)
  5205                                          assert_integer(r9)
    53 00003650 41803911            <1>  cmp byte [%1], %2
    54 00003654 0F8592140000        <1>  jne L_error_incorrect_type
  5206 0000365A 498B7801                        mov rdi, qword [r8 + 1]
  5207 0000365E 49237901                        and rdi, qword [r9 + 1]
  5208 00003662 E800130000                      call make_integer
  5209 00003667 C9                              leave
  5210 00003668 C22000                          ret AND_KILL_FRAME(2)
  5211                                  
  5212                                  L_code_ptr_logor:
  5213 0000366B C8000000                        enter 0, 0
  5214 0000366F 48837D1802                      cmp COUNT, 2
  5215 00003674 0F85D3130000                    jne L_error_arg_count_2
  5216 0000367A 4C8B4520                        mov r8, PARAM(0)
  5217                                          assert_integer(r8)
    53 0000367E 41803811            <1>  cmp byte [%1], %2
    54 00003682 0F8564140000        <1>  jne L_error_incorrect_type
  5218 00003688 4C8B4D28                        mov r9, PARAM(1)
  5219                                          assert_integer(r9)
    53 0000368C 41803911            <1>  cmp byte [%1], %2
    54 00003690 0F8556140000        <1>  jne L_error_incorrect_type
  5220 00003696 498B7801                        mov rdi, qword [r8 + 1]
  5221 0000369A 490B7901                        or rdi, qword [r9 + 1]
  5222 0000369E E8C4120000                      call make_integer
  5223 000036A3 C9                              leave
  5224 000036A4 C22000                          ret AND_KILL_FRAME(2)
  5225                                  
  5226                                  L_code_ptr_logxor:
  5227 000036A7 C8000000                        enter 0, 0
  5228 000036AB 48837D1802                      cmp COUNT, 2
  5229 000036B0 0F8597130000                    jne L_error_arg_count_2
  5230 000036B6 4C8B4520                        mov r8, PARAM(0)
  5231                                          assert_integer(r8)
    53 000036BA 41803811            <1>  cmp byte [%1], %2
    54 000036BE 0F8528140000        <1>  jne L_error_incorrect_type
  5232 000036C4 4C8B4D28                        mov r9, PARAM(1)
  5233                                          assert_integer(r9)
    53 000036C8 41803911            <1>  cmp byte [%1], %2
    54 000036CC 0F851A140000        <1>  jne L_error_incorrect_type
  5234 000036D2 498B7801                        mov rdi, qword [r8 + 1]
  5235 000036D6 49337901                        xor rdi, qword [r9 + 1]
  5236 000036DA E888120000                      call make_integer
  5237                                          LEAVE
    49 000036DF C9                  <1>  leave
  5238 000036E0 C22000                          ret AND_KILL_FRAME(2)
  5239                                  
  5240                                  L_code_ptr_lognot:
  5241 000036E3 C8000000                        enter 0, 0
  5242 000036E7 48837D1801                      cmp COUNT, 1
  5243 000036EC 0F8526130000                    jne L_error_arg_count_1
  5244 000036F2 4C8B4520                        mov r8, PARAM(0)
  5245                                          assert_integer(r8)
    53 000036F6 41803811            <1>  cmp byte [%1], %2
    54 000036FA 0F85EC130000        <1>  jne L_error_incorrect_type
  5246 00003700 498B7801                        mov rdi, qword [r8 + 1]
  5247 00003704 48F7D7                          not rdi
  5248 00003707 E85B120000                      call make_integer
  5249 0000370C C9                              leave
  5250 0000370D C21800                          ret AND_KILL_FRAME(1)
  5251                                  
  5252                                  L_code_ptr_bin_apply:
  5253                                  ;;; fill in for final project!
  5254 00003710 C8000000                enter 0, 0
  5255 00003714 48837D1803              cmp COUNT, 3
  5256 00003719 0F8598130000            jne L_error_arg_count_3
  5257 0000371F 488B7D20                mov rdi, PARAM(0)
  5258                                  assert_closure(rdi)
    53 00003723 803F04              <1>  cmp byte [%1], %2
    54 00003726 0F85C0130000        <1>  jne L_error_incorrect_type
  5259 0000372C 488B7528                mov rsi, PARAM(1)
  5260                                  assert_integer(rsi)
    53 00003730 803E11              <1>  cmp byte [%1], %2
    54 00003733 0F85B3130000        <1>  jne L_error_incorrect_type
  5261 00003739 488B5530                mov rdx, PARAM(2)
  5262                                  assert_vector(rdx)
    53 0000373D 803A22              <1>  cmp byte [%1], %2
    54 00003740 0F85A6130000        <1>  jne L_error_incorrect_type
  5263 00003746 488B4E01                mov rcx, qword [rsi + 1]
  5264 0000374A 4883F900                cmp rcx, 0
  5265 0000374E 0F8C2D120000            jl L_error_integer_range
  5266 00003754 4C8B4201                mov r8, qword [rdx + 1]
  5267 00003758 4C39C1                  cmp rcx, r8
  5268 0000375B 0F8D20120000            jge L_error_integer_range
  5269 00003761 4C8B4CCA09              mov r9, qword [rdx + 1 + 8 + 8 * rcx]
  5270 00003766 488B7F09                mov rdi, qword [rdi + 1 + 8]
  5271 0000376A FFD7                    call rdi
  5272 0000376C C9                      leave
  5273 0000376D C22800                  ret AND_KILL_FRAME(3)
  5274                                  
  5275                                  L_code_ptr_is_null:
  5276 00003770 C8000000                        enter 0, 0
  5277 00003774 48837D1801                      cmp COUNT, 1
  5278 00003779 0F8599120000                    jne L_error_arg_count_1
  5279 0000377F 488B4520                        mov rax, PARAM(0)
  5280 00003783 803801                          cmp byte [rax], T_nil
  5281 00003786 750C                            jne .L_false
  5282 00003788 48B8-                           mov rax, sob_boolean_true
  5282 0000378A [0300000000000000] 
  5283 00003792 EB0A                            jmp .L_end
  5284                                  .L_false:
  5285 00003794 48B8-                           mov rax, sob_boolean_false
  5285 00003796 [0200000000000000] 
  5286                                  .L_end:
  5287 0000379E C9                              leave
  5288 0000379F C21800                          ret AND_KILL_FRAME(1)
  5289                                  
  5290                                  L_code_ptr_is_pair:
  5291 000037A2 C8000000                        enter 0, 0
  5292 000037A6 48837D1801                      cmp COUNT, 1
  5293 000037AB 0F8567120000                    jne L_error_arg_count_1
  5294 000037B1 488B4520                        mov rax, PARAM(0)
  5295 000037B5 803821                          cmp byte [rax], T_pair
  5296 000037B8 750C                            jne .L_false
  5297 000037BA 48B8-                           mov rax, sob_boolean_true
  5297 000037BC [0300000000000000] 
  5298 000037C4 EB0A                            jmp .L_end
  5299                                  .L_false:
  5300 000037C6 48B8-                           mov rax, sob_boolean_false
  5300 000037C8 [0200000000000000] 
  5301                                  .L_end:
  5302 000037D0 C9                              leave
  5303 000037D1 C21800                          ret AND_KILL_FRAME(1)
  5304                                          
  5305                                  L_code_ptr_is_void:
  5306 000037D4 C8000000                        enter 0, 0
  5307 000037D8 48837D1801                      cmp COUNT, 1
  5308 000037DD 0F8535120000                    jne L_error_arg_count_1
  5309 000037E3 488B4520                        mov rax, PARAM(0)
  5310 000037E7 803800                          cmp byte [rax], T_void
  5311 000037EA 750C                            jne .L_false
  5312 000037EC 48B8-                           mov rax, sob_boolean_true
  5312 000037EE [0300000000000000] 
  5313 000037F6 EB0A                            jmp .L_end
  5314                                  .L_false:
  5315 000037F8 48B8-                           mov rax, sob_boolean_false
  5315 000037FA [0200000000000000] 
  5316                                  .L_end:
  5317 00003802 C9                              leave
  5318 00003803 C21800                          ret AND_KILL_FRAME(1)
  5319                                  
  5320                                  L_code_ptr_is_char:
  5321 00003806 C8000000                        enter 0, 0
  5322 0000380A 48837D1801                      cmp COUNT, 1
  5323 0000380F 0F8503120000                    jne L_error_arg_count_1
  5324 00003815 488B4520                        mov rax, PARAM(0)
  5325 00003819 803802                          cmp byte [rax], T_char
  5326 0000381C 750C                            jne .L_false
  5327 0000381E 48B8-                           mov rax, sob_boolean_true
  5327 00003820 [0300000000000000] 
  5328 00003828 EB0A                            jmp .L_end
  5329                                  .L_false:
  5330 0000382A 48B8-                           mov rax, sob_boolean_false
  5330 0000382C [0200000000000000] 
  5331                                  .L_end:
  5332 00003834 C9                              leave
  5333 00003835 C21800                          ret AND_KILL_FRAME(1)
  5334                                  
  5335                                  L_code_ptr_is_string:
  5336 00003838 C8000000                        enter 0, 0
  5337 0000383C 48837D1801                      cmp COUNT, 1
  5338 00003841 0F85D1110000                    jne L_error_arg_count_1
  5339 00003847 488B4520                        mov rax, PARAM(0)
  5340 0000384B 803803                          cmp byte [rax], T_string
  5341 0000384E 750C                            jne .L_false
  5342 00003850 48B8-                           mov rax, sob_boolean_true
  5342 00003852 [0300000000000000] 
  5343 0000385A EB0A                            jmp .L_end
  5344                                  .L_false:
  5345 0000385C 48B8-                           mov rax, sob_boolean_false
  5345 0000385E [0200000000000000] 
  5346                                  .L_end:
  5347 00003866 C9                              leave
  5348 00003867 C21800                          ret AND_KILL_FRAME(1)
  5349                                  
  5350                                  L_code_ptr_is_symbol:
  5351 0000386A C8000000                        enter 0, 0
  5352 0000386E 48837D1801                      cmp COUNT, 1
  5353 00003873 0F859F110000                    jne L_error_arg_count_1
  5354 00003879 4C8B4520                        mov r8, PARAM(0)
  5355 0000387D 41802040                        and byte [r8], T_symbol
  5356 00003881 740C                            jz .L_false
  5357 00003883 48B8-                           mov rax, sob_boolean_true
  5357 00003885 [0300000000000000] 
  5358 0000388D EB0A                            jmp .L_exit
  5359                                  .L_false:
  5360 0000388F 48B8-                           mov rax, sob_boolean_false
  5360 00003891 [0200000000000000] 
  5361                                  .L_exit:
  5362 00003899 C9                              leave
  5363 0000389A C21800                          ret AND_KILL_FRAME(1)
  5364                                  
  5365                                  L_code_ptr_is_uninterned_symbol:
  5366 0000389D C8000000                        enter 0, 0
  5367 000038A1 48837D1801                      cmp COUNT, 1
  5368 000038A6 0F856C110000                    jne L_error_arg_count_1
  5369 000038AC 4C8B4520                        mov r8, PARAM(0)
  5370 000038B0 41803842                        cmp byte [r8], T_uninterned_symbol
  5371 000038B4 750C                            jne .L_false
  5372 000038B6 48B8-                           mov rax, sob_boolean_true
  5372 000038B8 [0300000000000000] 
  5373 000038C0 EB0A                            jmp .L_exit
  5374                                  .L_false:
  5375 000038C2 48B8-                           mov rax, sob_boolean_false
  5375 000038C4 [0200000000000000] 
  5376                                  .L_exit:
  5377 000038CC C9                              leave
  5378 000038CD C21800                          ret AND_KILL_FRAME(1)
  5379                                  
  5380                                  L_code_ptr_is_interned_symbol:
  5381 000038D0 C8000000                        enter 0, 0
  5382 000038D4 48837D1801                      cmp COUNT, 1
  5383 000038D9 0F8539110000                    jne L_error_arg_count_1
  5384 000038DF 488B4520                        mov rax, PARAM(0)
  5385 000038E3 803841                          cmp byte [rax], T_interned_symbol
  5386 000038E6 750C                            jne .L_false
  5387 000038E8 48B8-                           mov rax, sob_boolean_true
  5387 000038EA [0300000000000000] 
  5388 000038F2 EB0A                            jmp .L_end
  5389                                  .L_false:
  5390 000038F4 48B8-                           mov rax, sob_boolean_false
  5390 000038F6 [0200000000000000] 
  5391                                  .L_end:
  5392 000038FE C9                              leave
  5393 000038FF C21800                          ret AND_KILL_FRAME(1)
  5394                                  
  5395                                  L_code_ptr_gensym:
  5396 00003902 C8000000                        enter 0, 0
  5397 00003906 48837D1800                      cmp COUNT, 0
  5398 0000390B 0F85D2100000                    jne L_error_arg_count_0
  5399 00003911 48FF0425[E50D0000]              inc qword [gensym_count]
  5400 00003919 BF09000000                      mov rdi, (1 + 8)
  5401 0000391E E84DF4FFFF                      call malloc
  5402 00003923 C60042                          mov byte [rax], T_uninterned_symbol
  5403 00003926 488B0C25[E50D0000]              mov rcx, qword [gensym_count]
  5404 0000392E 48894801                        mov qword [rax + 1], rcx
  5405 00003932 C9                              leave
  5406 00003933 C21000                          ret AND_KILL_FRAME(0)
  5407                                  
  5408                                  L_code_ptr_is_vector:
  5409 00003936 C8000000                        enter 0, 0
  5410 0000393A 48837D1801                      cmp COUNT, 1
  5411 0000393F 0F85D3100000                    jne L_error_arg_count_1
  5412 00003945 488B4520                        mov rax, PARAM(0)
  5413 00003949 803822                          cmp byte [rax], T_vector
  5414 0000394C 750C                            jne .L_false
  5415 0000394E 48B8-                           mov rax, sob_boolean_true
  5415 00003950 [0300000000000000] 
  5416 00003958 EB0A                            jmp .L_end
  5417                                  .L_false:
  5418 0000395A 48B8-                           mov rax, sob_boolean_false
  5418 0000395C [0200000000000000] 
  5419                                  .L_end:
  5420 00003964 C9                              leave
  5421 00003965 C21800                          ret AND_KILL_FRAME(1)
  5422                                  
  5423                                  L_code_ptr_is_closure:
  5424 00003968 C8000000                        enter 0, 0
  5425 0000396C 48837D1801                      cmp COUNT, 1
  5426 00003971 0F85A1100000                    jne L_error_arg_count_1
  5427 00003977 488B4520                        mov rax, PARAM(0)
  5428 0000397B 803804                          cmp byte [rax], T_closure
  5429 0000397E 750C                            jne .L_false
  5430 00003980 48B8-                           mov rax, sob_boolean_true
  5430 00003982 [0300000000000000] 
  5431 0000398A EB0A                            jmp .L_end
  5432                                  .L_false:
  5433 0000398C 48B8-                           mov rax, sob_boolean_false
  5433 0000398E [0200000000000000] 
  5434                                  .L_end:
  5435 00003996 C9                              leave
  5436 00003997 C21800                          ret AND_KILL_FRAME(1)
  5437                                  
  5438                                  L_code_ptr_is_real:
  5439 0000399A C8000000                        enter 0, 0
  5440 0000399E 48837D1801                      cmp COUNT, 1
  5441 000039A3 0F856F100000                    jne L_error_arg_count_1
  5442 000039A9 488B4520                        mov rax, PARAM(0)
  5443 000039AD 803813                          cmp byte [rax], T_real
  5444 000039B0 750C                            jne .L_false
  5445 000039B2 48B8-                           mov rax, sob_boolean_true
  5445 000039B4 [0300000000000000] 
  5446 000039BC EB0A                            jmp .L_end
  5447                                  .L_false:
  5448 000039BE 48B8-                           mov rax, sob_boolean_false
  5448 000039C0 [0200000000000000] 
  5449                                  .L_end:
  5450 000039C8 C9                              leave
  5451 000039C9 C21800                          ret AND_KILL_FRAME(1)
  5452                                  
  5453                                  L_code_ptr_is_fraction:
  5454 000039CC C8000000                        enter 0, 0
  5455 000039D0 48837D1801                      cmp COUNT, 1
  5456 000039D5 0F853D100000                    jne L_error_arg_count_1
  5457 000039DB 488B4520                        mov rax, PARAM(0)
  5458 000039DF 803812                          cmp byte [rax], T_fraction
  5459 000039E2 750C                            jne .L_false
  5460 000039E4 48B8-                           mov rax, sob_boolean_true
  5460 000039E6 [0300000000000000] 
  5461 000039EE EB0A                            jmp .L_end
  5462                                  .L_false:
  5463 000039F0 48B8-                           mov rax, sob_boolean_false
  5463 000039F2 [0200000000000000] 
  5464                                  .L_end:
  5465 000039FA C9                              leave
  5466 000039FB C21800                          ret AND_KILL_FRAME(1)
  5467                                  
  5468                                  L_code_ptr_is_boolean:
  5469 000039FE C8000000                        enter 0, 0
  5470 00003A02 48837D1801                      cmp COUNT, 1
  5471 00003A07 0F850B100000                    jne L_error_arg_count_1
  5472 00003A0D 488B4520                        mov rax, PARAM(0)
  5473 00003A11 8A18                            mov bl, byte [rax]
  5474 00003A13 80E308                          and bl, T_boolean
  5475 00003A16 740C                            je .L_false
  5476 00003A18 48B8-                           mov rax, sob_boolean_true
  5476 00003A1A [0300000000000000] 
  5477 00003A22 EB0A                            jmp .L_end
  5478                                  .L_false:
  5479 00003A24 48B8-                           mov rax, sob_boolean_false
  5479 00003A26 [0200000000000000] 
  5480                                  .L_end:
  5481 00003A2E C9                              leave
  5482 00003A2F C21800                          ret AND_KILL_FRAME(1)
  5483                                          
  5484                                  L_code_ptr_is_boolean_false:
  5485 00003A32 C8000000                        enter 0, 0
  5486 00003A36 48837D1801                      cmp COUNT, 1
  5487 00003A3B 0F85D70F0000                    jne L_error_arg_count_1
  5488 00003A41 488B4520                        mov rax, PARAM(0)
  5489 00003A45 8A18                            mov bl, byte [rax]
  5490 00003A47 80FB09                          cmp bl, T_boolean_false
  5491 00003A4A 750C                            jne .L_false
  5492 00003A4C 48B8-                           mov rax, sob_boolean_true
  5492 00003A4E [0300000000000000] 
  5493 00003A56 EB0A                            jmp .L_end
  5494                                  .L_false:
  5495 00003A58 48B8-                           mov rax, sob_boolean_false
  5495 00003A5A [0200000000000000] 
  5496                                  .L_end:
  5497 00003A62 C9                              leave
  5498 00003A63 C21800                          ret AND_KILL_FRAME(1)
  5499                                  
  5500                                  L_code_ptr_is_boolean_true:
  5501 00003A66 C8000000                        enter 0, 0
  5502 00003A6A 48837D1801                      cmp COUNT, 1
  5503 00003A6F 0F85A30F0000                    jne L_error_arg_count_1
  5504 00003A75 488B4520                        mov rax, PARAM(0)
  5505 00003A79 8A18                            mov bl, byte [rax]
  5506 00003A7B 80FB0A                          cmp bl, T_boolean_true
  5507 00003A7E 750C                            jne .L_false
  5508 00003A80 48B8-                           mov rax, sob_boolean_true
  5508 00003A82 [0300000000000000] 
  5509 00003A8A EB0A                            jmp .L_end
  5510                                  .L_false:
  5511 00003A8C 48B8-                           mov rax, sob_boolean_false
  5511 00003A8E [0200000000000000] 
  5512                                  .L_end:
  5513 00003A96 C9                              leave
  5514 00003A97 C21800                          ret AND_KILL_FRAME(1)
  5515                                  
  5516                                  L_code_ptr_is_number:
  5517 00003A9A C8000000                        enter 0, 0
  5518 00003A9E 48837D1801                      cmp COUNT, 1
  5519 00003AA3 0F856F0F0000                    jne L_error_arg_count_1
  5520 00003AA9 488B4520                        mov rax, PARAM(0)
  5521 00003AAD 8A18                            mov bl, byte [rax]
  5522 00003AAF 80E310                          and bl, T_number
  5523 00003AB2 740C                            jz .L_false
  5524 00003AB4 48B8-                           mov rax, sob_boolean_true
  5524 00003AB6 [0300000000000000] 
  5525 00003ABE EB0A                            jmp .L_end
  5526                                  .L_false:
  5527 00003AC0 48B8-                           mov rax, sob_boolean_false
  5527 00003AC2 [0200000000000000] 
  5528                                  .L_end:
  5529 00003ACA C9                              leave
  5530 00003ACB C21800                          ret AND_KILL_FRAME(1)
  5531                                          
  5532                                  L_code_ptr_is_collection:
  5533 00003ACE C8000000                        enter 0, 0
  5534 00003AD2 48837D1801                      cmp COUNT, 1
  5535 00003AD7 0F853B0F0000                    jne L_error_arg_count_1
  5536 00003ADD 488B4520                        mov rax, PARAM(0)
  5537 00003AE1 8A18                            mov bl, byte [rax]
  5538 00003AE3 80E320                          and bl, T_collection
  5539 00003AE6 740C                            je .L_false
  5540 00003AE8 48B8-                           mov rax, sob_boolean_true
  5540 00003AEA [0300000000000000] 
  5541 00003AF2 EB0A                            jmp .L_end
  5542                                  .L_false:
  5543 00003AF4 48B8-                           mov rax, sob_boolean_false
  5543 00003AF6 [0200000000000000] 
  5544                                  .L_end:
  5545 00003AFE C9                              leave
  5546 00003AFF C21800                          ret AND_KILL_FRAME(1)
  5547                                  
  5548                                  L_code_ptr_cons:
  5549 00003B02 C8000000                        enter 0, 0
  5550 00003B06 48837D1802                      cmp COUNT, 2
  5551 00003B0B 0F853C0F0000                    jne L_error_arg_count_2
  5552 00003B11 BF11000000                      mov rdi, (1 + 8 + 8)
  5553 00003B16 E855F2FFFF                      call malloc
  5554 00003B1B C60021                          mov byte [rax], T_pair
  5555 00003B1E 488B5D20                        mov rbx, PARAM(0)
  5556 00003B22 48895801                        mov SOB_PAIR_CAR(rax), rbx
  5557 00003B26 488B5D28                        mov rbx, PARAM(1)
  5558 00003B2A 48895809                        mov SOB_PAIR_CDR(rax), rbx
  5559 00003B2E C9                              leave
  5560 00003B2F C22000                          ret AND_KILL_FRAME(2)
  5561                                  
  5562                                  L_code_ptr_display_sexpr:
  5563 00003B32 C8000000                        enter 0, 0
  5564 00003B36 48837D1801                      cmp COUNT, 1
  5565 00003B3B 0F85D70E0000                    jne L_error_arg_count_1
  5566 00003B41 488B7D20                        mov rdi, PARAM(0)
  5567 00003B45 E8A7F4FFFF                      call print_sexpr
  5568 00003B4A 48B8-                           mov rax, sob_void
  5568 00003B4C [0000000000000000] 
  5569 00003B54 C9                              leave
  5570 00003B55 C21800                          ret AND_KILL_FRAME(1)
  5571                                  
  5572                                  L_code_ptr_write_char:
  5573 00003B58 C8000000                        enter 0, 0
  5574 00003B5C 48837D1801                      cmp COUNT, 1
  5575 00003B61 0F85B10E0000                    jne L_error_arg_count_1
  5576 00003B67 488B4520                        mov rax, PARAM(0)
  5577                                          assert_char(rax)
    53 00003B6B 803802              <1>  cmp byte [%1], %2
    54 00003B6E 0F85780F0000        <1>  jne L_error_incorrect_type
  5578 00003B74 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  5579 00003B77 4825FF000000                    and rax, 255
  5580 00003B7D 48BF-                           mov rdi, fmt_char
  5580 00003B7F [ED0D000000000000] 
  5581 00003B87 4889C6                          mov rsi, rax
  5582 00003B8A B800000000                      mov rax, 0
  5583                                          ENTER
    44 00003B8F C8000000            <1>  enter 0, 0
    45 00003B93 4883E4F0            <1>  and rsp, ~15
  5584 00003B97 E8(00000000)                    call printf
  5585                                          LEAVE
    49 00003B9C C9                  <1>  leave
  5586 00003B9D 48B8-                           mov rax, sob_void
  5586 00003B9F [0000000000000000] 
  5587 00003BA7 C9                              leave
  5588 00003BA8 C21800                          ret AND_KILL_FRAME(1)
  5589                                  
  5590                                  L_code_ptr_car:
  5591 00003BAB C8000000                        enter 0, 0
  5592 00003BAF 48837D1801                      cmp COUNT, 1
  5593 00003BB4 0F855E0E0000                    jne L_error_arg_count_1
  5594 00003BBA 488B4520                        mov rax, PARAM(0)
  5595                                          assert_pair(rax)
    53 00003BBE 803821              <1>  cmp byte [%1], %2
    54 00003BC1 0F85250F0000        <1>  jne L_error_incorrect_type
  5596 00003BC7 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  5597 00003BCB C9                              leave
  5598 00003BCC C21800                          ret AND_KILL_FRAME(1)
  5599                                          
  5600                                  L_code_ptr_cdr:
  5601 00003BCF C8000000                        enter 0, 0
  5602 00003BD3 48837D1801                      cmp COUNT, 1
  5603 00003BD8 0F853A0E0000                    jne L_error_arg_count_1
  5604 00003BDE 488B4520                        mov rax, PARAM(0)
  5605                                          assert_pair(rax)
    53 00003BE2 803821              <1>  cmp byte [%1], %2
    54 00003BE5 0F85010F0000        <1>  jne L_error_incorrect_type
  5606 00003BEB 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  5607 00003BEF C9                              leave
  5608 00003BF0 C21800                          ret AND_KILL_FRAME(1)
  5609                                          
  5610                                  L_code_ptr_string_length:
  5611 00003BF3 C8000000                        enter 0, 0
  5612 00003BF7 48837D1801                      cmp COUNT, 1
  5613 00003BFC 0F85160E0000                    jne L_error_arg_count_1
  5614 00003C02 488B4520                        mov rax, PARAM(0)
  5615                                          assert_string(rax)
    53 00003C06 803803              <1>  cmp byte [%1], %2
    54 00003C09 0F85DD0E0000        <1>  jne L_error_incorrect_type
  5616 00003C0F 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  5617 00003C13 E84F0D0000                      call make_integer
  5618 00003C18 C9                              leave
  5619 00003C19 C21800                          ret AND_KILL_FRAME(1)
  5620                                  
  5621                                  L_code_ptr_vector_length:
  5622 00003C1C C8000000                        enter 0, 0
  5623 00003C20 48837D1801                      cmp COUNT, 1
  5624 00003C25 0F85ED0D0000                    jne L_error_arg_count_1
  5625 00003C2B 488B4520                        mov rax, PARAM(0)
  5626                                          assert_vector(rax)
    53 00003C2F 803822              <1>  cmp byte [%1], %2
    54 00003C32 0F85B40E0000        <1>  jne L_error_incorrect_type
  5627 00003C38 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  5628 00003C3C E8260D0000                      call make_integer
  5629 00003C41 C9                              leave
  5630 00003C42 C21800                          ret AND_KILL_FRAME(1)
  5631                                  
  5632                                  L_code_ptr_real_to_integer:
  5633 00003C45 C8000000                        enter 0, 0
  5634 00003C49 48837D1801                      cmp COUNT, 1
  5635 00003C4E 0F85C40D0000                    jne L_error_arg_count_1
  5636 00003C54 488B5D20                        mov rbx, PARAM(0)
  5637                                          assert_real(rbx)
    53 00003C58 803B13              <1>  cmp byte [%1], %2
    54 00003C5B 0F858B0E0000        <1>  jne L_error_incorrect_type
  5638 00003C61 F20F104301                      movsd xmm0, qword [rbx + 1]
  5639 00003C66 F2480F2CF8                      cvttsd2si rdi, xmm0
  5640 00003C6B E8F70C0000                      call make_integer
  5641 00003C70 C9                              leave
  5642 00003C71 C21800                          ret AND_KILL_FRAME(1)
  5643                                  
  5644                                  L_code_ptr_exit:
  5645 00003C74 C8000000                        enter 0, 0
  5646 00003C78 48837D1800                      cmp COUNT, 0
  5647 00003C7D 0F85600D0000                    jne L_error_arg_count_0
  5648 00003C83 B800000000                      mov rax, 0
  5649 00003C88 E8(00000000)                    call exit
  5650                                  
  5651                                  L_code_ptr_integer_to_real:
  5652 00003C8D C8000000                        enter 0, 0
  5653 00003C91 48837D1801                      cmp COUNT, 1
  5654 00003C96 0F857C0D0000                    jne L_error_arg_count_1
  5655 00003C9C 488B4520                        mov rax, PARAM(0)
  5656                                          assert_integer(rax)
    53 00003CA0 803811              <1>  cmp byte [%1], %2
    54 00003CA3 0F85430E0000        <1>  jne L_error_incorrect_type
  5657 00003CA9 FF7001                          push qword [rax + 1]
  5658 00003CAC F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  5659 00003CB2 E8980C0000                      call make_real
  5660 00003CB7 C9                              leave
  5661 00003CB8 C21800                          ret AND_KILL_FRAME(1)
  5662                                  
  5663                                  L_code_ptr_fraction_to_real:
  5664 00003CBB C8000000                        enter 0, 0
  5665 00003CBF 48837D1801                      cmp COUNT, 1
  5666 00003CC4 0F854E0D0000                    jne L_error_arg_count_1
  5667 00003CCA 488B4520                        mov rax, PARAM(0)
  5668                                          assert_fraction(rax)
    53 00003CCE 803812              <1>  cmp byte [%1], %2
    54 00003CD1 0F85150E0000        <1>  jne L_error_incorrect_type
  5669 00003CD7 FF7001                          push qword [rax + 1]
  5670 00003CDA F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  5671 00003CE0 FF7009                          push qword [rax + 1 + 8]
  5672 00003CE3 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  5673 00003CE9 F20F5EC1                        divsd xmm0, xmm1
  5674 00003CED E85D0C0000                      call make_real
  5675 00003CF2 C9                              leave
  5676 00003CF3 C21800                          ret AND_KILL_FRAME(1)
  5677                                  
  5678                                  L_code_ptr_char_to_integer:
  5679 00003CF6 C8000000                        enter 0, 0
  5680 00003CFA 48837D1801                      cmp COUNT, 1
  5681 00003CFF 0F85130D0000                    jne L_error_arg_count_1
  5682 00003D05 488B4520                        mov rax, PARAM(0)
  5683                                          assert_char(rax)
    53 00003D09 803802              <1>  cmp byte [%1], %2
    54 00003D0C 0F85DA0D0000        <1>  jne L_error_incorrect_type
  5684 00003D12 8A4001                          mov al, byte [rax + 1]
  5685 00003D15 4825FF000000                    and rax, 255
  5686 00003D1B 4889C7                          mov rdi, rax
  5687 00003D1E E8440C0000                      call make_integer
  5688 00003D23 C9                              leave
  5689 00003D24 C21800                          ret AND_KILL_FRAME(1)
  5690                                  
  5691                                  L_code_ptr_integer_to_fraction:
  5692 00003D27 C8000000                        enter 0, 0
  5693 00003D2B 48837D1801                      cmp COUNT, 1
  5694 00003D30 0F85E20C0000                    jne L_error_arg_count_1
  5695 00003D36 4C8B4520                        mov r8, PARAM(0)
  5696                                          assert_integer(r8)
    53 00003D3A 41803811            <1>  cmp byte [%1], %2
    54 00003D3E 0F85A80D0000        <1>  jne L_error_incorrect_type
  5697 00003D44 BF11000000                      mov rdi, (1 + 8 + 8)
  5698 00003D49 E822F0FFFF                      call malloc
  5699 00003D4E 498B5801                        mov rbx, qword [r8 + 1]
  5700 00003D52 C60012                          mov byte [rax], T_fraction
  5701 00003D55 48895801                        mov qword [rax + 1], rbx
  5702 00003D59 48C7400901000000                mov qword [rax + 1 + 8], 1
  5703 00003D61 C9                              leave
  5704 00003D62 C21800                          ret AND_KILL_FRAME(1)
  5705                                  
  5706                                  L_code_ptr_integer_to_char:
  5707 00003D65 C8000000                        enter 0, 0
  5708 00003D69 48837D1801                      cmp COUNT, 1
  5709 00003D6E 0F85A40C0000                    jne L_error_arg_count_1
  5710 00003D74 488B4520                        mov rax, PARAM(0)
  5711                                          assert_integer(rax)
    53 00003D78 803811              <1>  cmp byte [%1], %2
    54 00003D7B 0F856B0D0000        <1>  jne L_error_incorrect_type
  5712 00003D81 488B5801                        mov rbx, qword [rax + 1]
  5713 00003D85 4883FB00                        cmp rbx, 0
  5714 00003D89 0F8EF20B0000                    jle L_error_integer_range
  5715 00003D8F 4881FB00010000                  cmp rbx, 256
  5716 00003D96 0F8DE50B0000                    jge L_error_integer_range
  5717 00003D9C BF02000000                      mov rdi, (1 + 1)
  5718 00003DA1 E8CAEFFFFF                      call malloc
  5719 00003DA6 C60002                          mov byte [rax], T_char
  5720 00003DA9 885801                          mov byte [rax + 1], bl
  5721 00003DAC C9                              leave
  5722 00003DAD C21800                          ret AND_KILL_FRAME(1)
  5723                                  
  5724                                  L_code_ptr_trng:
  5725 00003DB0 C8000000                        enter 0, 0
  5726 00003DB4 48837D1800                      cmp COUNT, 0
  5727 00003DB9 0F85240C0000                    jne L_error_arg_count_0
  5728 00003DBF 480FC7F7                        rdrand rdi
  5729 00003DC3 48D1EF                          shr rdi, 1
  5730 00003DC6 E89C0B0000                      call make_integer
  5731 00003DCB C9                              leave
  5732 00003DCC C21000                          ret AND_KILL_FRAME(0)
  5733                                  
  5734                                  L_code_ptr_is_zero:
  5735 00003DCF C8000000                        enter 0, 0
  5736 00003DD3 48837D1801                      cmp COUNT, 1
  5737 00003DD8 0F853A0C0000                    jne L_error_arg_count_1
  5738 00003DDE 488B4520                        mov rax, PARAM(0)
  5739 00003DE2 803811                          cmp byte [rax], T_integer
  5740 00003DE5 740F                            je .L_integer
  5741 00003DE7 803812                          cmp byte [rax], T_fraction
  5742 00003DEA 7413                            je .L_fraction
  5743 00003DEC 803813                          cmp byte [rax], T_real
  5744 00003DEF 7417                            je .L_real
  5745 00003DF1 E9F60C0000                      jmp L_error_incorrect_type
  5746                                  .L_integer:
  5747 00003DF6 4883780100                      cmp qword [rax + 1], 0
  5748 00003DFB 7429                            je .L_zero
  5749 00003DFD EB1B                            jmp .L_not_zero
  5750                                  .L_fraction:
  5751 00003DFF 4883780100                      cmp qword [rax + 1], 0
  5752 00003E04 7420                            je .L_zero
  5753 00003E06 EB12                            jmp .L_not_zero
  5754                                  .L_real:
  5755 00003E08 660FEFC0                        pxor xmm0, xmm0
  5756 00003E0C FF7001                          push qword [rax + 1]
  5757 00003E0F F20F100C24                      movsd xmm1, qword [rsp]
  5758 00003E14 660F2EC1                        ucomisd xmm0, xmm1
  5759 00003E18 740C                            je .L_zero
  5760                                  .L_not_zero:
  5761 00003E1A 48B8-                           mov rax, sob_boolean_false
  5761 00003E1C [0200000000000000] 
  5762 00003E24 EB0A                            jmp .L_end
  5763                                  .L_zero:
  5764 00003E26 48B8-                           mov rax, sob_boolean_true
  5764 00003E28 [0300000000000000] 
  5765                                  .L_end:
  5766 00003E30 C9                              leave
  5767 00003E31 C21800                          ret AND_KILL_FRAME(1)
  5768                                  
  5769                                  L_code_ptr_is_integer:
  5770 00003E34 C8000000                        enter 0, 0
  5771 00003E38 48837D1801                      cmp COUNT, 1
  5772 00003E3D 0F85D50B0000                    jne L_error_arg_count_1
  5773 00003E43 488B4520                        mov rax, PARAM(0)
  5774 00003E47 803811                          cmp byte [rax], T_integer
  5775 00003E4A 750C                            jne .L_false
  5776 00003E4C 48B8-                           mov rax, sob_boolean_true
  5776 00003E4E [0300000000000000] 
  5777 00003E56 EB0A                            jmp .L_exit
  5778                                  .L_false:
  5779 00003E58 48B8-                           mov rax, sob_boolean_false
  5779 00003E5A [0200000000000000] 
  5780                                  .L_exit:
  5781 00003E62 C9                              leave
  5782 00003E63 C21800                          ret AND_KILL_FRAME(1)
  5783                                  
  5784                                  L_code_ptr_raw_bin_add_rr:
  5785 00003E66 C8000000                        enter 0, 0
  5786 00003E6A 48837D1802                      cmp COUNT, 2
  5787 00003E6F 0F85D80B0000                    jne L_error_arg_count_2
  5788 00003E75 488B5D20                        mov rbx, PARAM(0)
  5789                                          assert_real(rbx)
    53 00003E79 803B13              <1>  cmp byte [%1], %2
    54 00003E7C 0F856A0C0000        <1>  jne L_error_incorrect_type
  5790 00003E82 488B4D28                        mov rcx, PARAM(1)
  5791                                          assert_real(rcx)
    53 00003E86 803913              <1>  cmp byte [%1], %2
    54 00003E89 0F855D0C0000        <1>  jne L_error_incorrect_type
  5792 00003E8F F20F104301                      movsd xmm0, qword [rbx + 1]
  5793 00003E94 F20F104901                      movsd xmm1, qword [rcx + 1]
  5794 00003E99 F20F58C1                        addsd xmm0, xmm1
  5795 00003E9D E8AD0A0000                      call make_real
  5796 00003EA2 C9                              leave
  5797 00003EA3 C22000                          ret AND_KILL_FRAME(2)
  5798                                  
  5799                                  L_code_ptr_raw_bin_sub_rr:
  5800 00003EA6 C8000000                        enter 0, 0
  5801 00003EAA 48837D1802                      cmp COUNT, 2
  5802 00003EAF 0F85980B0000                    jne L_error_arg_count_2
  5803 00003EB5 488B5D20                        mov rbx, PARAM(0)
  5804                                          assert_real(rbx)
    53 00003EB9 803B13              <1>  cmp byte [%1], %2
    54 00003EBC 0F852A0C0000        <1>  jne L_error_incorrect_type
  5805 00003EC2 488B4D28                        mov rcx, PARAM(1)
  5806                                          assert_real(rcx)
    53 00003EC6 803913              <1>  cmp byte [%1], %2
    54 00003EC9 0F851D0C0000        <1>  jne L_error_incorrect_type
  5807 00003ECF F20F104301                      movsd xmm0, qword [rbx + 1]
  5808 00003ED4 F20F104901                      movsd xmm1, qword [rcx + 1]
  5809 00003ED9 F20F5CC1                        subsd xmm0, xmm1
  5810 00003EDD E86D0A0000                      call make_real
  5811 00003EE2 C9                              leave
  5812 00003EE3 C22000                          ret AND_KILL_FRAME(2)
  5813                                  
  5814                                  L_code_ptr_raw_bin_mul_rr:
  5815 00003EE6 C8000000                        enter 0, 0
  5816 00003EEA 48837D1802                      cmp COUNT, 2
  5817 00003EEF 0F85580B0000                    jne L_error_arg_count_2
  5818 00003EF5 488B5D20                        mov rbx, PARAM(0)
  5819                                          assert_real(rbx)
    53 00003EF9 803B13              <1>  cmp byte [%1], %2
    54 00003EFC 0F85EA0B0000        <1>  jne L_error_incorrect_type
  5820 00003F02 488B4D28                        mov rcx, PARAM(1)
  5821                                          assert_real(rcx)
    53 00003F06 803913              <1>  cmp byte [%1], %2
    54 00003F09 0F85DD0B0000        <1>  jne L_error_incorrect_type
  5822 00003F0F F20F104301                      movsd xmm0, qword [rbx + 1]
  5823 00003F14 F20F104901                      movsd xmm1, qword [rcx + 1]
  5824 00003F19 F20F59C1                        mulsd xmm0, xmm1
  5825 00003F1D E82D0A0000                      call make_real
  5826 00003F22 C9                              leave
  5827 00003F23 C22000                          ret AND_KILL_FRAME(2)
  5828                                  
  5829                                  L_code_ptr_raw_bin_div_rr:
  5830 00003F26 C8000000                        enter 0, 0
  5831 00003F2A 48837D1802                      cmp COUNT, 2
  5832 00003F2F 0F85180B0000                    jne L_error_arg_count_2
  5833 00003F35 488B5D20                        mov rbx, PARAM(0)
  5834                                          assert_real(rbx)
    53 00003F39 803B13              <1>  cmp byte [%1], %2
    54 00003F3C 0F85AA0B0000        <1>  jne L_error_incorrect_type
  5835 00003F42 488B4D28                        mov rcx, PARAM(1)
  5836                                          assert_real(rcx)
    53 00003F46 803913              <1>  cmp byte [%1], %2
    54 00003F49 0F859D0B0000        <1>  jne L_error_incorrect_type
  5837 00003F4F F20F104301                      movsd xmm0, qword [rbx + 1]
  5838 00003F54 F20F104901                      movsd xmm1, qword [rcx + 1]
  5839 00003F59 660FEFD2                        pxor xmm2, xmm2
  5840 00003F5D 660F2ECA                        ucomisd xmm1, xmm2
  5841 00003F61 0F84B60B0000                    je L_error_division_by_zero
  5842 00003F67 F20F5EC1                        divsd xmm0, xmm1
  5843 00003F6B E8DF090000                      call make_real
  5844 00003F70 C9                              leave
  5845 00003F71 C22000                          ret AND_KILL_FRAME(2)
  5846                                  
  5847                                  L_code_ptr_raw_bin_add_zz:
  5848 00003F74 C8000000                	enter 0, 0
  5849 00003F78 48837D1802              	cmp COUNT, 2
  5850 00003F7D 0F85CA0A0000            	jne L_error_arg_count_2
  5851 00003F83 4C8B4520                	mov r8, PARAM(0)
  5852                                  	assert_integer(r8)
    53 00003F87 41803811            <1>  cmp byte [%1], %2
    54 00003F8B 0F855B0B0000        <1>  jne L_error_incorrect_type
  5853 00003F91 4C8B4D28                	mov r9, PARAM(1)
  5854                                  	assert_integer(r9)
    53 00003F95 41803911            <1>  cmp byte [%1], %2
    54 00003F99 0F854D0B0000        <1>  jne L_error_incorrect_type
  5855 00003F9F 498B7801                	mov rdi, qword [r8 + 1]
  5856 00003FA3 49037901                	add rdi, qword [r9 + 1]
  5857 00003FA7 E8BB090000              	call make_integer
  5858 00003FAC C9                      	leave
  5859 00003FAD C22000                  	ret AND_KILL_FRAME(2)
  5860                                  
  5861                                  L_code_ptr_raw_bin_add_qq:
  5862 00003FB0 C8000000                        enter 0, 0
  5863 00003FB4 48837D1802                      cmp COUNT, 2
  5864 00003FB9 0F858E0A0000                    jne L_error_arg_count_2
  5865 00003FBF 4C8B4520                        mov r8, PARAM(0)
  5866                                          assert_fraction(r8)
    53 00003FC3 41803812            <1>  cmp byte [%1], %2
    54 00003FC7 0F851F0B0000        <1>  jne L_error_incorrect_type
  5867 00003FCD 4C8B4D28                        mov r9, PARAM(1)
  5868                                          assert_fraction(r9)
    53 00003FD1 41803912            <1>  cmp byte [%1], %2
    54 00003FD5 0F85110B0000        <1>  jne L_error_incorrect_type
  5869 00003FDB 498B4001                        mov rax, qword [r8 + 1] ; num1
  5870 00003FDF 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  5871 00003FE3 4899                            cqo
  5872 00003FE5 48F7EB                          imul rbx
  5873 00003FE8 4889C6                          mov rsi, rax
  5874 00003FEB 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  5875 00003FEF 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  5876 00003FF3 4899                            cqo
  5877 00003FF5 48F7EB                          imul rbx
  5878 00003FF8 4801C6                          add rsi, rax
  5879 00003FFB 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  5880 00003FFF 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  5881 00004003 4899                            cqo
  5882 00004005 48F7EB                          imul rbx
  5883 00004008 4889C7                          mov rdi, rax
  5884 0000400B E8DE010000                      call normalize_fraction
  5885 00004010 C9                              leave
  5886 00004011 C22000                          ret AND_KILL_FRAME(2)
  5887                                  
  5888                                  L_code_ptr_raw_bin_sub_zz:
  5889 00004014 C8000000                	enter 0, 0
  5890 00004018 48837D1802              	cmp COUNT, 2
  5891 0000401D 0F852A0A0000            	jne L_error_arg_count_2
  5892 00004023 4C8B4520                	mov r8, PARAM(0)
  5893                                  	assert_integer(r8)
    53 00004027 41803811            <1>  cmp byte [%1], %2
    54 0000402B 0F85BB0A0000        <1>  jne L_error_incorrect_type
  5894 00004031 4C8B4D28                	mov r9, PARAM(1)
  5895                                  	assert_integer(r9)
    53 00004035 41803911            <1>  cmp byte [%1], %2
    54 00004039 0F85AD0A0000        <1>  jne L_error_incorrect_type
  5896 0000403F 498B7801                	mov rdi, qword [r8 + 1]
  5897 00004043 492B7901                	sub rdi, qword [r9 + 1]
  5898 00004047 E81B090000              	call make_integer
  5899 0000404C C9                      	leave
  5900 0000404D C22000                  	ret AND_KILL_FRAME(2)
  5901                                  
  5902                                  L_code_ptr_raw_bin_sub_qq:
  5903 00004050 C8000000                        enter 0, 0
  5904 00004054 48837D1802                      cmp COUNT, 2
  5905 00004059 0F85EE090000                    jne L_error_arg_count_2
  5906 0000405F 4C8B4520                        mov r8, PARAM(0)
  5907                                          assert_fraction(r8)
    53 00004063 41803812            <1>  cmp byte [%1], %2
    54 00004067 0F857F0A0000        <1>  jne L_error_incorrect_type
  5908 0000406D 4C8B4D28                        mov r9, PARAM(1)
  5909                                          assert_fraction(r9)
    53 00004071 41803912            <1>  cmp byte [%1], %2
    54 00004075 0F85710A0000        <1>  jne L_error_incorrect_type
  5910 0000407B 498B4001                        mov rax, qword [r8 + 1] ; num1
  5911 0000407F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  5912 00004083 4899                            cqo
  5913 00004085 48F7EB                          imul rbx
  5914 00004088 4889C6                          mov rsi, rax
  5915 0000408B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  5916 0000408F 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  5917 00004093 4899                            cqo
  5918 00004095 48F7EB                          imul rbx
  5919 00004098 4829C6                          sub rsi, rax
  5920 0000409B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  5921 0000409F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  5922 000040A3 4899                            cqo
  5923 000040A5 48F7EB                          imul rbx
  5924 000040A8 4889C7                          mov rdi, rax
  5925 000040AB E83E010000                      call normalize_fraction
  5926 000040B0 C9                              leave
  5927 000040B1 C22000                          ret AND_KILL_FRAME(2)
  5928                                  
  5929                                  L_code_ptr_raw_bin_mul_zz:
  5930 000040B4 C8000000                	enter 0, 0
  5931 000040B8 48837D1802              	cmp COUNT, 2
  5932 000040BD 0F858A090000            	jne L_error_arg_count_2
  5933 000040C3 4C8B4520                	mov r8, PARAM(0)
  5934                                  	assert_integer(r8)
    53 000040C7 41803811            <1>  cmp byte [%1], %2
    54 000040CB 0F851B0A0000        <1>  jne L_error_incorrect_type
  5935 000040D1 4C8B4D28                	mov r9, PARAM(1)
  5936                                  	assert_integer(r9)
    53 000040D5 41803911            <1>  cmp byte [%1], %2
    54 000040D9 0F850D0A0000        <1>  jne L_error_incorrect_type
  5937 000040DF 4899                    	cqo
  5938 000040E1 498B4001                	mov rax, qword [r8 + 1]
  5939 000040E5 49F76101                	mul qword [r9 + 1]
  5940 000040E9 4889C7                  	mov rdi, rax
  5941 000040EC E876080000              	call make_integer
  5942 000040F1 C9                      	leave
  5943 000040F2 C22000                  	ret AND_KILL_FRAME(2)
  5944                                  
  5945                                  L_code_ptr_raw_bin_mul_qq:
  5946 000040F5 C8000000                        enter 0, 0
  5947 000040F9 48837D1802                      cmp COUNT, 2
  5948 000040FE 0F8549090000                    jne L_error_arg_count_2
  5949 00004104 4C8B4520                        mov r8, PARAM(0)
  5950                                          assert_fraction(r8)
    53 00004108 41803812            <1>  cmp byte [%1], %2
    54 0000410C 0F85DA090000        <1>  jne L_error_incorrect_type
  5951 00004112 4C8B4D28                        mov r9, PARAM(1)
  5952                                          assert_fraction(r9)
    53 00004116 41803912            <1>  cmp byte [%1], %2
    54 0000411A 0F85CC090000        <1>  jne L_error_incorrect_type
  5953 00004120 498B4001                        mov rax, qword [r8 + 1] ; num1
  5954 00004124 498B5901                        mov rbx, qword [r9 + 1] ; num2
  5955 00004128 4899                            cqo
  5956 0000412A 48F7EB                          imul rbx
  5957 0000412D 4889C6                          mov rsi, rax
  5958 00004130 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  5959 00004134 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  5960 00004138 4899                            cqo
  5961 0000413A 48F7EB                          imul rbx
  5962 0000413D 4889C7                          mov rdi, rax
  5963 00004140 E8A9000000                      call normalize_fraction
  5964 00004145 C9                              leave
  5965 00004146 C22000                          ret AND_KILL_FRAME(2)
  5966                                          
  5967                                  L_code_ptr_raw_bin_div_zz:
  5968 00004149 C8000000                	enter 0, 0
  5969 0000414D 48837D1802              	cmp COUNT, 2
  5970 00004152 0F85F5080000            	jne L_error_arg_count_2
  5971 00004158 4C8B4520                	mov r8, PARAM(0)
  5972                                  	assert_integer(r8)
    53 0000415C 41803811            <1>  cmp byte [%1], %2
    54 00004160 0F8586090000        <1>  jne L_error_incorrect_type
  5973 00004166 4C8B4D28                	mov r9, PARAM(1)
  5974                                  	assert_integer(r9)
    53 0000416A 41803911            <1>  cmp byte [%1], %2
    54 0000416E 0F8578090000        <1>  jne L_error_incorrect_type
  5975 00004174 498B7901                	mov rdi, qword [r9 + 1]
  5976 00004178 4883FF00                	cmp rdi, 0
  5977 0000417C 0F849B090000            	je L_error_division_by_zero
  5978 00004182 498B7001                	mov rsi, qword [r8 + 1]
  5979 00004186 E863000000              	call normalize_fraction
  5980 0000418B C9                      	leave
  5981 0000418C C22000                  	ret AND_KILL_FRAME(2)
  5982                                  
  5983                                  L_code_ptr_raw_bin_div_qq:
  5984 0000418F C8000000                        enter 0, 0
  5985 00004193 48837D1802                      cmp COUNT, 2
  5986 00004198 0F85AF080000                    jne L_error_arg_count_2
  5987 0000419E 4C8B4520                        mov r8, PARAM(0)
  5988                                          assert_fraction(r8)
    53 000041A2 41803812            <1>  cmp byte [%1], %2
    54 000041A6 0F8540090000        <1>  jne L_error_incorrect_type
  5989 000041AC 4C8B4D28                        mov r9, PARAM(1)
  5990                                          assert_fraction(r9)
    53 000041B0 41803912            <1>  cmp byte [%1], %2
    54 000041B4 0F8532090000        <1>  jne L_error_incorrect_type
  5991 000041BA 4983790100                      cmp qword [r9 + 1], 0
  5992 000041BF 0F8458090000                    je L_error_division_by_zero
  5993 000041C5 498B4001                        mov rax, qword [r8 + 1] ; num1
  5994 000041C9 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  5995 000041CD 4899                            cqo
  5996 000041CF 48F7EB                          imul rbx
  5997 000041D2 4889C6                          mov rsi, rax
  5998 000041D5 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  5999 000041D9 498B5901                        mov rbx, qword [r9 + 1] ; num2
  6000 000041DD 4899                            cqo
  6001 000041DF 48F7EB                          imul rbx
  6002 000041E2 4889C7                          mov rdi, rax
  6003 000041E5 E804000000                      call normalize_fraction
  6004 000041EA C9                              leave
  6005 000041EB C22000                          ret AND_KILL_FRAME(2)
  6006                                          
  6007                                  normalize_fraction:
  6008 000041EE 56                              push rsi
  6009 000041EF 57                              push rdi
  6010 000041F0 E859000000                      call gcd
  6011 000041F5 4889C3                          mov rbx, rax
  6012 000041F8 58                              pop rax
  6013 000041F9 4899                            cqo
  6014 000041FB 48F7FB                          idiv rbx
  6015 000041FE 4989C0                          mov r8, rax
  6016 00004201 58                              pop rax
  6017 00004202 4899                            cqo
  6018 00004204 48F7FB                          idiv rbx
  6019 00004207 4989C1                          mov r9, rax
  6020 0000420A 4983F900                        cmp r9, 0
  6021 0000420E 741C                            je .L_zero
  6022 00004210 4983F801                        cmp r8, 1
  6023 00004214 7421                            je .L_int
  6024 00004216 BF11000000                      mov rdi, (1 + 8 + 8)
  6025 0000421B E850EBFFFF                      call malloc
  6026 00004220 C60012                          mov byte [rax], T_fraction
  6027 00004223 4C894801                        mov qword [rax + 1], r9
  6028 00004227 4C894009                        mov qword [rax + 1 + 8], r8
  6029 0000422B C3                              ret
  6030                                  .L_zero:
  6031 0000422C BF00000000                      mov rdi, 0
  6032 00004231 E831070000                      call make_integer
  6033 00004236 C3                              ret
  6034                                  .L_int:
  6035 00004237 4C89CF                          mov rdi, r9
  6036 0000423A E828070000                      call make_integer
  6037 0000423F C3                              ret
  6038                                  
  6039                                  iabs:
  6040 00004240 4889F8                          mov rax, rdi
  6041 00004243 4883F800                        cmp rax, 0
  6042 00004247 7C01                            jl .Lneg
  6043 00004249 C3                              ret
  6044                                  .Lneg:
  6045 0000424A 48F7D8                          neg rax
  6046 0000424D C3                              ret
  6047                                  
  6048                                  gcd:
  6049 0000424E E8EDFFFFFF                      call iabs
  6050 00004253 4889C3                          mov rbx, rax
  6051 00004256 4889F7                          mov rdi, rsi
  6052 00004259 E8E2FFFFFF                      call iabs
  6053 0000425E 4883F800                        cmp rax, 0
  6054 00004262 7502                            jne .L0
  6055 00004264 4893                            xchg rax, rbx
  6056                                  .L0:
  6057 00004266 4883FB00                        cmp rbx, 0
  6058 0000426A 740C                            je .L1
  6059 0000426C 4899                            cqo
  6060 0000426E 48F7F3                          div rbx
  6061 00004271 4889D0                          mov rax, rdx
  6062 00004274 4893                            xchg rax, rbx
  6063 00004276 EBEE                            jmp .L0
  6064                                  .L1:
  6065 00004278 C3                              ret
  6066                                  
  6067                                  L_code_ptr_error:
  6068 00004279 C8000000                        enter 0, 0
  6069 0000427D 48837D1802                      cmp COUNT, 2
  6070 00004282 0F85C5070000                    jne L_error_arg_count_2
  6071 00004288 488B7520                        mov rsi, PARAM(0)
  6072                                          assert_interned_symbol(rsi)
    53 0000428C 803E41              <1>  cmp byte [%1], %2
    54 0000428F 0F8557080000        <1>  jne L_error_incorrect_type
  6073 00004295 488B7528                        mov rsi, PARAM(1)
  6074                                          assert_string(rsi)
    53 00004299 803E03              <1>  cmp byte [%1], %2
    54 0000429C 0F854A080000        <1>  jne L_error_incorrect_type
  6075 000042A2 48BF-                           mov rdi, fmt_scheme_error_part_1
  6075 000042A4 [4B0F000000000000] 
  6076 000042AC B800000000                      mov rax, 0
  6077                                          ENTER
    44 000042B1 C8000000            <1>  enter 0, 0
    45 000042B5 4883E4F0            <1>  and rsp, ~15
  6078 000042B9 E8(00000000)                    call printf
  6079                                          LEAVE
    49 000042BE C9                  <1>  leave
  6080 000042BF 488B7D20                        mov rdi, PARAM(0)
  6081 000042C3 E829EDFFFF                      call print_sexpr
  6082 000042C8 48BF-                           mov rdi, fmt_scheme_error_part_2
  6082 000042CA [5F0F000000000000] 
  6083 000042D2 B800000000                      mov rax, 0
  6084                                          ENTER
    44 000042D7 C8000000            <1>  enter 0, 0
    45 000042DB 4883E4F0            <1>  and rsp, ~15
  6085 000042DF E8(00000000)                    call printf
  6086                                          LEAVE
    49 000042E4 C9                  <1>  leave
  6087 000042E5 488B4528                        mov rax, PARAM(1)       ; sob_string
  6088 000042E9 BE01000000                      mov rsi, 1              ; size = 1 byte
  6089 000042EE 488B5001                        mov rdx, qword [rax + 1] ; length
  6090 000042F2 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  6091 000042F6 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  6092                                  	ENTER
    44 000042FE C8000000            <1>  enter 0, 0
    45 00004302 4883E4F0            <1>  and rsp, ~15
  6093 00004306 E8(00000000)                    call fwrite
  6094                                  	LEAVE
    49 0000430B C9                  <1>  leave
  6095 0000430C 48BF-                           mov rdi, fmt_scheme_error_part_3
  6095 0000430E [A10F000000000000] 
  6096 00004316 B800000000                      mov rax, 0
  6097                                          ENTER
    44 0000431B C8000000            <1>  enter 0, 0
    45 0000431F 4883E4F0            <1>  and rsp, ~15
  6098 00004323 E8(00000000)                    call printf
  6099                                          LEAVE
    49 00004328 C9                  <1>  leave
  6100 00004329 48C7C0F7FFFFFF                  mov rax, -9
  6101 00004330 E8(00000000)                    call exit
  6102                                  
  6103                                  L_code_ptr_raw_less_than_rr:
  6104 00004335 C8000000                        enter 0, 0
  6105 00004339 48837D1802                      cmp COUNT, 2
  6106 0000433E 0F8509070000                    jne L_error_arg_count_2
  6107 00004344 488B7520                        mov rsi, PARAM(0)
  6108                                          assert_real(rsi)
    53 00004348 803E13              <1>  cmp byte [%1], %2
    54 0000434B 0F859B070000        <1>  jne L_error_incorrect_type
  6109 00004351 488B7D28                        mov rdi, PARAM(1)
  6110                                          assert_real(rdi)
    53 00004355 803F13              <1>  cmp byte [%1], %2
    54 00004358 0F858E070000        <1>  jne L_error_incorrect_type
  6111 0000435E F20F104601                      movsd xmm0, qword [rsi + 1]
  6112 00004363 F20F104F01                      movsd xmm1, qword [rdi + 1]
  6113 00004368 660F2FC1                        comisd xmm0, xmm1
  6114 0000436C 730C                            jae .L_false
  6115 0000436E 48B8-                           mov rax, sob_boolean_true
  6115 00004370 [0300000000000000] 
  6116 00004378 EB0A                            jmp .L_exit
  6117                                  .L_false:
  6118 0000437A 48B8-                           mov rax, sob_boolean_false
  6118 0000437C [0200000000000000] 
  6119                                  .L_exit:
  6120 00004384 C9                              leave
  6121 00004385 C22000                          ret AND_KILL_FRAME(2)
  6122                                          
  6123                                  L_code_ptr_raw_less_than_zz:
  6124 00004388 C8000000                	enter 0, 0
  6125 0000438C 48837D1802              	cmp COUNT, 2
  6126 00004391 0F85B6060000            	jne L_error_arg_count_2
  6127 00004397 4C8B4520                	mov r8, PARAM(0)
  6128                                  	assert_integer(r8)
    53 0000439B 41803811            <1>  cmp byte [%1], %2
    54 0000439F 0F8547070000        <1>  jne L_error_incorrect_type
  6129 000043A5 4C8B4D28                	mov r9, PARAM(1)
  6130                                  	assert_integer(r9)
    53 000043A9 41803911            <1>  cmp byte [%1], %2
    54 000043AD 0F8539070000        <1>  jne L_error_incorrect_type
  6131 000043B3 498B7801                	mov rdi, qword [r8 + 1]
  6132 000043B7 493B7901                	cmp rdi, qword [r9 + 1]
  6133 000043BB 7D0C                    	jge .L_false
  6134 000043BD 48B8-                   	mov rax, sob_boolean_true
  6134 000043BF [0300000000000000] 
  6135 000043C7 EB0A                    	jmp .L_exit
  6136                                  .L_false:
  6137 000043C9 48B8-                   	mov rax, sob_boolean_false
  6137 000043CB [0200000000000000] 
  6138                                  .L_exit:
  6139 000043D3 C9                      	leave
  6140 000043D4 C22000                  	ret AND_KILL_FRAME(2)
  6141                                  
  6142                                  L_code_ptr_raw_less_than_qq:
  6143 000043D7 C8000000                        enter 0, 0
  6144 000043DB 48837D1802                      cmp COUNT, 2
  6145 000043E0 0F8567060000                    jne L_error_arg_count_2
  6146 000043E6 488B7520                        mov rsi, PARAM(0)
  6147                                          assert_fraction(rsi)
    53 000043EA 803E12              <1>  cmp byte [%1], %2
    54 000043ED 0F85F9060000        <1>  jne L_error_incorrect_type
  6148 000043F3 488B7D28                        mov rdi, PARAM(1)
  6149                                          assert_fraction(rdi)
    53 000043F7 803F12              <1>  cmp byte [%1], %2
    54 000043FA 0F85EC060000        <1>  jne L_error_incorrect_type
  6150 00004400 488B4601                        mov rax, qword [rsi + 1] ; num1
  6151 00004404 4899                            cqo
  6152 00004406 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  6153 0000440A 4889C1                          mov rcx, rax
  6154 0000440D 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  6155 00004411 4899                            cqo
  6156 00004413 48F76F01                        imul qword [rdi + 1]          ; num2
  6157 00004417 4829C1                          sub rcx, rax
  6158 0000441A 7D0C                            jge .L_false
  6159 0000441C 48B8-                           mov rax, sob_boolean_true
  6159 0000441E [0300000000000000] 
  6160 00004426 EB0A                            jmp .L_exit
  6161                                  .L_false:
  6162 00004428 48B8-                           mov rax, sob_boolean_false
  6162 0000442A [0200000000000000] 
  6163                                  .L_exit:
  6164 00004432 C9                              leave
  6165 00004433 C22000                          ret AND_KILL_FRAME(2)
  6166                                  
  6167                                  L_code_ptr_raw_equal_rr:
  6168 00004436 C8000000                        enter 0, 0
  6169 0000443A 48837D1802                      cmp COUNT, 2
  6170 0000443F 0F8508060000                    jne L_error_arg_count_2
  6171 00004445 488B7520                        mov rsi, PARAM(0)
  6172                                          assert_real(rsi)
    53 00004449 803E13              <1>  cmp byte [%1], %2
    54 0000444C 0F859A060000        <1>  jne L_error_incorrect_type
  6173 00004452 488B7D28                        mov rdi, PARAM(1)
  6174                                          assert_real(rdi)
    53 00004456 803F13              <1>  cmp byte [%1], %2
    54 00004459 0F858D060000        <1>  jne L_error_incorrect_type
  6175 0000445F F20F104601                      movsd xmm0, qword [rsi + 1]
  6176 00004464 F20F104F01                      movsd xmm1, qword [rdi + 1]
  6177 00004469 660F2FC1                        comisd xmm0, xmm1
  6178 0000446D 750C                            jne .L_false
  6179 0000446F 48B8-                           mov rax, sob_boolean_true
  6179 00004471 [0300000000000000] 
  6180 00004479 EB0A                            jmp .L_exit
  6181                                  .L_false:
  6182 0000447B 48B8-                           mov rax, sob_boolean_false
  6182 0000447D [0200000000000000] 
  6183                                  .L_exit:
  6184 00004485 C9                              leave
  6185 00004486 C22000                          ret AND_KILL_FRAME(2)
  6186                                          
  6187                                  L_code_ptr_raw_equal_zz:
  6188 00004489 C8000000                	enter 0, 0
  6189 0000448D 48837D1802              	cmp COUNT, 2
  6190 00004492 0F85B5050000            	jne L_error_arg_count_2
  6191 00004498 4C8B4520                	mov r8, PARAM(0)
  6192                                  	assert_integer(r8)
    53 0000449C 41803811            <1>  cmp byte [%1], %2
    54 000044A0 0F8546060000        <1>  jne L_error_incorrect_type
  6193 000044A6 4C8B4D28                	mov r9, PARAM(1)
  6194                                  	assert_integer(r9)
    53 000044AA 41803911            <1>  cmp byte [%1], %2
    54 000044AE 0F8538060000        <1>  jne L_error_incorrect_type
  6195 000044B4 498B7801                	mov rdi, qword [r8 + 1]
  6196 000044B8 493B7901                	cmp rdi, qword [r9 + 1]
  6197 000044BC 750C                    	jne .L_false
  6198 000044BE 48B8-                   	mov rax, sob_boolean_true
  6198 000044C0 [0300000000000000] 
  6199 000044C8 EB0A                    	jmp .L_exit
  6200                                  .L_false:
  6201 000044CA 48B8-                   	mov rax, sob_boolean_false
  6201 000044CC [0200000000000000] 
  6202                                  .L_exit:
  6203 000044D4 C9                      	leave
  6204 000044D5 C22000                  	ret AND_KILL_FRAME(2)
  6205                                  
  6206                                  L_code_ptr_raw_equal_qq:
  6207 000044D8 C8000000                        enter 0, 0
  6208 000044DC 48837D1802                      cmp COUNT, 2
  6209 000044E1 0F8566050000                    jne L_error_arg_count_2
  6210 000044E7 488B7520                        mov rsi, PARAM(0)
  6211                                          assert_fraction(rsi)
    53 000044EB 803E12              <1>  cmp byte [%1], %2
    54 000044EE 0F85F8050000        <1>  jne L_error_incorrect_type
  6212 000044F4 488B7D28                        mov rdi, PARAM(1)
  6213                                          assert_fraction(rdi)
    53 000044F8 803F12              <1>  cmp byte [%1], %2
    54 000044FB 0F85EB050000        <1>  jne L_error_incorrect_type
  6214 00004501 488B4601                        mov rax, qword [rsi + 1] ; num1
  6215 00004505 4899                            cqo
  6216 00004507 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  6217 0000450B 4889C1                          mov rcx, rax
  6218 0000450E 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  6219 00004512 4899                            cqo
  6220 00004514 48F76F01                        imul qword [rdi + 1]          ; num2
  6221 00004518 4829C1                          sub rcx, rax
  6222 0000451B 750C                            jne .L_false
  6223 0000451D 48B8-                           mov rax, sob_boolean_true
  6223 0000451F [0300000000000000] 
  6224 00004527 EB0A                            jmp .L_exit
  6225                                  .L_false:
  6226 00004529 48B8-                           mov rax, sob_boolean_false
  6226 0000452B [0200000000000000] 
  6227                                  .L_exit:
  6228 00004533 C9                              leave
  6229 00004534 C22000                          ret AND_KILL_FRAME(2)
  6230                                  
  6231                                  L_code_ptr_quotient:
  6232 00004537 C8000000                        enter 0, 0
  6233 0000453B 48837D1802                      cmp COUNT, 2
  6234 00004540 0F8507050000                    jne L_error_arg_count_2
  6235 00004546 488B7520                        mov rsi, PARAM(0)
  6236                                          assert_integer(rsi)
    53 0000454A 803E11              <1>  cmp byte [%1], %2
    54 0000454D 0F8599050000        <1>  jne L_error_incorrect_type
  6237 00004553 488B7D28                        mov rdi, PARAM(1)
  6238                                          assert_integer(rdi)
    53 00004557 803F11              <1>  cmp byte [%1], %2
    54 0000455A 0F858C050000        <1>  jne L_error_incorrect_type
  6239 00004560 488B4601                        mov rax, qword [rsi + 1]
  6240 00004564 488B5F01                        mov rbx, qword [rdi + 1]
  6241 00004568 4883FB00                        cmp rbx, 0
  6242 0000456C 0F84AB050000                    je L_error_division_by_zero
  6243 00004572 4899                            cqo
  6244 00004574 48F7FB                          idiv rbx
  6245 00004577 4889C7                          mov rdi, rax
  6246 0000457A E8E8030000                      call make_integer
  6247 0000457F C9                              leave
  6248 00004580 C22000                          ret AND_KILL_FRAME(2)
  6249                                          
  6250                                  L_code_ptr_remainder:
  6251 00004583 C8000000                        enter 0, 0
  6252 00004587 48837D1802                      cmp COUNT, 2
  6253 0000458C 0F85BB040000                    jne L_error_arg_count_2
  6254 00004592 488B7520                        mov rsi, PARAM(0)
  6255                                          assert_integer(rsi)
    53 00004596 803E11              <1>  cmp byte [%1], %2
    54 00004599 0F854D050000        <1>  jne L_error_incorrect_type
  6256 0000459F 488B7D28                        mov rdi, PARAM(1)
  6257                                          assert_integer(rdi)
    53 000045A3 803F11              <1>  cmp byte [%1], %2
    54 000045A6 0F8540050000        <1>  jne L_error_incorrect_type
  6258 000045AC 488B4601                        mov rax, qword [rsi + 1]
  6259 000045B0 488B5F01                        mov rbx, qword [rdi + 1]
  6260 000045B4 4883FB00                        cmp rbx, 0
  6261 000045B8 0F845F050000                    je L_error_division_by_zero
  6262 000045BE 4899                            cqo
  6263 000045C0 48F7FB                          idiv rbx
  6264 000045C3 4889D7                          mov rdi, rdx
  6265 000045C6 E89C030000                      call make_integer
  6266 000045CB C9                              leave
  6267 000045CC C22000                          ret AND_KILL_FRAME(2)
  6268                                  
  6269                                  L_code_ptr_set_car:
  6270 000045CF C8000000                        enter 0, 0
  6271 000045D3 48837D1802                      cmp COUNT, 2
  6272 000045D8 0F856F040000                    jne L_error_arg_count_2
  6273 000045DE 488B4520                        mov rax, PARAM(0)
  6274                                          assert_pair(rax)
    53 000045E2 803821              <1>  cmp byte [%1], %2
    54 000045E5 0F8501050000        <1>  jne L_error_incorrect_type
  6275 000045EB 488B5D28                        mov rbx, PARAM(1)
  6276 000045EF 48895801                        mov SOB_PAIR_CAR(rax), rbx
  6277 000045F3 48B8-                           mov rax, sob_void
  6277 000045F5 [0000000000000000] 
  6278 000045FD C9                              leave
  6279 000045FE C22000                          ret AND_KILL_FRAME(2)
  6280                                  
  6281                                  L_code_ptr_set_cdr:
  6282 00004601 C8000000                        enter 0, 0
  6283 00004605 48837D1802                      cmp COUNT, 2
  6284 0000460A 0F853D040000                    jne L_error_arg_count_2
  6285 00004610 488B4520                        mov rax, PARAM(0)
  6286                                          assert_pair(rax)
    53 00004614 803821              <1>  cmp byte [%1], %2
    54 00004617 0F85CF040000        <1>  jne L_error_incorrect_type
  6287 0000461D 488B5D28                        mov rbx, PARAM(1)
  6288 00004621 48895809                        mov SOB_PAIR_CDR(rax), rbx
  6289 00004625 48B8-                           mov rax, sob_void
  6289 00004627 [0000000000000000] 
  6290 0000462F C9                              leave
  6291 00004630 C22000                          ret AND_KILL_FRAME(2)
  6292                                  
  6293                                  L_code_ptr_string_ref:
  6294 00004633 C8000000                        enter 0, 0
  6295 00004637 48837D1802                      cmp COUNT, 2
  6296 0000463C 0F850B040000                    jne L_error_arg_count_2
  6297 00004642 488B7D20                        mov rdi, PARAM(0)
  6298                                          assert_string(rdi)
    53 00004646 803F03              <1>  cmp byte [%1], %2
    54 00004649 0F859D040000        <1>  jne L_error_incorrect_type
  6299 0000464F 488B7528                        mov rsi, PARAM(1)
  6300                                          assert_integer(rsi)
    53 00004653 803E11              <1>  cmp byte [%1], %2
    54 00004656 0F8590040000        <1>  jne L_error_incorrect_type
  6301 0000465C 488B5701                        mov rdx, qword [rdi + 1]
  6302 00004660 488B4E01                        mov rcx, qword [rsi + 1]
  6303 00004664 4839D1                          cmp rcx, rdx
  6304 00004667 0F8D14030000                    jge L_error_integer_range
  6305 0000466D 4883F900                        cmp rcx, 0
  6306 00004671 0F8C0A030000                    jl L_error_integer_range
  6307 00004677 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  6308 0000467B BF02000000                      mov rdi, 2
  6309 00004680 E8EBE6FFFF                      call malloc
  6310 00004685 C60002                          mov byte [rax], T_char
  6311 00004688 885801                          mov byte [rax + 1], bl
  6312 0000468B C9                              leave
  6313 0000468C C22000                          ret AND_KILL_FRAME(2)
  6314                                  
  6315                                  L_code_ptr_vector_ref:
  6316 0000468F C8000000                        enter 0, 0
  6317 00004693 48837D1802                      cmp COUNT, 2
  6318 00004698 0F85AF030000                    jne L_error_arg_count_2
  6319 0000469E 488B7D20                        mov rdi, PARAM(0)
  6320                                          assert_vector(rdi)
    53 000046A2 803F22              <1>  cmp byte [%1], %2
    54 000046A5 0F8541040000        <1>  jne L_error_incorrect_type
  6321 000046AB 488B7528                        mov rsi, PARAM(1)
  6322                                          assert_integer(rsi)
    53 000046AF 803E11              <1>  cmp byte [%1], %2
    54 000046B2 0F8534040000        <1>  jne L_error_incorrect_type
  6323 000046B8 488B5701                        mov rdx, qword [rdi + 1]
  6324 000046BC 488B4E01                        mov rcx, qword [rsi + 1]
  6325 000046C0 4839D1                          cmp rcx, rdx
  6326 000046C3 0F8DB8020000                    jge L_error_integer_range
  6327 000046C9 4883F900                        cmp rcx, 0
  6328 000046CD 0F8CAE020000                    jl L_error_integer_range
  6329 000046D3 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  6330 000046D8 C9                              leave
  6331 000046D9 C22000                          ret AND_KILL_FRAME(2)
  6332                                  
  6333                                  L_code_ptr_vector_set:
  6334 000046DC C8000000                        enter 0, 0
  6335 000046E0 48837D1803                      cmp COUNT, 3
  6336 000046E5 0F85CC030000                    jne L_error_arg_count_3
  6337 000046EB 488B7D20                        mov rdi, PARAM(0)
  6338                                          assert_vector(rdi)
    53 000046EF 803F22              <1>  cmp byte [%1], %2
    54 000046F2 0F85F4030000        <1>  jne L_error_incorrect_type
  6339 000046F8 488B7528                        mov rsi, PARAM(1)
  6340                                          assert_integer(rsi)
    53 000046FC 803E11              <1>  cmp byte [%1], %2
    54 000046FF 0F85E7030000        <1>  jne L_error_incorrect_type
  6341 00004705 488B5701                        mov rdx, qword [rdi + 1]
  6342 00004709 488B4E01                        mov rcx, qword [rsi + 1]
  6343 0000470D 4839D1                          cmp rcx, rdx
  6344 00004710 0F8D6B020000                    jge L_error_integer_range
  6345 00004716 4883F900                        cmp rcx, 0
  6346 0000471A 0F8C61020000                    jl L_error_integer_range
  6347 00004720 488B4530                        mov rax, PARAM(2)
  6348 00004724 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  6349 00004729 48B8-                           mov rax, sob_void
  6349 0000472B [0000000000000000] 
  6350 00004733 C9                              leave
  6351 00004734 C22800                          ret AND_KILL_FRAME(3)
  6352                                  
  6353                                  L_code_ptr_string_set:
  6354 00004737 C8000000                        enter 0, 0
  6355 0000473B 48837D1803                      cmp COUNT, 3
  6356 00004740 0F8571030000                    jne L_error_arg_count_3
  6357 00004746 488B7D20                        mov rdi, PARAM(0)
  6358                                          assert_string(rdi)
    53 0000474A 803F03              <1>  cmp byte [%1], %2
    54 0000474D 0F8599030000        <1>  jne L_error_incorrect_type
  6359 00004753 488B7528                        mov rsi, PARAM(1)
  6360                                          assert_integer(rsi)
    53 00004757 803E11              <1>  cmp byte [%1], %2
    54 0000475A 0F858C030000        <1>  jne L_error_incorrect_type
  6361 00004760 488B5701                        mov rdx, qword [rdi + 1]
  6362 00004764 488B4E01                        mov rcx, qword [rsi + 1]
  6363 00004768 4839D1                          cmp rcx, rdx
  6364 0000476B 0F8D10020000                    jge L_error_integer_range
  6365 00004771 4883F900                        cmp rcx, 0
  6366 00004775 0F8C06020000                    jl L_error_integer_range
  6367 0000477B 488B4530                        mov rax, PARAM(2)
  6368                                          assert_char(rax)
    53 0000477F 803802              <1>  cmp byte [%1], %2
    54 00004782 0F8564030000        <1>  jne L_error_incorrect_type
  6369 00004788 8A4001                          mov al, byte [rax + 1]
  6370 0000478B 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  6371 0000478F 48B8-                           mov rax, sob_void
  6371 00004791 [0000000000000000] 
  6372 00004799 C9                              leave
  6373 0000479A C22800                          ret AND_KILL_FRAME(3)
  6374                                  
  6375                                  L_code_ptr_make_vector:
  6376 0000479D C8000000                        enter 0, 0
  6377 000047A1 48837D1802                      cmp COUNT, 2
  6378 000047A6 0F85A1020000                    jne L_error_arg_count_2
  6379 000047AC 488B4D20                        mov rcx, PARAM(0)
  6380                                          assert_integer(rcx)
    53 000047B0 803911              <1>  cmp byte [%1], %2
    54 000047B3 0F8533030000        <1>  jne L_error_incorrect_type
  6381 000047B9 488B4901                        mov rcx, qword [rcx + 1]
  6382 000047BD 4883F900                        cmp rcx, 0
  6383 000047C1 0F8CBA010000                    jl L_error_integer_range
  6384 000047C7 488B5528                        mov rdx, PARAM(1)
  6385 000047CB 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  6386 000047D3 E898E5FFFF                      call malloc
  6387 000047D8 C60022                          mov byte [rax], T_vector
  6388 000047DB 48894801                        mov qword [rax + 1], rcx
  6389 000047DF 41B800000000                    mov r8, 0
  6390                                  .L0:
  6391 000047E5 4939C8                          cmp r8, rcx
  6392 000047E8 740A                            je .L1
  6393 000047EA 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  6394 000047EF 49FFC0                          inc r8
  6395 000047F2 EBF1                            jmp .L0
  6396                                  .L1:
  6397 000047F4 C9                              leave
  6398 000047F5 C22000                          ret AND_KILL_FRAME(2)
  6399                                          
  6400                                  L_code_ptr_make_string:
  6401 000047F8 C8000000                        enter 0, 0
  6402 000047FC 48837D1802                      cmp COUNT, 2
  6403 00004801 0F8546020000                    jne L_error_arg_count_2
  6404 00004807 488B4D20                        mov rcx, PARAM(0)
  6405                                          assert_integer(rcx)
    53 0000480B 803911              <1>  cmp byte [%1], %2
    54 0000480E 0F85D8020000        <1>  jne L_error_incorrect_type
  6406 00004814 488B4901                        mov rcx, qword [rcx + 1]
  6407 00004818 4883F900                        cmp rcx, 0
  6408 0000481C 0F8C5F010000                    jl L_error_integer_range
  6409 00004822 488B5528                        mov rdx, PARAM(1)
  6410                                          assert_char(rdx)
    53 00004826 803A02              <1>  cmp byte [%1], %2
    54 00004829 0F85BD020000        <1>  jne L_error_incorrect_type
  6411 0000482F 8A5201                          mov dl, byte [rdx + 1]
  6412 00004832 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  6413 00004836 E835E5FFFF                      call malloc
  6414 0000483B C60003                          mov byte [rax], T_string
  6415 0000483E 48894801                        mov qword [rax + 1], rcx
  6416 00004842 41B800000000                    mov r8, 0
  6417                                  .L0:
  6418 00004848 4939C8                          cmp r8, rcx
  6419 0000484B 740A                            je .L1
  6420 0000484D 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  6421 00004852 49FFC0                          inc r8
  6422 00004855 EBF1                            jmp .L0
  6423                                  .L1:
  6424 00004857 C9                              leave
  6425 00004858 C22000                          ret AND_KILL_FRAME(2)
  6426                                  
  6427                                  L_code_ptr_numerator:
  6428 0000485B C8000000                        enter 0, 0
  6429 0000485F 48837D1801                      cmp COUNT, 1
  6430 00004864 0F85AE010000                    jne L_error_arg_count_1
  6431 0000486A 488B4520                        mov rax, PARAM(0)
  6432                                          assert_fraction(rax)
    53 0000486E 803812              <1>  cmp byte [%1], %2
    54 00004871 0F8575020000        <1>  jne L_error_incorrect_type
  6433 00004877 488B7801                        mov rdi, qword [rax + 1]
  6434 0000487B E8E7000000                      call make_integer
  6435 00004880 C9                              leave
  6436 00004881 C21800                          ret AND_KILL_FRAME(1)
  6437                                          
  6438                                  L_code_ptr_denominator:
  6439 00004884 C8000000                        enter 0, 0
  6440 00004888 48837D1801                      cmp COUNT, 1
  6441 0000488D 0F8585010000                    jne L_error_arg_count_1
  6442 00004893 488B4520                        mov rax, PARAM(0)
  6443                                          assert_fraction(rax)
    53 00004897 803812              <1>  cmp byte [%1], %2
    54 0000489A 0F854C020000        <1>  jne L_error_incorrect_type
  6444 000048A0 488B7809                        mov rdi, qword [rax + 1 + 8]
  6445 000048A4 E8BE000000                      call make_integer
  6446 000048A9 C9                              leave
  6447 000048AA C21800                          ret AND_KILL_FRAME(1)
  6448                                  
  6449                                  L_code_ptr_is_eq:
  6450 000048AD C8000000                	enter 0, 0
  6451 000048B1 48837D1802              	cmp COUNT, 2
  6452 000048B6 0F8591010000            	jne L_error_arg_count_2
  6453 000048BC 488B7D20                	mov rdi, PARAM(0)
  6454 000048C0 488B7528                	mov rsi, PARAM(1)
  6455 000048C4 4839F7                  	cmp rdi, rsi
  6456 000048C7 746C                    	je .L_eq_true
  6457 000048C9 8A17                    	mov dl, byte [rdi]
  6458 000048CB 3A16                    	cmp dl, byte [rsi]
  6459 000048CD 7572                    	jne .L_eq_false
  6460 000048CF 80FA02                  	cmp dl, T_char
  6461 000048D2 7459                    	je .L_char
  6462 000048D4 80FA41                  	cmp dl, T_interned_symbol
  6463 000048D7 7440                    	je .L_interned_symbol
  6464 000048D9 80FA42                          cmp dl, T_uninterned_symbol
  6465 000048DC 7443                            je .L_uninterned_symbol
  6466 000048DE 80FA13                  	cmp dl, T_real
  6467 000048E1 742E                    	je .L_real
  6468 000048E3 80FA12                  	cmp dl, T_fraction
  6469 000048E6 7413                    	je .L_fraction
  6470 000048E8 80FA11                          cmp dl, T_integer
  6471 000048EB 7402                            je .L_integer
  6472 000048ED EB52                    	jmp .L_eq_false
  6473                                  .L_integer:
  6474 000048EF 488B4601                        mov rax, qword [rsi + 1]
  6475 000048F3 483B4701                        cmp rax, qword [rdi + 1]
  6476 000048F7 7548                            jne .L_eq_false
  6477 000048F9 EB3A                            jmp .L_eq_true
  6478                                  .L_fraction:
  6479 000048FB 488B4601                	mov rax, qword [rsi + 1]
  6480 000048FF 483B4701                	cmp rax, qword [rdi + 1]
  6481 00004903 753C                    	jne .L_eq_false
  6482 00004905 488B4609                	mov rax, qword [rsi + 1 + 8]
  6483 00004909 483B4709                	cmp rax, qword [rdi + 1 + 8]
  6484 0000490D 7532                    	jne .L_eq_false
  6485 0000490F EB24                    	jmp .L_eq_true
  6486                                  .L_real:
  6487 00004911 488B4601                	mov rax, qword [rsi + 1]
  6488 00004915 483B4701                	cmp rax, qword [rdi + 1]
  6489                                  .L_interned_symbol:
  6490                                  	; never reached, because interned_symbols are static!
  6491                                  	; but I'm keeping it in case, I'll ever change
  6492                                  	; the implementation
  6493 00004919 488B4601                	mov rax, qword [rsi + 1]
  6494 0000491D 483B4701                	cmp rax, qword [rdi + 1]
  6495                                  .L_uninterned_symbol:
  6496 00004921 4C8B4701                        mov r8, qword [rdi + 1]
  6497 00004925 4C3B4601                        cmp r8, qword [rsi + 1]
  6498 00004929 7516                            jne .L_eq_false
  6499 0000492B EB08                            jmp .L_eq_true
  6500                                  .L_char:
  6501 0000492D 8A5E01                  	mov bl, byte [rsi + 1]
  6502 00004930 3A5F01                  	cmp bl, byte [rdi + 1]
  6503 00004933 750C                    	jne .L_eq_false
  6504                                  .L_eq_true:
  6505 00004935 48B8-                   	mov rax, sob_boolean_true
  6505 00004937 [0300000000000000] 
  6506 0000493F EB0A                    	jmp .L_eq_exit
  6507                                  .L_eq_false:
  6508 00004941 48B8-                   	mov rax, sob_boolean_false
  6508 00004943 [0200000000000000] 
  6509                                  .L_eq_exit:
  6510 0000494B C9                      	leave
  6511 0000494C C22000                  	ret AND_KILL_FRAME(2)
  6512                                  
  6513                                  make_real:
  6514 0000494F C8000000                        enter 0, 0
  6515 00004953 BF09000000                      mov rdi, (1 + 8)
  6516 00004958 E813E4FFFF                      call malloc
  6517 0000495D C60013                          mov byte [rax], T_real
  6518 00004960 F20F114001                      movsd qword [rax + 1], xmm0
  6519 00004965 C9                              leave 
  6520 00004966 C3                              ret
  6521                                          
  6522                                  make_integer:
  6523 00004967 C8000000                        enter 0, 0
  6524 0000496B 4889FE                          mov rsi, rdi
  6525 0000496E BF09000000                      mov rdi, (1 + 8)
  6526 00004973 E8F8E3FFFF                      call malloc
  6527 00004978 C60011                          mov byte [rax], T_integer
  6528 0000497B 48897001                        mov qword [rax + 1], rsi
  6529 0000497F C9                              leave
  6530 00004980 C3                              ret
  6531                                          
  6532                                  L_error_integer_range:
  6533 00004981 488B3C25[00000000]              mov rdi, qword [stderr]
  6534 00004989 48BE-                           mov rsi, fmt_integer_range
  6534 0000498B [180F000000000000] 
  6535 00004993 B800000000                      mov rax, 0
  6536                                          ENTER
    44 00004998 C8000000            <1>  enter 0, 0
    45 0000499C 4883E4F0            <1>  and rsp, ~15
  6537 000049A0 E8(00000000)                    call fprintf
  6538                                          LEAVE
    49 000049A5 C9                  <1>  leave
  6539 000049A6 48C7C0FBFFFFFF                  mov rax, -5
  6540 000049AD E8(00000000)                    call exit
  6541                                  
  6542                                  L_error_arg_negative:
  6543 000049B2 488B3C25[00000000]              mov rdi, qword [stderr]
  6544 000049BA 48BE-                           mov rsi, fmt_arg_negative
  6544 000049BC [F00D000000000000] 
  6545 000049C4 B800000000                      mov rax, 0
  6546                                          ENTER
    44 000049C9 C8000000            <1>  enter 0, 0
    45 000049CD 4883E4F0            <1>  and rsp, ~15
  6547 000049D1 E8(00000000)                    call fprintf
  6548                                          LEAVE
    49 000049D6 C9                  <1>  leave
  6549 000049D7 48C7C0FDFFFFFF                  mov rax, -3
  6550 000049DE E8(00000000)                    call exit
  6551                                  
  6552                                  L_error_arg_count_0:
  6553 000049E3 488B3C25[00000000]              mov rdi, qword [stderr]
  6554 000049EB 48BE-                           mov rsi, fmt_arg_count_0
  6554 000049ED [160E000000000000] 
  6555 000049F5 488B5518                        mov rdx, COUNT
  6556 000049F9 B800000000                      mov rax, 0
  6557                                          ENTER
    44 000049FE C8000000            <1>  enter 0, 0
    45 00004A02 4883E4F0            <1>  and rsp, ~15
  6558 00004A06 E8(00000000)                    call fprintf
  6559                                          LEAVE
    49 00004A0B C9                  <1>  leave
  6560 00004A0C 48C7C0FDFFFFFF                  mov rax, -3
  6561 00004A13 E8(00000000)                    call exit
  6562                                  
  6563                                  L_error_arg_count_1:
  6564 00004A18 488B3C25[00000000]              mov rdi, qword [stderr]
  6565 00004A20 48BE-                           mov rsi, fmt_arg_count_1
  6565 00004A22 [3E0E000000000000] 
  6566 00004A2A 488B5518                        mov rdx, COUNT
  6567 00004A2E B800000000                      mov rax, 0
  6568                                          ENTER
    44 00004A33 C8000000            <1>  enter 0, 0
    45 00004A37 4883E4F0            <1>  and rsp, ~15
  6569 00004A3B E8(00000000)                    call fprintf
  6570                                          LEAVE
    49 00004A40 C9                  <1>  leave
  6571 00004A41 48C7C0FDFFFFFF                  mov rax, -3
  6572 00004A48 E8(00000000)                    call exit
  6573                                  
  6574                                  L_error_arg_count_2:
  6575 00004A4D 488B3C25[00000000]              mov rdi, qword [stderr]
  6576 00004A55 48BE-                           mov rsi, fmt_arg_count_2
  6576 00004A57 [A40E000000000000] 
  6577 00004A5F 488B5518                        mov rdx, COUNT
  6578 00004A63 B800000000                      mov rax, 0
  6579                                          ENTER
    44 00004A68 C8000000            <1>  enter 0, 0
    45 00004A6C 4883E4F0            <1>  and rsp, ~15
  6580 00004A70 E8(00000000)                    call fprintf
  6581                                          LEAVE
    49 00004A75 C9                  <1>  leave
  6582 00004A76 48C7C0FDFFFFFF                  mov rax, -3
  6583 00004A7D E8(00000000)                    call exit
  6584                                  
  6585                                  L_error_arg_count_12:
  6586 00004A82 488B3C25[00000000]              mov rdi, qword [stderr]
  6587 00004A8A 48BE-                           mov rsi, fmt_arg_count_12
  6587 00004A8C [640E000000000000] 
  6588 00004A94 488B5518                        mov rdx, COUNT
  6589 00004A98 B800000000                      mov rax, 0
  6590                                          ENTER
    44 00004A9D C8000000            <1>  enter 0, 0
    45 00004AA1 4883E4F0            <1>  and rsp, ~15
  6591 00004AA5 E8(00000000)                    call fprintf
  6592                                          LEAVE
    49 00004AAA C9                  <1>  leave
  6593 00004AAB 48C7C0FDFFFFFF                  mov rax, -3
  6594 00004AB2 E8(00000000)                    call exit
  6595                                  
  6596                                  L_error_arg_count_3:
  6597 00004AB7 488B3C25[00000000]              mov rdi, qword [stderr]
  6598 00004ABF 48BE-                           mov rsi, fmt_arg_count_3
  6598 00004AC1 [CB0E000000000000] 
  6599 00004AC9 488B5518                        mov rdx, COUNT
  6600 00004ACD B800000000                      mov rax, 0
  6601                                          ENTER
    44 00004AD2 C8000000            <1>  enter 0, 0
    45 00004AD6 4883E4F0            <1>  and rsp, ~15
  6602 00004ADA E8(00000000)                    call fprintf
  6603                                          LEAVE
    49 00004ADF C9                  <1>  leave
  6604 00004AE0 48C7C0FDFFFFFF                  mov rax, -3
  6605 00004AE7 E8(00000000)                    call exit
  6606                                          
  6607                                  L_error_incorrect_type:
  6608 00004AEC 488B3C25[00000000]              mov rdi, qword [stderr]
  6609 00004AF4 48BE-                           mov rsi, fmt_type
  6609 00004AF6 [F40E000000000000] 
  6610 00004AFE B800000000                      mov rax, 0
  6611                                          ENTER
    44 00004B03 C8000000            <1>  enter 0, 0
    45 00004B07 4883E4F0            <1>  and rsp, ~15
  6612 00004B0B E8(00000000)                    call fprintf
  6613                                          LEAVE
    49 00004B10 C9                  <1>  leave
  6614 00004B11 48C7C0FCFFFFFF                  mov rax, -4
  6615 00004B18 E8(00000000)                    call exit
  6616                                  
  6617                                  L_error_division_by_zero:
  6618 00004B1D 488B3C25[00000000]              mov rdi, qword [stderr]
  6619 00004B25 48BE-                           mov rsi, fmt_division_by_zero
  6619 00004B27 [350F000000000000] 
  6620 00004B2F B800000000                      mov rax, 0
  6621                                          ENTER
    44 00004B34 C8000000            <1>  enter 0, 0
    45 00004B38 4883E4F0            <1>  and rsp, ~15
  6622 00004B3C E8(00000000)                    call fprintf
  6623                                          LEAVE
    49 00004B41 C9                  <1>  leave
  6624 00004B42 48C7C0F8FFFFFF                  mov rax, -8
  6625 00004B49 E8(00000000)                    call exit
  6626                                  
  6627                                  section .data
  6628                                  gensym_count:
  6629 00000DE5 0000000000000000                dq 0
  6630                                  fmt_char:
  6631 00000DED 256300                          db `%c\0`
  6632                                  fmt_arg_negative:
  6633 00000DF0 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  6633 00000DF9 7267756D656E742063-
  6633 00000E02 616E6E6F7420626520-
  6633 00000E0B 6E656761746976652E-
  6633 00000E14 0A00               
  6634                                  fmt_arg_count_0:
  6635 00000E16 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  6635 00000E1F 74696E67207A65726F-
  6635 00000E28 20617267756D656E74-
  6635 00000E31 732E20466F756E6420-
  6635 00000E3A 25640A00           
  6636                                  fmt_arg_count_1:
  6637 00000E3E 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  6637 00000E47 74696E67206F6E6520-
  6637 00000E50 617267756D656E742E-
  6637 00000E59 20466F756E64202564-
  6637 00000E62 0A00               
  6638                                  fmt_arg_count_12:
  6639 00000E64 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  6639 00000E6D 74696E67206F6E6520-
  6639 00000E76 726571756972656420-
  6639 00000E7F 616E64206F6E65206F-
  6639 00000E88 7074696F6E616C2061-
  6639 00000E91 7267756D656E742E20-
  6639 00000E9A 466F756E642025640A-
  6639 00000EA3 00                 
  6640                                  fmt_arg_count_2:
  6641 00000EA4 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  6641 00000EAD 74696E672074776F20-
  6641 00000EB6 617267756D656E7473-
  6641 00000EBF 2E20466F756E642025-
  6641 00000EC8 640A00             
  6642                                  fmt_arg_count_3:
  6643 00000ECB 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  6643 00000ED4 74696E672074687265-
  6643 00000EDD 6520617267756D656E-
  6643 00000EE6 74732E20466F756E64-
  6643 00000EEF 2025640A00         
  6644                                  fmt_type:
  6645 00000EF4 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  6645 00000EFD 696F6E207061737365-
  6645 00000F06 6420696E636F727265-
  6645 00000F0F 637420747970650A00 
  6646                                  fmt_integer_range:
  6647 00000F18 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  6647 00000F21 7265637420696E7465-
  6647 00000F2A 6765722072616E6765-
  6647 00000F33 0A00               
  6648                                  fmt_division_by_zero:
  6649 00000F35 212121204469766973-             db `!!! Division by zero\n\0`
  6649 00000F3E 696F6E206279207A65-
  6649 00000F47 726F0A00           
  6650                                  fmt_scheme_error_part_1:
  6651 00000F4B 0A2121212054686520-             db `\n!!! The procedure \0`
  6651 00000F54 70726F636564757265-
  6651 00000F5D 2000               
  6652                                  fmt_scheme_error_part_2:
  6653 00000F5F 2061736B656420746F-             db ` asked to terminate the program\n`
  6653 00000F68 207465726D696E6174-
  6653 00000F71 65207468652070726F-
  6653 00000F7A 6772616D0A         
  6654 00000F7F 202020207769746820-             db `    with the following message:\n\n\0`
  6654 00000F88 74686520666F6C6C6F-
  6654 00000F91 77696E67206D657373-
  6654 00000F9A 6167653A0A0A00     
  6655                                  fmt_scheme_error_part_3:
  6656 00000FA1 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  6656 00000FAA 210A0A00           
