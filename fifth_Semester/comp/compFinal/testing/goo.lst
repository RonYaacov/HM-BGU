     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "free_var"
   469 000005DE 0800000000000000        	dq 8
   470 000005E6 667265655F766172        	db 0x66, 0x72, 0x65, 0x65, 0x5F, 0x76, 0x61, 0x72
   471                                  	; L_constants + 1518:
   472 000005EE 11                      	db T_integer	; 2
   473 000005EF 0200000000000000        	dq 2
   474                                  	; L_constants + 1527:
   475 000005F7 03                      	db T_string	; "tail_lambda"
   476 000005F8 0B00000000000000        	dq 11
   477 00000600 7461696C5F6C616D        	db 0x74, 0x61, 0x69, 0x6C, 0x5F, 0x6C, 0x61, 0x6D
   478 00000608 626461                  	db 0x62, 0x64, 0x61
   479                                  	; L_constants + 1547:
   480 0000060B 03                      	db T_string	; "arg_lambda"
   481 0000060C 0A00000000000000        	dq 10
   482 00000614 6172675F6C616D62        	db 0x61, 0x72, 0x67, 0x5F, 0x6C, 0x61, 0x6D, 0x62
   483 0000061C 6461                    	db 0x64, 0x61
   484                                  	; L_constants + 1566:
   485 0000061E 03                      	db T_string	; "free_var_lambda"
   486 0000061F 0F00000000000000        	dq 15
   487 00000627 667265655F766172        	db 0x66, 0x72, 0x65, 0x65, 0x5F, 0x76, 0x61, 0x72
   488 0000062F 5F6C616D626461          	db 0x5F, 0x6C, 0x61, 0x6D, 0x62, 0x64, 0x61
   489                                  free_var_0:	; location of arg_lambda
   490 00000636 [3E06000000000000]      	dq .undefined_object
   491                                  .undefined_object:
   492 0000063E 05                      	db T_undefined
   493 0000063F [0B06000000000000]      	dq L_constants + 1547
   494                                  
   495                                  free_var_1:	; location of free_var
   496 00000647 [4F06000000000000]      	dq .undefined_object
   497                                  .undefined_object:
   498 0000064F 05                      	db T_undefined
   499 00000650 [DD05000000000000]      	dq L_constants + 1501
   500                                  
   501                                  free_var_2:	; location of free_var_lambda
   502 00000658 [6006000000000000]      	dq .undefined_object
   503                                  .undefined_object:
   504 00000660 05                      	db T_undefined
   505 00000661 [1E06000000000000]      	dq L_constants + 1566
   506                                  
   507                                  free_var_3:	; location of tail_lambda
   508 00000669 [7106000000000000]      	dq .undefined_object
   509                                  .undefined_object:
   510 00000671 05                      	db T_undefined
   511 00000672 [F705000000000000]      	dq L_constants + 1527
   512                                  
   513                                  
   514                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   515                                  global main
   516                                  section .text
   517                                  main:
   518 00000000 C8000000                        enter 0, 0
   519 00000004 6A00                            push 0
   520 00000006 6A00                            push 0
   521 00000008 68[BE020000]                    push Lend
   522 0000000D C8000000                        enter 0, 0
   523                                  
   524 00000011 48B8-                   	mov rax, L_constants + 1518
   524 00000013 [EE05000000000000] 
   525 0000001B 48890425[47060000]      	mov qword [free_var_1], rax
   526 00000023 48B8-                   	mov rax, sob_void
   526 00000025 [0000000000000000] 
   527                                  
   528 0000002D 4889C7                  	mov rdi, rax
   529 00000030 E849060000              	call print_sexpr_if_not_void
   530 00000035 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   531 0000003A E8EA030000              	call malloc
   532 0000003F 50                      	push rax
   533 00000040 BF00000000              	mov rdi, 8 * 0	; new rib
   534 00000045 E8DF030000              	call malloc
   535 0000004A 50                      	push rax
   536 0000004B BF08000000              	mov rdi, 8 * 1	; extended env
   537 00000050 E8D4030000              	call malloc
   538 00000055 488B7D10                	mov rdi, ENV
   539 00000059 BE00000000              	mov rsi, 0
   540 0000005E BA01000000              	mov rdx, 1
   541                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   542 00000063 4883FE00                	cmp rsi, 0
   543 00000067 7410                    	je .L_lambda_simple_env_end_0001
   544 00000069 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   545 0000006D 48890CD0                	mov qword [rax + 8 * rdx], rcx
   546 00000071 48FFC6                  	inc rsi
   547 00000074 48FFC2                  	inc rdx
   548 00000077 EBEA                    	jmp .L_lambda_simple_env_loop_0001
   549                                  .L_lambda_simple_env_end_0001:
   550 00000079 5B                      	pop rbx
   551 0000007A BE00000000              	mov rsi, 0
   552                                  .L_lambda_simple_params_loop_0001:	; copy params
   553 0000007F 4883FE00                	cmp rsi, 0
   554 00000083 740E                    	je .L_lambda_simple_params_end_0001
   555 00000085 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   556 0000008A 488914F3                	mov qword [rbx + 8 * rsi], rdx
   557 0000008E 48FFC6                  	inc rsi
   558 00000091 EBEC                    	jmp .L_lambda_simple_params_loop_0001
   559                                  .L_lambda_simple_params_end_0001:
   560 00000093 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   561 00000096 4889C3                  	mov rbx, rax
   562 00000099 58                      	pop rax
   563 0000009A C60004                  	mov byte [rax], T_closure
   564 0000009D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   565 000000A1 48C74009[AB000000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
   566 000000A9 EB74                    	jmp .L_lambda_simple_end_0001
   567                                  .L_lambda_simple_code_0001:	; lambda-simple body
   568 000000AB 48837C241002            	cmp qword [rsp + 8 * 2], 2
   569 000000B1 740B                    	je .L_lambda_simple_arity_check_ok_0001
   570 000000B3 FF742410                	push qword [rsp + 8 * 2]
   571 000000B7 6A02                    	push 2
   572 000000B9 E924030000              	jmp L_error_incorrect_arity_simple
   573                                  .L_lambda_simple_arity_check_ok_0001:
   574 000000BE C8000000                	enter 0, 0
   575                                  	; preparing a tail-call
   576 000000C2 488B4520                	mov rax, PARAM(0)	; param x
   577 000000C6 50                      	push rax
   578 000000C7 6A01                    	push 1	; arg count
   579 000000C9 488B4528                	mov rax, PARAM(1)	; param f
   580 000000CD 803804                  	cmp byte [rax], T_closure
   581 000000D0 0F85AA020000            	jne L_error_non_closure
   582 000000D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
   583 000000D9 FF7508                  	push qword [rbp + 8 * 1]
   584                                   ; old ret addr
   585 000000DC FF7500                  	push qword [rbp]
   586                                   ; restore the old rbp
   587 000000DF BB01000000              	mov rbx, 1
   588 000000E4 4883C303                	add rbx, 3
   589 000000E8 4C8B4518                	mov r8, qword [rbp + 8 * 3]
   590 000000EC 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
   591 000000F1 4C8D4DF8                	lea r9, [rbp - 8]
   592 000000F5 B905000000              	mov rcx, 5
   593                                  .L_tc_recycle_frame_loop_0001:
   594 000000FA 4883F900                	cmp rcx, 0
   595 000000FE 7413                    	je .L_tc_recycle_frame_done_0001
   596 00000100 4D8B11                  	mov r10, qword [r9]
   597 00000103 4D8910                  	mov qword [r8], r10
   598 00000106 4983E808                	sub r8, 8
   599 0000010A 4983E908                	sub r9, 8
   600 0000010E 48FFC9                  	dec rcx
   601 00000111 EBE7                    	jmp .L_tc_recycle_frame_loop_0001
   602                                  .L_tc_recycle_frame_done_0001:
   603 00000113 498D6008                	lea rsp, [r8 + 8]
   604 00000117 5D                      	pop rbp ; restore the old rbp
   605 00000118 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
   606 0000011B C9                      	leave
   607 0000011C C22000                  	ret AND_KILL_FRAME(2)
   608                                  .L_lambda_simple_end_0001:	; new closure is in rax
   609 0000011F 48890425[69060000]      	mov qword [free_var_3], rax
   610 00000127 48B8-                   	mov rax, sob_void
   610 00000129 [0000000000000000] 
   611                                  
   612 00000131 4889C7                  	mov rdi, rax
   613 00000134 E845050000              	call print_sexpr_if_not_void
   614 00000139 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   615 0000013E E8E6020000              	call malloc
   616 00000143 50                      	push rax
   617 00000144 BF00000000              	mov rdi, 8 * 0	; new rib
   618 00000149 E8DB020000              	call malloc
   619 0000014E 50                      	push rax
   620 0000014F BF08000000              	mov rdi, 8 * 1	; extended env
   621 00000154 E8D0020000              	call malloc
   622 00000159 488B7D10                	mov rdi, ENV
   623 0000015D BE00000000              	mov rsi, 0
   624 00000162 BA01000000              	mov rdx, 1
   625                                  .L_lambda_simple_env_loop_0002:	; ext_env[i + 1] <-- env[i]
   626 00000167 4883FE00                	cmp rsi, 0
   627 0000016B 7410                    	je .L_lambda_simple_env_end_0002
   628 0000016D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   629 00000171 48890CD0                	mov qword [rax + 8 * rdx], rcx
   630 00000175 48FFC6                  	inc rsi
   631 00000178 48FFC2                  	inc rdx
   632 0000017B EBEA                    	jmp .L_lambda_simple_env_loop_0002
   633                                  .L_lambda_simple_env_end_0002:
   634 0000017D 5B                      	pop rbx
   635 0000017E BE00000000              	mov rsi, 0
   636                                  .L_lambda_simple_params_loop_0002:	; copy params
   637 00000183 4883FE00                	cmp rsi, 0
   638 00000187 740E                    	je .L_lambda_simple_params_end_0002
   639 00000189 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   640 0000018E 488914F3                	mov qword [rbx + 8 * rsi], rdx
   641 00000192 48FFC6                  	inc rsi
   642 00000195 EBEC                    	jmp .L_lambda_simple_params_loop_0002
   643                                  .L_lambda_simple_params_end_0002:
   644 00000197 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   645 0000019A 4889C3                  	mov rbx, rax
   646 0000019D 58                      	pop rax
   647 0000019E C60004                  	mov byte [rax], T_closure
   648 000001A1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   649 000001A5 48C74009[AF010000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0002
   650 000001AD EB1F                    	jmp .L_lambda_simple_end_0002
   651                                  .L_lambda_simple_code_0002:	; lambda-simple body
   652 000001AF 48837C241001            	cmp qword [rsp + 8 * 2], 1
   653 000001B5 740B                    	je .L_lambda_simple_arity_check_ok_0002
   654 000001B7 FF742410                	push qword [rsp + 8 * 2]
   655 000001BB 6A01                    	push 1
   656 000001BD E920020000              	jmp L_error_incorrect_arity_simple
   657                                  .L_lambda_simple_arity_check_ok_0002:
   658 000001C2 C8000000                	enter 0, 0
   659 000001C6 488B4520                	mov rax, PARAM(0)	; param x
   660 000001CA C9                      	leave
   661 000001CB C21800                  	ret AND_KILL_FRAME(1)
   662                                  .L_lambda_simple_end_0002:	; new closure is in rax
   663 000001CE 48890425[36060000]      	mov qword [free_var_0], rax
   664 000001D6 48B8-                   	mov rax, sob_void
   664 000001D8 [0000000000000000] 
   665                                  
   666 000001E0 4889C7                  	mov rdi, rax
   667 000001E3 E896040000              	call print_sexpr_if_not_void
   668 000001E8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   669 000001ED E837020000              	call malloc
   670 000001F2 50                      	push rax
   671 000001F3 BF00000000              	mov rdi, 8 * 0	; new rib
   672 000001F8 E82C020000              	call malloc
   673 000001FD 50                      	push rax
   674 000001FE BF08000000              	mov rdi, 8 * 1	; extended env
   675 00000203 E821020000              	call malloc
   676 00000208 488B7D10                	mov rdi, ENV
   677 0000020C BE00000000              	mov rsi, 0
   678 00000211 BA01000000              	mov rdx, 1
   679                                  .L_lambda_simple_env_loop_0003:	; ext_env[i + 1] <-- env[i]
   680 00000216 4883FE00                	cmp rsi, 0
   681 0000021A 7410                    	je .L_lambda_simple_env_end_0003
   682 0000021C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   683 00000220 48890CD0                	mov qword [rax + 8 * rdx], rcx
   684 00000224 48FFC6                  	inc rsi
   685 00000227 48FFC2                  	inc rdx
   686 0000022A EBEA                    	jmp .L_lambda_simple_env_loop_0003
   687                                  .L_lambda_simple_env_end_0003:
   688 0000022C 5B                      	pop rbx
   689 0000022D BE00000000              	mov rsi, 0
   690                                  .L_lambda_simple_params_loop_0003:	; copy params
   691 00000232 4883FE00                	cmp rsi, 0
   692 00000236 740E                    	je .L_lambda_simple_params_end_0003
   693 00000238 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   694 0000023D 488914F3                	mov qword [rbx + 8 * rsi], rdx
   695 00000241 48FFC6                  	inc rsi
   696 00000244 EBEC                    	jmp .L_lambda_simple_params_loop_0003
   697                                  .L_lambda_simple_params_end_0003:
   698 00000246 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   699 00000249 4889C3                  	mov rbx, rax
   700 0000024C 58                      	pop rax
   701 0000024D C60004                  	mov byte [rax], T_closure
   702 00000250 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   703 00000254 48C74009[5E020000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0003
   704 0000025C EB28                    	jmp .L_lambda_simple_end_0003
   705                                  .L_lambda_simple_code_0003:	; lambda-simple body
   706 0000025E 48837C241000            	cmp qword [rsp + 8 * 2], 0
   707 00000264 740B                    	je .L_lambda_simple_arity_check_ok_0003
   708 00000266 FF742410                	push qword [rsp + 8 * 2]
   709 0000026A 6A00                    	push 0
   710 0000026C E971010000              	jmp L_error_incorrect_arity_simple
   711                                  .L_lambda_simple_arity_check_ok_0003:
   712 00000271 C8000000                	enter 0, 0
   713 00000275 488B0425[47060000]      	mov rax, qword [free_var_1]	; free var free_var
   714 0000027D 803805                  	cmp byte [rax], T_undefined
   715 00000280 747A                    	je L_error_fvar_undefined
   716 00000282 C9                      	leave
   717 00000283 C21000                  	ret AND_KILL_FRAME(0)
   718                                  .L_lambda_simple_end_0003:	; new closure is in rax
   719 00000286 48890425[58060000]      	mov qword [free_var_2], rax
   720 0000028E 48B8-                   	mov rax, sob_void
   720 00000290 [0000000000000000] 
   721                                  
   722 00000298 4889C7                  	mov rdi, rax
   723 0000029B E8DE030000              	call print_sexpr_if_not_void
   724                                  	; preparing a non-tail-call
   725 000002A0 6A00                    	push 0	; arg count
   726 000002A2 488B0425[58060000]      	mov rax, qword [free_var_2]	; free var free_var_lambda
   727 000002AA 803805                  	cmp byte [rax], T_undefined
   728 000002AD 744D                    	je L_error_fvar_undefined
   729 000002AF 803804                  	cmp byte [rax], T_closure
   730 000002B2 0F85C8000000            	jne L_error_non_closure
   731 000002B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
   732 000002BB FF5009                  	call SOB_CLOSURE_CODE(rax)
   733                                  Lend:
   734 000002BE 4889C7                  	mov rdi, rax
   735 000002C1 E8B8030000              	call print_sexpr_if_not_void
   736                                  
   737 000002C6 48BF-                           mov rdi, fmt_memory_usage
   737 000002C8 [1207000000000000] 
   738 000002D0 488B3425[98070000]              mov rsi, qword [top_of_memory]
   739 000002D8 4881EE[00000000]                sub rsi, memory
   740 000002DF B800000000                      mov rax, 0
   741                                          ENTER
    44 000002E4 C8000000            <1>  enter 0, 0
    45 000002E8 4883E4F0            <1>  and rsp, ~15
   742 000002EC E8(00000000)                    call printf
   743                                          LEAVE
    49 000002F1 C9                  <1>  leave
   744 000002F2 B800000000                      mov rax, 0
   745 000002F7 E8(00000000)                    call exit
   746                                  
   747                                  L_error_fvar_undefined:
   748 000002FC 50                              push rax
   749 000002FD 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   750 00000305 48BE-                           mov rsi, fmt_undefined_free_var_1
   750 00000307 [7A06000000000000] 
   751 0000030F B800000000                      mov rax, 0
   752                                          ENTER
    44 00000314 C8000000            <1>  enter 0, 0
    45 00000318 4883E4F0            <1>  and rsp, ~15
   753 0000031C E8(00000000)                    call fprintf
   754                                          LEAVE
    49 00000321 C9                  <1>  leave
   755 00000322 58                              pop rax
   756 00000323 488B4001                        mov rax, qword [rax + 1] ; string
   757 00000327 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   758 0000032B BE01000000                      mov rsi, 1               ; sizeof(char)
   759 00000330 488B5001                        mov rdx, qword [rax + 1] ; string-length
   760 00000334 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   761 0000033C B800000000                      mov rax, 0
   762                                          ENTER
    44 00000341 C8000000            <1>  enter 0, 0
    45 00000345 4883E4F0            <1>  and rsp, ~15
   763 00000349 E8(00000000)                    call fwrite
   764                                          LEAVE
    49 0000034E C9                  <1>  leave
   765 0000034F 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   766 00000357 48BE-                           mov rsi, fmt_undefined_free_var_2
   766 00000359 [9106000000000000] 
   767 00000361 B800000000                      mov rax, 0
   768                                          ENTER
    44 00000366 C8000000            <1>  enter 0, 0
    45 0000036A 4883E4F0            <1>  and rsp, ~15
   769 0000036E E8(00000000)                    call fprintf
   770                                          LEAVE
    49 00000373 C9                  <1>  leave
   771 00000374 48C7C0F6FFFFFF                  mov rax, -10
   772 0000037B E8(00000000)                    call exit
   773                                  
   774                                  L_error_non_closure:
   775 00000380 488B3C25[00000000]              mov rdi, qword [stderr]
   776 00000388 48BE-                           mov rsi, fmt_non_closure
   776 0000038A [4807000000000000] 
   777 00000392 B800000000                      mov rax, 0
   778                                          ENTER
    44 00000397 C8000000            <1>  enter 0, 0
    45 0000039B 4883E4F0            <1>  and rsp, ~15
   779 0000039F E8(00000000)                    call fprintf
   780                                          LEAVE
    49 000003A4 C9                  <1>  leave
   781 000003A5 48C7C0FEFFFFFF                  mov rax, -2
   782 000003AC E8(00000000)                    call exit
   783                                  
   784                                  L_error_improper_list:
   785 000003B1 488B3C25[00000000]      	mov rdi, qword [stderr]
   786 000003B9 48BE-                   	mov rsi, fmt_error_improper_list
   786 000003BB [7007000000000000] 
   787 000003C3 B800000000              	mov rax, 0
   788                                          ENTER
    44 000003C8 C8000000            <1>  enter 0, 0
    45 000003CC 4883E4F0            <1>  and rsp, ~15
   789 000003D0 E8(00000000)            	call fprintf
   790                                          LEAVE
    49 000003D5 C9                  <1>  leave
   791 000003D6 48C7C0F9FFFFFF          	mov rax, -7
   792 000003DD E8(00000000)            	call exit
   793                                  
   794                                  L_error_incorrect_arity_simple:
   795 000003E2 488B3C25[00000000]              mov rdi, qword [stderr]
   796 000003EA 48BE-                           mov rsi, fmt_incorrect_arity_simple
   796 000003EC [B306000000000000] 
   797 000003F4 EB12                            jmp L_error_incorrect_arity_common
   798                                  L_error_incorrect_arity_opt:
   799 000003F6 488B3C25[00000000]              mov rdi, qword [stderr]
   800 000003FE 48BE-                           mov rsi, fmt_incorrect_arity_opt
   800 00000400 [DE06000000000000] 
   801                                  L_error_incorrect_arity_common:
   802 00000408 5A                              pop rdx
   803 00000409 59                              pop rcx
   804 0000040A B800000000                      mov rax, 0
   805                                          ENTER
    44 0000040F C8000000            <1>  enter 0, 0
    45 00000413 4883E4F0            <1>  and rsp, ~15
   806 00000417 E8(00000000)                    call fprintf
   807                                          LEAVE
    49 0000041C C9                  <1>  leave
   808 0000041D 48C7C0FAFFFFFF                  mov rax, -6
   809 00000424 E8(00000000)                    call exit
   810                                  
   811                                  section .data
   812                                  fmt_undefined_free_var_1:
   813 0000067A 212121205468652066-             db `!!! The free variable \0`
   813 00000683 726565207661726961-
   813 0000068C 626C652000         
   814                                  fmt_undefined_free_var_2:
   815 00000691 207761732075736564-             db ` was used before it was defined.\n\0`
   815 0000069A 206265666F72652069-
   815 000006A3 742077617320646566-
   815 000006AC 696E65642E0A00     
   816                                  fmt_incorrect_arity_simple:
   817 000006B3 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   817 000006BC 74656420256C642061-
   817 000006C5 7267756D656E74732C-
   817 000006CE 206275742067697665-
   817 000006D7 6E20256C640A00     
   818                                  fmt_incorrect_arity_opt:
   819 000006DE 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   819 000006E7 746564206174206C65-
   819 000006F0 61737420256C642061-
   819 000006F9 7267756D656E74732C-
   819 00000702 206275742067697665-
   819 0000070B 6E20256C640A00     
   820                                  fmt_memory_usage:
   821 00000712 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   821 0000071B 20256C642062797465-
   821 00000724 73206F662064796E61-
   821 0000072D 6D6963616C6C792D61-
   821 00000736 6C6C6F636174656420-
   821 0000073F 6D656D6F72790A0A00 
   822                                  fmt_non_closure:
   823 00000748 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   823 00000751 7074696E6720746F20-
   823 0000075A 6170706C792061206E-
   823 00000763 6F6E2D636C6F737572-
   823 0000076C 65210A00           
   824                                  fmt_error_improper_list:
   825 00000770 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   825 00000779 7267756D656E742069-
   825 00000782 73206E6F7420612070-
   825 0000078B 726F706572206C6973-
   825 00000794 74210A00           
   826                                  
   827                                  section .bss
   828                                  memory:
   829 00000000 <res 40000000h>         	resb gbytes(1)
   830                                  
   831                                  section .data
   832                                  top_of_memory:
   833 00000798 [0000000000000000]              dq memory
   834                                  
   835                                  section .text
   836                                  malloc:
   837 00000429 488B0425[98070000]              mov rax, qword [top_of_memory]
   838 00000431 48013C25[98070000]              add qword [top_of_memory], rdi
   839 00000439 C3                              ret
   840                                  
   841                                  L_code_ptr_return:
   842 0000043A 48837C241002            	cmp qword [rsp + 8*2], 2
   843 00000440 0F85A61C0000            	jne L_error_arg_count_2
   844 00000446 488B4C2418              	mov rcx, qword [rsp + 8*3]
   845                                  	assert_integer(rcx)
    53 0000044B 803911              <1>  cmp byte [%1], %2
    54 0000044E 0F85371D0000        <1>  jne L_error_incorrect_type
   846 00000454 488B4901                	mov rcx, qword [rcx + 1]
   847 00000458 4883F900                	cmp rcx, 0
   848 0000045C 0F8CBE1B0000            	jl L_error_integer_range
   849 00000462 488B442420              	mov rax, qword [rsp + 8*4]
   850                                  .L0:
   851 00000467 4883F900                        cmp rcx, 0
   852 0000046B 7409                            je .L1
   853 0000046D 488B6D00                	mov rbp, qword [rbp]
   854 00000471 48FFC9                  	dec rcx
   855 00000474 7FF1                    	jg .L0
   856                                  .L1:
   857 00000476 4889EC                  	mov rsp, rbp
   858 00000479 5D                      	pop rbp
   859 0000047A 5B                              pop rbx
   860 0000047B 488B4C2408                      mov rcx, qword [rsp + 8*1]
   861 00000480 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   862 00000485 FFE3                    	jmp rbx
   863                                  
   864                                  L_code_ptr_make_list:
   865 00000487 C8000000                	enter 0, 0
   866 0000048B 48837D1801                      cmp COUNT, 1
   867 00000490 740C                            je .L0
   868 00000492 48837D1802                      cmp COUNT, 2
   869 00000497 7411                            je .L1
   870 00000499 E9831C0000                      jmp L_error_arg_count_12
   871                                  .L0:
   872 0000049E 49B9-                           mov r9, sob_void
   872 000004A0 [0000000000000000] 
   873 000004A8 EB04                            jmp .L2
   874                                  .L1:
   875 000004AA 4C8B4D28                        mov r9, PARAM(1)
   876                                  .L2:
   877 000004AE 488B4D20                        mov rcx, PARAM(0)
   878                                          assert_integer(rcx)
    53 000004B2 803911              <1>  cmp byte [%1], %2
    54 000004B5 0F85D01C0000        <1>  jne L_error_incorrect_type
   879 000004BB 488B4901                        mov rcx, qword [rcx + 1]
   880 000004BF 4883F900                        cmp rcx, 0
   881 000004C3 0F8C881B0000                    jl L_error_arg_negative
   882 000004C9 49B8-                           mov r8, sob_nil
   882 000004CB [0100000000000000] 
   883                                  .L3:
   884 000004D3 4883F900                        cmp rcx, 0
   885 000004D7 7E1D                            jle .L4
   886 000004D9 BF11000000                      mov rdi, 1 + 8 + 8
   887 000004DE E846FFFFFF                      call malloc
   888 000004E3 C60021                          mov byte [rax], T_pair
   889 000004E6 4C894801                        mov qword [rax + 1], r9
   890 000004EA 4C894009                        mov qword [rax + 1 + 8], r8
   891 000004EE 4989C0                          mov r8, rax
   892 000004F1 48FFC9                          dec rcx
   893 000004F4 EBDD                            jmp .L3
   894                                  .L4:
   895 000004F6 4C89C0                          mov rax, r8
   896 000004F9 48837D1802                      cmp COUNT, 2
   897 000004FE 7404                            je .L5
   898 00000500 C9                              leave
   899 00000501 C21800                          ret AND_KILL_FRAME(1)
   900                                  .L5:
   901 00000504 C9                      	leave
   902 00000505 C22000                  	ret AND_KILL_FRAME(2)
   903                                  
   904                                  L_code_ptr_is_primitive:
   905 00000508 C8000000                	enter 0, 0
   906 0000050C 48837D1801              	cmp COUNT, 1
   907 00000511 0F85A01B0000            	jne L_error_arg_count_1
   908 00000517 488B4520                	mov rax, PARAM(0)
   909                                  	assert_closure(rax)
    53 0000051B 803804              <1>  cmp byte [%1], %2
    54 0000051E 0F85671C0000        <1>  jne L_error_incorrect_type
   910 00000524 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   911 00000529 750C                    	jne .L_false
   912 0000052B 48B8-                   	mov rax, sob_boolean_true
   912 0000052D [0300000000000000] 
   913 00000535 EB0A                    	jmp .L_end
   914                                  .L_false:
   915 00000537 48B8-                   	mov rax, sob_boolean_false
   915 00000539 [0200000000000000] 
   916                                  .L_end:
   917 00000541 C9                      	leave
   918 00000542 C21800                  	ret AND_KILL_FRAME(1)
   919                                  
   920                                  L_code_ptr_length:
   921 00000545 C8000000                	enter 0, 0
   922 00000549 48837D1801              	cmp COUNT, 1
   923 0000054E 0F85631B0000            	jne L_error_arg_count_1
   924 00000554 488B5D20                	mov rbx, PARAM(0)
   925 00000558 BF00000000              	mov rdi, 0
   926                                  .L:
   927 0000055D 803B01                  	cmp byte [rbx], T_nil
   928 00000560 7412                    	je .L_end
   929                                  	assert_pair(rbx)
    53 00000562 803B21              <1>  cmp byte [%1], %2
    54 00000565 0F85201C0000        <1>  jne L_error_incorrect_type
   930 0000056B 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   931 0000056F 48FFC7                  	inc rdi
   932 00000572 EBE9                    	jmp .L
   933                                  .L_end:
   934 00000574 E88D1A0000              	call make_integer
   935 00000579 C9                      	leave
   936 0000057A C21800                  	ret AND_KILL_FRAME(1)
   937                                  
   938                                  L_code_ptr_break:
   939 0000057D 48837C241000                    cmp qword [rsp + 8 * 2], 0
   940 00000583 0F85F91A0000                    jne L_error_arg_count_0
   941 00000589 CC                              int3
   942 0000058A 48B8-                           mov rax, sob_void
   942 0000058C [0000000000000000] 
   943 00000594 C21000                          ret AND_KILL_FRAME(0)        
   944                                  
   945                                  L_code_ptr_frame:
   946 00000597 C8000000                        enter 0, 0
   947 0000059B 48837D1800                      cmp COUNT, 0
   948 000005A0 0F85DC1A0000                    jne L_error_arg_count_0
   949                                  
   950 000005A6 48BF-                           mov rdi, fmt_frame
   950 000005A8 [A007000000000000] 
   951 000005B0 488B7500                        mov rsi, qword [rbp]    ; old rbp
   952 000005B4 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   953 000005B8 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   954 000005BC 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   955 000005C0 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   956 000005C4 6A00                            push 0
   957 000005C6 4151                            push r9
   958 000005C8 4150                            push r8                   ; we'll use it when printing the params
   959 000005CA B800000000                      mov rax, 0
   960                                          
   961                                          ENTER
    44 000005CF C8000000            <1>  enter 0, 0
    45 000005D3 4883E4F0            <1>  and rsp, ~15
   962 000005D7 E8(00000000)                    call printf
   963                                          LEAVE
    49 000005DC C9                  <1>  leave
   964                                  
   965                                  .L:
   966 000005DD 488B0C24                        mov rcx, qword [rsp]
   967 000005E1 4883F900                        cmp rcx, 0
   968 000005E5 7467                            je .L_out
   969 000005E7 48BF-                           mov rdi, fmt_frame_param_prefix
   969 000005E9 [D907000000000000] 
   970 000005F1 488B742410                      mov rsi, qword [rsp + 8*2]
   971 000005F6 B800000000                      mov rax, 0
   972                                          
   973                                          ENTER
    44 000005FB C8000000            <1>  enter 0, 0
    45 000005FF 4883E4F0            <1>  and rsp, ~15
   974 00000603 E8(00000000)                    call printf
   975                                          LEAVE
    49 00000608 C9                  <1>  leave
   976                                  
   977 00000609 488B0C24                        mov rcx, qword [rsp]
   978 0000060D 48FFC9                          dec rcx
   979 00000610 48890C24                        mov qword [rsp], rcx    ; dec arg count
   980 00000614 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   981 00000619 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   982 0000061E 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   983 00000622 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   984 00000627 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   985 0000062A E87B000000                      call print_sexpr
   986 0000062F 48BF-                           mov rdi, fmt_newline
   986 00000631 [0508000000000000] 
   987 00000639 B800000000                      mov rax, 0
   988                                          ENTER
    44 0000063E C8000000            <1>  enter 0, 0
    45 00000642 4883E4F0            <1>  and rsp, ~15
   989 00000646 E8(00000000)                    call printf
   990                                          LEAVE
    49 0000064B C9                  <1>  leave
   991 0000064C EB8F                            jmp .L
   992                                  .L_out:
   993 0000064E 48BF-                           mov rdi, fmt_frame_continue
   993 00000650 [EA07000000000000] 
   994 00000658 B800000000                      mov rax, 0
   995                                          ENTER
    44 0000065D C8000000            <1>  enter 0, 0
    45 00000661 4883E4F0            <1>  and rsp, ~15
   996 00000665 E8(00000000)                    call printf
   997 0000066A E8(00000000)                    call getchar
   998                                          LEAVE
    49 0000066F C9                  <1>  leave
   999                                          
  1000 00000670 48B8-                           mov rax, sob_void
  1000 00000672 [0000000000000000] 
  1001 0000067A C9                              leave
  1002 0000067B C21000                          ret AND_KILL_FRAME(0)
  1003                                          
  1004                                  print_sexpr_if_not_void:
  1005 0000067E 4881FF[00000000]        	cmp rdi, sob_void
  1006 00000685 7422                    	je .done
  1007 00000687 E81E000000              	call print_sexpr
  1008 0000068C 48BF-                   	mov rdi, fmt_newline
  1008 0000068E [0508000000000000] 
  1009 00000696 B800000000              	mov rax, 0
  1010                                  	ENTER
    44 0000069B C8000000            <1>  enter 0, 0
    45 0000069F 4883E4F0            <1>  and rsp, ~15
  1011 000006A3 E8(00000000)            	call printf
  1012                                  	LEAVE
    49 000006A8 C9                  <1>  leave
  1013                                  .done:
  1014 000006A9 C3                      	ret
  1015                                  
  1016                                  section .data
  1017                                  fmt_frame:
  1018 000007A0 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
  1018 000007A9 207265742061646472-
  1018 000007B2 203D2025703B206C65-
  1018 000007BB 7820656E76203D2025-
  1018 000007C4 703B20706172616D20-
  1018 000007CD 636F756E74203D2025-
  1018 000007D6 640A00             
  1019                                  fmt_frame_param_prefix:
  1020 000007D9 3D3D5B706172616D20-             db `==[param %d]==> \0`
  1020 000007E2 25645D3D3D3E2000   
  1021                                  fmt_frame_continue:
  1022 000007EA 486974203C456E7465-             db `Hit <Enter> to continue...\0`
  1022 000007F3 723E20746F20636F6E-
  1022 000007FC 74696E75652E2E2E00 
  1023                                  fmt_newline:
  1024 00000805 0A00                    	db `\n\0`
  1025                                  fmt_void:
  1026 00000807 233C766F69643E00        	db `#<void>\0`
  1027                                  fmt_nil:
  1028 0000080F 282900                  	db `()\0`
  1029                                  fmt_boolean_false:
  1030 00000812 236600                  	db `#f\0`
  1031                                  fmt_boolean_true:
  1032 00000815 237400                  	db `#t\0`
  1033                                  fmt_char_backslash:
  1034 00000818 235C5C00                	db `#\\\\\0`
  1035                                  fmt_char_dquote:
  1036 0000081C 235C2200                	db `#\\"\0`
  1037                                  fmt_char_simple:
  1038 00000820 235C256300              	db `#\\%c\0`
  1039                                  fmt_char_null:
  1040 00000825 235C6E756C00            	db `#\\nul\0`
  1041                                  fmt_char_bell:
  1042 0000082B 235C62656C6C00          	db `#\\bell\0`
  1043                                  fmt_char_backspace:
  1044 00000832 235C6261636B737061-     	db `#\\backspace\0`
  1044 0000083B 636500             
  1045                                  fmt_char_tab:
  1046 0000083E 235C74616200            	db `#\\tab\0`
  1047                                  fmt_char_newline:
  1048 00000844 235C6E65776C696E65-     	db `#\\newline\0`
  1048 0000084D 00                 
  1049                                  fmt_char_formfeed:
  1050 0000084E 235C7061676500          	db `#\\page\0`
  1051                                  fmt_char_return:
  1052 00000855 235C72657475726E00      	db `#\\return\0`
  1053                                  fmt_char_escape:
  1054 0000085E 235C65736300            	db `#\\esc\0`
  1055                                  fmt_char_space:
  1056 00000864 235C737061636500        	db `#\\space\0`
  1057                                  fmt_char_hex:
  1058 0000086C 235C782530325800        	db `#\\x%02X\0`
  1059                                  fmt_gensym:
  1060 00000874 47256C6400                      db `G%ld\0`
  1061                                  fmt_closure:
  1062 00000879 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  1062 00000882 206174203078253038-
  1062 0000088B 5820656E763D307825-
  1062 00000894 30385820636F64653D-
  1062 0000089D 3078253038583E00   
  1063                                  fmt_lparen:
  1064 000008A5 2800                    	db `(\0`
  1065                                  fmt_dotted_pair:
  1066 000008A7 202E2000                	db ` . \0`
  1067                                  fmt_rparen:
  1068 000008AB 2900                    	db `)\0`
  1069                                  fmt_space:
  1070 000008AD 2000                    	db ` \0`
  1071                                  fmt_empty_vector:
  1072 000008AF 23282900                	db `#()\0`
  1073                                  fmt_vector:
  1074 000008B3 232800                  	db `#(\0`
  1075                                  fmt_real:
  1076 000008B6 256600                  	db `%f\0`
  1077                                  fmt_fraction:
  1078 000008B9 256C642F256C6400        	db `%ld/%ld\0`
  1079                                  fmt_zero:
  1080 000008C1 3000                    	db `0\0`
  1081                                  fmt_int:
  1082 000008C3 256C6400                	db `%ld\0`
  1083                                  fmt_unknown_scheme_object_error:
  1084 000008C7 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
  1084 000008D0 6F723A20556E6B6E6F-
  1084 000008D9 776E20536368656D65-
  1084 000008E2 2D6F626A6563742028-
  1084 000008EB 525454492030782530-
  1084 000008F4 32582920           
  1085 000008F8 617420616464726573-     	db `at address 0x%08X\n\n\0`
  1085 00000901 73203078253038580A-
  1085 0000090A 0A00               
  1086                                  fmt_dquote:
  1087 0000090C 2200                    	db `\"\0`
  1088                                  fmt_string_char:
  1089 0000090E 256300                          db `%c\0`
  1090                                  fmt_string_char_7:
  1091 00000911 5C6100                          db `\\a\0`
  1092                                  fmt_string_char_8:
  1093 00000914 5C6200                          db `\\b\0`
  1094                                  fmt_string_char_9:
  1095 00000917 5C7400                          db `\\t\0`
  1096                                  fmt_string_char_10:
  1097 0000091A 5C6E00                          db `\\n\0`
  1098                                  fmt_string_char_11:
  1099 0000091D 5C7600                          db `\\v\0`
  1100                                  fmt_string_char_12:
  1101 00000920 5C6600                          db `\\f\0`
  1102                                  fmt_string_char_13:
  1103 00000923 5C7200                          db `\\r\0`
  1104                                  fmt_string_char_34:
  1105 00000926 5C2200                          db `\\"\0`
  1106                                  fmt_string_char_92:
  1107 00000929 5C5C00                          db `\\\\\0`
  1108                                  fmt_string_char_hex:
  1109 0000092C 5C7825583B00                    db `\\x%X;\0`
  1110                                  
  1111                                  section .text
  1112                                  
  1113                                  print_sexpr:
  1114 000006AA C8000000                	enter 0, 0
  1115 000006AE 8A07                    	mov al, byte [rdi]
  1116 000006B0 3C00                    	cmp al, T_void
  1117 000006B2 7465                    	je .Lvoid
  1118 000006B4 3C01                    	cmp al, T_nil
  1119 000006B6 7470                    	je .Lnil
  1120 000006B8 3C09                    	cmp al, T_boolean_false
  1121 000006BA 747B                    	je .Lboolean_false
  1122 000006BC 3C0A                    	cmp al, T_boolean_true
  1123 000006BE 0F8482000000            	je .Lboolean_true
  1124 000006C4 3C02                    	cmp al, T_char
  1125 000006C6 0F8489000000            	je .Lchar
  1126 000006CC 3C41                    	cmp al, T_interned_symbol
  1127 000006CE 0F84BF010000            	je .Linterned_symbol
  1128 000006D4 3C42                            cmp al, T_uninterned_symbol
  1129 000006D6 0F84E3010000                    je .Luninterned_symbol
  1130 000006DC 3C21                    	cmp al, T_pair
  1131 000006DE 0F84EE010000            	je .Lpair
  1132 000006E4 3C22                    	cmp al, T_vector
  1133 000006E6 0F84B7020000            	je .Lvector
  1134 000006EC 3C04                    	cmp al, T_closure
  1135 000006EE 0F8485010000            	je .Lclosure
  1136 000006F4 3C13                    	cmp al, T_real
  1137 000006F6 0F8448030000            	je .Lreal
  1138 000006FC 3C12                    	cmp al, T_fraction
  1139 000006FE 0F846E030000            	je .Lfraction
  1140 00000704 3C11                    	cmp al, T_integer
  1141 00000706 0F84A7030000            	je .Linteger
  1142 0000070C 3C03                    	cmp al, T_string
  1143 0000070E 0F84B2030000            	je .Lstring
  1144                                  
  1145 00000714 E9DC040000              	jmp .Lunknown_sexpr_type
  1146                                  
  1147                                  .Lvoid:
  1148 00000719 48BF-                   	mov rdi, fmt_void
  1148 0000071B [0708000000000000] 
  1149 00000723 E900050000              	jmp .Lemit
  1150                                  
  1151                                  .Lnil:
  1152 00000728 48BF-                   	mov rdi, fmt_nil
  1152 0000072A [0F08000000000000] 
  1153 00000732 E9F1040000              	jmp .Lemit
  1154                                  
  1155                                  .Lboolean_false:
  1156 00000737 48BF-                   	mov rdi, fmt_boolean_false
  1156 00000739 [1208000000000000] 
  1157 00000741 E9E2040000              	jmp .Lemit
  1158                                  
  1159                                  .Lboolean_true:
  1160 00000746 48BF-                   	mov rdi, fmt_boolean_true
  1160 00000748 [1508000000000000] 
  1161 00000750 E9D3040000              	jmp .Lemit
  1162                                  
  1163                                  .Lchar:
  1164 00000755 8A4701                  	mov al, byte [rdi + 1]
  1165 00000758 3C20                    	cmp al, ' '
  1166 0000075A 7E20                    	jle .Lchar_whitespace
  1167 0000075C 3C5C                    	cmp al, 92 		; backslash
  1168 0000075E 7474                    	je .Lchar_backslash
  1169 00000760 3C22                    	cmp al, '"'
  1170 00000762 747F                    	je .Lchar_dquote
  1171 00000764 4825FF000000            	and rax, 255
  1172 0000076A 48BF-                   	mov rdi, fmt_char_simple
  1172 0000076C [2008000000000000] 
  1173 00000774 4889C6                  	mov rsi, rax
  1174 00000777 E9AC040000              	jmp .Lemit
  1175                                  
  1176                                  .Lchar_whitespace:
  1177 0000077C 3C00                    	cmp al, 0
  1178 0000077E 7472                    	je .Lchar_null
  1179 00000780 3C07                    	cmp al, 7
  1180 00000782 747D                    	je .Lchar_bell
  1181 00000784 3C08                    	cmp al, 8
  1182 00000786 0F8484000000            	je .Lchar_backspace
  1183 0000078C 3C09                    	cmp al, 9
  1184 0000078E 0F848B000000            	je .Lchar_tab
  1185 00000794 3C0A                    	cmp al, 10
  1186 00000796 0F8492000000            	je .Lchar_newline
  1187 0000079C 3C0C                    	cmp al, 12
  1188 0000079E 0F8499000000            	je .Lchar_formfeed
  1189 000007A4 3C0D                    	cmp al, 13
  1190 000007A6 0F84A0000000            	je .Lchar_return
  1191 000007AC 3C1B                    	cmp al, 27
  1192 000007AE 0F84A7000000            	je .Lchar_escape
  1193 000007B4 4825FF000000            	and rax, 255
  1194 000007BA 3C20                    	cmp al, ' '
  1195 000007BC 0F84A8000000            	je .Lchar_space
  1196 000007C2 48BF-                   	mov rdi, fmt_char_hex
  1196 000007C4 [6C08000000000000] 
  1197 000007CC 4889C6                  	mov rsi, rax
  1198 000007CF E954040000              	jmp .Lemit	
  1199                                  
  1200                                  .Lchar_backslash:
  1201 000007D4 48BF-                   	mov rdi, fmt_char_backslash
  1201 000007D6 [1808000000000000] 
  1202 000007DE E945040000              	jmp .Lemit
  1203                                  
  1204                                  .Lchar_dquote:
  1205 000007E3 48BF-                   	mov rdi, fmt_char_dquote
  1205 000007E5 [1C08000000000000] 
  1206 000007ED E936040000              	jmp .Lemit
  1207                                  
  1208                                  .Lchar_null:
  1209 000007F2 48BF-                   	mov rdi, fmt_char_null
  1209 000007F4 [2508000000000000] 
  1210 000007FC E927040000              	jmp .Lemit
  1211                                  
  1212                                  .Lchar_bell:
  1213 00000801 48BF-                   	mov rdi, fmt_char_bell
  1213 00000803 [2B08000000000000] 
  1214 0000080B E918040000              	jmp .Lemit
  1215                                  
  1216                                  .Lchar_backspace:
  1217 00000810 48BF-                   	mov rdi, fmt_char_backspace
  1217 00000812 [3208000000000000] 
  1218 0000081A E909040000              	jmp .Lemit
  1219                                  
  1220                                  .Lchar_tab:
  1221 0000081F 48BF-                   	mov rdi, fmt_char_tab
  1221 00000821 [3E08000000000000] 
  1222 00000829 E9FA030000              	jmp .Lemit
  1223                                  
  1224                                  .Lchar_newline:
  1225 0000082E 48BF-                   	mov rdi, fmt_char_newline
  1225 00000830 [4408000000000000] 
  1226 00000838 E9EB030000              	jmp .Lemit
  1227                                  
  1228                                  .Lchar_formfeed:
  1229 0000083D 48BF-                   	mov rdi, fmt_char_formfeed
  1229 0000083F [4E08000000000000] 
  1230 00000847 E9DC030000              	jmp .Lemit
  1231                                  
  1232                                  .Lchar_return:
  1233 0000084C 48BF-                   	mov rdi, fmt_char_return
  1233 0000084E [5508000000000000] 
  1234 00000856 E9CD030000              	jmp .Lemit
  1235                                  
  1236                                  .Lchar_escape:
  1237 0000085B 48BF-                   	mov rdi, fmt_char_escape
  1237 0000085D [5E08000000000000] 
  1238 00000865 E9BE030000              	jmp .Lemit
  1239                                  
  1240                                  .Lchar_space:
  1241 0000086A 48BF-                   	mov rdi, fmt_char_space
  1241 0000086C [6408000000000000] 
  1242 00000874 E9AF030000              	jmp .Lemit
  1243                                  
  1244                                  .Lclosure:
  1245 00000879 4889FE                  	mov rsi, qword rdi
  1246 0000087C 48BF-                   	mov rdi, fmt_closure
  1246 0000087E [7908000000000000] 
  1247 00000886 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  1248 0000088A 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  1249 0000088E E995030000              	jmp .Lemit
  1250                                  
  1251                                  .Linterned_symbol:
  1252 00000893 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  1253 00000897 BE01000000              	mov rsi, 1		 ; size = 1 byte
  1254 0000089C 488B5701                	mov rdx, qword [rdi + 1] ; length
  1255 000008A0 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  1256 000008A4 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  1257                                  	ENTER
    44 000008AC C8000000            <1>  enter 0, 0
    45 000008B0 4883E4F0            <1>  and rsp, ~15
  1258 000008B4 E8(00000000)            	call fwrite
  1259                                  	LEAVE
    49 000008B9 C9                  <1>  leave
  1260 000008BA E97E030000              	jmp .Lend
  1261                                  
  1262                                  .Luninterned_symbol:
  1263 000008BF 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  1264 000008C3 48BF-                           mov rdi, fmt_gensym
  1264 000008C5 [7408000000000000] 
  1265 000008CD E956030000                      jmp .Lemit
  1266                                  	
  1267                                  .Lpair:
  1268 000008D2 57                      	push rdi
  1269 000008D3 48BF-                   	mov rdi, fmt_lparen
  1269 000008D5 [A508000000000000] 
  1270 000008DD B800000000              	mov rax, 0
  1271                                          ENTER
    44 000008E2 C8000000            <1>  enter 0, 0
    45 000008E6 4883E4F0            <1>  and rsp, ~15
  1272 000008EA E8(00000000)            	call printf
  1273                                          LEAVE
    49 000008EF C9                  <1>  leave
  1274 000008F0 488B3C24                	mov rdi, qword [rsp] 	; pair
  1275 000008F4 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1276 000008F8 E8ADFDFFFF              	call print_sexpr
  1277 000008FD 5F                      	pop rdi 		; pair
  1278 000008FE 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1279                                  .Lcdr:
  1280 00000902 8A07                    	mov al, byte [rdi]
  1281 00000904 3C01                    	cmp al, T_nil
  1282 00000906 7447                    	je .Lcdr_nil
  1283 00000908 3C21                    	cmp al, T_pair
  1284 0000090A 7462                    	je .Lcdr_pair
  1285 0000090C 57                      	push rdi
  1286 0000090D 48BF-                   	mov rdi, fmt_dotted_pair
  1286 0000090F [A708000000000000] 
  1287 00000917 B800000000              	mov rax, 0
  1288                                          ENTER
    44 0000091C C8000000            <1>  enter 0, 0
    45 00000920 4883E4F0            <1>  and rsp, ~15
  1289 00000924 E8(00000000)            	call printf
  1290                                          LEAVE
    49 00000929 C9                  <1>  leave
  1291 0000092A 5F                      	pop rdi
  1292 0000092B E87AFDFFFF              	call print_sexpr
  1293 00000930 48BF-                   	mov rdi, fmt_rparen
  1293 00000932 [AB08000000000000] 
  1294 0000093A B800000000              	mov rax, 0
  1295                                          ENTER
    44 0000093F C8000000            <1>  enter 0, 0
    45 00000943 4883E4F0            <1>  and rsp, ~15
  1296 00000947 E8(00000000)            	call printf
  1297                                          LEAVE
    49 0000094C C9                  <1>  leave
  1298 0000094D C9                      	leave
  1299 0000094E C3                      	ret
  1300                                  
  1301                                  .Lcdr_nil:
  1302 0000094F 48BF-                   	mov rdi, fmt_rparen
  1302 00000951 [AB08000000000000] 
  1303 00000959 B800000000              	mov rax, 0
  1304                                          ENTER
    44 0000095E C8000000            <1>  enter 0, 0
    45 00000962 4883E4F0            <1>  and rsp, ~15
  1305 00000966 E8(00000000)            	call printf
  1306                                          LEAVE
    49 0000096B C9                  <1>  leave
  1307 0000096C C9                      	leave
  1308 0000096D C3                      	ret
  1309                                  
  1310                                  .Lcdr_pair:
  1311 0000096E 57                      	push rdi
  1312 0000096F 48BF-                   	mov rdi, fmt_space
  1312 00000971 [AD08000000000000] 
  1313 00000979 B800000000              	mov rax, 0
  1314                                          ENTER
    44 0000097E C8000000            <1>  enter 0, 0
    45 00000982 4883E4F0            <1>  and rsp, ~15
  1315 00000986 E8(00000000)            	call printf
  1316                                          LEAVE
    49 0000098B C9                  <1>  leave
  1317 0000098C 488B3C24                	mov rdi, qword [rsp]
  1318 00000990 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1319 00000994 E811FDFFFF              	call print_sexpr
  1320 00000999 5F                      	pop rdi
  1321 0000099A 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1322 0000099E E95FFFFFFF              	jmp .Lcdr
  1323                                  
  1324                                  .Lvector:
  1325 000009A3 488B4701                	mov rax, qword [rdi + 1] ; length
  1326 000009A7 4883F800                	cmp rax, 0
  1327 000009AB 0F8484000000            	je .Lvector_empty
  1328 000009B1 57                      	push rdi
  1329 000009B2 48BF-                   	mov rdi, fmt_vector
  1329 000009B4 [B308000000000000] 
  1330 000009BC B800000000              	mov rax, 0
  1331                                          ENTER
    44 000009C1 C8000000            <1>  enter 0, 0
    45 000009C5 4883E4F0            <1>  and rsp, ~15
  1332 000009C9 E8(00000000)            	call printf
  1333                                          LEAVE
    49 000009CE C9                  <1>  leave
  1334 000009CF 488B3C24                	mov rdi, qword [rsp]
  1335 000009D3 FF7701                  	push qword [rdi + 1]
  1336 000009D6 6A01                    	push 1
  1337 000009D8 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1338 000009DC E8C9FCFFFF              	call print_sexpr
  1339                                  .Lvector_loop:
  1340                                  	; [rsp] index
  1341                                  	; [rsp + 8*1] limit
  1342                                  	; [rsp + 8*2] vector
  1343 000009E1 488B0424                	mov rax, qword [rsp]
  1344 000009E5 483B442408              	cmp rax, qword [rsp + 8*1]
  1345 000009EA 7436                    	je .Lvector_end
  1346 000009EC 48BF-                   	mov rdi, fmt_space
  1346 000009EE [AD08000000000000] 
  1347 000009F6 B800000000              	mov rax, 0
  1348                                          ENTER
    44 000009FB C8000000            <1>  enter 0, 0
    45 000009FF 4883E4F0            <1>  and rsp, ~15
  1349 00000A03 E8(00000000)            	call printf
  1350                                          LEAVE
    49 00000A08 C9                  <1>  leave
  1351 00000A09 488B0424                	mov rax, qword [rsp]
  1352 00000A0D 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1353 00000A12 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1354 00000A17 E88EFCFFFF              	call print_sexpr
  1355 00000A1C 48FF0424                	inc qword [rsp]
  1356 00000A20 EBBF                    	jmp .Lvector_loop
  1357                                  
  1358                                  .Lvector_end:
  1359 00000A22 4883C418                	add rsp, 8*3
  1360 00000A26 48BF-                   	mov rdi, fmt_rparen
  1360 00000A28 [AB08000000000000] 
  1361 00000A30 E9F3010000              	jmp .Lemit	
  1362                                  
  1363                                  .Lvector_empty:
  1364 00000A35 48BF-                   	mov rdi, fmt_empty_vector
  1364 00000A37 [AF08000000000000] 
  1365 00000A3F E9E4010000              	jmp .Lemit
  1366                                  
  1367                                  .Lreal:
  1368 00000A44 FF7701                  	push qword [rdi + 1]
  1369 00000A47 F20F100424              	movsd xmm0, qword [rsp]
  1370 00000A4C 4883C408                	add rsp, 8*1
  1371 00000A50 48BF-                   	mov rdi, fmt_real
  1371 00000A52 [B608000000000000] 
  1372 00000A5A B801000000              	mov rax, 1
  1373                                  	ENTER
    44 00000A5F C8000000            <1>  enter 0, 0
    45 00000A63 4883E4F0            <1>  and rsp, ~15
  1374 00000A67 E8(00000000)            	call printf
  1375                                  	LEAVE
    49 00000A6C C9                  <1>  leave
  1376 00000A6D E9CB010000              	jmp .Lend
  1377                                  
  1378                                  .Lfraction:
  1379 00000A72 488B7701                	mov rsi, qword [rdi + 1]
  1380 00000A76 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1381 00000A7A 4883FE00                	cmp rsi, 0
  1382 00000A7E 7415                    	je .Lrat_zero
  1383 00000A80 4883FA01                	cmp rdx, 1
  1384 00000A84 741E                    	je .Lrat_int
  1385 00000A86 48BF-                   	mov rdi, fmt_fraction
  1385 00000A88 [B908000000000000] 
  1386 00000A90 E993010000              	jmp .Lemit
  1387                                  
  1388                                  .Lrat_zero:
  1389 00000A95 48BF-                   	mov rdi, fmt_zero
  1389 00000A97 [C108000000000000] 
  1390 00000A9F E984010000              	jmp .Lemit
  1391                                  
  1392                                  .Lrat_int:
  1393 00000AA4 48BF-                   	mov rdi, fmt_int
  1393 00000AA6 [C308000000000000] 
  1394 00000AAE E975010000              	jmp .Lemit
  1395                                  
  1396                                  .Linteger:
  1397 00000AB3 488B7701                	mov rsi, qword [rdi + 1]
  1398 00000AB7 48BF-                   	mov rdi, fmt_int
  1398 00000AB9 [C308000000000000] 
  1399 00000AC1 E962010000              	jmp .Lemit
  1400                                  
  1401                                  .Lstring:
  1402 00000AC6 488D4709                	lea rax, [rdi + 1 + 8]
  1403 00000ACA 50                      	push rax
  1404 00000ACB FF7701                  	push qword [rdi + 1]
  1405 00000ACE 48BF-                   	mov rdi, fmt_dquote
  1405 00000AD0 [0C09000000000000] 
  1406 00000AD8 B800000000              	mov rax, 0
  1407                                  	ENTER
    44 00000ADD C8000000            <1>  enter 0, 0
    45 00000AE1 4883E4F0            <1>  and rsp, ~15
  1408 00000AE5 E8(00000000)            	call printf
  1409                                  	LEAVE
    49 00000AEA C9                  <1>  leave
  1410                                  .Lstring_loop:
  1411                                  	; qword [rsp]: limit
  1412                                  	; qword [rsp + 8*1]: char *
  1413 00000AEB 48833C2400              	cmp qword [rsp], 0
  1414 00000AF0 0F84EF000000            	je .Lstring_end
  1415 00000AF6 488B442408              	mov rax, qword [rsp + 8*1]
  1416 00000AFB 8A00                    	mov al, byte [rax]
  1417 00000AFD 4825FF000000            	and rax, 255
  1418 00000B03 3C07                    	cmp al, 7
  1419 00000B05 745D                            je .Lstring_char_7
  1420 00000B07 3C08                            cmp al, 8
  1421 00000B09 7465                            je .Lstring_char_8
  1422 00000B0B 3C09                            cmp al, 9
  1423 00000B0D 746D                            je .Lstring_char_9
  1424 00000B0F 3C0A                            cmp al, 10
  1425 00000B11 7475                            je .Lstring_char_10
  1426 00000B13 3C0B                            cmp al, 11
  1427 00000B15 747D                            je .Lstring_char_11
  1428 00000B17 3C0C                            cmp al, 12
  1429 00000B19 0F8481000000                    je .Lstring_char_12
  1430 00000B1F 3C0D                            cmp al, 13
  1431 00000B21 0F8485000000                    je .Lstring_char_13
  1432 00000B27 3C22                            cmp al, 34
  1433 00000B29 0F8489000000                    je .Lstring_char_34
  1434 00000B2F 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1436 00000B31 3C20                            cmp al, ' '
  1437 00000B33 0F8C9A000000                    jl .Lstring_char_hex
  1438 00000B39 48BF-                           mov rdi, fmt_string_char
  1438 00000B3B [0E09000000000000] 
  1439 00000B43 4889C6                          mov rsi, rax
  1440                                  .Lstring_char_emit:
  1441 00000B46 B800000000                      mov rax, 0
  1442                                          ENTER
    44 00000B4B C8000000            <1>  enter 0, 0
    45 00000B4F 4883E4F0            <1>  and rsp, ~15
  1443 00000B53 E8(00000000)                    call printf
  1444                                          LEAVE
    49 00000B58 C9                  <1>  leave
  1445 00000B59 48FF0C24                        dec qword [rsp]
  1446 00000B5D 48FF442408                      inc qword [rsp + 8*1]
  1447 00000B62 EB87                            jmp .Lstring_loop
  1448                                  
  1449                                  .Lstring_char_7:
  1450 00000B64 48BF-                           mov rdi, fmt_string_char_7
  1450 00000B66 [1109000000000000] 
  1451 00000B6E EBD6                            jmp .Lstring_char_emit
  1452                                  
  1453                                  .Lstring_char_8:
  1454 00000B70 48BF-                           mov rdi, fmt_string_char_8
  1454 00000B72 [1409000000000000] 
  1455 00000B7A EBCA                            jmp .Lstring_char_emit
  1456                                          
  1457                                  .Lstring_char_9:
  1458 00000B7C 48BF-                           mov rdi, fmt_string_char_9
  1458 00000B7E [1709000000000000] 
  1459 00000B86 EBBE                            jmp .Lstring_char_emit
  1460                                  
  1461                                  .Lstring_char_10:
  1462 00000B88 48BF-                           mov rdi, fmt_string_char_10
  1462 00000B8A [1A09000000000000] 
  1463 00000B92 EBB2                            jmp .Lstring_char_emit
  1464                                  
  1465                                  .Lstring_char_11:
  1466 00000B94 48BF-                           mov rdi, fmt_string_char_11
  1466 00000B96 [1D09000000000000] 
  1467 00000B9E EBA6                            jmp .Lstring_char_emit
  1468                                  
  1469                                  .Lstring_char_12:
  1470 00000BA0 48BF-                           mov rdi, fmt_string_char_12
  1470 00000BA2 [2009000000000000] 
  1471 00000BAA EB9A                            jmp .Lstring_char_emit
  1472                                  
  1473                                  .Lstring_char_13:
  1474 00000BAC 48BF-                           mov rdi, fmt_string_char_13
  1474 00000BAE [2309000000000000] 
  1475 00000BB6 EB8E                            jmp .Lstring_char_emit
  1476                                  
  1477                                  .Lstring_char_34:
  1478 00000BB8 48BF-                           mov rdi, fmt_string_char_34
  1478 00000BBA [2609000000000000] 
  1479 00000BC2 EB82                            jmp .Lstring_char_emit
  1480                                  
  1481                                  .Lstring_char_92:
  1482 00000BC4 48BF-                           mov rdi, fmt_string_char_92
  1482 00000BC6 [2909000000000000] 
  1483 00000BCE E973FFFFFF                      jmp .Lstring_char_emit
  1484                                  
  1485                                  .Lstring_char_hex:
  1486 00000BD3 48BF-                           mov rdi, fmt_string_char_hex
  1486 00000BD5 [2C09000000000000] 
  1487 00000BDD 4889C6                          mov rsi, rax
  1488 00000BE0 E961FFFFFF                      jmp .Lstring_char_emit        
  1489                                  
  1490                                  .Lstring_end:
  1491 00000BE5 4883C410                	add rsp, 8 * 2
  1492 00000BE9 48BF-                   	mov rdi, fmt_dquote
  1492 00000BEB [0C09000000000000] 
  1493 00000BF3 EB33                    	jmp .Lemit
  1494                                  
  1495                                  .Lunknown_sexpr_type:
  1496 00000BF5 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1496 00000BF7 [C708000000000000] 
  1497 00000BFF 4825FF000000            	and rax, 255
  1498 00000C05 4889C2                  	mov rdx, rax
  1499 00000C08 4889F9                  	mov rcx, rdi
  1500 00000C0B 488B3C25[00000000]      	mov rdi, qword [stderr]
  1501 00000C13 B800000000              	mov rax, 0
  1502                                          ENTER
    44 00000C18 C8000000            <1>  enter 0, 0
    45 00000C1C 4883E4F0            <1>  and rsp, ~15
  1503 00000C20 E8(00000000)            	call fprintf
  1504                                          LEAVE
    49 00000C25 C9                  <1>  leave
  1505 00000C26 C9                              leave
  1506 00000C27 C3                              ret
  1507                                  
  1508                                  .Lemit:
  1509 00000C28 B800000000              	mov rax, 0
  1510                                          ENTER
    44 00000C2D C8000000            <1>  enter 0, 0
    45 00000C31 4883E4F0            <1>  and rsp, ~15
  1511 00000C35 E8(00000000)            	call printf
  1512                                          LEAVE
    49 00000C3A C9                  <1>  leave
  1513 00000C3B EB00                    	jmp .Lend
  1514                                  
  1515                                  .Lend:
  1516                                  	LEAVE
    49 00000C3D C9                  <1>  leave
  1517 00000C3E C3                      	ret
  1518                                  
  1519                                  ;;; rdi: address of free variable
  1520                                  ;;; rsi: address of code-pointer
  1521                                  bind_primitive:
  1522 00000C3F C8000000                        enter 0, 0
  1523 00000C43 57                              push rdi
  1524 00000C44 BF11000000                      mov rdi, (1 + 8 + 8)
  1525 00000C49 E8DBF7FFFF                      call malloc
  1526 00000C4E 5F                              pop rdi
  1527 00000C4F C60004                          mov byte [rax], T_closure
  1528 00000C52 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1529 00000C5A 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1530 00000C5E 488907                          mov qword [rdi], rax
  1531 00000C61 48B8-                           mov rax, sob_void
  1531 00000C63 [0000000000000000] 
  1532 00000C6B C9                              leave
  1533 00000C6C C3                              ret
  1534                                  
  1535                                  L_code_ptr_ash:
  1536 00000C6D C8000000                        enter 0, 0
  1537 00000C71 48837D1802                      cmp COUNT, 2
  1538 00000C76 0F8570140000                    jne L_error_arg_count_2
  1539 00000C7C 488B7D20                        mov rdi, PARAM(0)
  1540                                          assert_integer(rdi)
    53 00000C80 803F11              <1>  cmp byte [%1], %2
    54 00000C83 0F8502150000        <1>  jne L_error_incorrect_type
  1541 00000C89 488B4D28                        mov rcx, PARAM(1)
  1542                                          assert_integer(rcx)
    53 00000C8D 803911              <1>  cmp byte [%1], %2
    54 00000C90 0F85F5140000        <1>  jne L_error_incorrect_type
  1543 00000C96 488B7F01                        mov rdi, qword [rdi + 1]
  1544 00000C9A 488B4901                        mov rcx, qword [rcx + 1]
  1545 00000C9E 4883F900                        cmp rcx, 0
  1546 00000CA2 7C0F                            jl .L_negative
  1547                                  .L_loop_positive:
  1548 00000CA4 4883F900                        cmp rcx, 0
  1549 00000CA8 741B                            je .L_exit
  1550 00000CAA 48D3E7                          sal rdi, cl
  1551 00000CAD 48C1E908                        shr rcx, 8
  1552 00000CB1 EBF1                            jmp .L_loop_positive
  1553                                  .L_negative:
  1554 00000CB3 48F7D9                          neg rcx
  1555                                  .L_loop_negative:
  1556 00000CB6 4883F900                        cmp rcx, 0
  1557 00000CBA 7409                            je .L_exit
  1558 00000CBC 48D3FF                          sar rdi, cl
  1559 00000CBF 48C1E908                        shr rcx, 8
  1560 00000CC3 EBF1                            jmp .L_loop_negative
  1561                                  .L_exit:
  1562 00000CC5 E83C130000                      call make_integer
  1563 00000CCA C9                              leave
  1564 00000CCB C22000                          ret AND_KILL_FRAME(2)
  1565                                  
  1566                                  L_code_ptr_logand:
  1567 00000CCE C8000000                        enter 0, 0
  1568 00000CD2 48837D1802                      cmp COUNT, 2
  1569 00000CD7 0F850F140000                    jne L_error_arg_count_2
  1570 00000CDD 4C8B4520                        mov r8, PARAM(0)
  1571                                          assert_integer(r8)
    53 00000CE1 41803811            <1>  cmp byte [%1], %2
    54 00000CE5 0F85A0140000        <1>  jne L_error_incorrect_type
  1572 00000CEB 4C8B4D28                        mov r9, PARAM(1)
  1573                                          assert_integer(r9)
    53 00000CEF 41803911            <1>  cmp byte [%1], %2
    54 00000CF3 0F8592140000        <1>  jne L_error_incorrect_type
  1574 00000CF9 498B7801                        mov rdi, qword [r8 + 1]
  1575 00000CFD 49237901                        and rdi, qword [r9 + 1]
  1576 00000D01 E800130000                      call make_integer
  1577 00000D06 C9                              leave
  1578 00000D07 C22000                          ret AND_KILL_FRAME(2)
  1579                                  
  1580                                  L_code_ptr_logor:
  1581 00000D0A C8000000                        enter 0, 0
  1582 00000D0E 48837D1802                      cmp COUNT, 2
  1583 00000D13 0F85D3130000                    jne L_error_arg_count_2
  1584 00000D19 4C8B4520                        mov r8, PARAM(0)
  1585                                          assert_integer(r8)
    53 00000D1D 41803811            <1>  cmp byte [%1], %2
    54 00000D21 0F8564140000        <1>  jne L_error_incorrect_type
  1586 00000D27 4C8B4D28                        mov r9, PARAM(1)
  1587                                          assert_integer(r9)
    53 00000D2B 41803911            <1>  cmp byte [%1], %2
    54 00000D2F 0F8556140000        <1>  jne L_error_incorrect_type
  1588 00000D35 498B7801                        mov rdi, qword [r8 + 1]
  1589 00000D39 490B7901                        or rdi, qword [r9 + 1]
  1590 00000D3D E8C4120000                      call make_integer
  1591 00000D42 C9                              leave
  1592 00000D43 C22000                          ret AND_KILL_FRAME(2)
  1593                                  
  1594                                  L_code_ptr_logxor:
  1595 00000D46 C8000000                        enter 0, 0
  1596 00000D4A 48837D1802                      cmp COUNT, 2
  1597 00000D4F 0F8597130000                    jne L_error_arg_count_2
  1598 00000D55 4C8B4520                        mov r8, PARAM(0)
  1599                                          assert_integer(r8)
    53 00000D59 41803811            <1>  cmp byte [%1], %2
    54 00000D5D 0F8528140000        <1>  jne L_error_incorrect_type
  1600 00000D63 4C8B4D28                        mov r9, PARAM(1)
  1601                                          assert_integer(r9)
    53 00000D67 41803911            <1>  cmp byte [%1], %2
    54 00000D6B 0F851A140000        <1>  jne L_error_incorrect_type
  1602 00000D71 498B7801                        mov rdi, qword [r8 + 1]
  1603 00000D75 49337901                        xor rdi, qword [r9 + 1]
  1604 00000D79 E888120000                      call make_integer
  1605                                          LEAVE
    49 00000D7E C9                  <1>  leave
  1606 00000D7F C22000                          ret AND_KILL_FRAME(2)
  1607                                  
  1608                                  L_code_ptr_lognot:
  1609 00000D82 C8000000                        enter 0, 0
  1610 00000D86 48837D1801                      cmp COUNT, 1
  1611 00000D8B 0F8526130000                    jne L_error_arg_count_1
  1612 00000D91 4C8B4520                        mov r8, PARAM(0)
  1613                                          assert_integer(r8)
    53 00000D95 41803811            <1>  cmp byte [%1], %2
    54 00000D99 0F85EC130000        <1>  jne L_error_incorrect_type
  1614 00000D9F 498B7801                        mov rdi, qword [r8 + 1]
  1615 00000DA3 48F7D7                          not rdi
  1616 00000DA6 E85B120000                      call make_integer
  1617 00000DAB C9                              leave
  1618 00000DAC C21800                          ret AND_KILL_FRAME(1)
  1619                                  
  1620                                  L_code_ptr_bin_apply:
  1621                                  ;;; fill in for final project!
  1622 00000DAF C8000000                enter 0, 0
  1623 00000DB3 48837D1803              cmp COUNT, 3
  1624 00000DB8 0F8598130000            jne L_error_arg_count_3
  1625 00000DBE 488B7D20                mov rdi, PARAM(0)
  1626                                  assert_closure(rdi)
    53 00000DC2 803F04              <1>  cmp byte [%1], %2
    54 00000DC5 0F85C0130000        <1>  jne L_error_incorrect_type
  1627 00000DCB 488B7528                mov rsi, PARAM(1)
  1628                                  assert_integer(rsi)
    53 00000DCF 803E11              <1>  cmp byte [%1], %2
    54 00000DD2 0F85B3130000        <1>  jne L_error_incorrect_type
  1629 00000DD8 488B5530                mov rdx, PARAM(2)
  1630                                  assert_vector(rdx)
    53 00000DDC 803A22              <1>  cmp byte [%1], %2
    54 00000DDF 0F85A6130000        <1>  jne L_error_incorrect_type
  1631 00000DE5 488B4E01                mov rcx, qword [rsi + 1]
  1632 00000DE9 4883F900                cmp rcx, 0
  1633 00000DED 0F8C2D120000            jl L_error_integer_range
  1634 00000DF3 4C8B4201                mov r8, qword [rdx + 1]
  1635 00000DF7 4C39C1                  cmp rcx, r8
  1636 00000DFA 0F8D20120000            jge L_error_integer_range
  1637 00000E00 4C8B4CCA09              mov r9, qword [rdx + 1 + 8 + 8 * rcx]
  1638 00000E05 488B7F09                mov rdi, qword [rdi + 1 + 8]
  1639 00000E09 FFD7                    call rdi
  1640 00000E0B C9                      leave
  1641 00000E0C C22800                  ret AND_KILL_FRAME(3)
  1642                                  
  1643                                  L_code_ptr_is_null:
  1644 00000E0F C8000000                        enter 0, 0
  1645 00000E13 48837D1801                      cmp COUNT, 1
  1646 00000E18 0F8599120000                    jne L_error_arg_count_1
  1647 00000E1E 488B4520                        mov rax, PARAM(0)
  1648 00000E22 803801                          cmp byte [rax], T_nil
  1649 00000E25 750C                            jne .L_false
  1650 00000E27 48B8-                           mov rax, sob_boolean_true
  1650 00000E29 [0300000000000000] 
  1651 00000E31 EB0A                            jmp .L_end
  1652                                  .L_false:
  1653 00000E33 48B8-                           mov rax, sob_boolean_false
  1653 00000E35 [0200000000000000] 
  1654                                  .L_end:
  1655 00000E3D C9                              leave
  1656 00000E3E C21800                          ret AND_KILL_FRAME(1)
  1657                                  
  1658                                  L_code_ptr_is_pair:
  1659 00000E41 C8000000                        enter 0, 0
  1660 00000E45 48837D1801                      cmp COUNT, 1
  1661 00000E4A 0F8567120000                    jne L_error_arg_count_1
  1662 00000E50 488B4520                        mov rax, PARAM(0)
  1663 00000E54 803821                          cmp byte [rax], T_pair
  1664 00000E57 750C                            jne .L_false
  1665 00000E59 48B8-                           mov rax, sob_boolean_true
  1665 00000E5B [0300000000000000] 
  1666 00000E63 EB0A                            jmp .L_end
  1667                                  .L_false:
  1668 00000E65 48B8-                           mov rax, sob_boolean_false
  1668 00000E67 [0200000000000000] 
  1669                                  .L_end:
  1670 00000E6F C9                              leave
  1671 00000E70 C21800                          ret AND_KILL_FRAME(1)
  1672                                          
  1673                                  L_code_ptr_is_void:
  1674 00000E73 C8000000                        enter 0, 0
  1675 00000E77 48837D1801                      cmp COUNT, 1
  1676 00000E7C 0F8535120000                    jne L_error_arg_count_1
  1677 00000E82 488B4520                        mov rax, PARAM(0)
  1678 00000E86 803800                          cmp byte [rax], T_void
  1679 00000E89 750C                            jne .L_false
  1680 00000E8B 48B8-                           mov rax, sob_boolean_true
  1680 00000E8D [0300000000000000] 
  1681 00000E95 EB0A                            jmp .L_end
  1682                                  .L_false:
  1683 00000E97 48B8-                           mov rax, sob_boolean_false
  1683 00000E99 [0200000000000000] 
  1684                                  .L_end:
  1685 00000EA1 C9                              leave
  1686 00000EA2 C21800                          ret AND_KILL_FRAME(1)
  1687                                  
  1688                                  L_code_ptr_is_char:
  1689 00000EA5 C8000000                        enter 0, 0
  1690 00000EA9 48837D1801                      cmp COUNT, 1
  1691 00000EAE 0F8503120000                    jne L_error_arg_count_1
  1692 00000EB4 488B4520                        mov rax, PARAM(0)
  1693 00000EB8 803802                          cmp byte [rax], T_char
  1694 00000EBB 750C                            jne .L_false
  1695 00000EBD 48B8-                           mov rax, sob_boolean_true
  1695 00000EBF [0300000000000000] 
  1696 00000EC7 EB0A                            jmp .L_end
  1697                                  .L_false:
  1698 00000EC9 48B8-                           mov rax, sob_boolean_false
  1698 00000ECB [0200000000000000] 
  1699                                  .L_end:
  1700 00000ED3 C9                              leave
  1701 00000ED4 C21800                          ret AND_KILL_FRAME(1)
  1702                                  
  1703                                  L_code_ptr_is_string:
  1704 00000ED7 C8000000                        enter 0, 0
  1705 00000EDB 48837D1801                      cmp COUNT, 1
  1706 00000EE0 0F85D1110000                    jne L_error_arg_count_1
  1707 00000EE6 488B4520                        mov rax, PARAM(0)
  1708 00000EEA 803803                          cmp byte [rax], T_string
  1709 00000EED 750C                            jne .L_false
  1710 00000EEF 48B8-                           mov rax, sob_boolean_true
  1710 00000EF1 [0300000000000000] 
  1711 00000EF9 EB0A                            jmp .L_end
  1712                                  .L_false:
  1713 00000EFB 48B8-                           mov rax, sob_boolean_false
  1713 00000EFD [0200000000000000] 
  1714                                  .L_end:
  1715 00000F05 C9                              leave
  1716 00000F06 C21800                          ret AND_KILL_FRAME(1)
  1717                                  
  1718                                  L_code_ptr_is_symbol:
  1719 00000F09 C8000000                        enter 0, 0
  1720 00000F0D 48837D1801                      cmp COUNT, 1
  1721 00000F12 0F859F110000                    jne L_error_arg_count_1
  1722 00000F18 4C8B4520                        mov r8, PARAM(0)
  1723 00000F1C 41802040                        and byte [r8], T_symbol
  1724 00000F20 740C                            jz .L_false
  1725 00000F22 48B8-                           mov rax, sob_boolean_true
  1725 00000F24 [0300000000000000] 
  1726 00000F2C EB0A                            jmp .L_exit
  1727                                  .L_false:
  1728 00000F2E 48B8-                           mov rax, sob_boolean_false
  1728 00000F30 [0200000000000000] 
  1729                                  .L_exit:
  1730 00000F38 C9                              leave
  1731 00000F39 C21800                          ret AND_KILL_FRAME(1)
  1732                                  
  1733                                  L_code_ptr_is_uninterned_symbol:
  1734 00000F3C C8000000                        enter 0, 0
  1735 00000F40 48837D1801                      cmp COUNT, 1
  1736 00000F45 0F856C110000                    jne L_error_arg_count_1
  1737 00000F4B 4C8B4520                        mov r8, PARAM(0)
  1738 00000F4F 41803842                        cmp byte [r8], T_uninterned_symbol
  1739 00000F53 750C                            jne .L_false
  1740 00000F55 48B8-                           mov rax, sob_boolean_true
  1740 00000F57 [0300000000000000] 
  1741 00000F5F EB0A                            jmp .L_exit
  1742                                  .L_false:
  1743 00000F61 48B8-                           mov rax, sob_boolean_false
  1743 00000F63 [0200000000000000] 
  1744                                  .L_exit:
  1745 00000F6B C9                              leave
  1746 00000F6C C21800                          ret AND_KILL_FRAME(1)
  1747                                  
  1748                                  L_code_ptr_is_interned_symbol:
  1749 00000F6F C8000000                        enter 0, 0
  1750 00000F73 48837D1801                      cmp COUNT, 1
  1751 00000F78 0F8539110000                    jne L_error_arg_count_1
  1752 00000F7E 488B4520                        mov rax, PARAM(0)
  1753 00000F82 803841                          cmp byte [rax], T_interned_symbol
  1754 00000F85 750C                            jne .L_false
  1755 00000F87 48B8-                           mov rax, sob_boolean_true
  1755 00000F89 [0300000000000000] 
  1756 00000F91 EB0A                            jmp .L_end
  1757                                  .L_false:
  1758 00000F93 48B8-                           mov rax, sob_boolean_false
  1758 00000F95 [0200000000000000] 
  1759                                  .L_end:
  1760 00000F9D C9                              leave
  1761 00000F9E C21800                          ret AND_KILL_FRAME(1)
  1762                                  
  1763                                  L_code_ptr_gensym:
  1764 00000FA1 C8000000                        enter 0, 0
  1765 00000FA5 48837D1800                      cmp COUNT, 0
  1766 00000FAA 0F85D2100000                    jne L_error_arg_count_0
  1767 00000FB0 48FF0425[32090000]              inc qword [gensym_count]
  1768 00000FB8 BF09000000                      mov rdi, (1 + 8)
  1769 00000FBD E867F4FFFF                      call malloc
  1770 00000FC2 C60042                          mov byte [rax], T_uninterned_symbol
  1771 00000FC5 488B0C25[32090000]              mov rcx, qword [gensym_count]
  1772 00000FCD 48894801                        mov qword [rax + 1], rcx
  1773 00000FD1 C9                              leave
  1774 00000FD2 C21000                          ret AND_KILL_FRAME(0)
  1775                                  
  1776                                  L_code_ptr_is_vector:
  1777 00000FD5 C8000000                        enter 0, 0
  1778 00000FD9 48837D1801                      cmp COUNT, 1
  1779 00000FDE 0F85D3100000                    jne L_error_arg_count_1
  1780 00000FE4 488B4520                        mov rax, PARAM(0)
  1781 00000FE8 803822                          cmp byte [rax], T_vector
  1782 00000FEB 750C                            jne .L_false
  1783 00000FED 48B8-                           mov rax, sob_boolean_true
  1783 00000FEF [0300000000000000] 
  1784 00000FF7 EB0A                            jmp .L_end
  1785                                  .L_false:
  1786 00000FF9 48B8-                           mov rax, sob_boolean_false
  1786 00000FFB [0200000000000000] 
  1787                                  .L_end:
  1788 00001003 C9                              leave
  1789 00001004 C21800                          ret AND_KILL_FRAME(1)
  1790                                  
  1791                                  L_code_ptr_is_closure:
  1792 00001007 C8000000                        enter 0, 0
  1793 0000100B 48837D1801                      cmp COUNT, 1
  1794 00001010 0F85A1100000                    jne L_error_arg_count_1
  1795 00001016 488B4520                        mov rax, PARAM(0)
  1796 0000101A 803804                          cmp byte [rax], T_closure
  1797 0000101D 750C                            jne .L_false
  1798 0000101F 48B8-                           mov rax, sob_boolean_true
  1798 00001021 [0300000000000000] 
  1799 00001029 EB0A                            jmp .L_end
  1800                                  .L_false:
  1801 0000102B 48B8-                           mov rax, sob_boolean_false
  1801 0000102D [0200000000000000] 
  1802                                  .L_end:
  1803 00001035 C9                              leave
  1804 00001036 C21800                          ret AND_KILL_FRAME(1)
  1805                                  
  1806                                  L_code_ptr_is_real:
  1807 00001039 C8000000                        enter 0, 0
  1808 0000103D 48837D1801                      cmp COUNT, 1
  1809 00001042 0F856F100000                    jne L_error_arg_count_1
  1810 00001048 488B4520                        mov rax, PARAM(0)
  1811 0000104C 803813                          cmp byte [rax], T_real
  1812 0000104F 750C                            jne .L_false
  1813 00001051 48B8-                           mov rax, sob_boolean_true
  1813 00001053 [0300000000000000] 
  1814 0000105B EB0A                            jmp .L_end
  1815                                  .L_false:
  1816 0000105D 48B8-                           mov rax, sob_boolean_false
  1816 0000105F [0200000000000000] 
  1817                                  .L_end:
  1818 00001067 C9                              leave
  1819 00001068 C21800                          ret AND_KILL_FRAME(1)
  1820                                  
  1821                                  L_code_ptr_is_fraction:
  1822 0000106B C8000000                        enter 0, 0
  1823 0000106F 48837D1801                      cmp COUNT, 1
  1824 00001074 0F853D100000                    jne L_error_arg_count_1
  1825 0000107A 488B4520                        mov rax, PARAM(0)
  1826 0000107E 803812                          cmp byte [rax], T_fraction
  1827 00001081 750C                            jne .L_false
  1828 00001083 48B8-                           mov rax, sob_boolean_true
  1828 00001085 [0300000000000000] 
  1829 0000108D EB0A                            jmp .L_end
  1830                                  .L_false:
  1831 0000108F 48B8-                           mov rax, sob_boolean_false
  1831 00001091 [0200000000000000] 
  1832                                  .L_end:
  1833 00001099 C9                              leave
  1834 0000109A C21800                          ret AND_KILL_FRAME(1)
  1835                                  
  1836                                  L_code_ptr_is_boolean:
  1837 0000109D C8000000                        enter 0, 0
  1838 000010A1 48837D1801                      cmp COUNT, 1
  1839 000010A6 0F850B100000                    jne L_error_arg_count_1
  1840 000010AC 488B4520                        mov rax, PARAM(0)
  1841 000010B0 8A18                            mov bl, byte [rax]
  1842 000010B2 80E308                          and bl, T_boolean
  1843 000010B5 740C                            je .L_false
  1844 000010B7 48B8-                           mov rax, sob_boolean_true
  1844 000010B9 [0300000000000000] 
  1845 000010C1 EB0A                            jmp .L_end
  1846                                  .L_false:
  1847 000010C3 48B8-                           mov rax, sob_boolean_false
  1847 000010C5 [0200000000000000] 
  1848                                  .L_end:
  1849 000010CD C9                              leave
  1850 000010CE C21800                          ret AND_KILL_FRAME(1)
  1851                                          
  1852                                  L_code_ptr_is_boolean_false:
  1853 000010D1 C8000000                        enter 0, 0
  1854 000010D5 48837D1801                      cmp COUNT, 1
  1855 000010DA 0F85D70F0000                    jne L_error_arg_count_1
  1856 000010E0 488B4520                        mov rax, PARAM(0)
  1857 000010E4 8A18                            mov bl, byte [rax]
  1858 000010E6 80FB09                          cmp bl, T_boolean_false
  1859 000010E9 750C                            jne .L_false
  1860 000010EB 48B8-                           mov rax, sob_boolean_true
  1860 000010ED [0300000000000000] 
  1861 000010F5 EB0A                            jmp .L_end
  1862                                  .L_false:
  1863 000010F7 48B8-                           mov rax, sob_boolean_false
  1863 000010F9 [0200000000000000] 
  1864                                  .L_end:
  1865 00001101 C9                              leave
  1866 00001102 C21800                          ret AND_KILL_FRAME(1)
  1867                                  
  1868                                  L_code_ptr_is_boolean_true:
  1869 00001105 C8000000                        enter 0, 0
  1870 00001109 48837D1801                      cmp COUNT, 1
  1871 0000110E 0F85A30F0000                    jne L_error_arg_count_1
  1872 00001114 488B4520                        mov rax, PARAM(0)
  1873 00001118 8A18                            mov bl, byte [rax]
  1874 0000111A 80FB0A                          cmp bl, T_boolean_true
  1875 0000111D 750C                            jne .L_false
  1876 0000111F 48B8-                           mov rax, sob_boolean_true
  1876 00001121 [0300000000000000] 
  1877 00001129 EB0A                            jmp .L_end
  1878                                  .L_false:
  1879 0000112B 48B8-                           mov rax, sob_boolean_false
  1879 0000112D [0200000000000000] 
  1880                                  .L_end:
  1881 00001135 C9                              leave
  1882 00001136 C21800                          ret AND_KILL_FRAME(1)
  1883                                  
  1884                                  L_code_ptr_is_number:
  1885 00001139 C8000000                        enter 0, 0
  1886 0000113D 48837D1801                      cmp COUNT, 1
  1887 00001142 0F856F0F0000                    jne L_error_arg_count_1
  1888 00001148 488B4520                        mov rax, PARAM(0)
  1889 0000114C 8A18                            mov bl, byte [rax]
  1890 0000114E 80E310                          and bl, T_number
  1891 00001151 740C                            jz .L_false
  1892 00001153 48B8-                           mov rax, sob_boolean_true
  1892 00001155 [0300000000000000] 
  1893 0000115D EB0A                            jmp .L_end
  1894                                  .L_false:
  1895 0000115F 48B8-                           mov rax, sob_boolean_false
  1895 00001161 [0200000000000000] 
  1896                                  .L_end:
  1897 00001169 C9                              leave
  1898 0000116A C21800                          ret AND_KILL_FRAME(1)
  1899                                          
  1900                                  L_code_ptr_is_collection:
  1901 0000116D C8000000                        enter 0, 0
  1902 00001171 48837D1801                      cmp COUNT, 1
  1903 00001176 0F853B0F0000                    jne L_error_arg_count_1
  1904 0000117C 488B4520                        mov rax, PARAM(0)
  1905 00001180 8A18                            mov bl, byte [rax]
  1906 00001182 80E320                          and bl, T_collection
  1907 00001185 740C                            je .L_false
  1908 00001187 48B8-                           mov rax, sob_boolean_true
  1908 00001189 [0300000000000000] 
  1909 00001191 EB0A                            jmp .L_end
  1910                                  .L_false:
  1911 00001193 48B8-                           mov rax, sob_boolean_false
  1911 00001195 [0200000000000000] 
  1912                                  .L_end:
  1913 0000119D C9                              leave
  1914 0000119E C21800                          ret AND_KILL_FRAME(1)
  1915                                  
  1916                                  L_code_ptr_cons:
  1917 000011A1 C8000000                        enter 0, 0
  1918 000011A5 48837D1802                      cmp COUNT, 2
  1919 000011AA 0F853C0F0000                    jne L_error_arg_count_2
  1920 000011B0 BF11000000                      mov rdi, (1 + 8 + 8)
  1921 000011B5 E86FF2FFFF                      call malloc
  1922 000011BA C60021                          mov byte [rax], T_pair
  1923 000011BD 488B5D20                        mov rbx, PARAM(0)
  1924 000011C1 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1925 000011C5 488B5D28                        mov rbx, PARAM(1)
  1926 000011C9 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1927 000011CD C9                              leave
  1928 000011CE C22000                          ret AND_KILL_FRAME(2)
  1929                                  
  1930                                  L_code_ptr_display_sexpr:
  1931 000011D1 C8000000                        enter 0, 0
  1932 000011D5 48837D1801                      cmp COUNT, 1
  1933 000011DA 0F85D70E0000                    jne L_error_arg_count_1
  1934 000011E0 488B7D20                        mov rdi, PARAM(0)
  1935 000011E4 E8C1F4FFFF                      call print_sexpr
  1936 000011E9 48B8-                           mov rax, sob_void
  1936 000011EB [0000000000000000] 
  1937 000011F3 C9                              leave
  1938 000011F4 C21800                          ret AND_KILL_FRAME(1)
  1939                                  
  1940                                  L_code_ptr_write_char:
  1941 000011F7 C8000000                        enter 0, 0
  1942 000011FB 48837D1801                      cmp COUNT, 1
  1943 00001200 0F85B10E0000                    jne L_error_arg_count_1
  1944 00001206 488B4520                        mov rax, PARAM(0)
  1945                                          assert_char(rax)
    53 0000120A 803802              <1>  cmp byte [%1], %2
    54 0000120D 0F85780F0000        <1>  jne L_error_incorrect_type
  1946 00001213 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1947 00001216 4825FF000000                    and rax, 255
  1948 0000121C 48BF-                           mov rdi, fmt_char
  1948 0000121E [3A09000000000000] 
  1949 00001226 4889C6                          mov rsi, rax
  1950 00001229 B800000000                      mov rax, 0
  1951                                          ENTER
    44 0000122E C8000000            <1>  enter 0, 0
    45 00001232 4883E4F0            <1>  and rsp, ~15
  1952 00001236 E8(00000000)                    call printf
  1953                                          LEAVE
    49 0000123B C9                  <1>  leave
  1954 0000123C 48B8-                           mov rax, sob_void
  1954 0000123E [0000000000000000] 
  1955 00001246 C9                              leave
  1956 00001247 C21800                          ret AND_KILL_FRAME(1)
  1957                                  
  1958                                  L_code_ptr_car:
  1959 0000124A C8000000                        enter 0, 0
  1960 0000124E 48837D1801                      cmp COUNT, 1
  1961 00001253 0F855E0E0000                    jne L_error_arg_count_1
  1962 00001259 488B4520                        mov rax, PARAM(0)
  1963                                          assert_pair(rax)
    53 0000125D 803821              <1>  cmp byte [%1], %2
    54 00001260 0F85250F0000        <1>  jne L_error_incorrect_type
  1964 00001266 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1965 0000126A C9                              leave
  1966 0000126B C21800                          ret AND_KILL_FRAME(1)
  1967                                          
  1968                                  L_code_ptr_cdr:
  1969 0000126E C8000000                        enter 0, 0
  1970 00001272 48837D1801                      cmp COUNT, 1
  1971 00001277 0F853A0E0000                    jne L_error_arg_count_1
  1972 0000127D 488B4520                        mov rax, PARAM(0)
  1973                                          assert_pair(rax)
    53 00001281 803821              <1>  cmp byte [%1], %2
    54 00001284 0F85010F0000        <1>  jne L_error_incorrect_type
  1974 0000128A 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1975 0000128E C9                              leave
  1976 0000128F C21800                          ret AND_KILL_FRAME(1)
  1977                                          
  1978                                  L_code_ptr_string_length:
  1979 00001292 C8000000                        enter 0, 0
  1980 00001296 48837D1801                      cmp COUNT, 1
  1981 0000129B 0F85160E0000                    jne L_error_arg_count_1
  1982 000012A1 488B4520                        mov rax, PARAM(0)
  1983                                          assert_string(rax)
    53 000012A5 803803              <1>  cmp byte [%1], %2
    54 000012A8 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1984 000012AE 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1985 000012B2 E84F0D0000                      call make_integer
  1986 000012B7 C9                              leave
  1987 000012B8 C21800                          ret AND_KILL_FRAME(1)
  1988                                  
  1989                                  L_code_ptr_vector_length:
  1990 000012BB C8000000                        enter 0, 0
  1991 000012BF 48837D1801                      cmp COUNT, 1
  1992 000012C4 0F85ED0D0000                    jne L_error_arg_count_1
  1993 000012CA 488B4520                        mov rax, PARAM(0)
  1994                                          assert_vector(rax)
    53 000012CE 803822              <1>  cmp byte [%1], %2
    54 000012D1 0F85B40E0000        <1>  jne L_error_incorrect_type
  1995 000012D7 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1996 000012DB E8260D0000                      call make_integer
  1997 000012E0 C9                              leave
  1998 000012E1 C21800                          ret AND_KILL_FRAME(1)
  1999                                  
  2000                                  L_code_ptr_real_to_integer:
  2001 000012E4 C8000000                        enter 0, 0
  2002 000012E8 48837D1801                      cmp COUNT, 1
  2003 000012ED 0F85C40D0000                    jne L_error_arg_count_1
  2004 000012F3 488B5D20                        mov rbx, PARAM(0)
  2005                                          assert_real(rbx)
    53 000012F7 803B13              <1>  cmp byte [%1], %2
    54 000012FA 0F858B0E0000        <1>  jne L_error_incorrect_type
  2006 00001300 F20F104301                      movsd xmm0, qword [rbx + 1]
  2007 00001305 F2480F2CF8                      cvttsd2si rdi, xmm0
  2008 0000130A E8F70C0000                      call make_integer
  2009 0000130F C9                              leave
  2010 00001310 C21800                          ret AND_KILL_FRAME(1)
  2011                                  
  2012                                  L_code_ptr_exit:
  2013 00001313 C8000000                        enter 0, 0
  2014 00001317 48837D1800                      cmp COUNT, 0
  2015 0000131C 0F85600D0000                    jne L_error_arg_count_0
  2016 00001322 B800000000                      mov rax, 0
  2017 00001327 E8(00000000)                    call exit
  2018                                  
  2019                                  L_code_ptr_integer_to_real:
  2020 0000132C C8000000                        enter 0, 0
  2021 00001330 48837D1801                      cmp COUNT, 1
  2022 00001335 0F857C0D0000                    jne L_error_arg_count_1
  2023 0000133B 488B4520                        mov rax, PARAM(0)
  2024                                          assert_integer(rax)
    53 0000133F 803811              <1>  cmp byte [%1], %2
    54 00001342 0F85430E0000        <1>  jne L_error_incorrect_type
  2025 00001348 FF7001                          push qword [rax + 1]
  2026 0000134B F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  2027 00001351 E8980C0000                      call make_real
  2028 00001356 C9                              leave
  2029 00001357 C21800                          ret AND_KILL_FRAME(1)
  2030                                  
  2031                                  L_code_ptr_fraction_to_real:
  2032 0000135A C8000000                        enter 0, 0
  2033 0000135E 48837D1801                      cmp COUNT, 1
  2034 00001363 0F854E0D0000                    jne L_error_arg_count_1
  2035 00001369 488B4520                        mov rax, PARAM(0)
  2036                                          assert_fraction(rax)
    53 0000136D 803812              <1>  cmp byte [%1], %2
    54 00001370 0F85150E0000        <1>  jne L_error_incorrect_type
  2037 00001376 FF7001                          push qword [rax + 1]
  2038 00001379 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  2039 0000137F FF7009                          push qword [rax + 1 + 8]
  2040 00001382 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  2041 00001388 F20F5EC1                        divsd xmm0, xmm1
  2042 0000138C E85D0C0000                      call make_real
  2043 00001391 C9                              leave
  2044 00001392 C21800                          ret AND_KILL_FRAME(1)
  2045                                  
  2046                                  L_code_ptr_char_to_integer:
  2047 00001395 C8000000                        enter 0, 0
  2048 00001399 48837D1801                      cmp COUNT, 1
  2049 0000139E 0F85130D0000                    jne L_error_arg_count_1
  2050 000013A4 488B4520                        mov rax, PARAM(0)
  2051                                          assert_char(rax)
    53 000013A8 803802              <1>  cmp byte [%1], %2
    54 000013AB 0F85DA0D0000        <1>  jne L_error_incorrect_type
  2052 000013B1 8A4001                          mov al, byte [rax + 1]
  2053 000013B4 4825FF000000                    and rax, 255
  2054 000013BA 4889C7                          mov rdi, rax
  2055 000013BD E8440C0000                      call make_integer
  2056 000013C2 C9                              leave
  2057 000013C3 C21800                          ret AND_KILL_FRAME(1)
  2058                                  
  2059                                  L_code_ptr_integer_to_fraction:
  2060 000013C6 C8000000                        enter 0, 0
  2061 000013CA 48837D1801                      cmp COUNT, 1
  2062 000013CF 0F85E20C0000                    jne L_error_arg_count_1
  2063 000013D5 4C8B4520                        mov r8, PARAM(0)
  2064                                          assert_integer(r8)
    53 000013D9 41803811            <1>  cmp byte [%1], %2
    54 000013DD 0F85A80D0000        <1>  jne L_error_incorrect_type
  2065 000013E3 BF11000000                      mov rdi, (1 + 8 + 8)
  2066 000013E8 E83CF0FFFF                      call malloc
  2067 000013ED 498B5801                        mov rbx, qword [r8 + 1]
  2068 000013F1 C60012                          mov byte [rax], T_fraction
  2069 000013F4 48895801                        mov qword [rax + 1], rbx
  2070 000013F8 48C7400901000000                mov qword [rax + 1 + 8], 1
  2071 00001400 C9                              leave
  2072 00001401 C21800                          ret AND_KILL_FRAME(1)
  2073                                  
  2074                                  L_code_ptr_integer_to_char:
  2075 00001404 C8000000                        enter 0, 0
  2076 00001408 48837D1801                      cmp COUNT, 1
  2077 0000140D 0F85A40C0000                    jne L_error_arg_count_1
  2078 00001413 488B4520                        mov rax, PARAM(0)
  2079                                          assert_integer(rax)
    53 00001417 803811              <1>  cmp byte [%1], %2
    54 0000141A 0F856B0D0000        <1>  jne L_error_incorrect_type
  2080 00001420 488B5801                        mov rbx, qword [rax + 1]
  2081 00001424 4883FB00                        cmp rbx, 0
  2082 00001428 0F8EF20B0000                    jle L_error_integer_range
  2083 0000142E 4881FB00010000                  cmp rbx, 256
  2084 00001435 0F8DE50B0000                    jge L_error_integer_range
  2085 0000143B BF02000000                      mov rdi, (1 + 1)
  2086 00001440 E8E4EFFFFF                      call malloc
  2087 00001445 C60002                          mov byte [rax], T_char
  2088 00001448 885801                          mov byte [rax + 1], bl
  2089 0000144B C9                              leave
  2090 0000144C C21800                          ret AND_KILL_FRAME(1)
  2091                                  
  2092                                  L_code_ptr_trng:
  2093 0000144F C8000000                        enter 0, 0
  2094 00001453 48837D1800                      cmp COUNT, 0
  2095 00001458 0F85240C0000                    jne L_error_arg_count_0
  2096 0000145E 480FC7F7                        rdrand rdi
  2097 00001462 48D1EF                          shr rdi, 1
  2098 00001465 E89C0B0000                      call make_integer
  2099 0000146A C9                              leave
  2100 0000146B C21000                          ret AND_KILL_FRAME(0)
  2101                                  
  2102                                  L_code_ptr_is_zero:
  2103 0000146E C8000000                        enter 0, 0
  2104 00001472 48837D1801                      cmp COUNT, 1
  2105 00001477 0F853A0C0000                    jne L_error_arg_count_1
  2106 0000147D 488B4520                        mov rax, PARAM(0)
  2107 00001481 803811                          cmp byte [rax], T_integer
  2108 00001484 740F                            je .L_integer
  2109 00001486 803812                          cmp byte [rax], T_fraction
  2110 00001489 7413                            je .L_fraction
  2111 0000148B 803813                          cmp byte [rax], T_real
  2112 0000148E 7417                            je .L_real
  2113 00001490 E9F60C0000                      jmp L_error_incorrect_type
  2114                                  .L_integer:
  2115 00001495 4883780100                      cmp qword [rax + 1], 0
  2116 0000149A 7429                            je .L_zero
  2117 0000149C EB1B                            jmp .L_not_zero
  2118                                  .L_fraction:
  2119 0000149E 4883780100                      cmp qword [rax + 1], 0
  2120 000014A3 7420                            je .L_zero
  2121 000014A5 EB12                            jmp .L_not_zero
  2122                                  .L_real:
  2123 000014A7 660FEFC0                        pxor xmm0, xmm0
  2124 000014AB FF7001                          push qword [rax + 1]
  2125 000014AE F20F100C24                      movsd xmm1, qword [rsp]
  2126 000014B3 660F2EC1                        ucomisd xmm0, xmm1
  2127 000014B7 740C                            je .L_zero
  2128                                  .L_not_zero:
  2129 000014B9 48B8-                           mov rax, sob_boolean_false
  2129 000014BB [0200000000000000] 
  2130 000014C3 EB0A                            jmp .L_end
  2131                                  .L_zero:
  2132 000014C5 48B8-                           mov rax, sob_boolean_true
  2132 000014C7 [0300000000000000] 
  2133                                  .L_end:
  2134 000014CF C9                              leave
  2135 000014D0 C21800                          ret AND_KILL_FRAME(1)
  2136                                  
  2137                                  L_code_ptr_is_integer:
  2138 000014D3 C8000000                        enter 0, 0
  2139 000014D7 48837D1801                      cmp COUNT, 1
  2140 000014DC 0F85D50B0000                    jne L_error_arg_count_1
  2141 000014E2 488B4520                        mov rax, PARAM(0)
  2142 000014E6 803811                          cmp byte [rax], T_integer
  2143 000014E9 750C                            jne .L_false
  2144 000014EB 48B8-                           mov rax, sob_boolean_true
  2144 000014ED [0300000000000000] 
  2145 000014F5 EB0A                            jmp .L_exit
  2146                                  .L_false:
  2147 000014F7 48B8-                           mov rax, sob_boolean_false
  2147 000014F9 [0200000000000000] 
  2148                                  .L_exit:
  2149 00001501 C9                              leave
  2150 00001502 C21800                          ret AND_KILL_FRAME(1)
  2151                                  
  2152                                  L_code_ptr_raw_bin_add_rr:
  2153 00001505 C8000000                        enter 0, 0
  2154 00001509 48837D1802                      cmp COUNT, 2
  2155 0000150E 0F85D80B0000                    jne L_error_arg_count_2
  2156 00001514 488B5D20                        mov rbx, PARAM(0)
  2157                                          assert_real(rbx)
    53 00001518 803B13              <1>  cmp byte [%1], %2
    54 0000151B 0F856A0C0000        <1>  jne L_error_incorrect_type
  2158 00001521 488B4D28                        mov rcx, PARAM(1)
  2159                                          assert_real(rcx)
    53 00001525 803913              <1>  cmp byte [%1], %2
    54 00001528 0F855D0C0000        <1>  jne L_error_incorrect_type
  2160 0000152E F20F104301                      movsd xmm0, qword [rbx + 1]
  2161 00001533 F20F104901                      movsd xmm1, qword [rcx + 1]
  2162 00001538 F20F58C1                        addsd xmm0, xmm1
  2163 0000153C E8AD0A0000                      call make_real
  2164 00001541 C9                              leave
  2165 00001542 C22000                          ret AND_KILL_FRAME(2)
  2166                                  
  2167                                  L_code_ptr_raw_bin_sub_rr:
  2168 00001545 C8000000                        enter 0, 0
  2169 00001549 48837D1802                      cmp COUNT, 2
  2170 0000154E 0F85980B0000                    jne L_error_arg_count_2
  2171 00001554 488B5D20                        mov rbx, PARAM(0)
  2172                                          assert_real(rbx)
    53 00001558 803B13              <1>  cmp byte [%1], %2
    54 0000155B 0F852A0C0000        <1>  jne L_error_incorrect_type
  2173 00001561 488B4D28                        mov rcx, PARAM(1)
  2174                                          assert_real(rcx)
    53 00001565 803913              <1>  cmp byte [%1], %2
    54 00001568 0F851D0C0000        <1>  jne L_error_incorrect_type
  2175 0000156E F20F104301                      movsd xmm0, qword [rbx + 1]
  2176 00001573 F20F104901                      movsd xmm1, qword [rcx + 1]
  2177 00001578 F20F5CC1                        subsd xmm0, xmm1
  2178 0000157C E86D0A0000                      call make_real
  2179 00001581 C9                              leave
  2180 00001582 C22000                          ret AND_KILL_FRAME(2)
  2181                                  
  2182                                  L_code_ptr_raw_bin_mul_rr:
  2183 00001585 C8000000                        enter 0, 0
  2184 00001589 48837D1802                      cmp COUNT, 2
  2185 0000158E 0F85580B0000                    jne L_error_arg_count_2
  2186 00001594 488B5D20                        mov rbx, PARAM(0)
  2187                                          assert_real(rbx)
    53 00001598 803B13              <1>  cmp byte [%1], %2
    54 0000159B 0F85EA0B0000        <1>  jne L_error_incorrect_type
  2188 000015A1 488B4D28                        mov rcx, PARAM(1)
  2189                                          assert_real(rcx)
    53 000015A5 803913              <1>  cmp byte [%1], %2
    54 000015A8 0F85DD0B0000        <1>  jne L_error_incorrect_type
  2190 000015AE F20F104301                      movsd xmm0, qword [rbx + 1]
  2191 000015B3 F20F104901                      movsd xmm1, qword [rcx + 1]
  2192 000015B8 F20F59C1                        mulsd xmm0, xmm1
  2193 000015BC E82D0A0000                      call make_real
  2194 000015C1 C9                              leave
  2195 000015C2 C22000                          ret AND_KILL_FRAME(2)
  2196                                  
  2197                                  L_code_ptr_raw_bin_div_rr:
  2198 000015C5 C8000000                        enter 0, 0
  2199 000015C9 48837D1802                      cmp COUNT, 2
  2200 000015CE 0F85180B0000                    jne L_error_arg_count_2
  2201 000015D4 488B5D20                        mov rbx, PARAM(0)
  2202                                          assert_real(rbx)
    53 000015D8 803B13              <1>  cmp byte [%1], %2
    54 000015DB 0F85AA0B0000        <1>  jne L_error_incorrect_type
  2203 000015E1 488B4D28                        mov rcx, PARAM(1)
  2204                                          assert_real(rcx)
    53 000015E5 803913              <1>  cmp byte [%1], %2
    54 000015E8 0F859D0B0000        <1>  jne L_error_incorrect_type
  2205 000015EE F20F104301                      movsd xmm0, qword [rbx + 1]
  2206 000015F3 F20F104901                      movsd xmm1, qword [rcx + 1]
  2207 000015F8 660FEFD2                        pxor xmm2, xmm2
  2208 000015FC 660F2ECA                        ucomisd xmm1, xmm2
  2209 00001600 0F84B60B0000                    je L_error_division_by_zero
  2210 00001606 F20F5EC1                        divsd xmm0, xmm1
  2211 0000160A E8DF090000                      call make_real
  2212 0000160F C9                              leave
  2213 00001610 C22000                          ret AND_KILL_FRAME(2)
  2214                                  
  2215                                  L_code_ptr_raw_bin_add_zz:
  2216 00001613 C8000000                	enter 0, 0
  2217 00001617 48837D1802              	cmp COUNT, 2
  2218 0000161C 0F85CA0A0000            	jne L_error_arg_count_2
  2219 00001622 4C8B4520                	mov r8, PARAM(0)
  2220                                  	assert_integer(r8)
    53 00001626 41803811            <1>  cmp byte [%1], %2
    54 0000162A 0F855B0B0000        <1>  jne L_error_incorrect_type
  2221 00001630 4C8B4D28                	mov r9, PARAM(1)
  2222                                  	assert_integer(r9)
    53 00001634 41803911            <1>  cmp byte [%1], %2
    54 00001638 0F854D0B0000        <1>  jne L_error_incorrect_type
  2223 0000163E 498B7801                	mov rdi, qword [r8 + 1]
  2224 00001642 49037901                	add rdi, qword [r9 + 1]
  2225 00001646 E8BB090000              	call make_integer
  2226 0000164B C9                      	leave
  2227 0000164C C22000                  	ret AND_KILL_FRAME(2)
  2228                                  
  2229                                  L_code_ptr_raw_bin_add_qq:
  2230 0000164F C8000000                        enter 0, 0
  2231 00001653 48837D1802                      cmp COUNT, 2
  2232 00001658 0F858E0A0000                    jne L_error_arg_count_2
  2233 0000165E 4C8B4520                        mov r8, PARAM(0)
  2234                                          assert_fraction(r8)
    53 00001662 41803812            <1>  cmp byte [%1], %2
    54 00001666 0F851F0B0000        <1>  jne L_error_incorrect_type
  2235 0000166C 4C8B4D28                        mov r9, PARAM(1)
  2236                                          assert_fraction(r9)
    53 00001670 41803912            <1>  cmp byte [%1], %2
    54 00001674 0F85110B0000        <1>  jne L_error_incorrect_type
  2237 0000167A 498B4001                        mov rax, qword [r8 + 1] ; num1
  2238 0000167E 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2239 00001682 4899                            cqo
  2240 00001684 48F7EB                          imul rbx
  2241 00001687 4889C6                          mov rsi, rax
  2242 0000168A 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2243 0000168E 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2244 00001692 4899                            cqo
  2245 00001694 48F7EB                          imul rbx
  2246 00001697 4801C6                          add rsi, rax
  2247 0000169A 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2248 0000169E 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2249 000016A2 4899                            cqo
  2250 000016A4 48F7EB                          imul rbx
  2251 000016A7 4889C7                          mov rdi, rax
  2252 000016AA E8DE010000                      call normalize_fraction
  2253 000016AF C9                              leave
  2254 000016B0 C22000                          ret AND_KILL_FRAME(2)
  2255                                  
  2256                                  L_code_ptr_raw_bin_sub_zz:
  2257 000016B3 C8000000                	enter 0, 0
  2258 000016B7 48837D1802              	cmp COUNT, 2
  2259 000016BC 0F852A0A0000            	jne L_error_arg_count_2
  2260 000016C2 4C8B4520                	mov r8, PARAM(0)
  2261                                  	assert_integer(r8)
    53 000016C6 41803811            <1>  cmp byte [%1], %2
    54 000016CA 0F85BB0A0000        <1>  jne L_error_incorrect_type
  2262 000016D0 4C8B4D28                	mov r9, PARAM(1)
  2263                                  	assert_integer(r9)
    53 000016D4 41803911            <1>  cmp byte [%1], %2
    54 000016D8 0F85AD0A0000        <1>  jne L_error_incorrect_type
  2264 000016DE 498B7801                	mov rdi, qword [r8 + 1]
  2265 000016E2 492B7901                	sub rdi, qword [r9 + 1]
  2266 000016E6 E81B090000              	call make_integer
  2267 000016EB C9                      	leave
  2268 000016EC C22000                  	ret AND_KILL_FRAME(2)
  2269                                  
  2270                                  L_code_ptr_raw_bin_sub_qq:
  2271 000016EF C8000000                        enter 0, 0
  2272 000016F3 48837D1802                      cmp COUNT, 2
  2273 000016F8 0F85EE090000                    jne L_error_arg_count_2
  2274 000016FE 4C8B4520                        mov r8, PARAM(0)
  2275                                          assert_fraction(r8)
    53 00001702 41803812            <1>  cmp byte [%1], %2
    54 00001706 0F857F0A0000        <1>  jne L_error_incorrect_type
  2276 0000170C 4C8B4D28                        mov r9, PARAM(1)
  2277                                          assert_fraction(r9)
    53 00001710 41803912            <1>  cmp byte [%1], %2
    54 00001714 0F85710A0000        <1>  jne L_error_incorrect_type
  2278 0000171A 498B4001                        mov rax, qword [r8 + 1] ; num1
  2279 0000171E 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2280 00001722 4899                            cqo
  2281 00001724 48F7EB                          imul rbx
  2282 00001727 4889C6                          mov rsi, rax
  2283 0000172A 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2284 0000172E 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2285 00001732 4899                            cqo
  2286 00001734 48F7EB                          imul rbx
  2287 00001737 4829C6                          sub rsi, rax
  2288 0000173A 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2289 0000173E 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2290 00001742 4899                            cqo
  2291 00001744 48F7EB                          imul rbx
  2292 00001747 4889C7                          mov rdi, rax
  2293 0000174A E83E010000                      call normalize_fraction
  2294 0000174F C9                              leave
  2295 00001750 C22000                          ret AND_KILL_FRAME(2)
  2296                                  
  2297                                  L_code_ptr_raw_bin_mul_zz:
  2298 00001753 C8000000                	enter 0, 0
  2299 00001757 48837D1802              	cmp COUNT, 2
  2300 0000175C 0F858A090000            	jne L_error_arg_count_2
  2301 00001762 4C8B4520                	mov r8, PARAM(0)
  2302                                  	assert_integer(r8)
    53 00001766 41803811            <1>  cmp byte [%1], %2
    54 0000176A 0F851B0A0000        <1>  jne L_error_incorrect_type
  2303 00001770 4C8B4D28                	mov r9, PARAM(1)
  2304                                  	assert_integer(r9)
    53 00001774 41803911            <1>  cmp byte [%1], %2
    54 00001778 0F850D0A0000        <1>  jne L_error_incorrect_type
  2305 0000177E 4899                    	cqo
  2306 00001780 498B4001                	mov rax, qword [r8 + 1]
  2307 00001784 49F76101                	mul qword [r9 + 1]
  2308 00001788 4889C7                  	mov rdi, rax
  2309 0000178B E876080000              	call make_integer
  2310 00001790 C9                      	leave
  2311 00001791 C22000                  	ret AND_KILL_FRAME(2)
  2312                                  
  2313                                  L_code_ptr_raw_bin_mul_qq:
  2314 00001794 C8000000                        enter 0, 0
  2315 00001798 48837D1802                      cmp COUNT, 2
  2316 0000179D 0F8549090000                    jne L_error_arg_count_2
  2317 000017A3 4C8B4520                        mov r8, PARAM(0)
  2318                                          assert_fraction(r8)
    53 000017A7 41803812            <1>  cmp byte [%1], %2
    54 000017AB 0F85DA090000        <1>  jne L_error_incorrect_type
  2319 000017B1 4C8B4D28                        mov r9, PARAM(1)
  2320                                          assert_fraction(r9)
    53 000017B5 41803912            <1>  cmp byte [%1], %2
    54 000017B9 0F85CC090000        <1>  jne L_error_incorrect_type
  2321 000017BF 498B4001                        mov rax, qword [r8 + 1] ; num1
  2322 000017C3 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2323 000017C7 4899                            cqo
  2324 000017C9 48F7EB                          imul rbx
  2325 000017CC 4889C6                          mov rsi, rax
  2326 000017CF 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2327 000017D3 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2328 000017D7 4899                            cqo
  2329 000017D9 48F7EB                          imul rbx
  2330 000017DC 4889C7                          mov rdi, rax
  2331 000017DF E8A9000000                      call normalize_fraction
  2332 000017E4 C9                              leave
  2333 000017E5 C22000                          ret AND_KILL_FRAME(2)
  2334                                          
  2335                                  L_code_ptr_raw_bin_div_zz:
  2336 000017E8 C8000000                	enter 0, 0
  2337 000017EC 48837D1802              	cmp COUNT, 2
  2338 000017F1 0F85F5080000            	jne L_error_arg_count_2
  2339 000017F7 4C8B4520                	mov r8, PARAM(0)
  2340                                  	assert_integer(r8)
    53 000017FB 41803811            <1>  cmp byte [%1], %2
    54 000017FF 0F8586090000        <1>  jne L_error_incorrect_type
  2341 00001805 4C8B4D28                	mov r9, PARAM(1)
  2342                                  	assert_integer(r9)
    53 00001809 41803911            <1>  cmp byte [%1], %2
    54 0000180D 0F8578090000        <1>  jne L_error_incorrect_type
  2343 00001813 498B7901                	mov rdi, qword [r9 + 1]
  2344 00001817 4883FF00                	cmp rdi, 0
  2345 0000181B 0F849B090000            	je L_error_division_by_zero
  2346 00001821 498B7001                	mov rsi, qword [r8 + 1]
  2347 00001825 E863000000              	call normalize_fraction
  2348 0000182A C9                      	leave
  2349 0000182B C22000                  	ret AND_KILL_FRAME(2)
  2350                                  
  2351                                  L_code_ptr_raw_bin_div_qq:
  2352 0000182E C8000000                        enter 0, 0
  2353 00001832 48837D1802                      cmp COUNT, 2
  2354 00001837 0F85AF080000                    jne L_error_arg_count_2
  2355 0000183D 4C8B4520                        mov r8, PARAM(0)
  2356                                          assert_fraction(r8)
    53 00001841 41803812            <1>  cmp byte [%1], %2
    54 00001845 0F8540090000        <1>  jne L_error_incorrect_type
  2357 0000184B 4C8B4D28                        mov r9, PARAM(1)
  2358                                          assert_fraction(r9)
    53 0000184F 41803912            <1>  cmp byte [%1], %2
    54 00001853 0F8532090000        <1>  jne L_error_incorrect_type
  2359 00001859 4983790100                      cmp qword [r9 + 1], 0
  2360 0000185E 0F8458090000                    je L_error_division_by_zero
  2361 00001864 498B4001                        mov rax, qword [r8 + 1] ; num1
  2362 00001868 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2363 0000186C 4899                            cqo
  2364 0000186E 48F7EB                          imul rbx
  2365 00001871 4889C6                          mov rsi, rax
  2366 00001874 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2367 00001878 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2368 0000187C 4899                            cqo
  2369 0000187E 48F7EB                          imul rbx
  2370 00001881 4889C7                          mov rdi, rax
  2371 00001884 E804000000                      call normalize_fraction
  2372 00001889 C9                              leave
  2373 0000188A C22000                          ret AND_KILL_FRAME(2)
  2374                                          
  2375                                  normalize_fraction:
  2376 0000188D 56                              push rsi
  2377 0000188E 57                              push rdi
  2378 0000188F E859000000                      call gcd
  2379 00001894 4889C3                          mov rbx, rax
  2380 00001897 58                              pop rax
  2381 00001898 4899                            cqo
  2382 0000189A 48F7FB                          idiv rbx
  2383 0000189D 4989C0                          mov r8, rax
  2384 000018A0 58                              pop rax
  2385 000018A1 4899                            cqo
  2386 000018A3 48F7FB                          idiv rbx
  2387 000018A6 4989C1                          mov r9, rax
  2388 000018A9 4983F900                        cmp r9, 0
  2389 000018AD 741C                            je .L_zero
  2390 000018AF 4983F801                        cmp r8, 1
  2391 000018B3 7421                            je .L_int
  2392 000018B5 BF11000000                      mov rdi, (1 + 8 + 8)
  2393 000018BA E86AEBFFFF                      call malloc
  2394 000018BF C60012                          mov byte [rax], T_fraction
  2395 000018C2 4C894801                        mov qword [rax + 1], r9
  2396 000018C6 4C894009                        mov qword [rax + 1 + 8], r8
  2397 000018CA C3                              ret
  2398                                  .L_zero:
  2399 000018CB BF00000000                      mov rdi, 0
  2400 000018D0 E831070000                      call make_integer
  2401 000018D5 C3                              ret
  2402                                  .L_int:
  2403 000018D6 4C89CF                          mov rdi, r9
  2404 000018D9 E828070000                      call make_integer
  2405 000018DE C3                              ret
  2406                                  
  2407                                  iabs:
  2408 000018DF 4889F8                          mov rax, rdi
  2409 000018E2 4883F800                        cmp rax, 0
  2410 000018E6 7C01                            jl .Lneg
  2411 000018E8 C3                              ret
  2412                                  .Lneg:
  2413 000018E9 48F7D8                          neg rax
  2414 000018EC C3                              ret
  2415                                  
  2416                                  gcd:
  2417 000018ED E8EDFFFFFF                      call iabs
  2418 000018F2 4889C3                          mov rbx, rax
  2419 000018F5 4889F7                          mov rdi, rsi
  2420 000018F8 E8E2FFFFFF                      call iabs
  2421 000018FD 4883F800                        cmp rax, 0
  2422 00001901 7502                            jne .L0
  2423 00001903 4893                            xchg rax, rbx
  2424                                  .L0:
  2425 00001905 4883FB00                        cmp rbx, 0
  2426 00001909 740C                            je .L1
  2427 0000190B 4899                            cqo
  2428 0000190D 48F7F3                          div rbx
  2429 00001910 4889D0                          mov rax, rdx
  2430 00001913 4893                            xchg rax, rbx
  2431 00001915 EBEE                            jmp .L0
  2432                                  .L1:
  2433 00001917 C3                              ret
  2434                                  
  2435                                  L_code_ptr_error:
  2436 00001918 C8000000                        enter 0, 0
  2437 0000191C 48837D1802                      cmp COUNT, 2
  2438 00001921 0F85C5070000                    jne L_error_arg_count_2
  2439 00001927 488B7520                        mov rsi, PARAM(0)
  2440                                          assert_interned_symbol(rsi)
    53 0000192B 803E41              <1>  cmp byte [%1], %2
    54 0000192E 0F8557080000        <1>  jne L_error_incorrect_type
  2441 00001934 488B7528                        mov rsi, PARAM(1)
  2442                                          assert_string(rsi)
    53 00001938 803E03              <1>  cmp byte [%1], %2
    54 0000193B 0F854A080000        <1>  jne L_error_incorrect_type
  2443 00001941 48BF-                           mov rdi, fmt_scheme_error_part_1
  2443 00001943 [980A000000000000] 
  2444 0000194B B800000000                      mov rax, 0
  2445                                          ENTER
    44 00001950 C8000000            <1>  enter 0, 0
    45 00001954 4883E4F0            <1>  and rsp, ~15
  2446 00001958 E8(00000000)                    call printf
  2447                                          LEAVE
    49 0000195D C9                  <1>  leave
  2448 0000195E 488B7D20                        mov rdi, PARAM(0)
  2449 00001962 E843EDFFFF                      call print_sexpr
  2450 00001967 48BF-                           mov rdi, fmt_scheme_error_part_2
  2450 00001969 [AC0A000000000000] 
  2451 00001971 B800000000                      mov rax, 0
  2452                                          ENTER
    44 00001976 C8000000            <1>  enter 0, 0
    45 0000197A 4883E4F0            <1>  and rsp, ~15
  2453 0000197E E8(00000000)                    call printf
  2454                                          LEAVE
    49 00001983 C9                  <1>  leave
  2455 00001984 488B4528                        mov rax, PARAM(1)       ; sob_string
  2456 00001988 BE01000000                      mov rsi, 1              ; size = 1 byte
  2457 0000198D 488B5001                        mov rdx, qword [rax + 1] ; length
  2458 00001991 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2459 00001995 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2460                                  	ENTER
    44 0000199D C8000000            <1>  enter 0, 0
    45 000019A1 4883E4F0            <1>  and rsp, ~15
  2461 000019A5 E8(00000000)                    call fwrite
  2462                                  	LEAVE
    49 000019AA C9                  <1>  leave
  2463 000019AB 48BF-                           mov rdi, fmt_scheme_error_part_3
  2463 000019AD [EE0A000000000000] 
  2464 000019B5 B800000000                      mov rax, 0
  2465                                          ENTER
    44 000019BA C8000000            <1>  enter 0, 0
    45 000019BE 4883E4F0            <1>  and rsp, ~15
  2466 000019C2 E8(00000000)                    call printf
  2467                                          LEAVE
    49 000019C7 C9                  <1>  leave
  2468 000019C8 48C7C0F7FFFFFF                  mov rax, -9
  2469 000019CF E8(00000000)                    call exit
  2470                                  
  2471                                  L_code_ptr_raw_less_than_rr:
  2472 000019D4 C8000000                        enter 0, 0
  2473 000019D8 48837D1802                      cmp COUNT, 2
  2474 000019DD 0F8509070000                    jne L_error_arg_count_2
  2475 000019E3 488B7520                        mov rsi, PARAM(0)
  2476                                          assert_real(rsi)
    53 000019E7 803E13              <1>  cmp byte [%1], %2
    54 000019EA 0F859B070000        <1>  jne L_error_incorrect_type
  2477 000019F0 488B7D28                        mov rdi, PARAM(1)
  2478                                          assert_real(rdi)
    53 000019F4 803F13              <1>  cmp byte [%1], %2
    54 000019F7 0F858E070000        <1>  jne L_error_incorrect_type
  2479 000019FD F20F104601                      movsd xmm0, qword [rsi + 1]
  2480 00001A02 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2481 00001A07 660F2FC1                        comisd xmm0, xmm1
  2482 00001A0B 730C                            jae .L_false
  2483 00001A0D 48B8-                           mov rax, sob_boolean_true
  2483 00001A0F [0300000000000000] 
  2484 00001A17 EB0A                            jmp .L_exit
  2485                                  .L_false:
  2486 00001A19 48B8-                           mov rax, sob_boolean_false
  2486 00001A1B [0200000000000000] 
  2487                                  .L_exit:
  2488 00001A23 C9                              leave
  2489 00001A24 C22000                          ret AND_KILL_FRAME(2)
  2490                                          
  2491                                  L_code_ptr_raw_less_than_zz:
  2492 00001A27 C8000000                	enter 0, 0
  2493 00001A2B 48837D1802              	cmp COUNT, 2
  2494 00001A30 0F85B6060000            	jne L_error_arg_count_2
  2495 00001A36 4C8B4520                	mov r8, PARAM(0)
  2496                                  	assert_integer(r8)
    53 00001A3A 41803811            <1>  cmp byte [%1], %2
    54 00001A3E 0F8547070000        <1>  jne L_error_incorrect_type
  2497 00001A44 4C8B4D28                	mov r9, PARAM(1)
  2498                                  	assert_integer(r9)
    53 00001A48 41803911            <1>  cmp byte [%1], %2
    54 00001A4C 0F8539070000        <1>  jne L_error_incorrect_type
  2499 00001A52 498B7801                	mov rdi, qword [r8 + 1]
  2500 00001A56 493B7901                	cmp rdi, qword [r9 + 1]
  2501 00001A5A 7D0C                    	jge .L_false
  2502 00001A5C 48B8-                   	mov rax, sob_boolean_true
  2502 00001A5E [0300000000000000] 
  2503 00001A66 EB0A                    	jmp .L_exit
  2504                                  .L_false:
  2505 00001A68 48B8-                   	mov rax, sob_boolean_false
  2505 00001A6A [0200000000000000] 
  2506                                  .L_exit:
  2507 00001A72 C9                      	leave
  2508 00001A73 C22000                  	ret AND_KILL_FRAME(2)
  2509                                  
  2510                                  L_code_ptr_raw_less_than_qq:
  2511 00001A76 C8000000                        enter 0, 0
  2512 00001A7A 48837D1802                      cmp COUNT, 2
  2513 00001A7F 0F8567060000                    jne L_error_arg_count_2
  2514 00001A85 488B7520                        mov rsi, PARAM(0)
  2515                                          assert_fraction(rsi)
    53 00001A89 803E12              <1>  cmp byte [%1], %2
    54 00001A8C 0F85F9060000        <1>  jne L_error_incorrect_type
  2516 00001A92 488B7D28                        mov rdi, PARAM(1)
  2517                                          assert_fraction(rdi)
    53 00001A96 803F12              <1>  cmp byte [%1], %2
    54 00001A99 0F85EC060000        <1>  jne L_error_incorrect_type
  2518 00001A9F 488B4601                        mov rax, qword [rsi + 1] ; num1
  2519 00001AA3 4899                            cqo
  2520 00001AA5 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2521 00001AA9 4889C1                          mov rcx, rax
  2522 00001AAC 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2523 00001AB0 4899                            cqo
  2524 00001AB2 48F76F01                        imul qword [rdi + 1]          ; num2
  2525 00001AB6 4829C1                          sub rcx, rax
  2526 00001AB9 7D0C                            jge .L_false
  2527 00001ABB 48B8-                           mov rax, sob_boolean_true
  2527 00001ABD [0300000000000000] 
  2528 00001AC5 EB0A                            jmp .L_exit
  2529                                  .L_false:
  2530 00001AC7 48B8-                           mov rax, sob_boolean_false
  2530 00001AC9 [0200000000000000] 
  2531                                  .L_exit:
  2532 00001AD1 C9                              leave
  2533 00001AD2 C22000                          ret AND_KILL_FRAME(2)
  2534                                  
  2535                                  L_code_ptr_raw_equal_rr:
  2536 00001AD5 C8000000                        enter 0, 0
  2537 00001AD9 48837D1802                      cmp COUNT, 2
  2538 00001ADE 0F8508060000                    jne L_error_arg_count_2
  2539 00001AE4 488B7520                        mov rsi, PARAM(0)
  2540                                          assert_real(rsi)
    53 00001AE8 803E13              <1>  cmp byte [%1], %2
    54 00001AEB 0F859A060000        <1>  jne L_error_incorrect_type
  2541 00001AF1 488B7D28                        mov rdi, PARAM(1)
  2542                                          assert_real(rdi)
    53 00001AF5 803F13              <1>  cmp byte [%1], %2
    54 00001AF8 0F858D060000        <1>  jne L_error_incorrect_type
  2543 00001AFE F20F104601                      movsd xmm0, qword [rsi + 1]
  2544 00001B03 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2545 00001B08 660F2FC1                        comisd xmm0, xmm1
  2546 00001B0C 750C                            jne .L_false
  2547 00001B0E 48B8-                           mov rax, sob_boolean_true
  2547 00001B10 [0300000000000000] 
  2548 00001B18 EB0A                            jmp .L_exit
  2549                                  .L_false:
  2550 00001B1A 48B8-                           mov rax, sob_boolean_false
  2550 00001B1C [0200000000000000] 
  2551                                  .L_exit:
  2552 00001B24 C9                              leave
  2553 00001B25 C22000                          ret AND_KILL_FRAME(2)
  2554                                          
  2555                                  L_code_ptr_raw_equal_zz:
  2556 00001B28 C8000000                	enter 0, 0
  2557 00001B2C 48837D1802              	cmp COUNT, 2
  2558 00001B31 0F85B5050000            	jne L_error_arg_count_2
  2559 00001B37 4C8B4520                	mov r8, PARAM(0)
  2560                                  	assert_integer(r8)
    53 00001B3B 41803811            <1>  cmp byte [%1], %2
    54 00001B3F 0F8546060000        <1>  jne L_error_incorrect_type
  2561 00001B45 4C8B4D28                	mov r9, PARAM(1)
  2562                                  	assert_integer(r9)
    53 00001B49 41803911            <1>  cmp byte [%1], %2
    54 00001B4D 0F8538060000        <1>  jne L_error_incorrect_type
  2563 00001B53 498B7801                	mov rdi, qword [r8 + 1]
  2564 00001B57 493B7901                	cmp rdi, qword [r9 + 1]
  2565 00001B5B 750C                    	jne .L_false
  2566 00001B5D 48B8-                   	mov rax, sob_boolean_true
  2566 00001B5F [0300000000000000] 
  2567 00001B67 EB0A                    	jmp .L_exit
  2568                                  .L_false:
  2569 00001B69 48B8-                   	mov rax, sob_boolean_false
  2569 00001B6B [0200000000000000] 
  2570                                  .L_exit:
  2571 00001B73 C9                      	leave
  2572 00001B74 C22000                  	ret AND_KILL_FRAME(2)
  2573                                  
  2574                                  L_code_ptr_raw_equal_qq:
  2575 00001B77 C8000000                        enter 0, 0
  2576 00001B7B 48837D1802                      cmp COUNT, 2
  2577 00001B80 0F8566050000                    jne L_error_arg_count_2
  2578 00001B86 488B7520                        mov rsi, PARAM(0)
  2579                                          assert_fraction(rsi)
    53 00001B8A 803E12              <1>  cmp byte [%1], %2
    54 00001B8D 0F85F8050000        <1>  jne L_error_incorrect_type
  2580 00001B93 488B7D28                        mov rdi, PARAM(1)
  2581                                          assert_fraction(rdi)
    53 00001B97 803F12              <1>  cmp byte [%1], %2
    54 00001B9A 0F85EB050000        <1>  jne L_error_incorrect_type
  2582 00001BA0 488B4601                        mov rax, qword [rsi + 1] ; num1
  2583 00001BA4 4899                            cqo
  2584 00001BA6 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2585 00001BAA 4889C1                          mov rcx, rax
  2586 00001BAD 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2587 00001BB1 4899                            cqo
  2588 00001BB3 48F76F01                        imul qword [rdi + 1]          ; num2
  2589 00001BB7 4829C1                          sub rcx, rax
  2590 00001BBA 750C                            jne .L_false
  2591 00001BBC 48B8-                           mov rax, sob_boolean_true
  2591 00001BBE [0300000000000000] 
  2592 00001BC6 EB0A                            jmp .L_exit
  2593                                  .L_false:
  2594 00001BC8 48B8-                           mov rax, sob_boolean_false
  2594 00001BCA [0200000000000000] 
  2595                                  .L_exit:
  2596 00001BD2 C9                              leave
  2597 00001BD3 C22000                          ret AND_KILL_FRAME(2)
  2598                                  
  2599                                  L_code_ptr_quotient:
  2600 00001BD6 C8000000                        enter 0, 0
  2601 00001BDA 48837D1802                      cmp COUNT, 2
  2602 00001BDF 0F8507050000                    jne L_error_arg_count_2
  2603 00001BE5 488B7520                        mov rsi, PARAM(0)
  2604                                          assert_integer(rsi)
    53 00001BE9 803E11              <1>  cmp byte [%1], %2
    54 00001BEC 0F8599050000        <1>  jne L_error_incorrect_type
  2605 00001BF2 488B7D28                        mov rdi, PARAM(1)
  2606                                          assert_integer(rdi)
    53 00001BF6 803F11              <1>  cmp byte [%1], %2
    54 00001BF9 0F858C050000        <1>  jne L_error_incorrect_type
  2607 00001BFF 488B4601                        mov rax, qword [rsi + 1]
  2608 00001C03 488B5F01                        mov rbx, qword [rdi + 1]
  2609 00001C07 4883FB00                        cmp rbx, 0
  2610 00001C0B 0F84AB050000                    je L_error_division_by_zero
  2611 00001C11 4899                            cqo
  2612 00001C13 48F7FB                          idiv rbx
  2613 00001C16 4889C7                          mov rdi, rax
  2614 00001C19 E8E8030000                      call make_integer
  2615 00001C1E C9                              leave
  2616 00001C1F C22000                          ret AND_KILL_FRAME(2)
  2617                                          
  2618                                  L_code_ptr_remainder:
  2619 00001C22 C8000000                        enter 0, 0
  2620 00001C26 48837D1802                      cmp COUNT, 2
  2621 00001C2B 0F85BB040000                    jne L_error_arg_count_2
  2622 00001C31 488B7520                        mov rsi, PARAM(0)
  2623                                          assert_integer(rsi)
    53 00001C35 803E11              <1>  cmp byte [%1], %2
    54 00001C38 0F854D050000        <1>  jne L_error_incorrect_type
  2624 00001C3E 488B7D28                        mov rdi, PARAM(1)
  2625                                          assert_integer(rdi)
    53 00001C42 803F11              <1>  cmp byte [%1], %2
    54 00001C45 0F8540050000        <1>  jne L_error_incorrect_type
  2626 00001C4B 488B4601                        mov rax, qword [rsi + 1]
  2627 00001C4F 488B5F01                        mov rbx, qword [rdi + 1]
  2628 00001C53 4883FB00                        cmp rbx, 0
  2629 00001C57 0F845F050000                    je L_error_division_by_zero
  2630 00001C5D 4899                            cqo
  2631 00001C5F 48F7FB                          idiv rbx
  2632 00001C62 4889D7                          mov rdi, rdx
  2633 00001C65 E89C030000                      call make_integer
  2634 00001C6A C9                              leave
  2635 00001C6B C22000                          ret AND_KILL_FRAME(2)
  2636                                  
  2637                                  L_code_ptr_set_car:
  2638 00001C6E C8000000                        enter 0, 0
  2639 00001C72 48837D1802                      cmp COUNT, 2
  2640 00001C77 0F856F040000                    jne L_error_arg_count_2
  2641 00001C7D 488B4520                        mov rax, PARAM(0)
  2642                                          assert_pair(rax)
    53 00001C81 803821              <1>  cmp byte [%1], %2
    54 00001C84 0F8501050000        <1>  jne L_error_incorrect_type
  2643 00001C8A 488B5D28                        mov rbx, PARAM(1)
  2644 00001C8E 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2645 00001C92 48B8-                           mov rax, sob_void
  2645 00001C94 [0000000000000000] 
  2646 00001C9C C9                              leave
  2647 00001C9D C22000                          ret AND_KILL_FRAME(2)
  2648                                  
  2649                                  L_code_ptr_set_cdr:
  2650 00001CA0 C8000000                        enter 0, 0
  2651 00001CA4 48837D1802                      cmp COUNT, 2
  2652 00001CA9 0F853D040000                    jne L_error_arg_count_2
  2653 00001CAF 488B4520                        mov rax, PARAM(0)
  2654                                          assert_pair(rax)
    53 00001CB3 803821              <1>  cmp byte [%1], %2
    54 00001CB6 0F85CF040000        <1>  jne L_error_incorrect_type
  2655 00001CBC 488B5D28                        mov rbx, PARAM(1)
  2656 00001CC0 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2657 00001CC4 48B8-                           mov rax, sob_void
  2657 00001CC6 [0000000000000000] 
  2658 00001CCE C9                              leave
  2659 00001CCF C22000                          ret AND_KILL_FRAME(2)
  2660                                  
  2661                                  L_code_ptr_string_ref:
  2662 00001CD2 C8000000                        enter 0, 0
  2663 00001CD6 48837D1802                      cmp COUNT, 2
  2664 00001CDB 0F850B040000                    jne L_error_arg_count_2
  2665 00001CE1 488B7D20                        mov rdi, PARAM(0)
  2666                                          assert_string(rdi)
    53 00001CE5 803F03              <1>  cmp byte [%1], %2
    54 00001CE8 0F859D040000        <1>  jne L_error_incorrect_type
  2667 00001CEE 488B7528                        mov rsi, PARAM(1)
  2668                                          assert_integer(rsi)
    53 00001CF2 803E11              <1>  cmp byte [%1], %2
    54 00001CF5 0F8590040000        <1>  jne L_error_incorrect_type
  2669 00001CFB 488B5701                        mov rdx, qword [rdi + 1]
  2670 00001CFF 488B4E01                        mov rcx, qword [rsi + 1]
  2671 00001D03 4839D1                          cmp rcx, rdx
  2672 00001D06 0F8D14030000                    jge L_error_integer_range
  2673 00001D0C 4883F900                        cmp rcx, 0
  2674 00001D10 0F8C0A030000                    jl L_error_integer_range
  2675 00001D16 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2676 00001D1A BF02000000                      mov rdi, 2
  2677 00001D1F E805E7FFFF                      call malloc
  2678 00001D24 C60002                          mov byte [rax], T_char
  2679 00001D27 885801                          mov byte [rax + 1], bl
  2680 00001D2A C9                              leave
  2681 00001D2B C22000                          ret AND_KILL_FRAME(2)
  2682                                  
  2683                                  L_code_ptr_vector_ref:
  2684 00001D2E C8000000                        enter 0, 0
  2685 00001D32 48837D1802                      cmp COUNT, 2
  2686 00001D37 0F85AF030000                    jne L_error_arg_count_2
  2687 00001D3D 488B7D20                        mov rdi, PARAM(0)
  2688                                          assert_vector(rdi)
    53 00001D41 803F22              <1>  cmp byte [%1], %2
    54 00001D44 0F8541040000        <1>  jne L_error_incorrect_type
  2689 00001D4A 488B7528                        mov rsi, PARAM(1)
  2690                                          assert_integer(rsi)
    53 00001D4E 803E11              <1>  cmp byte [%1], %2
    54 00001D51 0F8534040000        <1>  jne L_error_incorrect_type
  2691 00001D57 488B5701                        mov rdx, qword [rdi + 1]
  2692 00001D5B 488B4E01                        mov rcx, qword [rsi + 1]
  2693 00001D5F 4839D1                          cmp rcx, rdx
  2694 00001D62 0F8DB8020000                    jge L_error_integer_range
  2695 00001D68 4883F900                        cmp rcx, 0
  2696 00001D6C 0F8CAE020000                    jl L_error_integer_range
  2697 00001D72 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2698 00001D77 C9                              leave
  2699 00001D78 C22000                          ret AND_KILL_FRAME(2)
  2700                                  
  2701                                  L_code_ptr_vector_set:
  2702 00001D7B C8000000                        enter 0, 0
  2703 00001D7F 48837D1803                      cmp COUNT, 3
  2704 00001D84 0F85CC030000                    jne L_error_arg_count_3
  2705 00001D8A 488B7D20                        mov rdi, PARAM(0)
  2706                                          assert_vector(rdi)
    53 00001D8E 803F22              <1>  cmp byte [%1], %2
    54 00001D91 0F85F4030000        <1>  jne L_error_incorrect_type
  2707 00001D97 488B7528                        mov rsi, PARAM(1)
  2708                                          assert_integer(rsi)
    53 00001D9B 803E11              <1>  cmp byte [%1], %2
    54 00001D9E 0F85E7030000        <1>  jne L_error_incorrect_type
  2709 00001DA4 488B5701                        mov rdx, qword [rdi + 1]
  2710 00001DA8 488B4E01                        mov rcx, qword [rsi + 1]
  2711 00001DAC 4839D1                          cmp rcx, rdx
  2712 00001DAF 0F8D6B020000                    jge L_error_integer_range
  2713 00001DB5 4883F900                        cmp rcx, 0
  2714 00001DB9 0F8C61020000                    jl L_error_integer_range
  2715 00001DBF 488B4530                        mov rax, PARAM(2)
  2716 00001DC3 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2717 00001DC8 48B8-                           mov rax, sob_void
  2717 00001DCA [0000000000000000] 
  2718 00001DD2 C9                              leave
  2719 00001DD3 C22800                          ret AND_KILL_FRAME(3)
  2720                                  
  2721                                  L_code_ptr_string_set:
  2722 00001DD6 C8000000                        enter 0, 0
  2723 00001DDA 48837D1803                      cmp COUNT, 3
  2724 00001DDF 0F8571030000                    jne L_error_arg_count_3
  2725 00001DE5 488B7D20                        mov rdi, PARAM(0)
  2726                                          assert_string(rdi)
    53 00001DE9 803F03              <1>  cmp byte [%1], %2
    54 00001DEC 0F8599030000        <1>  jne L_error_incorrect_type
  2727 00001DF2 488B7528                        mov rsi, PARAM(1)
  2728                                          assert_integer(rsi)
    53 00001DF6 803E11              <1>  cmp byte [%1], %2
    54 00001DF9 0F858C030000        <1>  jne L_error_incorrect_type
  2729 00001DFF 488B5701                        mov rdx, qword [rdi + 1]
  2730 00001E03 488B4E01                        mov rcx, qword [rsi + 1]
  2731 00001E07 4839D1                          cmp rcx, rdx
  2732 00001E0A 0F8D10020000                    jge L_error_integer_range
  2733 00001E10 4883F900                        cmp rcx, 0
  2734 00001E14 0F8C06020000                    jl L_error_integer_range
  2735 00001E1A 488B4530                        mov rax, PARAM(2)
  2736                                          assert_char(rax)
    53 00001E1E 803802              <1>  cmp byte [%1], %2
    54 00001E21 0F8564030000        <1>  jne L_error_incorrect_type
  2737 00001E27 8A4001                          mov al, byte [rax + 1]
  2738 00001E2A 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2739 00001E2E 48B8-                           mov rax, sob_void
  2739 00001E30 [0000000000000000] 
  2740 00001E38 C9                              leave
  2741 00001E39 C22800                          ret AND_KILL_FRAME(3)
  2742                                  
  2743                                  L_code_ptr_make_vector:
  2744 00001E3C C8000000                        enter 0, 0
  2745 00001E40 48837D1802                      cmp COUNT, 2
  2746 00001E45 0F85A1020000                    jne L_error_arg_count_2
  2747 00001E4B 488B4D20                        mov rcx, PARAM(0)
  2748                                          assert_integer(rcx)
    53 00001E4F 803911              <1>  cmp byte [%1], %2
    54 00001E52 0F8533030000        <1>  jne L_error_incorrect_type
  2749 00001E58 488B4901                        mov rcx, qword [rcx + 1]
  2750 00001E5C 4883F900                        cmp rcx, 0
  2751 00001E60 0F8CBA010000                    jl L_error_integer_range
  2752 00001E66 488B5528                        mov rdx, PARAM(1)
  2753 00001E6A 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2754 00001E72 E8B2E5FFFF                      call malloc
  2755 00001E77 C60022                          mov byte [rax], T_vector
  2756 00001E7A 48894801                        mov qword [rax + 1], rcx
  2757 00001E7E 41B800000000                    mov r8, 0
  2758                                  .L0:
  2759 00001E84 4939C8                          cmp r8, rcx
  2760 00001E87 740A                            je .L1
  2761 00001E89 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2762 00001E8E 49FFC0                          inc r8
  2763 00001E91 EBF1                            jmp .L0
  2764                                  .L1:
  2765 00001E93 C9                              leave
  2766 00001E94 C22000                          ret AND_KILL_FRAME(2)
  2767                                          
  2768                                  L_code_ptr_make_string:
  2769 00001E97 C8000000                        enter 0, 0
  2770 00001E9B 48837D1802                      cmp COUNT, 2
  2771 00001EA0 0F8546020000                    jne L_error_arg_count_2
  2772 00001EA6 488B4D20                        mov rcx, PARAM(0)
  2773                                          assert_integer(rcx)
    53 00001EAA 803911              <1>  cmp byte [%1], %2
    54 00001EAD 0F85D8020000        <1>  jne L_error_incorrect_type
  2774 00001EB3 488B4901                        mov rcx, qword [rcx + 1]
  2775 00001EB7 4883F900                        cmp rcx, 0
  2776 00001EBB 0F8C5F010000                    jl L_error_integer_range
  2777 00001EC1 488B5528                        mov rdx, PARAM(1)
  2778                                          assert_char(rdx)
    53 00001EC5 803A02              <1>  cmp byte [%1], %2
    54 00001EC8 0F85BD020000        <1>  jne L_error_incorrect_type
  2779 00001ECE 8A5201                          mov dl, byte [rdx + 1]
  2780 00001ED1 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2781 00001ED5 E84FE5FFFF                      call malloc
  2782 00001EDA C60003                          mov byte [rax], T_string
  2783 00001EDD 48894801                        mov qword [rax + 1], rcx
  2784 00001EE1 41B800000000                    mov r8, 0
  2785                                  .L0:
  2786 00001EE7 4939C8                          cmp r8, rcx
  2787 00001EEA 740A                            je .L1
  2788 00001EEC 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2789 00001EF1 49FFC0                          inc r8
  2790 00001EF4 EBF1                            jmp .L0
  2791                                  .L1:
  2792 00001EF6 C9                              leave
  2793 00001EF7 C22000                          ret AND_KILL_FRAME(2)
  2794                                  
  2795                                  L_code_ptr_numerator:
  2796 00001EFA C8000000                        enter 0, 0
  2797 00001EFE 48837D1801                      cmp COUNT, 1
  2798 00001F03 0F85AE010000                    jne L_error_arg_count_1
  2799 00001F09 488B4520                        mov rax, PARAM(0)
  2800                                          assert_fraction(rax)
    53 00001F0D 803812              <1>  cmp byte [%1], %2
    54 00001F10 0F8575020000        <1>  jne L_error_incorrect_type
  2801 00001F16 488B7801                        mov rdi, qword [rax + 1]
  2802 00001F1A E8E7000000                      call make_integer
  2803 00001F1F C9                              leave
  2804 00001F20 C21800                          ret AND_KILL_FRAME(1)
  2805                                          
  2806                                  L_code_ptr_denominator:
  2807 00001F23 C8000000                        enter 0, 0
  2808 00001F27 48837D1801                      cmp COUNT, 1
  2809 00001F2C 0F8585010000                    jne L_error_arg_count_1
  2810 00001F32 488B4520                        mov rax, PARAM(0)
  2811                                          assert_fraction(rax)
    53 00001F36 803812              <1>  cmp byte [%1], %2
    54 00001F39 0F854C020000        <1>  jne L_error_incorrect_type
  2812 00001F3F 488B7809                        mov rdi, qword [rax + 1 + 8]
  2813 00001F43 E8BE000000                      call make_integer
  2814 00001F48 C9                              leave
  2815 00001F49 C21800                          ret AND_KILL_FRAME(1)
  2816                                  
  2817                                  L_code_ptr_is_eq:
  2818 00001F4C C8000000                	enter 0, 0
  2819 00001F50 48837D1802              	cmp COUNT, 2
  2820 00001F55 0F8591010000            	jne L_error_arg_count_2
  2821 00001F5B 488B7D20                	mov rdi, PARAM(0)
  2822 00001F5F 488B7528                	mov rsi, PARAM(1)
  2823 00001F63 4839F7                  	cmp rdi, rsi
  2824 00001F66 746C                    	je .L_eq_true
  2825 00001F68 8A17                    	mov dl, byte [rdi]
  2826 00001F6A 3A16                    	cmp dl, byte [rsi]
  2827 00001F6C 7572                    	jne .L_eq_false
  2828 00001F6E 80FA02                  	cmp dl, T_char
  2829 00001F71 7459                    	je .L_char
  2830 00001F73 80FA41                  	cmp dl, T_interned_symbol
  2831 00001F76 7440                    	je .L_interned_symbol
  2832 00001F78 80FA42                          cmp dl, T_uninterned_symbol
  2833 00001F7B 7443                            je .L_uninterned_symbol
  2834 00001F7D 80FA13                  	cmp dl, T_real
  2835 00001F80 742E                    	je .L_real
  2836 00001F82 80FA12                  	cmp dl, T_fraction
  2837 00001F85 7413                    	je .L_fraction
  2838 00001F87 80FA11                          cmp dl, T_integer
  2839 00001F8A 7402                            je .L_integer
  2840 00001F8C EB52                    	jmp .L_eq_false
  2841                                  .L_integer:
  2842 00001F8E 488B4601                        mov rax, qword [rsi + 1]
  2843 00001F92 483B4701                        cmp rax, qword [rdi + 1]
  2844 00001F96 7548                            jne .L_eq_false
  2845 00001F98 EB3A                            jmp .L_eq_true
  2846                                  .L_fraction:
  2847 00001F9A 488B4601                	mov rax, qword [rsi + 1]
  2848 00001F9E 483B4701                	cmp rax, qword [rdi + 1]
  2849 00001FA2 753C                    	jne .L_eq_false
  2850 00001FA4 488B4609                	mov rax, qword [rsi + 1 + 8]
  2851 00001FA8 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2852 00001FAC 7532                    	jne .L_eq_false
  2853 00001FAE EB24                    	jmp .L_eq_true
  2854                                  .L_real:
  2855 00001FB0 488B4601                	mov rax, qword [rsi + 1]
  2856 00001FB4 483B4701                	cmp rax, qword [rdi + 1]
  2857                                  .L_interned_symbol:
  2858                                  	; never reached, because interned_symbols are static!
  2859                                  	; but I'm keeping it in case, I'll ever change
  2860                                  	; the implementation
  2861 00001FB8 488B4601                	mov rax, qword [rsi + 1]
  2862 00001FBC 483B4701                	cmp rax, qword [rdi + 1]
  2863                                  .L_uninterned_symbol:
  2864 00001FC0 4C8B4701                        mov r8, qword [rdi + 1]
  2865 00001FC4 4C3B4601                        cmp r8, qword [rsi + 1]
  2866 00001FC8 7516                            jne .L_eq_false
  2867 00001FCA EB08                            jmp .L_eq_true
  2868                                  .L_char:
  2869 00001FCC 8A5E01                  	mov bl, byte [rsi + 1]
  2870 00001FCF 3A5F01                  	cmp bl, byte [rdi + 1]
  2871 00001FD2 750C                    	jne .L_eq_false
  2872                                  .L_eq_true:
  2873 00001FD4 48B8-                   	mov rax, sob_boolean_true
  2873 00001FD6 [0300000000000000] 
  2874 00001FDE EB0A                    	jmp .L_eq_exit
  2875                                  .L_eq_false:
  2876 00001FE0 48B8-                   	mov rax, sob_boolean_false
  2876 00001FE2 [0200000000000000] 
  2877                                  .L_eq_exit:
  2878 00001FEA C9                      	leave
  2879 00001FEB C22000                  	ret AND_KILL_FRAME(2)
  2880                                  
  2881                                  make_real:
  2882 00001FEE C8000000                        enter 0, 0
  2883 00001FF2 BF09000000                      mov rdi, (1 + 8)
  2884 00001FF7 E82DE4FFFF                      call malloc
  2885 00001FFC C60013                          mov byte [rax], T_real
  2886 00001FFF F20F114001                      movsd qword [rax + 1], xmm0
  2887 00002004 C9                              leave 
  2888 00002005 C3                              ret
  2889                                          
  2890                                  make_integer:
  2891 00002006 C8000000                        enter 0, 0
  2892 0000200A 4889FE                          mov rsi, rdi
  2893 0000200D BF09000000                      mov rdi, (1 + 8)
  2894 00002012 E812E4FFFF                      call malloc
  2895 00002017 C60011                          mov byte [rax], T_integer
  2896 0000201A 48897001                        mov qword [rax + 1], rsi
  2897 0000201E C9                              leave
  2898 0000201F C3                              ret
  2899                                          
  2900                                  L_error_integer_range:
  2901 00002020 488B3C25[00000000]              mov rdi, qword [stderr]
  2902 00002028 48BE-                           mov rsi, fmt_integer_range
  2902 0000202A [650A000000000000] 
  2903 00002032 B800000000                      mov rax, 0
  2904                                          ENTER
    44 00002037 C8000000            <1>  enter 0, 0
    45 0000203B 4883E4F0            <1>  and rsp, ~15
  2905 0000203F E8(00000000)                    call fprintf
  2906                                          LEAVE
    49 00002044 C9                  <1>  leave
  2907 00002045 48C7C0FBFFFFFF                  mov rax, -5
  2908 0000204C E8(00000000)                    call exit
  2909                                  
  2910                                  L_error_arg_negative:
  2911 00002051 488B3C25[00000000]              mov rdi, qword [stderr]
  2912 00002059 48BE-                           mov rsi, fmt_arg_negative
  2912 0000205B [3D09000000000000] 
  2913 00002063 B800000000                      mov rax, 0
  2914                                          ENTER
    44 00002068 C8000000            <1>  enter 0, 0
    45 0000206C 4883E4F0            <1>  and rsp, ~15
  2915 00002070 E8(00000000)                    call fprintf
  2916                                          LEAVE
    49 00002075 C9                  <1>  leave
  2917 00002076 48C7C0FDFFFFFF                  mov rax, -3
  2918 0000207D E8(00000000)                    call exit
  2919                                  
  2920                                  L_error_arg_count_0:
  2921 00002082 488B3C25[00000000]              mov rdi, qword [stderr]
  2922 0000208A 48BE-                           mov rsi, fmt_arg_count_0
  2922 0000208C [6309000000000000] 
  2923 00002094 488B5518                        mov rdx, COUNT
  2924 00002098 B800000000                      mov rax, 0
  2925                                          ENTER
    44 0000209D C8000000            <1>  enter 0, 0
    45 000020A1 4883E4F0            <1>  and rsp, ~15
  2926 000020A5 E8(00000000)                    call fprintf
  2927                                          LEAVE
    49 000020AA C9                  <1>  leave
  2928 000020AB 48C7C0FDFFFFFF                  mov rax, -3
  2929 000020B2 E8(00000000)                    call exit
  2930                                  
  2931                                  L_error_arg_count_1:
  2932 000020B7 488B3C25[00000000]              mov rdi, qword [stderr]
  2933 000020BF 48BE-                           mov rsi, fmt_arg_count_1
  2933 000020C1 [8B09000000000000] 
  2934 000020C9 488B5518                        mov rdx, COUNT
  2935 000020CD B800000000                      mov rax, 0
  2936                                          ENTER
    44 000020D2 C8000000            <1>  enter 0, 0
    45 000020D6 4883E4F0            <1>  and rsp, ~15
  2937 000020DA E8(00000000)                    call fprintf
  2938                                          LEAVE
    49 000020DF C9                  <1>  leave
  2939 000020E0 48C7C0FDFFFFFF                  mov rax, -3
  2940 000020E7 E8(00000000)                    call exit
  2941                                  
  2942                                  L_error_arg_count_2:
  2943 000020EC 488B3C25[00000000]              mov rdi, qword [stderr]
  2944 000020F4 48BE-                           mov rsi, fmt_arg_count_2
  2944 000020F6 [F109000000000000] 
  2945 000020FE 488B5518                        mov rdx, COUNT
  2946 00002102 B800000000                      mov rax, 0
  2947                                          ENTER
    44 00002107 C8000000            <1>  enter 0, 0
    45 0000210B 4883E4F0            <1>  and rsp, ~15
  2948 0000210F E8(00000000)                    call fprintf
  2949                                          LEAVE
    49 00002114 C9                  <1>  leave
  2950 00002115 48C7C0FDFFFFFF                  mov rax, -3
  2951 0000211C E8(00000000)                    call exit
  2952                                  
  2953                                  L_error_arg_count_12:
  2954 00002121 488B3C25[00000000]              mov rdi, qword [stderr]
  2955 00002129 48BE-                           mov rsi, fmt_arg_count_12
  2955 0000212B [B109000000000000] 
  2956 00002133 488B5518                        mov rdx, COUNT
  2957 00002137 B800000000                      mov rax, 0
  2958                                          ENTER
    44 0000213C C8000000            <1>  enter 0, 0
    45 00002140 4883E4F0            <1>  and rsp, ~15
  2959 00002144 E8(00000000)                    call fprintf
  2960                                          LEAVE
    49 00002149 C9                  <1>  leave
  2961 0000214A 48C7C0FDFFFFFF                  mov rax, -3
  2962 00002151 E8(00000000)                    call exit
  2963                                  
  2964                                  L_error_arg_count_3:
  2965 00002156 488B3C25[00000000]              mov rdi, qword [stderr]
  2966 0000215E 48BE-                           mov rsi, fmt_arg_count_3
  2966 00002160 [180A000000000000] 
  2967 00002168 488B5518                        mov rdx, COUNT
  2968 0000216C B800000000                      mov rax, 0
  2969                                          ENTER
    44 00002171 C8000000            <1>  enter 0, 0
    45 00002175 4883E4F0            <1>  and rsp, ~15
  2970 00002179 E8(00000000)                    call fprintf
  2971                                          LEAVE
    49 0000217E C9                  <1>  leave
  2972 0000217F 48C7C0FDFFFFFF                  mov rax, -3
  2973 00002186 E8(00000000)                    call exit
  2974                                          
  2975                                  L_error_incorrect_type:
  2976 0000218B 488B3C25[00000000]              mov rdi, qword [stderr]
  2977 00002193 48BE-                           mov rsi, fmt_type
  2977 00002195 [410A000000000000] 
  2978 0000219D B800000000                      mov rax, 0
  2979                                          ENTER
    44 000021A2 C8000000            <1>  enter 0, 0
    45 000021A6 4883E4F0            <1>  and rsp, ~15
  2980 000021AA E8(00000000)                    call fprintf
  2981                                          LEAVE
    49 000021AF C9                  <1>  leave
  2982 000021B0 48C7C0FCFFFFFF                  mov rax, -4
  2983 000021B7 E8(00000000)                    call exit
  2984                                  
  2985                                  L_error_division_by_zero:
  2986 000021BC 488B3C25[00000000]              mov rdi, qword [stderr]
  2987 000021C4 48BE-                           mov rsi, fmt_division_by_zero
  2987 000021C6 [820A000000000000] 
  2988 000021CE B800000000                      mov rax, 0
  2989                                          ENTER
    44 000021D3 C8000000            <1>  enter 0, 0
    45 000021D7 4883E4F0            <1>  and rsp, ~15
  2990 000021DB E8(00000000)                    call fprintf
  2991                                          LEAVE
    49 000021E0 C9                  <1>  leave
  2992 000021E1 48C7C0F8FFFFFF                  mov rax, -8
  2993 000021E8 E8(00000000)                    call exit
  2994                                  
  2995                                  section .data
  2996                                  gensym_count:
  2997 00000932 0000000000000000                dq 0
  2998                                  fmt_char:
  2999 0000093A 256300                          db `%c\0`
  3000                                  fmt_arg_negative:
  3001 0000093D 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  3001 00000946 7267756D656E742063-
  3001 0000094F 616E6E6F7420626520-
  3001 00000958 6E656761746976652E-
  3001 00000961 0A00               
  3002                                  fmt_arg_count_0:
  3003 00000963 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  3003 0000096C 74696E67207A65726F-
  3003 00000975 20617267756D656E74-
  3003 0000097E 732E20466F756E6420-
  3003 00000987 25640A00           
  3004                                  fmt_arg_count_1:
  3005 0000098B 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  3005 00000994 74696E67206F6E6520-
  3005 0000099D 617267756D656E742E-
  3005 000009A6 20466F756E64202564-
  3005 000009AF 0A00               
  3006                                  fmt_arg_count_12:
  3007 000009B1 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  3007 000009BA 74696E67206F6E6520-
  3007 000009C3 726571756972656420-
  3007 000009CC 616E64206F6E65206F-
  3007 000009D5 7074696F6E616C2061-
  3007 000009DE 7267756D656E742E20-
  3007 000009E7 466F756E642025640A-
  3007 000009F0 00                 
  3008                                  fmt_arg_count_2:
  3009 000009F1 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  3009 000009FA 74696E672074776F20-
  3009 00000A03 617267756D656E7473-
  3009 00000A0C 2E20466F756E642025-
  3009 00000A15 640A00             
  3010                                  fmt_arg_count_3:
  3011 00000A18 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  3011 00000A21 74696E672074687265-
  3011 00000A2A 6520617267756D656E-
  3011 00000A33 74732E20466F756E64-
  3011 00000A3C 2025640A00         
  3012                                  fmt_type:
  3013 00000A41 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  3013 00000A4A 696F6E207061737365-
  3013 00000A53 6420696E636F727265-
  3013 00000A5C 637420747970650A00 
  3014                                  fmt_integer_range:
  3015 00000A65 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  3015 00000A6E 7265637420696E7465-
  3015 00000A77 6765722072616E6765-
  3015 00000A80 0A00               
  3016                                  fmt_division_by_zero:
  3017 00000A82 212121204469766973-             db `!!! Division by zero\n\0`
  3017 00000A8B 696F6E206279207A65-
  3017 00000A94 726F0A00           
  3018                                  fmt_scheme_error_part_1:
  3019 00000A98 0A2121212054686520-             db `\n!!! The procedure \0`
  3019 00000AA1 70726F636564757265-
  3019 00000AAA 2000               
  3020                                  fmt_scheme_error_part_2:
  3021 00000AAC 2061736B656420746F-             db ` asked to terminate the program\n`
  3021 00000AB5 207465726D696E6174-
  3021 00000ABE 65207468652070726F-
  3021 00000AC7 6772616D0A         
  3022 00000ACC 202020207769746820-             db `    with the following message:\n\n\0`
  3022 00000AD5 74686520666F6C6C6F-
  3022 00000ADE 77696E67206D657373-
  3022 00000AE7 6167653A0A0A00     
  3023                                  fmt_scheme_error_part_3:
  3024 00000AEE 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  3024 00000AF7 210A0A00           
