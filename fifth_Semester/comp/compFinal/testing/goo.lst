     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "fact"
   469 000005DE 0400000000000000        	dq 4
   470 000005E6 66616374                	db 0x66, 0x61, 0x63, 0x74
   471                                  	; L_constants + 1514:
   472 000005EA 03                      	db T_string	; "+"
   473 000005EB 0100000000000000        	dq 1
   474 000005F3 2B                      	db 0x2B
   475                                  	; L_constants + 1524:
   476 000005F4 11                      	db T_integer	; 1
   477 000005F5 0100000000000000        	dq 1
   478                                  	; L_constants + 1533:
   479 000005FD 11                      	db T_integer	; 0
   480 000005FE 0000000000000000        	dq 0
   481                                  	; L_constants + 1542:
   482 00000606 03                      	db T_string	; "-"
   483 00000607 0100000000000000        	dq 1
   484 0000060F 2D                      	db 0x2D
   485                                  	; L_constants + 1552:
   486 00000610 11                      	db T_integer	; 5
   487 00000611 0500000000000000        	dq 5
   488                                  free_var_0:	; location of +
   489 00000619 [2106000000000000]      	dq .undefined_object
   490                                  .undefined_object:
   491 00000621 05                      	db T_undefined
   492 00000622 [EA05000000000000]      	dq L_constants + 1514
   493                                  
   494                                  free_var_1:	; location of -
   495 0000062A [3206000000000000]      	dq .undefined_object
   496                                  .undefined_object:
   497 00000632 05                      	db T_undefined
   498 00000633 [0606000000000000]      	dq L_constants + 1542
   499                                  
   500                                  free_var_2:	; location of fact
   501 0000063B [4306000000000000]      	dq .undefined_object
   502                                  .undefined_object:
   503 00000643 05                      	db T_undefined
   504 00000644 [DD05000000000000]      	dq L_constants + 1501
   505                                  
   506                                  free_var_3:	; location of zero?
   507 0000064C [5406000000000000]      	dq .undefined_object
   508                                  .undefined_object:
   509 00000654 05                      	db T_undefined
   510 00000655 [E201000000000000]      	dq L_constants + 482
   511                                  
   512                                  
   513                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   514                                  global main
   515                                  section .text
   516                                  main:
   517 00000000 C8000000                        enter 0, 0
   518 00000004 6A00                            push 0
   519 00000006 6A00                            push 0
   520 00000008 68[E9610000]                    push Lend
   521 0000000D C8000000                        enter 0, 0
   522                                  	; building closure for zero?
   523 00000011 48BF-                   	mov rdi, free_var_3
   523 00000013 [4C06000000000000] 
   524 0000001B 48BE-                   	mov rsi, L_code_ptr_is_zero
   524 0000001D [B373000000000000] 
   525 00000025 E85A6B0000              	call bind_primitive
   526                                  
   527                                  	; preparing a non-tail-call
   528                                  	; preparing a non-tail-call
   529 0000002A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   530 0000002F E820630000              	call malloc
   531 00000034 50                      	push rax
   532 00000035 BF00000000              	mov rdi, 8 * 0	; new rib
   533 0000003A E815630000              	call malloc
   534 0000003F 50                      	push rax
   535 00000040 BF08000000              	mov rdi, 8 * 1	; extended env
   536 00000045 E80A630000              	call malloc
   537 0000004A 488B7D10                	mov rdi, ENV
   538 0000004E BE00000000              	mov rsi, 0
   539 00000053 BA01000000              	mov rdx, 1
   540                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   541 00000058 4883FE00                	cmp rsi, 0
   542 0000005C 7410                    	je .L_lambda_simple_env_end_0001
   543 0000005E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   544 00000062 48890CD0                	mov qword [rax + 8 * rdx], rcx
   545 00000066 48FFC6                  	inc rsi
   546 00000069 48FFC2                  	inc rdx
   547 0000006C EBEA                    	jmp .L_lambda_simple_env_loop_0001
   548                                  .L_lambda_simple_env_end_0001:
   549 0000006E 5B                      	pop rbx
   550 0000006F BE00000000              	mov rsi, 0
   551                                  .L_lambda_simple_params_loop_0001:	; copy params
   552 00000074 4883FE00                	cmp rsi, 0
   553 00000078 740E                    	je .L_lambda_simple_params_end_0001
   554 0000007A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   555 0000007F 488914F3                	mov qword [rbx + 8 * rsi], rdx
   556 00000083 48FFC6                  	inc rsi
   557 00000086 EBEC                    	jmp .L_lambda_simple_params_loop_0001
   558                                  .L_lambda_simple_params_end_0001:
   559 00000088 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   560 0000008B 4889C3                  	mov rbx, rax
   561 0000008E 58                      	pop rax
   562 0000008F C60004                  	mov byte [rax], T_closure
   563 00000092 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   564 00000096 48C74009[A3000000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
   565 0000009E E9DD040000              	jmp .L_lambda_simple_end_0001
   566                                  .L_lambda_simple_code_0001:	; lambda-simple body
   567 000000A3 48837C241001            	cmp qword [rsp + 8 * 2], 1
   568 000000A9 740B                    	je .L_lambda_simple_arity_check_ok_0001
   569 000000AB FF742410                	push qword [rsp + 8 * 2]
   570 000000AF 6A01                    	push 1
   571 000000B1 E957620000              	jmp L_error_incorrect_arity_simple
   572                                  .L_lambda_simple_arity_check_ok_0001:
   573 000000B6 C8000000                	enter 0, 0
   574 000000BA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   575 000000BF E890620000              	call malloc
   576 000000C4 50                      	push rax
   577 000000C5 BF08000000              	mov rdi, 8 * 1	; new rib
   578 000000CA E885620000              	call malloc
   579 000000CF 50                      	push rax
   580 000000D0 BF10000000              	mov rdi, 8 * 2	; extended env
   581 000000D5 E87A620000              	call malloc
   582 000000DA 488B7D10                	mov rdi, ENV
   583 000000DE BE00000000              	mov rsi, 0
   584 000000E3 BA01000000              	mov rdx, 1
   585                                  .L_lambda_simple_env_loop_0002:	; ext_env[i + 1] <-- env[i]
   586 000000E8 4883FE01                	cmp rsi, 1
   587 000000EC 7410                    	je .L_lambda_simple_env_end_0002
   588 000000EE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   589 000000F2 48890CD0                	mov qword [rax + 8 * rdx], rcx
   590 000000F6 48FFC6                  	inc rsi
   591 000000F9 48FFC2                  	inc rdx
   592 000000FC EBEA                    	jmp .L_lambda_simple_env_loop_0002
   593                                  .L_lambda_simple_env_end_0002:
   594 000000FE 5B                      	pop rbx
   595 000000FF BE00000000              	mov rsi, 0
   596                                  .L_lambda_simple_params_loop_0002:	; copy params
   597 00000104 4883FE01                	cmp rsi, 1
   598 00000108 740E                    	je .L_lambda_simple_params_end_0002
   599 0000010A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   600 0000010F 488914F3                	mov qword [rbx + 8 * rsi], rdx
   601 00000113 48FFC6                  	inc rsi
   602 00000116 EBEC                    	jmp .L_lambda_simple_params_loop_0002
   603                                  .L_lambda_simple_params_end_0002:
   604 00000118 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   605 0000011B 4889C3                  	mov rbx, rax
   606 0000011E 58                      	pop rax
   607 0000011F C60004                  	mov byte [rax], T_closure
   608 00000122 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   609 00000126 48C74009[33010000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0002
   610 0000012E E949040000              	jmp .L_lambda_simple_end_0002
   611                                  .L_lambda_simple_code_0002:	; lambda-simple body
   612 00000133 48837C241001            	cmp qword [rsp + 8 * 2], 1
   613 00000139 740B                    	je .L_lambda_simple_arity_check_ok_0002
   614 0000013B FF742410                	push qword [rsp + 8 * 2]
   615 0000013F 6A01                    	push 1
   616 00000141 E9C7610000              	jmp L_error_incorrect_arity_simple
   617                                  .L_lambda_simple_arity_check_ok_0002:
   618 00000146 C8000000                	enter 0, 0
   619                                  	; preparing a non-tail-call
   620 0000014A 488B4520                	mov rax, PARAM(0)	; param n
   621 0000014E 50                      	push rax
   622 0000014F 6A01                    	push 1	; arg count
   623 00000151 488B0425[4C060000]      	mov rax, qword [free_var_3]	; free var zero?
   624 00000159 803805                  	cmp byte [rax], T_undefined
   625 0000015C 0F84C5600000            	je L_error_fvar_undefined
   626 00000162 803804                  	cmp byte [rax], T_closure
   627 00000165 0F8540610000            	jne L_error_non_closure
   628 0000016B FF7001                  	push SOB_CLOSURE_ENV(rax)
   629 0000016E FF5009                  	call SOB_CLOSURE_CODE(rax)
   630 00000171 483D[02000000]          	cmp rax, sob_boolean_false
   631 00000177 0F842E010000            	je .L_if_else_0001
   632 0000017D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   633 00000182 E8CD610000              	call malloc
   634 00000187 50                      	push rax
   635 00000188 BF08000000              	mov rdi, 8 * 1	; new rib
   636 0000018D E8C2610000              	call malloc
   637 00000192 50                      	push rax
   638 00000193 BF18000000              	mov rdi, 8 * 3	; extended env
   639 00000198 E8B7610000              	call malloc
   640 0000019D 488B7D10                	mov rdi, ENV
   641 000001A1 BE00000000              	mov rsi, 0
   642 000001A6 BA01000000              	mov rdx, 1
   643                                  .L_lambda_simple_env_loop_0003:	; ext_env[i + 1] <-- env[i]
   644 000001AB 4883FE02                	cmp rsi, 2
   645 000001AF 7410                    	je .L_lambda_simple_env_end_0003
   646 000001B1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   647 000001B5 48890CD0                	mov qword [rax + 8 * rdx], rcx
   648 000001B9 48FFC6                  	inc rsi
   649 000001BC 48FFC2                  	inc rdx
   650 000001BF EBEA                    	jmp .L_lambda_simple_env_loop_0003
   651                                  .L_lambda_simple_env_end_0003:
   652 000001C1 5B                      	pop rbx
   653 000001C2 BE00000000              	mov rsi, 0
   654                                  .L_lambda_simple_params_loop_0003:	; copy params
   655 000001C7 4883FE01                	cmp rsi, 1
   656 000001CB 740E                    	je .L_lambda_simple_params_end_0003
   657 000001CD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   658 000001D2 488914F3                	mov qword [rbx + 8 * rsi], rdx
   659 000001D6 48FFC6                  	inc rsi
   660 000001D9 EBEC                    	jmp .L_lambda_simple_params_loop_0003
   661                                  .L_lambda_simple_params_end_0003:
   662 000001DB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   663 000001DE 4889C3                  	mov rbx, rax
   664 000001E1 58                      	pop rax
   665 000001E2 C60004                  	mov byte [rax], T_closure
   666 000001E5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   667 000001E9 48C74009[F6010000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0003
   668 000001F1 E9B0000000              	jmp .L_lambda_simple_end_0003
   669                                  .L_lambda_simple_code_0003:	; lambda-simple body
   670 000001F6 48837C241001            	cmp qword [rsp + 8 * 2], 1
   671 000001FC 740B                    	je .L_lambda_simple_arity_check_ok_0003
   672 000001FE FF742410                	push qword [rsp + 8 * 2]
   673 00000202 6A01                    	push 1
   674 00000204 E904610000              	jmp L_error_incorrect_arity_simple
   675                                  .L_lambda_simple_arity_check_ok_0003:
   676 00000209 C8000000                	enter 0, 0
   677 0000020D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   678 00000212 E83D610000              	call malloc
   679 00000217 50                      	push rax
   680 00000218 BF08000000              	mov rdi, 8 * 1	; new rib
   681 0000021D E832610000              	call malloc
   682 00000222 50                      	push rax
   683 00000223 BF20000000              	mov rdi, 8 * 4	; extended env
   684 00000228 E827610000              	call malloc
   685 0000022D 488B7D10                	mov rdi, ENV
   686 00000231 BE00000000              	mov rsi, 0
   687 00000236 BA01000000              	mov rdx, 1
   688                                  .L_lambda_simple_env_loop_0004:	; ext_env[i + 1] <-- env[i]
   689 0000023B 4883FE03                	cmp rsi, 3
   690 0000023F 7410                    	je .L_lambda_simple_env_end_0004
   691 00000241 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   692 00000245 48890CD0                	mov qword [rax + 8 * rdx], rcx
   693 00000249 48FFC6                  	inc rsi
   694 0000024C 48FFC2                  	inc rdx
   695 0000024F EBEA                    	jmp .L_lambda_simple_env_loop_0004
   696                                  .L_lambda_simple_env_end_0004:
   697 00000251 5B                      	pop rbx
   698 00000252 BE00000000              	mov rsi, 0
   699                                  .L_lambda_simple_params_loop_0004:	; copy params
   700 00000257 4883FE01                	cmp rsi, 1
   701 0000025B 740E                    	je .L_lambda_simple_params_end_0004
   702 0000025D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   703 00000262 488914F3                	mov qword [rbx + 8 * rsi], rdx
   704 00000266 48FFC6                  	inc rsi
   705 00000269 EBEC                    	jmp .L_lambda_simple_params_loop_0004
   706                                  .L_lambda_simple_params_end_0004:
   707 0000026B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   708 0000026E 4889C3                  	mov rbx, rax
   709 00000271 58                      	pop rax
   710 00000272 C60004                  	mov byte [rax], T_closure
   711 00000275 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   712 00000279 48C74009[83020000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0004
   713 00000281 EB1F                    	jmp .L_lambda_simple_end_0004
   714                                  .L_lambda_simple_code_0004:	; lambda-simple body
   715 00000283 48837C241001            	cmp qword [rsp + 8 * 2], 1
   716 00000289 740B                    	je .L_lambda_simple_arity_check_ok_0004
   717 0000028B FF742410                	push qword [rsp + 8 * 2]
   718 0000028F 6A01                    	push 1
   719 00000291 E977600000              	jmp L_error_incorrect_arity_simple
   720                                  .L_lambda_simple_arity_check_ok_0004:
   721 00000296 C8000000                	enter 0, 0
   722 0000029A 488B4520                	mov rax, PARAM(0)	; param y
   723 0000029E C9                      	leave
   724 0000029F C21800                  	ret AND_KILL_FRAME(1)
   725                                  .L_lambda_simple_end_0004:	; new closure is in rax
   726 000002A2 C9                      	leave
   727 000002A3 C21800                  	ret AND_KILL_FRAME(1)
   728                                  .L_lambda_simple_end_0003:	; new closure is in rax
   729 000002A6 E9CD020000              	jmp .L_if_end_0001
   730                                  .L_if_else_0001:
   731                                  	; preparing a tail-call
   732                                  	; preparing a non-tail-call
   733                                  	; preparing a non-tail-call
   734 000002AB 48B8-                   	mov rax, L_constants + 1524
   734 000002AD [F405000000000000] 
   735 000002B5 50                      	push rax
   736 000002B6 488B4520                	mov rax, PARAM(0)	; param n
   737 000002BA 50                      	push rax
   738 000002BB 6A02                    	push 2	; arg count
   739 000002BD 488B0425[2A060000]      	mov rax, qword [free_var_1]	; free var -
   740 000002C5 803805                  	cmp byte [rax], T_undefined
   741 000002C8 0F84595F0000            	je L_error_fvar_undefined
   742 000002CE 803804                  	cmp byte [rax], T_closure
   743 000002D1 0F85D45F0000            	jne L_error_non_closure
   744 000002D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
   745 000002DA FF5009                  	call SOB_CLOSURE_CODE(rax)
   746 000002DD 50                      	push rax
   747 000002DE 6A01                    	push 1	; arg count
   748                                  	; preparing a non-tail-call
   749 000002E0 488B4510                	mov rax, ENV
   750 000002E4 488B00                  	mov rax, qword [rax + 8 * 0]
   751 000002E7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var ->
   752 000002EA 50                      	push rax
   753 000002EB 6A01                    	push 1	; arg count
   754 000002ED 488B4510                	mov rax, ENV
   755 000002F1 488B00                  	mov rax, qword [rax + 8 * 0]
   756 000002F4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var ->
   757 000002F7 803804                  	cmp byte [rax], T_closure
   758 000002FA 0F85AB5F0000            	jne L_error_non_closure
   759 00000300 FF7001                  	push SOB_CLOSURE_ENV(rax)
   760 00000303 FF5009                  	call SOB_CLOSURE_CODE(rax)
   761 00000306 803804                  	cmp byte [rax], T_closure
   762 00000309 0F859C5F0000            	jne L_error_non_closure
   763 0000030F FF7001                  	push SOB_CLOSURE_ENV(rax)
   764 00000312 FF5009                  	call SOB_CLOSURE_CODE(rax)
   765 00000315 50                      	push rax
   766 00000316 6A01                    	push 1	; arg count
   767 00000318 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   768 0000031D E832600000              	call malloc
   769 00000322 50                      	push rax
   770 00000323 BF08000000              	mov rdi, 8 * 1	; new rib
   771 00000328 E827600000              	call malloc
   772 0000032D 50                      	push rax
   773 0000032E BF18000000              	mov rdi, 8 * 3	; extended env
   774 00000333 E81C600000              	call malloc
   775 00000338 488B7D10                	mov rdi, ENV
   776 0000033C BE00000000              	mov rsi, 0
   777 00000341 BA01000000              	mov rdx, 1
   778                                  .L_lambda_simple_env_loop_0005:	; ext_env[i + 1] <-- env[i]
   779 00000346 4883FE02                	cmp rsi, 2
   780 0000034A 7410                    	je .L_lambda_simple_env_end_0005
   781 0000034C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   782 00000350 48890CD0                	mov qword [rax + 8 * rdx], rcx
   783 00000354 48FFC6                  	inc rsi
   784 00000357 48FFC2                  	inc rdx
   785 0000035A EBEA                    	jmp .L_lambda_simple_env_loop_0005
   786                                  .L_lambda_simple_env_end_0005:
   787 0000035C 5B                      	pop rbx
   788 0000035D BE00000000              	mov rsi, 0
   789                                  .L_lambda_simple_params_loop_0005:	; copy params
   790 00000362 4883FE01                	cmp rsi, 1
   791 00000366 740E                    	je .L_lambda_simple_params_end_0005
   792 00000368 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   793 0000036D 488914F3                	mov qword [rbx + 8 * rsi], rdx
   794 00000371 48FFC6                  	inc rsi
   795 00000374 EBEC                    	jmp .L_lambda_simple_params_loop_0005
   796                                  .L_lambda_simple_params_end_0005:
   797 00000376 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   798 00000379 4889C3                  	mov rbx, rax
   799 0000037C 58                      	pop rax
   800 0000037D C60004                  	mov byte [rax], T_closure
   801 00000380 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   802 00000384 48C74009[91030000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0005
   803 0000038C E9BA010000              	jmp .L_lambda_simple_end_0005
   804                                  .L_lambda_simple_code_0005:	; lambda-simple body
   805 00000391 48837C241001            	cmp qword [rsp + 8 * 2], 1
   806 00000397 740B                    	je .L_lambda_simple_arity_check_ok_0005
   807 00000399 FF742410                	push qword [rsp + 8 * 2]
   808 0000039D 6A01                    	push 1
   809 0000039F E9695F0000              	jmp L_error_incorrect_arity_simple
   810                                  .L_lambda_simple_arity_check_ok_0005:
   811 000003A4 C8000000                	enter 0, 0
   812 000003A8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   813 000003AD E8A25F0000              	call malloc
   814 000003B2 50                      	push rax
   815 000003B3 BF08000000              	mov rdi, 8 * 1	; new rib
   816 000003B8 E8975F0000              	call malloc
   817 000003BD 50                      	push rax
   818 000003BE BF20000000              	mov rdi, 8 * 4	; extended env
   819 000003C3 E88C5F0000              	call malloc
   820 000003C8 488B7D10                	mov rdi, ENV
   821 000003CC BE00000000              	mov rsi, 0
   822 000003D1 BA01000000              	mov rdx, 1
   823                                  .L_lambda_simple_env_loop_0006:	; ext_env[i + 1] <-- env[i]
   824 000003D6 4883FE03                	cmp rsi, 3
   825 000003DA 7410                    	je .L_lambda_simple_env_end_0006
   826 000003DC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   827 000003E0 48890CD0                	mov qword [rax + 8 * rdx], rcx
   828 000003E4 48FFC6                  	inc rsi
   829 000003E7 48FFC2                  	inc rdx
   830 000003EA EBEA                    	jmp .L_lambda_simple_env_loop_0006
   831                                  .L_lambda_simple_env_end_0006:
   832 000003EC 5B                      	pop rbx
   833 000003ED BE00000000              	mov rsi, 0
   834                                  .L_lambda_simple_params_loop_0006:	; copy params
   835 000003F2 4883FE01                	cmp rsi, 1
   836 000003F6 740E                    	je .L_lambda_simple_params_end_0006
   837 000003F8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   838 000003FD 488914F3                	mov qword [rbx + 8 * rsi], rdx
   839 00000401 48FFC6                  	inc rsi
   840 00000404 EBEC                    	jmp .L_lambda_simple_params_loop_0006
   841                                  .L_lambda_simple_params_end_0006:
   842 00000406 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   843 00000409 4889C3                  	mov rbx, rax
   844 0000040C 58                      	pop rax
   845 0000040D C60004                  	mov byte [rax], T_closure
   846 00000410 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   847 00000414 48C74009[21040000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0006
   848 0000041C E926010000              	jmp .L_lambda_simple_end_0006
   849                                  .L_lambda_simple_code_0006:	; lambda-simple body
   850 00000421 48837C241001            	cmp qword [rsp + 8 * 2], 1
   851 00000427 740B                    	je .L_lambda_simple_arity_check_ok_0006
   852 00000429 FF742410                	push qword [rsp + 8 * 2]
   853 0000042D 6A01                    	push 1
   854 0000042F E9D95E0000              	jmp L_error_incorrect_arity_simple
   855                                  .L_lambda_simple_arity_check_ok_0006:
   856 00000434 C8000000                	enter 0, 0
   857 00000438 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   858 0000043D E8125F0000              	call malloc
   859 00000442 50                      	push rax
   860 00000443 BF08000000              	mov rdi, 8 * 1	; new rib
   861 00000448 E8075F0000              	call malloc
   862 0000044D 50                      	push rax
   863 0000044E BF28000000              	mov rdi, 8 * 5	; extended env
   864 00000453 E8FC5E0000              	call malloc
   865 00000458 488B7D10                	mov rdi, ENV
   866 0000045C BE00000000              	mov rsi, 0
   867 00000461 BA01000000              	mov rdx, 1
   868                                  .L_lambda_simple_env_loop_0007:	; ext_env[i + 1] <-- env[i]
   869 00000466 4883FE04                	cmp rsi, 4
   870 0000046A 7410                    	je .L_lambda_simple_env_end_0007
   871 0000046C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   872 00000470 48890CD0                	mov qword [rax + 8 * rdx], rcx
   873 00000474 48FFC6                  	inc rsi
   874 00000477 48FFC2                  	inc rdx
   875 0000047A EBEA                    	jmp .L_lambda_simple_env_loop_0007
   876                                  .L_lambda_simple_env_end_0007:
   877 0000047C 5B                      	pop rbx
   878 0000047D BE00000000              	mov rsi, 0
   879                                  .L_lambda_simple_params_loop_0007:	; copy params
   880 00000482 4883FE01                	cmp rsi, 1
   881 00000486 740E                    	je .L_lambda_simple_params_end_0007
   882 00000488 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   883 0000048D 488914F3                	mov qword [rbx + 8 * rsi], rdx
   884 00000491 48FFC6                  	inc rsi
   885 00000494 EBEC                    	jmp .L_lambda_simple_params_loop_0007
   886                                  .L_lambda_simple_params_end_0007:
   887 00000496 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   888 00000499 4889C3                  	mov rbx, rax
   889 0000049C 58                      	pop rax
   890 0000049D C60004                  	mov byte [rax], T_closure
   891 000004A0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   892 000004A4 48C74009[B1040000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0007
   893 000004AC E992000000              	jmp .L_lambda_simple_end_0007
   894                                  .L_lambda_simple_code_0007:	; lambda-simple body
   895 000004B1 48837C241001            	cmp qword [rsp + 8 * 2], 1
   896 000004B7 740B                    	je .L_lambda_simple_arity_check_ok_0007
   897 000004B9 FF742410                	push qword [rsp + 8 * 2]
   898 000004BD 6A01                    	push 1
   899 000004BF E9495E0000              	jmp L_error_incorrect_arity_simple
   900                                  .L_lambda_simple_arity_check_ok_0007:
   901 000004C4 C8000000                	enter 0, 0
   902                                  	; preparing a tail-call
   903                                  	; preparing a non-tail-call
   904 000004C8 488B4520                	mov rax, PARAM(0)	; param y
   905 000004CC 50                      	push rax
   906 000004CD 6A01                    	push 1	; arg count
   907                                  	; preparing a non-tail-call
   908 000004CF 488B4510                	mov rax, ENV
   909 000004D3 488B00                  	mov rax, qword [rax + 8 * 0]
   910 000004D6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
   911 000004D9 50                      	push rax
   912 000004DA 6A01                    	push 1	; arg count
   913 000004DC 488B4510                	mov rax, ENV
   914 000004E0 488B4008                	mov rax, qword [rax + 8 * 1]
   915 000004E4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var z
   916 000004E7 803804                  	cmp byte [rax], T_closure
   917 000004EA 0F85BB5D0000            	jne L_error_non_closure
   918 000004F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
   919 000004F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
   920 000004F6 803804                  	cmp byte [rax], T_closure
   921 000004F9 0F85AC5D0000            	jne L_error_non_closure
   922 000004FF FF7001                  	push SOB_CLOSURE_ENV(rax)
   923 00000502 FF5009                  	call SOB_CLOSURE_CODE(rax)
   924 00000505 50                      	push rax
   925 00000506 6A01                    	push 1	; arg count
   926 00000508 488B4510                	mov rax, ENV
   927 0000050C 488B00                  	mov rax, qword [rax + 8 * 0]
   928 0000050F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
   929 00000512 803804                  	cmp byte [rax], T_closure
   930 00000515 0F85905D0000            	jne L_error_non_closure
   931 0000051B FF7001                  	push SOB_CLOSURE_ENV(rax)
   932 0000051E FF7508                  	push qword [rbp + 8 * 1]
   933                                   ; old ret addr	pop rbp
   934                                  ; restore the old rbp	mov rbx, 1
   935 00000521 4883C303                	add rbx, 3
   936                                  	mov rdi, dword [rbp + 8*2]
   936          ******************       error: mismatch in operand sizes
   937                                  .L_tc_recycle_frame_loop_0002:
   938 00000525 4883FB00                	cmp rbx, 0
   939 00000529 7411                    je .L_tc_recycle_frame_done_0002
   940 0000052B 488B0CDC                	mov rcx, qword [rsp + 8 * rbx]
   941 0000052F 48894CFD18              	mov [rbp + 3*8 + 8 * rdi], rcx
   942 00000534 48FFCF                  	dec rdi
   943 00000537 48FFCB                  	dec rbx
   944 0000053A EBE9                    jmp .L_tc_recycle_frame_loop_0002
   945                                  .L_tc_recycle_frame_done_0002:
   946 0000053C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
   947 0000053F C9                      	leave
   948 00000540 C21800                  	ret AND_KILL_FRAME(1)
   949                                  .L_lambda_simple_end_0007:	; new closure is in rax
   950 00000543 C9                      	leave
   951 00000544 C21800                  	ret AND_KILL_FRAME(1)
   952                                  .L_lambda_simple_end_0006:	; new closure is in rax
   953 00000547 C9                      	leave
   954 00000548 C21800                  	ret AND_KILL_FRAME(1)
   955                                  .L_lambda_simple_end_0005:	; new closure is in rax
   956 0000054B 803804                  	cmp byte [rax], T_closure
   957 0000054E 0F85575D0000            	jne L_error_non_closure
   958 00000554 FF7001                  	push SOB_CLOSURE_ENV(rax)
   959 00000557 FF7508                  	push qword [rbp + 8 * 1]
   960                                   ; old ret addr	pop rbp
   961                                  ; restore the old rbp	mov rbx, 1
   962 0000055A 4883C303                	add rbx, 3
   963                                  	mov rdi, dword [rbp + 8*2]
   963          ******************       error: mismatch in operand sizes
   964                                  .L_tc_recycle_frame_loop_0001:
   965 0000055E 4883FB00                	cmp rbx, 0
   966 00000562 7411                    je .L_tc_recycle_frame_done_0001
   967 00000564 488B0CDC                	mov rcx, qword [rsp + 8 * rbx]
   968 00000568 48894CFD18              	mov [rbp + 3*8 + 8 * rdi], rcx
   969 0000056D 48FFCF                  	dec rdi
   970 00000570 48FFCB                  	dec rbx
   971 00000573 EBE9                    jmp .L_tc_recycle_frame_loop_0001
   972                                  .L_tc_recycle_frame_done_0001:
   973 00000575 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
   974                                  .L_if_end_0001:
   975 00000578 C9                      	leave
   976 00000579 C21800                  	ret AND_KILL_FRAME(1)
   977                                  .L_lambda_simple_end_0002:	; new closure is in rax
   978 0000057C C9                      	leave
   979 0000057D C21800                  	ret AND_KILL_FRAME(1)
   980                                  .L_lambda_simple_end_0001:	; new closure is in rax
   981 00000580 50                      	push rax
   982 00000581 6A01                    	push 1	; arg count
   983 00000583 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   984 00000588 E8C75D0000              	call malloc
   985 0000058D 50                      	push rax
   986 0000058E BF00000000              	mov rdi, 8 * 0	; new rib
   987 00000593 E8BC5D0000              	call malloc
   988 00000598 50                      	push rax
   989 00000599 BF08000000              	mov rdi, 8 * 1	; extended env
   990 0000059E E8B15D0000              	call malloc
   991 000005A3 488B7D10                	mov rdi, ENV
   992 000005A7 BE00000000              	mov rsi, 0
   993 000005AC BA01000000              	mov rdx, 1
   994                                  .L_lambda_simple_env_loop_0008:	; ext_env[i + 1] <-- env[i]
   995 000005B1 4883FE00                	cmp rsi, 0
   996 000005B5 7410                    	je .L_lambda_simple_env_end_0008
   997 000005B7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   998 000005BB 48890CD0                	mov qword [rax + 8 * rdx], rcx
   999 000005BF 48FFC6                  	inc rsi
  1000 000005C2 48FFC2                  	inc rdx
  1001 000005C5 EBEA                    	jmp .L_lambda_simple_env_loop_0008
  1002                                  .L_lambda_simple_env_end_0008:
  1003 000005C7 5B                      	pop rbx
  1004 000005C8 BE00000000              	mov rsi, 0
  1005                                  .L_lambda_simple_params_loop_0008:	; copy params
  1006 000005CD 4883FE00                	cmp rsi, 0
  1007 000005D1 740E                    	je .L_lambda_simple_params_end_0008
  1008 000005D3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1009 000005D8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1010 000005DC 48FFC6                  	inc rsi
  1011 000005DF EBEC                    	jmp .L_lambda_simple_params_loop_0008
  1012                                  .L_lambda_simple_params_end_0008:
  1013 000005E1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1014 000005E4 4889C3                  	mov rbx, rax
  1015 000005E7 58                      	pop rax
  1016 000005E8 C60004                  	mov byte [rax], T_closure
  1017 000005EB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1018 000005EF 48C74009[F9050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0008
  1019 000005F7 EB53                    	jmp .L_lambda_simple_end_0008
  1020                                  .L_lambda_simple_code_0008:	; lambda-simple body
  1021 000005F9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1022 000005FF 740B                    	je .L_lambda_simple_arity_check_ok_0008
  1023 00000601 FF742410                	push qword [rsp + 8 * 2]
  1024 00000605 6A01                    	push 1
  1025 00000607 E9015D0000              	jmp L_error_incorrect_arity_simple
  1026                                  .L_lambda_simple_arity_check_ok_0008:
  1027 0000060C C8000000                	enter 0, 0
  1028                                  	; preparing a tail-call
  1029 00000610 488B4520                	mov rax, PARAM(0)	; param x
  1030 00000614 50                      	push rax
  1031 00000615 6A01                    	push 1	; arg count
  1032 00000617 488B4520                	mov rax, PARAM(0)	; param x
  1033 0000061B 803804                  	cmp byte [rax], T_closure
  1034 0000061E 0F85875C0000            	jne L_error_non_closure
  1035 00000624 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1036 00000627 FF7508                  	push qword [rbp + 8 * 1]
  1037                                   ; old ret addr	pop rbp
  1038                                  ; restore the old rbp	mov rbx, 1
  1039 0000062A 4883C303                	add rbx, 3
  1040                                  	mov rdi, dword [rbp + 8*2]
  1040          ******************       error: mismatch in operand sizes
  1041                                  .L_tc_recycle_frame_loop_0003:
  1042 0000062E 4883FB00                	cmp rbx, 0
  1043 00000632 7411                    je .L_tc_recycle_frame_done_0003
  1044 00000634 488B0CDC                	mov rcx, qword [rsp + 8 * rbx]
  1045 00000638 48894CFD18              	mov [rbp + 3*8 + 8 * rdi], rcx
  1046 0000063D 48FFCF                  	dec rdi
  1047 00000640 48FFCB                  	dec rbx
  1048 00000643 EBE9                    jmp .L_tc_recycle_frame_loop_0003
  1049                                  .L_tc_recycle_frame_done_0003:
  1050 00000645 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1051 00000648 C9                      	leave
  1052 00000649 C21800                  	ret AND_KILL_FRAME(1)
  1053                                  .L_lambda_simple_end_0008:	; new closure is in rax
  1054 0000064C 803804                  	cmp byte [rax], T_closure
  1055 0000064F 0F85565C0000            	jne L_error_non_closure
  1056 00000655 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1057 00000658 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1058 0000065B 50                      	push rax
  1059 0000065C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1060 00000661 E8EE5C0000              	call malloc
  1061 00000666 50                      	push rax
  1062 00000667 BF00000000              	mov rdi, 8 * 0	; new rib
  1063 0000066C E8E35C0000              	call malloc
  1064 00000671 50                      	push rax
  1065 00000672 BF08000000              	mov rdi, 8 * 1	; extended env
  1066 00000677 E8D85C0000              	call malloc
  1067 0000067C 488B7D10                	mov rdi, ENV
  1068 00000680 BE00000000              	mov rsi, 0
  1069 00000685 BA01000000              	mov rdx, 1
  1070                                  .L_lambda_simple_env_loop_0009:	; ext_env[i + 1] <-- env[i]
  1071 0000068A 4883FE00                	cmp rsi, 0
  1072 0000068E 7410                    	je .L_lambda_simple_env_end_0009
  1073 00000690 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1074 00000694 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1075 00000698 48FFC6                  	inc rsi
  1076 0000069B 48FFC2                  	inc rdx
  1077 0000069E EBEA                    	jmp .L_lambda_simple_env_loop_0009
  1078                                  .L_lambda_simple_env_end_0009:
  1079 000006A0 5B                      	pop rbx
  1080 000006A1 BE00000000              	mov rsi, 0
  1081                                  .L_lambda_simple_params_loop_0009:	; copy params
  1082 000006A6 4883FE00                	cmp rsi, 0
  1083 000006AA 740E                    	je .L_lambda_simple_params_end_0009
  1084 000006AC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1085 000006B1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1086 000006B5 48FFC6                  	inc rsi
  1087 000006B8 EBEC                    	jmp .L_lambda_simple_params_loop_0009
  1088                                  .L_lambda_simple_params_end_0009:
  1089 000006BA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1090 000006BD 4889C3                  	mov rbx, rax
  1091 000006C0 58                      	pop rax
  1092 000006C1 C60004                  	mov byte [rax], T_closure
  1093 000006C4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1094 000006C8 48C74009[D5060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0009
  1095 000006D0 E9BD030000              	jmp .L_lambda_simple_end_0009
  1096                                  .L_lambda_simple_code_0009:	; lambda-simple body
  1097 000006D5 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1098 000006DB 740B                    	je .L_lambda_simple_arity_check_ok_0009
  1099 000006DD FF742410                	push qword [rsp + 8 * 2]
  1100 000006E1 6A01                    	push 1
  1101 000006E3 E9255C0000              	jmp L_error_incorrect_arity_simple
  1102                                  .L_lambda_simple_arity_check_ok_0009:
  1103 000006E8 C8000000                	enter 0, 0
  1104                                  	; preparing a tail-call
  1105 000006EC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1106 000006F1 E85E5C0000              	call malloc
  1107 000006F6 50                      	push rax
  1108 000006F7 BF08000000              	mov rdi, 8 * 1	; new rib
  1109 000006FC E8535C0000              	call malloc
  1110 00000701 50                      	push rax
  1111 00000702 BF10000000              	mov rdi, 8 * 2	; extended env
  1112 00000707 E8485C0000              	call malloc
  1113 0000070C 488B7D10                	mov rdi, ENV
  1114 00000710 BE00000000              	mov rsi, 0
  1115 00000715 BA01000000              	mov rdx, 1
  1116                                  .L_lambda_simple_env_loop_000a:	; ext_env[i + 1] <-- env[i]
  1117 0000071A 4883FE01                	cmp rsi, 1
  1118 0000071E 7410                    	je .L_lambda_simple_env_end_000a
  1119 00000720 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1120 00000724 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1121 00000728 48FFC6                  	inc rsi
  1122 0000072B 48FFC2                  	inc rdx
  1123 0000072E EBEA                    	jmp .L_lambda_simple_env_loop_000a
  1124                                  .L_lambda_simple_env_end_000a:
  1125 00000730 5B                      	pop rbx
  1126 00000731 BE00000000              	mov rsi, 0
  1127                                  .L_lambda_simple_params_loop_000a:	; copy params
  1128 00000736 4883FE01                	cmp rsi, 1
  1129 0000073A 740E                    	je .L_lambda_simple_params_end_000a
  1130 0000073C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1131 00000741 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1132 00000745 48FFC6                  	inc rsi
  1133 00000748 EBEC                    	jmp .L_lambda_simple_params_loop_000a
  1134                                  .L_lambda_simple_params_end_000a:
  1135 0000074A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1136 0000074D 4889C3                  	mov rbx, rax
  1137 00000750 58                      	pop rax
  1138 00000751 C60004                  	mov byte [rax], T_closure
  1139 00000754 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1140 00000758 48C74009[65070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000a
  1141 00000760 E9B6000000              	jmp .L_lambda_simple_end_000a
  1142                                  .L_lambda_simple_code_000a:	; lambda-simple body
  1143 00000765 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1144 0000076B 740B                    	je .L_lambda_simple_arity_check_ok_000a
  1145 0000076D FF742410                	push qword [rsp + 8 * 2]
  1146 00000771 6A01                    	push 1
  1147 00000773 E9955B0000              	jmp L_error_incorrect_arity_simple
  1148                                  .L_lambda_simple_arity_check_ok_000a:
  1149 00000778 C8000000                	enter 0, 0
  1150 0000077C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1151 00000781 E8CE5B0000              	call malloc
  1152 00000786 50                      	push rax
  1153 00000787 BF08000000              	mov rdi, 8 * 1	; new rib
  1154 0000078C E8C35B0000              	call malloc
  1155 00000791 50                      	push rax
  1156 00000792 BF18000000              	mov rdi, 8 * 3	; extended env
  1157 00000797 E8B85B0000              	call malloc
  1158 0000079C 488B7D10                	mov rdi, ENV
  1159 000007A0 BE00000000              	mov rsi, 0
  1160 000007A5 BA01000000              	mov rdx, 1
  1161                                  .L_lambda_simple_env_loop_000b:	; ext_env[i + 1] <-- env[i]
  1162 000007AA 4883FE02                	cmp rsi, 2
  1163 000007AE 7410                    	je .L_lambda_simple_env_end_000b
  1164 000007B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1165 000007B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1166 000007B8 48FFC6                  	inc rsi
  1167 000007BB 48FFC2                  	inc rdx
  1168 000007BE EBEA                    	jmp .L_lambda_simple_env_loop_000b
  1169                                  .L_lambda_simple_env_end_000b:
  1170 000007C0 5B                      	pop rbx
  1171 000007C1 BE00000000              	mov rsi, 0
  1172                                  .L_lambda_simple_params_loop_000b:	; copy params
  1173 000007C6 4883FE01                	cmp rsi, 1
  1174 000007CA 740E                    	je .L_lambda_simple_params_end_000b
  1175 000007CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1176 000007D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1177 000007D5 48FFC6                  	inc rsi
  1178 000007D8 EBEC                    	jmp .L_lambda_simple_params_loop_000b
  1179                                  .L_lambda_simple_params_end_000b:
  1180 000007DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1181 000007DD 4889C3                  	mov rbx, rax
  1182 000007E0 58                      	pop rax
  1183 000007E1 C60004                  	mov byte [rax], T_closure
  1184 000007E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1185 000007E8 48C74009[F2070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000b
  1186 000007F0 EB25                    	jmp .L_lambda_simple_end_000b
  1187                                  .L_lambda_simple_code_000b:	; lambda-simple body
  1188 000007F2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1189 000007F8 740B                    	je .L_lambda_simple_arity_check_ok_000b
  1190 000007FA FF742410                	push qword [rsp + 8 * 2]
  1191 000007FE 6A01                    	push 1
  1192 00000800 E9085B0000              	jmp L_error_incorrect_arity_simple
  1193                                  .L_lambda_simple_arity_check_ok_000b:
  1194 00000805 C8000000                	enter 0, 0
  1195 00000809 488B4510                	mov rax, ENV
  1196 0000080D 488B00                  	mov rax, qword [rax + 8 * 0]
  1197 00000810 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1198 00000813 C9                      	leave
  1199 00000814 C21800                  	ret AND_KILL_FRAME(1)
  1200                                  .L_lambda_simple_end_000b:	; new closure is in rax
  1201 00000817 C9                      	leave
  1202 00000818 C21800                  	ret AND_KILL_FRAME(1)
  1203                                  .L_lambda_simple_end_000a:	; new closure is in rax
  1204 0000081B 50                      	push rax
  1205 0000081C 6A01                    	push 1	; arg count
  1206                                  	; preparing a non-tail-call
  1207 0000081E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1208 00000823 E82C5B0000              	call malloc
  1209 00000828 50                      	push rax
  1210 00000829 BF08000000              	mov rdi, 8 * 1	; new rib
  1211 0000082E E8215B0000              	call malloc
  1212 00000833 50                      	push rax
  1213 00000834 BF10000000              	mov rdi, 8 * 2	; extended env
  1214 00000839 E8165B0000              	call malloc
  1215 0000083E 488B7D10                	mov rdi, ENV
  1216 00000842 BE00000000              	mov rsi, 0
  1217 00000847 BA01000000              	mov rdx, 1
  1218                                  .L_lambda_simple_env_loop_000c:	; ext_env[i + 1] <-- env[i]
  1219 0000084C 4883FE01                	cmp rsi, 1
  1220 00000850 7410                    	je .L_lambda_simple_env_end_000c
  1221 00000852 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1222 00000856 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1223 0000085A 48FFC6                  	inc rsi
  1224 0000085D 48FFC2                  	inc rdx
  1225 00000860 EBEA                    	jmp .L_lambda_simple_env_loop_000c
  1226                                  .L_lambda_simple_env_end_000c:
  1227 00000862 5B                      	pop rbx
  1228 00000863 BE00000000              	mov rsi, 0
  1229                                  .L_lambda_simple_params_loop_000c:	; copy params
  1230 00000868 4883FE01                	cmp rsi, 1
  1231 0000086C 740E                    	je .L_lambda_simple_params_end_000c
  1232 0000086E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1233 00000873 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1234 00000877 48FFC6                  	inc rsi
  1235 0000087A EBEC                    	jmp .L_lambda_simple_params_loop_000c
  1236                                  .L_lambda_simple_params_end_000c:
  1237 0000087C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1238 0000087F 4889C3                  	mov rbx, rax
  1239 00000882 58                      	pop rax
  1240 00000883 C60004                  	mov byte [rax], T_closure
  1241 00000886 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1242 0000088A 48C74009[97080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000c
  1243 00000892 E9B4010000              	jmp .L_lambda_simple_end_000c
  1244                                  .L_lambda_simple_code_000c:	; lambda-simple body
  1245 00000897 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1246 0000089D 740B                    	je .L_lambda_simple_arity_check_ok_000c
  1247 0000089F FF742410                	push qword [rsp + 8 * 2]
  1248 000008A3 6A01                    	push 1
  1249 000008A5 E9635A0000              	jmp L_error_incorrect_arity_simple
  1250                                  .L_lambda_simple_arity_check_ok_000c:
  1251 000008AA C8000000                	enter 0, 0
  1252 000008AE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1253 000008B3 E89C5A0000              	call malloc
  1254 000008B8 50                      	push rax
  1255 000008B9 BF08000000              	mov rdi, 8 * 1	; new rib
  1256 000008BE E8915A0000              	call malloc
  1257 000008C3 50                      	push rax
  1258 000008C4 BF18000000              	mov rdi, 8 * 3	; extended env
  1259 000008C9 E8865A0000              	call malloc
  1260 000008CE 488B7D10                	mov rdi, ENV
  1261 000008D2 BE00000000              	mov rsi, 0
  1262 000008D7 BA01000000              	mov rdx, 1
  1263                                  .L_lambda_simple_env_loop_000d:	; ext_env[i + 1] <-- env[i]
  1264 000008DC 4883FE02                	cmp rsi, 2
  1265 000008E0 7410                    	je .L_lambda_simple_env_end_000d
  1266 000008E2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1267 000008E6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1268 000008EA 48FFC6                  	inc rsi
  1269 000008ED 48FFC2                  	inc rdx
  1270 000008F0 EBEA                    	jmp .L_lambda_simple_env_loop_000d
  1271                                  .L_lambda_simple_env_end_000d:
  1272 000008F2 5B                      	pop rbx
  1273 000008F3 BE00000000              	mov rsi, 0
  1274                                  .L_lambda_simple_params_loop_000d:	; copy params
  1275 000008F8 4883FE01                	cmp rsi, 1
  1276 000008FC 740E                    	je .L_lambda_simple_params_end_000d
  1277 000008FE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1278 00000903 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1279 00000907 48FFC6                  	inc rsi
  1280 0000090A EBEC                    	jmp .L_lambda_simple_params_loop_000d
  1281                                  .L_lambda_simple_params_end_000d:
  1282 0000090C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1283 0000090F 4889C3                  	mov rbx, rax
  1284 00000912 58                      	pop rax
  1285 00000913 C60004                  	mov byte [rax], T_closure
  1286 00000916 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1287 0000091A 48C74009[27090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000d
  1288 00000922 E920010000              	jmp .L_lambda_simple_end_000d
  1289                                  .L_lambda_simple_code_000d:	; lambda-simple body
  1290 00000927 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1291 0000092D 740B                    	je .L_lambda_simple_arity_check_ok_000d
  1292 0000092F FF742410                	push qword [rsp + 8 * 2]
  1293 00000933 6A01                    	push 1
  1294 00000935 E9D3590000              	jmp L_error_incorrect_arity_simple
  1295                                  .L_lambda_simple_arity_check_ok_000d:
  1296 0000093A C8000000                	enter 0, 0
  1297 0000093E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1298 00000943 E80C5A0000              	call malloc
  1299 00000948 50                      	push rax
  1300 00000949 BF08000000              	mov rdi, 8 * 1	; new rib
  1301 0000094E E8015A0000              	call malloc
  1302 00000953 50                      	push rax
  1303 00000954 BF20000000              	mov rdi, 8 * 4	; extended env
  1304 00000959 E8F6590000              	call malloc
  1305 0000095E 488B7D10                	mov rdi, ENV
  1306 00000962 BE00000000              	mov rsi, 0
  1307 00000967 BA01000000              	mov rdx, 1
  1308                                  .L_lambda_simple_env_loop_000e:	; ext_env[i + 1] <-- env[i]
  1309 0000096C 4883FE03                	cmp rsi, 3
  1310 00000970 7410                    	je .L_lambda_simple_env_end_000e
  1311 00000972 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1312 00000976 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1313 0000097A 48FFC6                  	inc rsi
  1314 0000097D 48FFC2                  	inc rdx
  1315 00000980 EBEA                    	jmp .L_lambda_simple_env_loop_000e
  1316                                  .L_lambda_simple_env_end_000e:
  1317 00000982 5B                      	pop rbx
  1318 00000983 BE00000000              	mov rsi, 0
  1319                                  .L_lambda_simple_params_loop_000e:	; copy params
  1320 00000988 4883FE01                	cmp rsi, 1
  1321 0000098C 740E                    	je .L_lambda_simple_params_end_000e
  1322 0000098E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1323 00000993 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1324 00000997 48FFC6                  	inc rsi
  1325 0000099A EBEC                    	jmp .L_lambda_simple_params_loop_000e
  1326                                  .L_lambda_simple_params_end_000e:
  1327 0000099C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1328 0000099F 4889C3                  	mov rbx, rax
  1329 000009A2 58                      	pop rax
  1330 000009A3 C60004                  	mov byte [rax], T_closure
  1331 000009A6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1332 000009AA 48C74009[B7090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000e
  1333 000009B2 E98C000000              	jmp .L_lambda_simple_end_000e
  1334                                  .L_lambda_simple_code_000e:	; lambda-simple body
  1335 000009B7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1336 000009BD 740B                    	je .L_lambda_simple_arity_check_ok_000e
  1337 000009BF FF742410                	push qword [rsp + 8 * 2]
  1338 000009C3 6A01                    	push 1
  1339 000009C5 E943590000              	jmp L_error_incorrect_arity_simple
  1340                                  .L_lambda_simple_arity_check_ok_000e:
  1341 000009CA C8000000                	enter 0, 0
  1342                                  	; preparing a tail-call
  1343                                  	; preparing a non-tail-call
  1344 000009CE 488B4520                	mov rax, PARAM(0)	; param z
  1345 000009D2 50                      	push rax
  1346 000009D3 6A01                    	push 1	; arg count
  1347 000009D5 488B4510                	mov rax, ENV
  1348 000009D9 488B00                  	mov rax, qword [rax + 8 * 0]
  1349 000009DC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var y
  1350 000009DF 803804                  	cmp byte [rax], T_closure
  1351 000009E2 0F85C3580000            	jne L_error_non_closure
  1352 000009E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1353 000009EB FF5009                  	call SOB_CLOSURE_CODE(rax)
  1354 000009EE 50                      	push rax
  1355 000009EF 6A01                    	push 1	; arg count
  1356                                  	; preparing a non-tail-call
  1357 000009F1 488B4520                	mov rax, PARAM(0)	; param z
  1358 000009F5 50                      	push rax
  1359 000009F6 6A01                    	push 1	; arg count
  1360 000009F8 488B4510                	mov rax, ENV
  1361 000009FC 488B4008                	mov rax, qword [rax + 8 * 1]
  1362 00000A00 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1363 00000A03 803804                  	cmp byte [rax], T_closure
  1364 00000A06 0F859F580000            	jne L_error_non_closure
  1365 00000A0C FF7001                  	push SOB_CLOSURE_ENV(rax)
  1366 00000A0F FF5009                  	call SOB_CLOSURE_CODE(rax)
  1367 00000A12 803804                  	cmp byte [rax], T_closure
  1368 00000A15 0F8590580000            	jne L_error_non_closure
  1369 00000A1B FF7001                  	push SOB_CLOSURE_ENV(rax)
  1370 00000A1E FF7508                  	push qword [rbp + 8 * 1]
  1371                                   ; old ret addr	pop rbp
  1372                                  ; restore the old rbp	mov rbx, 1
  1373 00000A21 4883C303                	add rbx, 3
  1374                                  	mov rdi, dword [rbp + 8*2]
  1374          ******************       error: mismatch in operand sizes
  1375                                  .L_tc_recycle_frame_loop_0005:
  1376 00000A25 4883FB00                	cmp rbx, 0
  1377 00000A29 7411                    je .L_tc_recycle_frame_done_0005
  1378 00000A2B 488B0CDC                	mov rcx, qword [rsp + 8 * rbx]
  1379 00000A2F 48894CFD18              	mov [rbp + 3*8 + 8 * rdi], rcx
  1380 00000A34 48FFCF                  	dec rdi
  1381 00000A37 48FFCB                  	dec rbx
  1382 00000A3A EBE9                    jmp .L_tc_recycle_frame_loop_0005
  1383                                  .L_tc_recycle_frame_done_0005:
  1384 00000A3C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1385 00000A3F C9                      	leave
  1386 00000A40 C21800                  	ret AND_KILL_FRAME(1)
  1387                                  .L_lambda_simple_end_000e:	; new closure is in rax
  1388 00000A43 C9                      	leave
  1389 00000A44 C21800                  	ret AND_KILL_FRAME(1)
  1390                                  .L_lambda_simple_end_000d:	; new closure is in rax
  1391 00000A47 C9                      	leave
  1392 00000A48 C21800                  	ret AND_KILL_FRAME(1)
  1393                                  .L_lambda_simple_end_000c:	; new closure is in rax
  1394 00000A4B 50                      	push rax
  1395 00000A4C 6A01                    	push 1	; arg count
  1396 00000A4E 488B4520                	mov rax, PARAM(0)	; param x
  1397 00000A52 803804                  	cmp byte [rax], T_closure
  1398 00000A55 0F8550580000            	jne L_error_non_closure
  1399 00000A5B FF7001                  	push SOB_CLOSURE_ENV(rax)
  1400 00000A5E FF5009                  	call SOB_CLOSURE_CODE(rax)
  1401 00000A61 803804                  	cmp byte [rax], T_closure
  1402 00000A64 0F8541580000            	jne L_error_non_closure
  1403 00000A6A FF7001                  	push SOB_CLOSURE_ENV(rax)
  1404 00000A6D FF7508                  	push qword [rbp + 8 * 1]
  1405                                   ; old ret addr	pop rbp
  1406                                  ; restore the old rbp	mov rbx, 1
  1407 00000A70 4883C303                	add rbx, 3
  1408                                  	mov rdi, dword [rbp + 8*2]
  1408          ******************       error: mismatch in operand sizes
  1409                                  .L_tc_recycle_frame_loop_0004:
  1410 00000A74 4883FB00                	cmp rbx, 0
  1411 00000A78 7411                    je .L_tc_recycle_frame_done_0004
  1412 00000A7A 488B0CDC                	mov rcx, qword [rsp + 8 * rbx]
  1413 00000A7E 48894CFD18              	mov [rbp + 3*8 + 8 * rdi], rcx
  1414 00000A83 48FFCF                  	dec rdi
  1415 00000A86 48FFCB                  	dec rbx
  1416 00000A89 EBE9                    jmp .L_tc_recycle_frame_loop_0004
  1417                                  .L_tc_recycle_frame_done_0004:
  1418 00000A8B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1419 00000A8E C9                      	leave
  1420 00000A8F C21800                  	ret AND_KILL_FRAME(1)
  1421                                  .L_lambda_simple_end_0009:	; new closure is in rax
  1422 00000A92 50                      	push rax
  1423 00000A93 6A02                    	push 2	; arg count
  1424 00000A95 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1425 00000A9A E8B5580000              	call malloc
  1426 00000A9F 50                      	push rax
  1427 00000AA0 BF00000000              	mov rdi, 8 * 0	; new rib
  1428 00000AA5 E8AA580000              	call malloc
  1429 00000AAA 50                      	push rax
  1430 00000AAB BF08000000              	mov rdi, 8 * 1	; extended env
  1431 00000AB0 E89F580000              	call malloc
  1432 00000AB5 488B7D10                	mov rdi, ENV
  1433 00000AB9 BE00000000              	mov rsi, 0
  1434 00000ABE BA01000000              	mov rdx, 1
  1435                                  .L_lambda_simple_env_loop_000f:	; ext_env[i + 1] <-- env[i]
  1436 00000AC3 4883FE00                	cmp rsi, 0
  1437 00000AC7 7410                    	je .L_lambda_simple_env_end_000f
  1438 00000AC9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1439 00000ACD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1440 00000AD1 48FFC6                  	inc rsi
  1441 00000AD4 48FFC2                  	inc rdx
  1442 00000AD7 EBEA                    	jmp .L_lambda_simple_env_loop_000f
  1443                                  .L_lambda_simple_env_end_000f:
  1444 00000AD9 5B                      	pop rbx
  1445 00000ADA BE00000000              	mov rsi, 0
  1446                                  .L_lambda_simple_params_loop_000f:	; copy params
  1447 00000ADF 4883FE00                	cmp rsi, 0
  1448 00000AE3 740E                    	je .L_lambda_simple_params_end_000f
  1449 00000AE5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1450 00000AEA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1451 00000AEE 48FFC6                  	inc rsi
  1452 00000AF1 EBEC                    	jmp .L_lambda_simple_params_loop_000f
  1453                                  .L_lambda_simple_params_end_000f:
  1454 00000AF3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1455 00000AF6 4889C3                  	mov rbx, rax
  1456 00000AF9 58                      	pop rax
  1457 00000AFA C60004                  	mov byte [rax], T_closure
  1458 00000AFD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1459 00000B01 48C74009[0E0B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000f
  1460 00000B09 E989560000              	jmp .L_lambda_simple_end_000f
  1461                                  .L_lambda_simple_code_000f:	; lambda-simple body
  1462 00000B0E 48837C241002            	cmp qword [rsp + 8 * 2], 2
  1463 00000B14 740B                    	je .L_lambda_simple_arity_check_ok_000f
  1464 00000B16 FF742410                	push qword [rsp + 8 * 2]
  1465 00000B1A 6A02                    	push 2
  1466 00000B1C E9EC570000              	jmp L_error_incorrect_arity_simple
  1467                                  .L_lambda_simple_arity_check_ok_000f:
  1468 00000B21 C8000000                	enter 0, 0
  1469 00000B25 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1470 00000B2A E825580000              	call malloc
  1471 00000B2F 50                      	push rax
  1472 00000B30 BF10000000              	mov rdi, 8 * 2	; new rib
  1473 00000B35 E81A580000              	call malloc
  1474 00000B3A 50                      	push rax
  1475 00000B3B BF10000000              	mov rdi, 8 * 2	; extended env
  1476 00000B40 E80F580000              	call malloc
  1477 00000B45 488B7D10                	mov rdi, ENV
  1478 00000B49 BE00000000              	mov rsi, 0
  1479 00000B4E BA01000000              	mov rdx, 1
  1480                                  .L_lambda_simple_env_loop_0010:	; ext_env[i + 1] <-- env[i]
  1481 00000B53 4883FE01                	cmp rsi, 1
  1482 00000B57 7410                    	je .L_lambda_simple_env_end_0010
  1483 00000B59 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1484 00000B5D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1485 00000B61 48FFC6                  	inc rsi
  1486 00000B64 48FFC2                  	inc rdx
  1487 00000B67 EBEA                    	jmp .L_lambda_simple_env_loop_0010
  1488                                  .L_lambda_simple_env_end_0010:
  1489 00000B69 5B                      	pop rbx
  1490 00000B6A BE00000000              	mov rsi, 0
  1491                                  .L_lambda_simple_params_loop_0010:	; copy params
  1492 00000B6F 4883FE02                	cmp rsi, 2
  1493 00000B73 740E                    	je .L_lambda_simple_params_end_0010
  1494 00000B75 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1495 00000B7A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1496 00000B7E 48FFC6                  	inc rsi
  1497 00000B81 EBEC                    	jmp .L_lambda_simple_params_loop_0010
  1498                                  .L_lambda_simple_params_end_0010:
  1499 00000B83 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1500 00000B86 4889C3                  	mov rbx, rax
  1501 00000B89 58                      	pop rax
  1502 00000B8A C60004                  	mov byte [rax], T_closure
  1503 00000B8D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1504 00000B91 48C74009[9E0B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0010
  1505 00000B99 E9F5550000              	jmp .L_lambda_simple_end_0010
  1506                                  .L_lambda_simple_code_0010:	; lambda-simple body
  1507 00000B9E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1508 00000BA4 740B                    	je .L_lambda_simple_arity_check_ok_0010
  1509 00000BA6 FF742410                	push qword [rsp + 8 * 2]
  1510 00000BAA 6A01                    	push 1
  1511 00000BAC E95C570000              	jmp L_error_incorrect_arity_simple
  1512                                  .L_lambda_simple_arity_check_ok_0010:
  1513 00000BB1 C8000000                	enter 0, 0
  1514                                  	; preparing a tail-call
  1515 00000BB5 48B8-                   	mov rax, L_constants + 1533
  1515 00000BB7 [FD05000000000000] 
  1516 00000BBF 50                      	push rax
  1517 00000BC0 6A01                    	push 1	; arg count
  1518                                  	; preparing a non-tail-call
  1519 00000BC2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1520 00000BC7 E888570000              	call malloc
  1521 00000BCC 50                      	push rax
  1522 00000BCD BF08000000              	mov rdi, 8 * 1	; new rib
  1523 00000BD2 E87D570000              	call malloc
  1524 00000BD7 50                      	push rax
  1525 00000BD8 BF18000000              	mov rdi, 8 * 3	; extended env
  1526 00000BDD E872570000              	call malloc
  1527 00000BE2 488B7D10                	mov rdi, ENV
  1528 00000BE6 BE00000000              	mov rsi, 0
  1529 00000BEB BA01000000              	mov rdx, 1
  1530                                  .L_lambda_simple_env_loop_0011:	; ext_env[i + 1] <-- env[i]
  1531 00000BF0 4883FE02                	cmp rsi, 2
  1532 00000BF4 7410                    	je .L_lambda_simple_env_end_0011
  1533 00000BF6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1534 00000BFA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1535 00000BFE 48FFC6                  	inc rsi
  1536 00000C01 48FFC2                  	inc rdx
  1537 00000C04 EBEA                    	jmp .L_lambda_simple_env_loop_0011
  1538                                  .L_lambda_simple_env_end_0011:
  1539 00000C06 5B                      	pop rbx
  1540 00000C07 BE00000000              	mov rsi, 0
  1541                                  .L_lambda_simple_params_loop_0011:	; copy params
  1542 00000C0C 4883FE01                	cmp rsi, 1
  1543 00000C10 740E                    	je .L_lambda_simple_params_end_0011
  1544 00000C12 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1545 00000C17 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1546 00000C1B 48FFC6                  	inc rsi
  1547 00000C1E EBEC                    	jmp .L_lambda_simple_params_loop_0011
  1548                                  .L_lambda_simple_params_end_0011:
  1549 00000C20 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1550 00000C23 4889C3                  	mov rbx, rax
  1551 00000C26 58                      	pop rax
  1552 00000C27 C60004                  	mov byte [rax], T_closure
  1553 00000C2A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1554 00000C2E 48C74009[380C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0011
  1555 00000C36 EB6B                    	jmp .L_lambda_simple_end_0011
  1556                                  .L_lambda_simple_code_0011:	; lambda-simple body
  1557 00000C38 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1558 00000C3E 740B                    	je .L_lambda_simple_arity_check_ok_0011
  1559 00000C40 FF742410                	push qword [rsp + 8 * 2]
  1560 00000C44 6A01                    	push 1
  1561 00000C46 E9C2560000              	jmp L_error_incorrect_arity_simple
  1562                                  .L_lambda_simple_arity_check_ok_0011:
  1563 00000C4B C8000000                	enter 0, 0
  1564                                  	; preparing a tail-call
  1565 00000C4F 48B8-                   	mov rax, L_constants + 1524
  1565 00000C51 [F405000000000000] 
  1566 00000C59 50                      	push rax
  1567 00000C5A 488B4520                	mov rax, PARAM(0)	; param x
  1568 00000C5E 50                      	push rax
  1569 00000C5F 6A02                    	push 2	; arg count
  1570 00000C61 488B0425[19060000]      	mov rax, qword [free_var_0]	; free var +
  1571 00000C69 803805                  	cmp byte [rax], T_undefined
  1572 00000C6C 0F84B5550000            	je L_error_fvar_undefined
  1573 00000C72 803804                  	cmp byte [rax], T_closure
  1574 00000C75 0F8530560000            	jne L_error_non_closure
  1575 00000C7B FF7001                  	push SOB_CLOSURE_ENV(rax)
  1576 00000C7E FF7508                  	push qword [rbp + 8 * 1]
  1577                                   ; old ret addr	pop rbp
  1578                                  ; restore the old rbp	mov rbx, 2
  1579 00000C81 4883C303                	add rbx, 3
  1580                                  	mov rdi, dword [rbp + 8*2]
  1580          ******************       error: mismatch in operand sizes
  1581                                  .L_tc_recycle_frame_loop_0007:
  1582 00000C85 4883FB00                	cmp rbx, 0
  1583 00000C89 7411                    je .L_tc_recycle_frame_done_0007
  1584 00000C8B 488B0CDC                	mov rcx, qword [rsp + 8 * rbx]
  1585 00000C8F 48894CFD18              	mov [rbp + 3*8 + 8 * rdi], rcx
  1586 00000C94 48FFCF                  	dec rdi
  1587 00000C97 48FFCB                  	dec rbx
  1588 00000C9A EBE9                    jmp .L_tc_recycle_frame_loop_0007
  1589                                  .L_tc_recycle_frame_done_0007:
  1590 00000C9C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1591 00000C9F C9                      	leave
  1592 00000CA0 C21800                  	ret AND_KILL_FRAME(1)
  1593                                  .L_lambda_simple_end_0011:	; new closure is in rax
  1594 00000CA3 50                      	push rax
  1595 00000CA4 6A01                    	push 1	; arg count
  1596                                  	; preparing a non-tail-call
  1597                                  	; preparing a non-tail-call
  1598 00000CA6 488B4520                	mov rax, PARAM(0)	; param n
  1599 00000CAA 50                      	push rax
  1600 00000CAB 6A01                    	push 1	; arg count
  1601 00000CAD 488B4510                	mov rax, ENV
  1602 00000CB1 488B00                  	mov rax, qword [rax + 8 * 0]
  1603 00000CB4 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var ->
  1604 00000CB8 803804                  	cmp byte [rax], T_closure
  1605 00000CBB 0F85EA550000            	jne L_error_non_closure
  1606 00000CC1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1607 00000CC4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1608 00000CC7 50                      	push rax
  1609 00000CC8 6A01                    	push 1	; arg count
  1610                                  	; preparing a non-tail-call
  1611                                  	; preparing a non-tail-call
  1612                                  	; preparing a non-tail-call
  1613                                  	; preparing a non-tail-call
  1614                                  	; preparing a non-tail-call
  1615                                  	; preparing a non-tail-call
  1616 00000CCA 488B4510                	mov rax, ENV
  1617 00000CCE 488B00                  	mov rax, qword [rax + 8 * 0]
  1618 00000CD1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1619 00000CD4 50                      	push rax
  1620 00000CD5 6A01                    	push 1	; arg count
  1621 00000CD7 488B4510                	mov rax, ENV
  1622 00000CDB 488B00                  	mov rax, qword [rax + 8 * 0]
  1623 00000CDE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1624 00000CE1 803804                  	cmp byte [rax], T_closure
  1625 00000CE4 0F85C1550000            	jne L_error_non_closure
  1626 00000CEA FF7001                  	push SOB_CLOSURE_ENV(rax)
  1627 00000CED FF5009                  	call SOB_CLOSURE_CODE(rax)
  1628 00000CF0 50                      	push rax
  1629 00000CF1 6A01                    	push 1	; arg count
  1630 00000CF3 488B4510                	mov rax, ENV
  1631 00000CF7 488B00                  	mov rax, qword [rax + 8 * 0]
  1632 00000CFA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1633 00000CFD 803804                  	cmp byte [rax], T_closure
  1634 00000D00 0F85A5550000            	jne L_error_non_closure
  1635 00000D06 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1636 00000D09 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1637 00000D0C 50                      	push rax
  1638 00000D0D 6A01                    	push 1	; arg count
  1639 00000D0F 488B4510                	mov rax, ENV
  1640 00000D13 488B00                  	mov rax, qword [rax + 8 * 0]
  1641 00000D16 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1642 00000D19 803804                  	cmp byte [rax], T_closure
  1643 00000D1C 0F8589550000            	jne L_error_non_closure
  1644 00000D22 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1645 00000D25 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1646 00000D28 50                      	push rax
  1647 00000D29 6A01                    	push 1	; arg count
  1648                                  	; preparing a non-tail-call
  1649                                  	; preparing a non-tail-call
  1650                                  	; preparing a non-tail-call
  1651                                  	; preparing a non-tail-call
  1652 00000D2B 488B4510                	mov rax, ENV
  1653 00000D2F 488B00                  	mov rax, qword [rax + 8 * 0]
  1654 00000D32 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1655 00000D35 50                      	push rax
  1656 00000D36 6A01                    	push 1	; arg count
  1657 00000D38 488B4510                	mov rax, ENV
  1658 00000D3C 488B00                  	mov rax, qword [rax + 8 * 0]
  1659 00000D3F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1660 00000D42 803804                  	cmp byte [rax], T_closure
  1661 00000D45 0F8560550000            	jne L_error_non_closure
  1662 00000D4B FF7001                  	push SOB_CLOSURE_ENV(rax)
  1663 00000D4E FF5009                  	call SOB_CLOSURE_CODE(rax)
  1664 00000D51 50                      	push rax
  1665 00000D52 6A01                    	push 1	; arg count
  1666 00000D54 488B4510                	mov rax, ENV
  1667 00000D58 488B00                  	mov rax, qword [rax + 8 * 0]
  1668 00000D5B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1669 00000D5E 803804                  	cmp byte [rax], T_closure
  1670 00000D61 0F8544550000            	jne L_error_non_closure
  1671 00000D67 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1672 00000D6A FF5009                  	call SOB_CLOSURE_CODE(rax)
  1673 00000D6D 50                      	push rax
  1674 00000D6E 6A01                    	push 1	; arg count
  1675 00000D70 488B4510                	mov rax, ENV
  1676 00000D74 488B00                  	mov rax, qword [rax + 8 * 0]
  1677 00000D77 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1678 00000D7A 803804                  	cmp byte [rax], T_closure
  1679 00000D7D 0F8528550000            	jne L_error_non_closure
  1680 00000D83 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1681 00000D86 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1682 00000D89 50                      	push rax
  1683 00000D8A 6A01                    	push 1	; arg count
  1684                                  	; preparing a non-tail-call
  1685                                  	; preparing a non-tail-call
  1686                                  	; preparing a non-tail-call
  1687                                  	; preparing a non-tail-call
  1688 00000D8C 488B4510                	mov rax, ENV
  1689 00000D90 488B00                  	mov rax, qword [rax + 8 * 0]
  1690 00000D93 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1691 00000D96 50                      	push rax
  1692 00000D97 6A01                    	push 1	; arg count
  1693 00000D99 488B4510                	mov rax, ENV
  1694 00000D9D 488B00                  	mov rax, qword [rax + 8 * 0]
  1695 00000DA0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1696 00000DA3 803804                  	cmp byte [rax], T_closure
  1697 00000DA6 0F85FF540000            	jne L_error_non_closure
  1698 00000DAC FF7001                  	push SOB_CLOSURE_ENV(rax)
  1699 00000DAF FF5009                  	call SOB_CLOSURE_CODE(rax)
  1700 00000DB2 50                      	push rax
  1701 00000DB3 6A01                    	push 1	; arg count
  1702 00000DB5 488B4510                	mov rax, ENV
  1703 00000DB9 488B00                  	mov rax, qword [rax + 8 * 0]
  1704 00000DBC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1705 00000DBF 803804                  	cmp byte [rax], T_closure
  1706 00000DC2 0F85E3540000            	jne L_error_non_closure
  1707 00000DC8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1708 00000DCB FF5009                  	call SOB_CLOSURE_CODE(rax)
  1709 00000DCE 50                      	push rax
  1710 00000DCF 6A01                    	push 1	; arg count
  1711 00000DD1 488B4510                	mov rax, ENV
  1712 00000DD5 488B00                  	mov rax, qword [rax + 8 * 0]
  1713 00000DD8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1714 00000DDB 803804                  	cmp byte [rax], T_closure
  1715 00000DDE 0F85C7540000            	jne L_error_non_closure
  1716 00000DE4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1717 00000DE7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1718 00000DEA 50                      	push rax
  1719 00000DEB 6A01                    	push 1	; arg count
  1720 00000DED 488B4510                	mov rax, ENV
  1721 00000DF1 488B00                  	mov rax, qword [rax + 8 * 0]
  1722 00000DF4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1723 00000DF7 803804                  	cmp byte [rax], T_closure
  1724 00000DFA 0F85AB540000            	jne L_error_non_closure
  1725 00000E00 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1726 00000E03 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1727 00000E06 803804                  	cmp byte [rax], T_closure
  1728 00000E09 0F859C540000            	jne L_error_non_closure
  1729 00000E0F FF7001                  	push SOB_CLOSURE_ENV(rax)
  1730 00000E12 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1731 00000E15 803804                  	cmp byte [rax], T_closure
  1732 00000E18 0F858D540000            	jne L_error_non_closure
  1733 00000E1E FF7001                  	push SOB_CLOSURE_ENV(rax)
  1734 00000E21 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1735 00000E24 50                      	push rax
  1736 00000E25 6A01                    	push 1	; arg count
  1737                                  	; preparing a non-tail-call
  1738                                  	; preparing a non-tail-call
  1739                                  	; preparing a non-tail-call
  1740 00000E27 488B4510                	mov rax, ENV
  1741 00000E2B 488B00                  	mov rax, qword [rax + 8 * 0]
  1742 00000E2E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1743 00000E31 50                      	push rax
  1744 00000E32 6A01                    	push 1	; arg count
  1745 00000E34 488B4510                	mov rax, ENV
  1746 00000E38 488B00                  	mov rax, qword [rax + 8 * 0]
  1747 00000E3B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1748 00000E3E 803804                  	cmp byte [rax], T_closure
  1749 00000E41 0F8564540000            	jne L_error_non_closure
  1750 00000E47 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1751 00000E4A FF5009                  	call SOB_CLOSURE_CODE(rax)
  1752 00000E4D 50                      	push rax
  1753 00000E4E 6A01                    	push 1	; arg count
  1754 00000E50 488B4510                	mov rax, ENV
  1755 00000E54 488B00                  	mov rax, qword [rax + 8 * 0]
  1756 00000E57 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1757 00000E5A 803804                  	cmp byte [rax], T_closure
  1758 00000E5D 0F8548540000            	jne L_error_non_closure
  1759 00000E63 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1760 00000E66 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1761 00000E69 50                      	push rax
  1762 00000E6A 6A01                    	push 1	; arg count
  1763 00000E6C 488B4510                	mov rax, ENV
  1764 00000E70 488B00                  	mov rax, qword [rax + 8 * 0]
  1765 00000E73 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1766 00000E76 803804                  	cmp byte [rax], T_closure
  1767 00000E79 0F852C540000            	jne L_error_non_closure
  1768 00000E7F FF7001                  	push SOB_CLOSURE_ENV(rax)
  1769 00000E82 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1770 00000E85 803804                  	cmp byte [rax], T_closure
  1771 00000E88 0F851D540000            	jne L_error_non_closure
  1772 00000E8E FF7001                  	push SOB_CLOSURE_ENV(rax)
  1773 00000E91 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1774 00000E94 50                      	push rax
  1775 00000E95 6A01                    	push 1	; arg count
  1776                                  	; preparing a non-tail-call
  1777                                  	; preparing a non-tail-call
  1778                                  	; preparing a non-tail-call
  1779                                  	; preparing a non-tail-call
  1780                                  	; preparing a non-tail-call
  1781                                  	; preparing a non-tail-call
  1782                                  	; preparing a non-tail-call
  1783                                  	; preparing a non-tail-call
  1784                                  	; preparing a non-tail-call
  1785 00000E97 488B4510                	mov rax, ENV
  1786 00000E9B 488B00                  	mov rax, qword [rax + 8 * 0]
  1787 00000E9E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1788 00000EA1 50                      	push rax
  1789 00000EA2 6A01                    	push 1	; arg count
  1790 00000EA4 488B4510                	mov rax, ENV
  1791 00000EA8 488B00                  	mov rax, qword [rax + 8 * 0]
  1792 00000EAB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1793 00000EAE 803804                  	cmp byte [rax], T_closure
  1794 00000EB1 0F85F4530000            	jne L_error_non_closure
  1795 00000EB7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1796 00000EBA FF5009                  	call SOB_CLOSURE_CODE(rax)
  1797 00000EBD 50                      	push rax
  1798 00000EBE 6A01                    	push 1	; arg count
  1799 00000EC0 488B4510                	mov rax, ENV
  1800 00000EC4 488B00                  	mov rax, qword [rax + 8 * 0]
  1801 00000EC7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1802 00000ECA 803804                  	cmp byte [rax], T_closure
  1803 00000ECD 0F85D8530000            	jne L_error_non_closure
  1804 00000ED3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1805 00000ED6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1806 00000ED9 50                      	push rax
  1807 00000EDA 6A01                    	push 1	; arg count
  1808 00000EDC 488B4510                	mov rax, ENV
  1809 00000EE0 488B00                  	mov rax, qword [rax + 8 * 0]
  1810 00000EE3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1811 00000EE6 803804                  	cmp byte [rax], T_closure
  1812 00000EE9 0F85BC530000            	jne L_error_non_closure
  1813 00000EEF FF7001                  	push SOB_CLOSURE_ENV(rax)
  1814 00000EF2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1815 00000EF5 50                      	push rax
  1816 00000EF6 6A01                    	push 1	; arg count
  1817                                  	; preparing a non-tail-call
  1818                                  	; preparing a non-tail-call
  1819                                  	; preparing a non-tail-call
  1820                                  	; preparing a non-tail-call
  1821 00000EF8 488B4510                	mov rax, ENV
  1822 00000EFC 488B00                  	mov rax, qword [rax + 8 * 0]
  1823 00000EFF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1824 00000F02 50                      	push rax
  1825 00000F03 6A01                    	push 1	; arg count
  1826 00000F05 488B4510                	mov rax, ENV
  1827 00000F09 488B00                  	mov rax, qword [rax + 8 * 0]
  1828 00000F0C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1829 00000F0F 803804                  	cmp byte [rax], T_closure
  1830 00000F12 0F8593530000            	jne L_error_non_closure
  1831 00000F18 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1832 00000F1B FF5009                  	call SOB_CLOSURE_CODE(rax)
  1833 00000F1E 50                      	push rax
  1834 00000F1F 6A01                    	push 1	; arg count
  1835 00000F21 488B4510                	mov rax, ENV
  1836 00000F25 488B00                  	mov rax, qword [rax + 8 * 0]
  1837 00000F28 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1838 00000F2B 803804                  	cmp byte [rax], T_closure
  1839 00000F2E 0F8577530000            	jne L_error_non_closure
  1840 00000F34 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1841 00000F37 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1842 00000F3A 50                      	push rax
  1843 00000F3B 6A01                    	push 1	; arg count
  1844 00000F3D 488B4510                	mov rax, ENV
  1845 00000F41 488B00                  	mov rax, qword [rax + 8 * 0]
  1846 00000F44 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1847 00000F47 803804                  	cmp byte [rax], T_closure
  1848 00000F4A 0F855B530000            	jne L_error_non_closure
  1849 00000F50 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1850 00000F53 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1851 00000F56 50                      	push rax
  1852 00000F57 6A01                    	push 1	; arg count
  1853                                  	; preparing a non-tail-call
  1854                                  	; preparing a non-tail-call
  1855                                  	; preparing a non-tail-call
  1856                                  	; preparing a non-tail-call
  1857 00000F59 488B4510                	mov rax, ENV
  1858 00000F5D 488B00                  	mov rax, qword [rax + 8 * 0]
  1859 00000F60 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1860 00000F63 50                      	push rax
  1861 00000F64 6A01                    	push 1	; arg count
  1862 00000F66 488B4510                	mov rax, ENV
  1863 00000F6A 488B00                  	mov rax, qword [rax + 8 * 0]
  1864 00000F6D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1865 00000F70 803804                  	cmp byte [rax], T_closure
  1866 00000F73 0F8532530000            	jne L_error_non_closure
  1867 00000F79 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1868 00000F7C FF5009                  	call SOB_CLOSURE_CODE(rax)
  1869 00000F7F 50                      	push rax
  1870 00000F80 6A01                    	push 1	; arg count
  1871 00000F82 488B4510                	mov rax, ENV
  1872 00000F86 488B00                  	mov rax, qword [rax + 8 * 0]
  1873 00000F89 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1874 00000F8C 803804                  	cmp byte [rax], T_closure
  1875 00000F8F 0F8516530000            	jne L_error_non_closure
  1876 00000F95 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1877 00000F98 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1878 00000F9B 50                      	push rax
  1879 00000F9C 6A01                    	push 1	; arg count
  1880 00000F9E 488B4510                	mov rax, ENV
  1881 00000FA2 488B00                  	mov rax, qword [rax + 8 * 0]
  1882 00000FA5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1883 00000FA8 803804                  	cmp byte [rax], T_closure
  1884 00000FAB 0F85FA520000            	jne L_error_non_closure
  1885 00000FB1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1886 00000FB4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1887 00000FB7 50                      	push rax
  1888 00000FB8 6A01                    	push 1	; arg count
  1889 00000FBA 488B4510                	mov rax, ENV
  1890 00000FBE 488B00                  	mov rax, qword [rax + 8 * 0]
  1891 00000FC1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1892 00000FC4 803804                  	cmp byte [rax], T_closure
  1893 00000FC7 0F85DE520000            	jne L_error_non_closure
  1894 00000FCD FF7001                  	push SOB_CLOSURE_ENV(rax)
  1895 00000FD0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1896 00000FD3 803804                  	cmp byte [rax], T_closure
  1897 00000FD6 0F85CF520000            	jne L_error_non_closure
  1898 00000FDC FF7001                  	push SOB_CLOSURE_ENV(rax)
  1899 00000FDF FF5009                  	call SOB_CLOSURE_CODE(rax)
  1900 00000FE2 803804                  	cmp byte [rax], T_closure
  1901 00000FE5 0F85C0520000            	jne L_error_non_closure
  1902 00000FEB FF7001                  	push SOB_CLOSURE_ENV(rax)
  1903 00000FEE FF5009                  	call SOB_CLOSURE_CODE(rax)
  1904 00000FF1 50                      	push rax
  1905 00000FF2 6A01                    	push 1	; arg count
  1906                                  	; preparing a non-tail-call
  1907                                  	; preparing a non-tail-call
  1908                                  	; preparing a non-tail-call
  1909 00000FF4 488B4510                	mov rax, ENV
  1910 00000FF8 488B00                  	mov rax, qword [rax + 8 * 0]
  1911 00000FFB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1912 00000FFE 50                      	push rax
  1913 00000FFF 6A01                    	push 1	; arg count
  1914 00001001 488B4510                	mov rax, ENV
  1915 00001005 488B00                  	mov rax, qword [rax + 8 * 0]
  1916 00001008 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1917 0000100B 803804                  	cmp byte [rax], T_closure
  1918 0000100E 0F8597520000            	jne L_error_non_closure
  1919 00001014 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1920 00001017 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1921 0000101A 50                      	push rax
  1922 0000101B 6A01                    	push 1	; arg count
  1923 0000101D 488B4510                	mov rax, ENV
  1924 00001021 488B00                  	mov rax, qword [rax + 8 * 0]
  1925 00001024 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1926 00001027 803804                  	cmp byte [rax], T_closure
  1927 0000102A 0F857B520000            	jne L_error_non_closure
  1928 00001030 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1929 00001033 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1930 00001036 50                      	push rax
  1931 00001037 6A01                    	push 1	; arg count
  1932 00001039 488B4510                	mov rax, ENV
  1933 0000103D 488B00                  	mov rax, qword [rax + 8 * 0]
  1934 00001040 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1935 00001043 803804                  	cmp byte [rax], T_closure
  1936 00001046 0F855F520000            	jne L_error_non_closure
  1937 0000104C FF7001                  	push SOB_CLOSURE_ENV(rax)
  1938 0000104F FF5009                  	call SOB_CLOSURE_CODE(rax)
  1939 00001052 803804                  	cmp byte [rax], T_closure
  1940 00001055 0F8550520000            	jne L_error_non_closure
  1941 0000105B FF7001                  	push SOB_CLOSURE_ENV(rax)
  1942 0000105E FF5009                  	call SOB_CLOSURE_CODE(rax)
  1943 00001061 50                      	push rax
  1944 00001062 6A01                    	push 1	; arg count
  1945                                  	; preparing a non-tail-call
  1946                                  	; preparing a non-tail-call
  1947                                  	; preparing a non-tail-call
  1948                                  	; preparing a non-tail-call
  1949                                  	; preparing a non-tail-call
  1950 00001064 488B4510                	mov rax, ENV
  1951 00001068 488B00                  	mov rax, qword [rax + 8 * 0]
  1952 0000106B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1953 0000106E 50                      	push rax
  1954 0000106F 6A01                    	push 1	; arg count
  1955 00001071 488B4510                	mov rax, ENV
  1956 00001075 488B00                  	mov rax, qword [rax + 8 * 0]
  1957 00001078 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1958 0000107B 803804                  	cmp byte [rax], T_closure
  1959 0000107E 0F8527520000            	jne L_error_non_closure
  1960 00001084 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1961 00001087 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1962 0000108A 50                      	push rax
  1963 0000108B 6A01                    	push 1	; arg count
  1964 0000108D 488B4510                	mov rax, ENV
  1965 00001091 488B00                  	mov rax, qword [rax + 8 * 0]
  1966 00001094 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1967 00001097 803804                  	cmp byte [rax], T_closure
  1968 0000109A 0F850B520000            	jne L_error_non_closure
  1969 000010A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1970 000010A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1971 000010A6 50                      	push rax
  1972 000010A7 6A01                    	push 1	; arg count
  1973 000010A9 488B4510                	mov rax, ENV
  1974 000010AD 488B00                  	mov rax, qword [rax + 8 * 0]
  1975 000010B0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1976 000010B3 803804                  	cmp byte [rax], T_closure
  1977 000010B6 0F85EF510000            	jne L_error_non_closure
  1978 000010BC FF7001                  	push SOB_CLOSURE_ENV(rax)
  1979 000010BF FF5009                  	call SOB_CLOSURE_CODE(rax)
  1980 000010C2 50                      	push rax
  1981 000010C3 6A01                    	push 1	; arg count
  1982                                  	; preparing a non-tail-call
  1983                                  	; preparing a non-tail-call
  1984                                  	; preparing a non-tail-call
  1985                                  	; preparing a non-tail-call
  1986                                  	; preparing a non-tail-call
  1987                                  	; preparing a non-tail-call
  1988 000010C5 488B4510                	mov rax, ENV
  1989 000010C9 488B00                  	mov rax, qword [rax + 8 * 0]
  1990 000010CC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1991 000010CF 50                      	push rax
  1992 000010D0 6A01                    	push 1	; arg count
  1993 000010D2 488B4510                	mov rax, ENV
  1994 000010D6 488B00                  	mov rax, qword [rax + 8 * 0]
  1995 000010D9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1996 000010DC 803804                  	cmp byte [rax], T_closure
  1997 000010DF 0F85C6510000            	jne L_error_non_closure
  1998 000010E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1999 000010E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2000 000010EB 50                      	push rax
  2001 000010EC 6A01                    	push 1	; arg count
  2002 000010EE 488B4510                	mov rax, ENV
  2003 000010F2 488B00                  	mov rax, qword [rax + 8 * 0]
  2004 000010F5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2005 000010F8 803804                  	cmp byte [rax], T_closure
  2006 000010FB 0F85AA510000            	jne L_error_non_closure
  2007 00001101 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2008 00001104 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2009 00001107 50                      	push rax
  2010 00001108 6A01                    	push 1	; arg count
  2011 0000110A 488B4510                	mov rax, ENV
  2012 0000110E 488B00                  	mov rax, qword [rax + 8 * 0]
  2013 00001111 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2014 00001114 803804                  	cmp byte [rax], T_closure
  2015 00001117 0F858E510000            	jne L_error_non_closure
  2016 0000111D FF7001                  	push SOB_CLOSURE_ENV(rax)
  2017 00001120 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2018 00001123 50                      	push rax
  2019 00001124 6A01                    	push 1	; arg count
  2020 00001126 488B4510                	mov rax, ENV
  2021 0000112A 488B00                  	mov rax, qword [rax + 8 * 0]
  2022 0000112D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2023 00001130 803804                  	cmp byte [rax], T_closure
  2024 00001133 0F8572510000            	jne L_error_non_closure
  2025 00001139 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2026 0000113C FF5009                  	call SOB_CLOSURE_CODE(rax)
  2027 0000113F 50                      	push rax
  2028 00001140 6A01                    	push 1	; arg count
  2029                                  	; preparing a non-tail-call
  2030                                  	; preparing a non-tail-call
  2031                                  	; preparing a non-tail-call
  2032 00001142 488B4510                	mov rax, ENV
  2033 00001146 488B00                  	mov rax, qword [rax + 8 * 0]
  2034 00001149 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2035 0000114C 50                      	push rax
  2036 0000114D 6A01                    	push 1	; arg count
  2037 0000114F 488B4510                	mov rax, ENV
  2038 00001153 488B00                  	mov rax, qword [rax + 8 * 0]
  2039 00001156 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2040 00001159 803804                  	cmp byte [rax], T_closure
  2041 0000115C 0F8549510000            	jne L_error_non_closure
  2042 00001162 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2043 00001165 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2044 00001168 50                      	push rax
  2045 00001169 6A01                    	push 1	; arg count
  2046 0000116B 488B4510                	mov rax, ENV
  2047 0000116F 488B00                  	mov rax, qword [rax + 8 * 0]
  2048 00001172 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2049 00001175 803804                  	cmp byte [rax], T_closure
  2050 00001178 0F852D510000            	jne L_error_non_closure
  2051 0000117E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2052 00001181 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2053 00001184 50                      	push rax
  2054 00001185 6A01                    	push 1	; arg count
  2055 00001187 488B4510                	mov rax, ENV
  2056 0000118B 488B00                  	mov rax, qword [rax + 8 * 0]
  2057 0000118E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2058 00001191 803804                  	cmp byte [rax], T_closure
  2059 00001194 0F8511510000            	jne L_error_non_closure
  2060 0000119A FF7001                  	push SOB_CLOSURE_ENV(rax)
  2061 0000119D FF5009                  	call SOB_CLOSURE_CODE(rax)
  2062 000011A0 803804                  	cmp byte [rax], T_closure
  2063 000011A3 0F8502510000            	jne L_error_non_closure
  2064 000011A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2065 000011AC FF5009                  	call SOB_CLOSURE_CODE(rax)
  2066 000011AF 50                      	push rax
  2067 000011B0 6A01                    	push 1	; arg count
  2068                                  	; preparing a non-tail-call
  2069                                  	; preparing a non-tail-call
  2070                                  	; preparing a non-tail-call
  2071                                  	; preparing a non-tail-call
  2072 000011B2 488B4510                	mov rax, ENV
  2073 000011B6 488B00                  	mov rax, qword [rax + 8 * 0]
  2074 000011B9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2075 000011BC 50                      	push rax
  2076 000011BD 6A01                    	push 1	; arg count
  2077 000011BF 488B4510                	mov rax, ENV
  2078 000011C3 488B00                  	mov rax, qword [rax + 8 * 0]
  2079 000011C6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2080 000011C9 803804                  	cmp byte [rax], T_closure
  2081 000011CC 0F85D9500000            	jne L_error_non_closure
  2082 000011D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2083 000011D5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2084 000011D8 50                      	push rax
  2085 000011D9 6A01                    	push 1	; arg count
  2086 000011DB 488B4510                	mov rax, ENV
  2087 000011DF 488B00                  	mov rax, qword [rax + 8 * 0]
  2088 000011E2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2089 000011E5 803804                  	cmp byte [rax], T_closure
  2090 000011E8 0F85BD500000            	jne L_error_non_closure
  2091 000011EE FF7001                  	push SOB_CLOSURE_ENV(rax)
  2092 000011F1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2093 000011F4 50                      	push rax
  2094 000011F5 6A01                    	push 1	; arg count
  2095 000011F7 488B4510                	mov rax, ENV
  2096 000011FB 488B00                  	mov rax, qword [rax + 8 * 0]
  2097 000011FE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2098 00001201 803804                  	cmp byte [rax], T_closure
  2099 00001204 0F85A1500000            	jne L_error_non_closure
  2100 0000120A FF7001                  	push SOB_CLOSURE_ENV(rax)
  2101 0000120D FF5009                  	call SOB_CLOSURE_CODE(rax)
  2102 00001210 50                      	push rax
  2103 00001211 6A01                    	push 1	; arg count
  2104 00001213 488B4510                	mov rax, ENV
  2105 00001217 488B00                  	mov rax, qword [rax + 8 * 0]
  2106 0000121A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2107 0000121D 803804                  	cmp byte [rax], T_closure
  2108 00001220 0F8585500000            	jne L_error_non_closure
  2109 00001226 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2110 00001229 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2111 0000122C 803804                  	cmp byte [rax], T_closure
  2112 0000122F 0F8576500000            	jne L_error_non_closure
  2113 00001235 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2114 00001238 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2115 0000123B 803804                  	cmp byte [rax], T_closure
  2116 0000123E 0F8567500000            	jne L_error_non_closure
  2117 00001244 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2118 00001247 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2119 0000124A 50                      	push rax
  2120 0000124B 6A01                    	push 1	; arg count
  2121                                  	; preparing a non-tail-call
  2122                                  	; preparing a non-tail-call
  2123                                  	; preparing a non-tail-call
  2124                                  	; preparing a non-tail-call
  2125 0000124D 488B4510                	mov rax, ENV
  2126 00001251 488B00                  	mov rax, qword [rax + 8 * 0]
  2127 00001254 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2128 00001257 50                      	push rax
  2129 00001258 6A01                    	push 1	; arg count
  2130 0000125A 488B4510                	mov rax, ENV
  2131 0000125E 488B00                  	mov rax, qword [rax + 8 * 0]
  2132 00001261 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2133 00001264 803804                  	cmp byte [rax], T_closure
  2134 00001267 0F853E500000            	jne L_error_non_closure
  2135 0000126D FF7001                  	push SOB_CLOSURE_ENV(rax)
  2136 00001270 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2137 00001273 50                      	push rax
  2138 00001274 6A01                    	push 1	; arg count
  2139 00001276 488B4510                	mov rax, ENV
  2140 0000127A 488B00                  	mov rax, qword [rax + 8 * 0]
  2141 0000127D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2142 00001280 803804                  	cmp byte [rax], T_closure
  2143 00001283 0F8522500000            	jne L_error_non_closure
  2144 00001289 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2145 0000128C FF5009                  	call SOB_CLOSURE_CODE(rax)
  2146 0000128F 50                      	push rax
  2147 00001290 6A01                    	push 1	; arg count
  2148 00001292 488B4510                	mov rax, ENV
  2149 00001296 488B00                  	mov rax, qword [rax + 8 * 0]
  2150 00001299 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2151 0000129C 803804                  	cmp byte [rax], T_closure
  2152 0000129F 0F8506500000            	jne L_error_non_closure
  2153 000012A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2154 000012A8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2155 000012AB 50                      	push rax
  2156 000012AC 6A01                    	push 1	; arg count
  2157 000012AE 488B4510                	mov rax, ENV
  2158 000012B2 488B00                  	mov rax, qword [rax + 8 * 0]
  2159 000012B5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2160 000012B8 803804                  	cmp byte [rax], T_closure
  2161 000012BB 0F85EA4F0000            	jne L_error_non_closure
  2162 000012C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2163 000012C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2164 000012C7 803804                  	cmp byte [rax], T_closure
  2165 000012CA 0F85DB4F0000            	jne L_error_non_closure
  2166 000012D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2167 000012D3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2168 000012D6 803804                  	cmp byte [rax], T_closure
  2169 000012D9 0F85CC4F0000            	jne L_error_non_closure
  2170 000012DF FF7001                  	push SOB_CLOSURE_ENV(rax)
  2171 000012E2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2172 000012E5 50                      	push rax
  2173 000012E6 6A01                    	push 1	; arg count
  2174                                  	; preparing a non-tail-call
  2175                                  	; preparing a non-tail-call
  2176                                  	; preparing a non-tail-call
  2177                                  	; preparing a non-tail-call
  2178                                  	; preparing a non-tail-call
  2179                                  	; preparing a non-tail-call
  2180                                  	; preparing a non-tail-call
  2181 000012E8 488B4510                	mov rax, ENV
  2182 000012EC 488B00                  	mov rax, qword [rax + 8 * 0]
  2183 000012EF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2184 000012F2 50                      	push rax
  2185 000012F3 6A01                    	push 1	; arg count
  2186 000012F5 488B4510                	mov rax, ENV
  2187 000012F9 488B00                  	mov rax, qword [rax + 8 * 0]
  2188 000012FC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2189 000012FF 803804                  	cmp byte [rax], T_closure
  2190 00001302 0F85A34F0000            	jne L_error_non_closure
  2191 00001308 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2192 0000130B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2193 0000130E 50                      	push rax
  2194 0000130F 6A01                    	push 1	; arg count
  2195 00001311 488B4510                	mov rax, ENV
  2196 00001315 488B00                  	mov rax, qword [rax + 8 * 0]
  2197 00001318 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2198 0000131B 803804                  	cmp byte [rax], T_closure
  2199 0000131E 0F85874F0000            	jne L_error_non_closure
  2200 00001324 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2201 00001327 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2202 0000132A 50                      	push rax
  2203 0000132B 6A01                    	push 1	; arg count
  2204 0000132D 488B4510                	mov rax, ENV
  2205 00001331 488B00                  	mov rax, qword [rax + 8 * 0]
  2206 00001334 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2207 00001337 803804                  	cmp byte [rax], T_closure
  2208 0000133A 0F856B4F0000            	jne L_error_non_closure
  2209 00001340 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2210 00001343 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2211 00001346 50                      	push rax
  2212 00001347 6A01                    	push 1	; arg count
  2213                                  	; preparing a non-tail-call
  2214                                  	; preparing a non-tail-call
  2215                                  	; preparing a non-tail-call
  2216                                  	; preparing a non-tail-call
  2217 00001349 488B4510                	mov rax, ENV
  2218 0000134D 488B00                  	mov rax, qword [rax + 8 * 0]
  2219 00001350 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2220 00001353 50                      	push rax
  2221 00001354 6A01                    	push 1	; arg count
  2222 00001356 488B4510                	mov rax, ENV
  2223 0000135A 488B00                  	mov rax, qword [rax + 8 * 0]
  2224 0000135D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2225 00001360 803804                  	cmp byte [rax], T_closure
  2226 00001363 0F85424F0000            	jne L_error_non_closure
  2227 00001369 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2228 0000136C FF5009                  	call SOB_CLOSURE_CODE(rax)
  2229 0000136F 50                      	push rax
  2230 00001370 6A01                    	push 1	; arg count
  2231 00001372 488B4510                	mov rax, ENV
  2232 00001376 488B00                  	mov rax, qword [rax + 8 * 0]
  2233 00001379 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2234 0000137C 803804                  	cmp byte [rax], T_closure
  2235 0000137F 0F85264F0000            	jne L_error_non_closure
  2236 00001385 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2237 00001388 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2238 0000138B 50                      	push rax
  2239 0000138C 6A01                    	push 1	; arg count
  2240 0000138E 488B4510                	mov rax, ENV
  2241 00001392 488B00                  	mov rax, qword [rax + 8 * 0]
  2242 00001395 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2243 00001398 803804                  	cmp byte [rax], T_closure
  2244 0000139B 0F850A4F0000            	jne L_error_non_closure
  2245 000013A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2246 000013A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2247 000013A7 50                      	push rax
  2248 000013A8 6A01                    	push 1	; arg count
  2249                                  	; preparing a non-tail-call
  2250                                  	; preparing a non-tail-call
  2251                                  	; preparing a non-tail-call
  2252                                  	; preparing a non-tail-call
  2253 000013AA 488B4510                	mov rax, ENV
  2254 000013AE 488B00                  	mov rax, qword [rax + 8 * 0]
  2255 000013B1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2256 000013B4 50                      	push rax
  2257 000013B5 6A01                    	push 1	; arg count
  2258 000013B7 488B4510                	mov rax, ENV
  2259 000013BB 488B00                  	mov rax, qword [rax + 8 * 0]
  2260 000013BE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2261 000013C1 803804                  	cmp byte [rax], T_closure
  2262 000013C4 0F85E14E0000            	jne L_error_non_closure
  2263 000013CA FF7001                  	push SOB_CLOSURE_ENV(rax)
  2264 000013CD FF5009                  	call SOB_CLOSURE_CODE(rax)
  2265 000013D0 50                      	push rax
  2266 000013D1 6A01                    	push 1	; arg count
  2267 000013D3 488B4510                	mov rax, ENV
  2268 000013D7 488B00                  	mov rax, qword [rax + 8 * 0]
  2269 000013DA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2270 000013DD 803804                  	cmp byte [rax], T_closure
  2271 000013E0 0F85C54E0000            	jne L_error_non_closure
  2272 000013E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2273 000013E9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2274 000013EC 50                      	push rax
  2275 000013ED 6A01                    	push 1	; arg count
  2276 000013EF 488B4510                	mov rax, ENV
  2277 000013F3 488B00                  	mov rax, qword [rax + 8 * 0]
  2278 000013F6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2279 000013F9 803804                  	cmp byte [rax], T_closure
  2280 000013FC 0F85A94E0000            	jne L_error_non_closure
  2281 00001402 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2282 00001405 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2283 00001408 50                      	push rax
  2284 00001409 6A01                    	push 1	; arg count
  2285 0000140B 488B4510                	mov rax, ENV
  2286 0000140F 488B00                  	mov rax, qword [rax + 8 * 0]
  2287 00001412 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2288 00001415 803804                  	cmp byte [rax], T_closure
  2289 00001418 0F858D4E0000            	jne L_error_non_closure
  2290 0000141E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2291 00001421 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2292 00001424 803804                  	cmp byte [rax], T_closure
  2293 00001427 0F857E4E0000            	jne L_error_non_closure
  2294 0000142D FF7001                  	push SOB_CLOSURE_ENV(rax)
  2295 00001430 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2296 00001433 803804                  	cmp byte [rax], T_closure
  2297 00001436 0F856F4E0000            	jne L_error_non_closure
  2298 0000143C FF7001                  	push SOB_CLOSURE_ENV(rax)
  2299 0000143F FF5009                  	call SOB_CLOSURE_CODE(rax)
  2300 00001442 50                      	push rax
  2301 00001443 6A01                    	push 1	; arg count
  2302                                  	; preparing a non-tail-call
  2303                                  	; preparing a non-tail-call
  2304                                  	; preparing a non-tail-call
  2305 00001445 488B4510                	mov rax, ENV
  2306 00001449 488B00                  	mov rax, qword [rax + 8 * 0]
  2307 0000144C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2308 0000144F 50                      	push rax
  2309 00001450 6A01                    	push 1	; arg count
  2310 00001452 488B4510                	mov rax, ENV
  2311 00001456 488B00                  	mov rax, qword [rax + 8 * 0]
  2312 00001459 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2313 0000145C 803804                  	cmp byte [rax], T_closure
  2314 0000145F 0F85464E0000            	jne L_error_non_closure
  2315 00001465 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2316 00001468 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2317 0000146B 50                      	push rax
  2318 0000146C 6A01                    	push 1	; arg count
  2319 0000146E 488B4510                	mov rax, ENV
  2320 00001472 488B00                  	mov rax, qword [rax + 8 * 0]
  2321 00001475 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2322 00001478 803804                  	cmp byte [rax], T_closure
  2323 0000147B 0F852A4E0000            	jne L_error_non_closure
  2324 00001481 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2325 00001484 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2326 00001487 50                      	push rax
  2327 00001488 6A01                    	push 1	; arg count
  2328 0000148A 488B4510                	mov rax, ENV
  2329 0000148E 488B00                  	mov rax, qword [rax + 8 * 0]
  2330 00001491 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2331 00001494 803804                  	cmp byte [rax], T_closure
  2332 00001497 0F850E4E0000            	jne L_error_non_closure
  2333 0000149D FF7001                  	push SOB_CLOSURE_ENV(rax)
  2334 000014A0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2335 000014A3 803804                  	cmp byte [rax], T_closure
  2336 000014A6 0F85FF4D0000            	jne L_error_non_closure
  2337 000014AC FF7001                  	push SOB_CLOSURE_ENV(rax)
  2338 000014AF FF5009                  	call SOB_CLOSURE_CODE(rax)
  2339 000014B2 50                      	push rax
  2340 000014B3 6A01                    	push 1	; arg count
  2341                                  	; preparing a non-tail-call
  2342                                  	; preparing a non-tail-call
  2343                                  	; preparing a non-tail-call
  2344                                  	; preparing a non-tail-call
  2345                                  	; preparing a non-tail-call
  2346 000014B5 488B4510                	mov rax, ENV
  2347 000014B9 488B00                  	mov rax, qword [rax + 8 * 0]
  2348 000014BC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2349 000014BF 50                      	push rax
  2350 000014C0 6A01                    	push 1	; arg count
  2351 000014C2 488B4510                	mov rax, ENV
  2352 000014C6 488B00                  	mov rax, qword [rax + 8 * 0]
  2353 000014C9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2354 000014CC 803804                  	cmp byte [rax], T_closure
  2355 000014CF 0F85D64D0000            	jne L_error_non_closure
  2356 000014D5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2357 000014D8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2358 000014DB 50                      	push rax
  2359 000014DC 6A01                    	push 1	; arg count
  2360 000014DE 488B4510                	mov rax, ENV
  2361 000014E2 488B00                  	mov rax, qword [rax + 8 * 0]
  2362 000014E5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2363 000014E8 803804                  	cmp byte [rax], T_closure
  2364 000014EB 0F85BA4D0000            	jne L_error_non_closure
  2365 000014F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2366 000014F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2367 000014F7 50                      	push rax
  2368 000014F8 6A01                    	push 1	; arg count
  2369 000014FA 488B4510                	mov rax, ENV
  2370 000014FE 488B00                  	mov rax, qword [rax + 8 * 0]
  2371 00001501 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2372 00001504 803804                  	cmp byte [rax], T_closure
  2373 00001507 0F859E4D0000            	jne L_error_non_closure
  2374 0000150D FF7001                  	push SOB_CLOSURE_ENV(rax)
  2375 00001510 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2376 00001513 50                      	push rax
  2377 00001514 6A01                    	push 1	; arg count
  2378                                  	; preparing a non-tail-call
  2379                                  	; preparing a non-tail-call
  2380                                  	; preparing a non-tail-call
  2381                                  	; preparing a non-tail-call
  2382                                  	; preparing a non-tail-call
  2383                                  	; preparing a non-tail-call
  2384 00001516 488B4510                	mov rax, ENV
  2385 0000151A 488B00                  	mov rax, qword [rax + 8 * 0]
  2386 0000151D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2387 00001520 50                      	push rax
  2388 00001521 6A01                    	push 1	; arg count
  2389 00001523 488B4510                	mov rax, ENV
  2390 00001527 488B00                  	mov rax, qword [rax + 8 * 0]
  2391 0000152A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2392 0000152D 803804                  	cmp byte [rax], T_closure
  2393 00001530 0F85754D0000            	jne L_error_non_closure
  2394 00001536 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2395 00001539 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2396 0000153C 50                      	push rax
  2397 0000153D 6A01                    	push 1	; arg count
  2398 0000153F 488B4510                	mov rax, ENV
  2399 00001543 488B00                  	mov rax, qword [rax + 8 * 0]
  2400 00001546 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2401 00001549 803804                  	cmp byte [rax], T_closure
  2402 0000154C 0F85594D0000            	jne L_error_non_closure
  2403 00001552 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2404 00001555 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2405 00001558 50                      	push rax
  2406 00001559 6A01                    	push 1	; arg count
  2407 0000155B 488B4510                	mov rax, ENV
  2408 0000155F 488B00                  	mov rax, qword [rax + 8 * 0]
  2409 00001562 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2410 00001565 803804                  	cmp byte [rax], T_closure
  2411 00001568 0F853D4D0000            	jne L_error_non_closure
  2412 0000156E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2413 00001571 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2414 00001574 50                      	push rax
  2415 00001575 6A01                    	push 1	; arg count
  2416 00001577 488B4510                	mov rax, ENV
  2417 0000157B 488B00                  	mov rax, qword [rax + 8 * 0]
  2418 0000157E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2419 00001581 803804                  	cmp byte [rax], T_closure
  2420 00001584 0F85214D0000            	jne L_error_non_closure
  2421 0000158A FF7001                  	push SOB_CLOSURE_ENV(rax)
  2422 0000158D FF5009                  	call SOB_CLOSURE_CODE(rax)
  2423 00001590 50                      	push rax
  2424 00001591 6A01                    	push 1	; arg count
  2425                                  	; preparing a non-tail-call
  2426                                  	; preparing a non-tail-call
  2427                                  	; preparing a non-tail-call
  2428 00001593 488B4510                	mov rax, ENV
  2429 00001597 488B00                  	mov rax, qword [rax + 8 * 0]
  2430 0000159A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2431 0000159D 50                      	push rax
  2432 0000159E 6A01                    	push 1	; arg count
  2433 000015A0 488B4510                	mov rax, ENV
  2434 000015A4 488B00                  	mov rax, qword [rax + 8 * 0]
  2435 000015A7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2436 000015AA 803804                  	cmp byte [rax], T_closure
  2437 000015AD 0F85F84C0000            	jne L_error_non_closure
  2438 000015B3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2439 000015B6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2440 000015B9 50                      	push rax
  2441 000015BA 6A01                    	push 1	; arg count
  2442 000015BC 488B4510                	mov rax, ENV
  2443 000015C0 488B00                  	mov rax, qword [rax + 8 * 0]
  2444 000015C3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2445 000015C6 803804                  	cmp byte [rax], T_closure
  2446 000015C9 0F85DC4C0000            	jne L_error_non_closure
  2447 000015CF FF7001                  	push SOB_CLOSURE_ENV(rax)
  2448 000015D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2449 000015D5 50                      	push rax
  2450 000015D6 6A01                    	push 1	; arg count
  2451 000015D8 488B4510                	mov rax, ENV
  2452 000015DC 488B00                  	mov rax, qword [rax + 8 * 0]
  2453 000015DF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2454 000015E2 803804                  	cmp byte [rax], T_closure
  2455 000015E5 0F85C04C0000            	jne L_error_non_closure
  2456 000015EB FF7001                  	push SOB_CLOSURE_ENV(rax)
  2457 000015EE FF5009                  	call SOB_CLOSURE_CODE(rax)
  2458 000015F1 803804                  	cmp byte [rax], T_closure
  2459 000015F4 0F85B14C0000            	jne L_error_non_closure
  2460 000015FA FF7001                  	push SOB_CLOSURE_ENV(rax)
  2461 000015FD FF5009                  	call SOB_CLOSURE_CODE(rax)
  2462 00001600 50                      	push rax
  2463 00001601 6A01                    	push 1	; arg count
  2464                                  	; preparing a non-tail-call
  2465                                  	; preparing a non-tail-call
  2466                                  	; preparing a non-tail-call
  2467                                  	; preparing a non-tail-call
  2468 00001603 488B4510                	mov rax, ENV
  2469 00001607 488B00                  	mov rax, qword [rax + 8 * 0]
  2470 0000160A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2471 0000160D 50                      	push rax
  2472 0000160E 6A01                    	push 1	; arg count
  2473 00001610 488B4510                	mov rax, ENV
  2474 00001614 488B00                  	mov rax, qword [rax + 8 * 0]
  2475 00001617 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2476 0000161A 803804                  	cmp byte [rax], T_closure
  2477 0000161D 0F85884C0000            	jne L_error_non_closure
  2478 00001623 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2479 00001626 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2480 00001629 50                      	push rax
  2481 0000162A 6A01                    	push 1	; arg count
  2482 0000162C 488B4510                	mov rax, ENV
  2483 00001630 488B00                  	mov rax, qword [rax + 8 * 0]
  2484 00001633 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2485 00001636 803804                  	cmp byte [rax], T_closure
  2486 00001639 0F856C4C0000            	jne L_error_non_closure
  2487 0000163F FF7001                  	push SOB_CLOSURE_ENV(rax)
  2488 00001642 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2489 00001645 50                      	push rax
  2490 00001646 6A01                    	push 1	; arg count
  2491 00001648 488B4510                	mov rax, ENV
  2492 0000164C 488B00                  	mov rax, qword [rax + 8 * 0]
  2493 0000164F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2494 00001652 803804                  	cmp byte [rax], T_closure
  2495 00001655 0F85504C0000            	jne L_error_non_closure
  2496 0000165B FF7001                  	push SOB_CLOSURE_ENV(rax)
  2497 0000165E FF5009                  	call SOB_CLOSURE_CODE(rax)
  2498 00001661 50                      	push rax
  2499 00001662 6A01                    	push 1	; arg count
  2500 00001664 488B4510                	mov rax, ENV
  2501 00001668 488B00                  	mov rax, qword [rax + 8 * 0]
  2502 0000166B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2503 0000166E 803804                  	cmp byte [rax], T_closure
  2504 00001671 0F85344C0000            	jne L_error_non_closure
  2505 00001677 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2506 0000167A FF5009                  	call SOB_CLOSURE_CODE(rax)
  2507 0000167D 803804                  	cmp byte [rax], T_closure
  2508 00001680 0F85254C0000            	jne L_error_non_closure
  2509 00001686 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2510 00001689 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2511 0000168C 803804                  	cmp byte [rax], T_closure
  2512 0000168F 0F85164C0000            	jne L_error_non_closure
  2513 00001695 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2514 00001698 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2515 0000169B 50                      	push rax
  2516 0000169C 6A01                    	push 1	; arg count
  2517                                  	; preparing a non-tail-call
  2518                                  	; preparing a non-tail-call
  2519                                  	; preparing a non-tail-call
  2520                                  	; preparing a non-tail-call
  2521 0000169E 488B4510                	mov rax, ENV
  2522 000016A2 488B00                  	mov rax, qword [rax + 8 * 0]
  2523 000016A5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2524 000016A8 50                      	push rax
  2525 000016A9 6A01                    	push 1	; arg count
  2526 000016AB 488B4510                	mov rax, ENV
  2527 000016AF 488B00                  	mov rax, qword [rax + 8 * 0]
  2528 000016B2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2529 000016B5 803804                  	cmp byte [rax], T_closure
  2530 000016B8 0F85ED4B0000            	jne L_error_non_closure
  2531 000016BE FF7001                  	push SOB_CLOSURE_ENV(rax)
  2532 000016C1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2533 000016C4 50                      	push rax
  2534 000016C5 6A01                    	push 1	; arg count
  2535 000016C7 488B4510                	mov rax, ENV
  2536 000016CB 488B00                  	mov rax, qword [rax + 8 * 0]
  2537 000016CE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2538 000016D1 803804                  	cmp byte [rax], T_closure
  2539 000016D4 0F85D14B0000            	jne L_error_non_closure
  2540 000016DA FF7001                  	push SOB_CLOSURE_ENV(rax)
  2541 000016DD FF5009                  	call SOB_CLOSURE_CODE(rax)
  2542 000016E0 50                      	push rax
  2543 000016E1 6A01                    	push 1	; arg count
  2544 000016E3 488B4510                	mov rax, ENV
  2545 000016E7 488B00                  	mov rax, qword [rax + 8 * 0]
  2546 000016EA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2547 000016ED 803804                  	cmp byte [rax], T_closure
  2548 000016F0 0F85B54B0000            	jne L_error_non_closure
  2549 000016F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2550 000016F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2551 000016FC 50                      	push rax
  2552 000016FD 6A01                    	push 1	; arg count
  2553 000016FF 488B4510                	mov rax, ENV
  2554 00001703 488B00                  	mov rax, qword [rax + 8 * 0]
  2555 00001706 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2556 00001709 803804                  	cmp byte [rax], T_closure
  2557 0000170C 0F85994B0000            	jne L_error_non_closure
  2558 00001712 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2559 00001715 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2560 00001718 803804                  	cmp byte [rax], T_closure
  2561 0000171B 0F858A4B0000            	jne L_error_non_closure
  2562 00001721 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2563 00001724 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2564 00001727 803804                  	cmp byte [rax], T_closure
  2565 0000172A 0F857B4B0000            	jne L_error_non_closure
  2566 00001730 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2567 00001733 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2568 00001736 50                      	push rax
  2569 00001737 6A01                    	push 1	; arg count
  2570                                  	; preparing a non-tail-call
  2571                                  	; preparing a non-tail-call
  2572                                  	; preparing a non-tail-call
  2573                                  	; preparing a non-tail-call
  2574                                  	; preparing a non-tail-call
  2575                                  	; preparing a non-tail-call
  2576 00001739 488B4510                	mov rax, ENV
  2577 0000173D 488B00                  	mov rax, qword [rax + 8 * 0]
  2578 00001740 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2579 00001743 50                      	push rax
  2580 00001744 6A01                    	push 1	; arg count
  2581 00001746 488B4510                	mov rax, ENV
  2582 0000174A 488B00                  	mov rax, qword [rax + 8 * 0]
  2583 0000174D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2584 00001750 803804                  	cmp byte [rax], T_closure
  2585 00001753 0F85524B0000            	jne L_error_non_closure
  2586 00001759 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2587 0000175C FF5009                  	call SOB_CLOSURE_CODE(rax)
  2588 0000175F 50                      	push rax
  2589 00001760 6A01                    	push 1	; arg count
  2590 00001762 488B4510                	mov rax, ENV
  2591 00001766 488B00                  	mov rax, qword [rax + 8 * 0]
  2592 00001769 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2593 0000176C 803804                  	cmp byte [rax], T_closure
  2594 0000176F 0F85364B0000            	jne L_error_non_closure
  2595 00001775 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2596 00001778 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2597 0000177B 50                      	push rax
  2598 0000177C 6A01                    	push 1	; arg count
  2599 0000177E 488B4510                	mov rax, ENV
  2600 00001782 488B00                  	mov rax, qword [rax + 8 * 0]
  2601 00001785 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2602 00001788 803804                  	cmp byte [rax], T_closure
  2603 0000178B 0F851A4B0000            	jne L_error_non_closure
  2604 00001791 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2605 00001794 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2606 00001797 50                      	push rax
  2607 00001798 6A01                    	push 1	; arg count
  2608                                  	; preparing a non-tail-call
  2609                                  	; preparing a non-tail-call
  2610                                  	; preparing a non-tail-call
  2611                                  	; preparing a non-tail-call
  2612 0000179A 488B4510                	mov rax, ENV
  2613 0000179E 488B00                  	mov rax, qword [rax + 8 * 0]
  2614 000017A1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2615 000017A4 50                      	push rax
  2616 000017A5 6A01                    	push 1	; arg count
  2617 000017A7 488B4510                	mov rax, ENV
  2618 000017AB 488B00                  	mov rax, qword [rax + 8 * 0]
  2619 000017AE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2620 000017B1 803804                  	cmp byte [rax], T_closure
  2621 000017B4 0F85F14A0000            	jne L_error_non_closure
  2622 000017BA FF7001                  	push SOB_CLOSURE_ENV(rax)
  2623 000017BD FF5009                  	call SOB_CLOSURE_CODE(rax)
  2624 000017C0 50                      	push rax
  2625 000017C1 6A01                    	push 1	; arg count
  2626 000017C3 488B4510                	mov rax, ENV
  2627 000017C7 488B00                  	mov rax, qword [rax + 8 * 0]
  2628 000017CA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2629 000017CD 803804                  	cmp byte [rax], T_closure
  2630 000017D0 0F85D54A0000            	jne L_error_non_closure
  2631 000017D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2632 000017D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2633 000017DC 50                      	push rax
  2634 000017DD 6A01                    	push 1	; arg count
  2635 000017DF 488B4510                	mov rax, ENV
  2636 000017E3 488B00                  	mov rax, qword [rax + 8 * 0]
  2637 000017E6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2638 000017E9 803804                  	cmp byte [rax], T_closure
  2639 000017EC 0F85B94A0000            	jne L_error_non_closure
  2640 000017F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2641 000017F5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2642 000017F8 50                      	push rax
  2643 000017F9 6A01                    	push 1	; arg count
  2644                                  	; preparing a non-tail-call
  2645                                  	; preparing a non-tail-call
  2646                                  	; preparing a non-tail-call
  2647                                  	; preparing a non-tail-call
  2648 000017FB 488B4510                	mov rax, ENV
  2649 000017FF 488B00                  	mov rax, qword [rax + 8 * 0]
  2650 00001802 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2651 00001805 50                      	push rax
  2652 00001806 6A01                    	push 1	; arg count
  2653 00001808 488B4510                	mov rax, ENV
  2654 0000180C 488B00                  	mov rax, qword [rax + 8 * 0]
  2655 0000180F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2656 00001812 803804                  	cmp byte [rax], T_closure
  2657 00001815 0F85904A0000            	jne L_error_non_closure
  2658 0000181B FF7001                  	push SOB_CLOSURE_ENV(rax)
  2659 0000181E FF5009                  	call SOB_CLOSURE_CODE(rax)
  2660 00001821 50                      	push rax
  2661 00001822 6A01                    	push 1	; arg count
  2662 00001824 488B4510                	mov rax, ENV
  2663 00001828 488B00                  	mov rax, qword [rax + 8 * 0]
  2664 0000182B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2665 0000182E 803804                  	cmp byte [rax], T_closure
  2666 00001831 0F85744A0000            	jne L_error_non_closure
  2667 00001837 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2668 0000183A FF5009                  	call SOB_CLOSURE_CODE(rax)
  2669 0000183D 50                      	push rax
  2670 0000183E 6A01                    	push 1	; arg count
  2671 00001840 488B4510                	mov rax, ENV
  2672 00001844 488B00                  	mov rax, qword [rax + 8 * 0]
  2673 00001847 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2674 0000184A 803804                  	cmp byte [rax], T_closure
  2675 0000184D 0F85584A0000            	jne L_error_non_closure
  2676 00001853 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2677 00001856 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2678 00001859 50                      	push rax
  2679 0000185A 6A01                    	push 1	; arg count
  2680 0000185C 488B4510                	mov rax, ENV
  2681 00001860 488B00                  	mov rax, qword [rax + 8 * 0]
  2682 00001863 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2683 00001866 803804                  	cmp byte [rax], T_closure
  2684 00001869 0F853C4A0000            	jne L_error_non_closure
  2685 0000186F FF7001                  	push SOB_CLOSURE_ENV(rax)
  2686 00001872 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2687 00001875 803804                  	cmp byte [rax], T_closure
  2688 00001878 0F852D4A0000            	jne L_error_non_closure
  2689 0000187E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2690 00001881 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2691 00001884 803804                  	cmp byte [rax], T_closure
  2692 00001887 0F851E4A0000            	jne L_error_non_closure
  2693 0000188D FF7001                  	push SOB_CLOSURE_ENV(rax)
  2694 00001890 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2695 00001893 50                      	push rax
  2696 00001894 6A01                    	push 1	; arg count
  2697                                  	; preparing a non-tail-call
  2698                                  	; preparing a non-tail-call
  2699                                  	; preparing a non-tail-call
  2700                                  	; preparing a non-tail-call
  2701                                  	; preparing a non-tail-call
  2702 00001896 488B4510                	mov rax, ENV
  2703 0000189A 488B00                  	mov rax, qword [rax + 8 * 0]
  2704 0000189D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2705 000018A0 50                      	push rax
  2706 000018A1 6A01                    	push 1	; arg count
  2707 000018A3 488B4510                	mov rax, ENV
  2708 000018A7 488B00                  	mov rax, qword [rax + 8 * 0]
  2709 000018AA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2710 000018AD 803804                  	cmp byte [rax], T_closure
  2711 000018B0 0F85F5490000            	jne L_error_non_closure
  2712 000018B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2713 000018B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2714 000018BC 50                      	push rax
  2715 000018BD 6A01                    	push 1	; arg count
  2716 000018BF 488B4510                	mov rax, ENV
  2717 000018C3 488B00                  	mov rax, qword [rax + 8 * 0]
  2718 000018C6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2719 000018C9 803804                  	cmp byte [rax], T_closure
  2720 000018CC 0F85D9490000            	jne L_error_non_closure
  2721 000018D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2722 000018D5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2723 000018D8 50                      	push rax
  2724 000018D9 6A01                    	push 1	; arg count
  2725 000018DB 488B4510                	mov rax, ENV
  2726 000018DF 488B00                  	mov rax, qword [rax + 8 * 0]
  2727 000018E2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2728 000018E5 803804                  	cmp byte [rax], T_closure
  2729 000018E8 0F85BD490000            	jne L_error_non_closure
  2730 000018EE FF7001                  	push SOB_CLOSURE_ENV(rax)
  2731 000018F1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2732 000018F4 50                      	push rax
  2733 000018F5 6A01                    	push 1	; arg count
  2734                                  	; preparing a non-tail-call
  2735                                  	; preparing a non-tail-call
  2736                                  	; preparing a non-tail-call
  2737 000018F7 488B4510                	mov rax, ENV
  2738 000018FB 488B00                  	mov rax, qword [rax + 8 * 0]
  2739 000018FE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2740 00001901 50                      	push rax
  2741 00001902 6A01                    	push 1	; arg count
  2742 00001904 488B4510                	mov rax, ENV
  2743 00001908 488B00                  	mov rax, qword [rax + 8 * 0]
  2744 0000190B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2745 0000190E 803804                  	cmp byte [rax], T_closure
  2746 00001911 0F8594490000            	jne L_error_non_closure
  2747 00001917 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2748 0000191A FF5009                  	call SOB_CLOSURE_CODE(rax)
  2749 0000191D 50                      	push rax
  2750 0000191E 6A01                    	push 1	; arg count
  2751 00001920 488B4510                	mov rax, ENV
  2752 00001924 488B00                  	mov rax, qword [rax + 8 * 0]
  2753 00001927 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2754 0000192A 803804                  	cmp byte [rax], T_closure
  2755 0000192D 0F8578490000            	jne L_error_non_closure
  2756 00001933 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2757 00001936 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2758 00001939 50                      	push rax
  2759 0000193A 6A01                    	push 1	; arg count
  2760 0000193C 488B4510                	mov rax, ENV
  2761 00001940 488B00                  	mov rax, qword [rax + 8 * 0]
  2762 00001943 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2763 00001946 803804                  	cmp byte [rax], T_closure
  2764 00001949 0F855C490000            	jne L_error_non_closure
  2765 0000194F FF7001                  	push SOB_CLOSURE_ENV(rax)
  2766 00001952 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2767 00001955 803804                  	cmp byte [rax], T_closure
  2768 00001958 0F854D490000            	jne L_error_non_closure
  2769 0000195E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2770 00001961 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2771 00001964 50                      	push rax
  2772 00001965 6A01                    	push 1	; arg count
  2773                                  	; preparing a non-tail-call
  2774                                  	; preparing a non-tail-call
  2775                                  	; preparing a non-tail-call
  2776                                  	; preparing a non-tail-call
  2777                                  	; preparing a non-tail-call
  2778                                  	; preparing a non-tail-call
  2779                                  	; preparing a non-tail-call
  2780 00001967 488B4510                	mov rax, ENV
  2781 0000196B 488B00                  	mov rax, qword [rax + 8 * 0]
  2782 0000196E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2783 00001971 50                      	push rax
  2784 00001972 6A01                    	push 1	; arg count
  2785 00001974 488B4510                	mov rax, ENV
  2786 00001978 488B00                  	mov rax, qword [rax + 8 * 0]
  2787 0000197B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2788 0000197E 803804                  	cmp byte [rax], T_closure
  2789 00001981 0F8524490000            	jne L_error_non_closure
  2790 00001987 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2791 0000198A FF5009                  	call SOB_CLOSURE_CODE(rax)
  2792 0000198D 50                      	push rax
  2793 0000198E 6A01                    	push 1	; arg count
  2794 00001990 488B4510                	mov rax, ENV
  2795 00001994 488B00                  	mov rax, qword [rax + 8 * 0]
  2796 00001997 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2797 0000199A 803804                  	cmp byte [rax], T_closure
  2798 0000199D 0F8508490000            	jne L_error_non_closure
  2799 000019A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2800 000019A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2801 000019A9 50                      	push rax
  2802 000019AA 6A01                    	push 1	; arg count
  2803 000019AC 488B4510                	mov rax, ENV
  2804 000019B0 488B00                  	mov rax, qword [rax + 8 * 0]
  2805 000019B3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2806 000019B6 803804                  	cmp byte [rax], T_closure
  2807 000019B9 0F85EC480000            	jne L_error_non_closure
  2808 000019BF FF7001                  	push SOB_CLOSURE_ENV(rax)
  2809 000019C2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2810 000019C5 50                      	push rax
  2811 000019C6 6A01                    	push 1	; arg count
  2812 000019C8 488B4510                	mov rax, ENV
  2813 000019CC 488B00                  	mov rax, qword [rax + 8 * 0]
  2814 000019CF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2815 000019D2 803804                  	cmp byte [rax], T_closure
  2816 000019D5 0F85D0480000            	jne L_error_non_closure
  2817 000019DB FF7001                  	push SOB_CLOSURE_ENV(rax)
  2818 000019DE FF5009                  	call SOB_CLOSURE_CODE(rax)
  2819 000019E1 50                      	push rax
  2820 000019E2 6A01                    	push 1	; arg count
  2821                                  	; preparing a non-tail-call
  2822                                  	; preparing a non-tail-call
  2823                                  	; preparing a non-tail-call
  2824                                  	; preparing a non-tail-call
  2825                                  	; preparing a non-tail-call
  2826 000019E4 488B4510                	mov rax, ENV
  2827 000019E8 488B00                  	mov rax, qword [rax + 8 * 0]
  2828 000019EB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2829 000019EE 50                      	push rax
  2830 000019EF 6A01                    	push 1	; arg count
  2831 000019F1 488B4510                	mov rax, ENV
  2832 000019F5 488B00                  	mov rax, qword [rax + 8 * 0]
  2833 000019F8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2834 000019FB 803804                  	cmp byte [rax], T_closure
  2835 000019FE 0F85A7480000            	jne L_error_non_closure
  2836 00001A04 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2837 00001A07 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2838 00001A0A 50                      	push rax
  2839 00001A0B 6A01                    	push 1	; arg count
  2840 00001A0D 488B4510                	mov rax, ENV
  2841 00001A11 488B00                  	mov rax, qword [rax + 8 * 0]
  2842 00001A14 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2843 00001A17 803804                  	cmp byte [rax], T_closure
  2844 00001A1A 0F858B480000            	jne L_error_non_closure
  2845 00001A20 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2846 00001A23 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2847 00001A26 50                      	push rax
  2848 00001A27 6A01                    	push 1	; arg count
  2849 00001A29 488B4510                	mov rax, ENV
  2850 00001A2D 488B00                  	mov rax, qword [rax + 8 * 0]
  2851 00001A30 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2852 00001A33 803804                  	cmp byte [rax], T_closure
  2853 00001A36 0F856F480000            	jne L_error_non_closure
  2854 00001A3C FF7001                  	push SOB_CLOSURE_ENV(rax)
  2855 00001A3F FF5009                  	call SOB_CLOSURE_CODE(rax)
  2856 00001A42 50                      	push rax
  2857 00001A43 6A01                    	push 1	; arg count
  2858                                  	; preparing a non-tail-call
  2859                                  	; preparing a non-tail-call
  2860                                  	; preparing a non-tail-call
  2861 00001A45 488B4510                	mov rax, ENV
  2862 00001A49 488B00                  	mov rax, qword [rax + 8 * 0]
  2863 00001A4C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2864 00001A4F 50                      	push rax
  2865 00001A50 6A01                    	push 1	; arg count
  2866 00001A52 488B4510                	mov rax, ENV
  2867 00001A56 488B00                  	mov rax, qword [rax + 8 * 0]
  2868 00001A59 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2869 00001A5C 803804                  	cmp byte [rax], T_closure
  2870 00001A5F 0F8546480000            	jne L_error_non_closure
  2871 00001A65 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2872 00001A68 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2873 00001A6B 50                      	push rax
  2874 00001A6C 6A01                    	push 1	; arg count
  2875 00001A6E 488B4510                	mov rax, ENV
  2876 00001A72 488B00                  	mov rax, qword [rax + 8 * 0]
  2877 00001A75 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2878 00001A78 803804                  	cmp byte [rax], T_closure
  2879 00001A7B 0F852A480000            	jne L_error_non_closure
  2880 00001A81 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2881 00001A84 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2882 00001A87 50                      	push rax
  2883 00001A88 6A01                    	push 1	; arg count
  2884 00001A8A 488B4510                	mov rax, ENV
  2885 00001A8E 488B00                  	mov rax, qword [rax + 8 * 0]
  2886 00001A91 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2887 00001A94 803804                  	cmp byte [rax], T_closure
  2888 00001A97 0F850E480000            	jne L_error_non_closure
  2889 00001A9D FF7001                  	push SOB_CLOSURE_ENV(rax)
  2890 00001AA0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2891 00001AA3 803804                  	cmp byte [rax], T_closure
  2892 00001AA6 0F85FF470000            	jne L_error_non_closure
  2893 00001AAC FF7001                  	push SOB_CLOSURE_ENV(rax)
  2894 00001AAF FF5009                  	call SOB_CLOSURE_CODE(rax)
  2895 00001AB2 50                      	push rax
  2896 00001AB3 6A01                    	push 1	; arg count
  2897                                  	; preparing a non-tail-call
  2898                                  	; preparing a non-tail-call
  2899                                  	; preparing a non-tail-call
  2900                                  	; preparing a non-tail-call
  2901 00001AB5 488B4510                	mov rax, ENV
  2902 00001AB9 488B00                  	mov rax, qword [rax + 8 * 0]
  2903 00001ABC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2904 00001ABF 50                      	push rax
  2905 00001AC0 6A01                    	push 1	; arg count
  2906 00001AC2 488B4510                	mov rax, ENV
  2907 00001AC6 488B00                  	mov rax, qword [rax + 8 * 0]
  2908 00001AC9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2909 00001ACC 803804                  	cmp byte [rax], T_closure
  2910 00001ACF 0F85D6470000            	jne L_error_non_closure
  2911 00001AD5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2912 00001AD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2913 00001ADB 50                      	push rax
  2914 00001ADC 6A01                    	push 1	; arg count
  2915 00001ADE 488B4510                	mov rax, ENV
  2916 00001AE2 488B00                  	mov rax, qword [rax + 8 * 0]
  2917 00001AE5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2918 00001AE8 803804                  	cmp byte [rax], T_closure
  2919 00001AEB 0F85BA470000            	jne L_error_non_closure
  2920 00001AF1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2921 00001AF4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2922 00001AF7 50                      	push rax
  2923 00001AF8 6A01                    	push 1	; arg count
  2924 00001AFA 488B4510                	mov rax, ENV
  2925 00001AFE 488B00                  	mov rax, qword [rax + 8 * 0]
  2926 00001B01 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2927 00001B04 803804                  	cmp byte [rax], T_closure
  2928 00001B07 0F859E470000            	jne L_error_non_closure
  2929 00001B0D FF7001                  	push SOB_CLOSURE_ENV(rax)
  2930 00001B10 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2931 00001B13 50                      	push rax
  2932 00001B14 6A01                    	push 1	; arg count
  2933 00001B16 488B4510                	mov rax, ENV
  2934 00001B1A 488B00                  	mov rax, qword [rax + 8 * 0]
  2935 00001B1D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2936 00001B20 803804                  	cmp byte [rax], T_closure
  2937 00001B23 0F8582470000            	jne L_error_non_closure
  2938 00001B29 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2939 00001B2C FF5009                  	call SOB_CLOSURE_CODE(rax)
  2940 00001B2F 803804                  	cmp byte [rax], T_closure
  2941 00001B32 0F8573470000            	jne L_error_non_closure
  2942 00001B38 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2943 00001B3B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2944 00001B3E 803804                  	cmp byte [rax], T_closure
  2945 00001B41 0F8564470000            	jne L_error_non_closure
  2946 00001B47 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2947 00001B4A FF5009                  	call SOB_CLOSURE_CODE(rax)
  2948 00001B4D 50                      	push rax
  2949 00001B4E 6A01                    	push 1	; arg count
  2950                                  	; preparing a non-tail-call
  2951                                  	; preparing a non-tail-call
  2952                                  	; preparing a non-tail-call
  2953                                  	; preparing a non-tail-call
  2954                                  	; preparing a non-tail-call
  2955                                  	; preparing a non-tail-call
  2956 00001B50 488B4510                	mov rax, ENV
  2957 00001B54 488B00                  	mov rax, qword [rax + 8 * 0]
  2958 00001B57 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2959 00001B5A 50                      	push rax
  2960 00001B5B 6A01                    	push 1	; arg count
  2961 00001B5D 488B4510                	mov rax, ENV
  2962 00001B61 488B00                  	mov rax, qword [rax + 8 * 0]
  2963 00001B64 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2964 00001B67 803804                  	cmp byte [rax], T_closure
  2965 00001B6A 0F853B470000            	jne L_error_non_closure
  2966 00001B70 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2967 00001B73 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2968 00001B76 50                      	push rax
  2969 00001B77 6A01                    	push 1	; arg count
  2970 00001B79 488B4510                	mov rax, ENV
  2971 00001B7D 488B00                  	mov rax, qword [rax + 8 * 0]
  2972 00001B80 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2973 00001B83 803804                  	cmp byte [rax], T_closure
  2974 00001B86 0F851F470000            	jne L_error_non_closure
  2975 00001B8C FF7001                  	push SOB_CLOSURE_ENV(rax)
  2976 00001B8F FF5009                  	call SOB_CLOSURE_CODE(rax)
  2977 00001B92 50                      	push rax
  2978 00001B93 6A01                    	push 1	; arg count
  2979 00001B95 488B4510                	mov rax, ENV
  2980 00001B99 488B00                  	mov rax, qword [rax + 8 * 0]
  2981 00001B9C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2982 00001B9F 803804                  	cmp byte [rax], T_closure
  2983 00001BA2 0F8503470000            	jne L_error_non_closure
  2984 00001BA8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2985 00001BAB FF5009                  	call SOB_CLOSURE_CODE(rax)
  2986 00001BAE 50                      	push rax
  2987 00001BAF 6A01                    	push 1	; arg count
  2988 00001BB1 488B4510                	mov rax, ENV
  2989 00001BB5 488B00                  	mov rax, qword [rax + 8 * 0]
  2990 00001BB8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  2991 00001BBB 803804                  	cmp byte [rax], T_closure
  2992 00001BBE 0F85E7460000            	jne L_error_non_closure
  2993 00001BC4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2994 00001BC7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2995 00001BCA 50                      	push rax
  2996 00001BCB 6A01                    	push 1	; arg count
  2997                                  	; preparing a non-tail-call
  2998                                  	; preparing a non-tail-call
  2999                                  	; preparing a non-tail-call
  3000 00001BCD 488B4510                	mov rax, ENV
  3001 00001BD1 488B00                  	mov rax, qword [rax + 8 * 0]
  3002 00001BD4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3003 00001BD7 50                      	push rax
  3004 00001BD8 6A01                    	push 1	; arg count
  3005 00001BDA 488B4510                	mov rax, ENV
  3006 00001BDE 488B00                  	mov rax, qword [rax + 8 * 0]
  3007 00001BE1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3008 00001BE4 803804                  	cmp byte [rax], T_closure
  3009 00001BE7 0F85BE460000            	jne L_error_non_closure
  3010 00001BED FF7001                  	push SOB_CLOSURE_ENV(rax)
  3011 00001BF0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3012 00001BF3 50                      	push rax
  3013 00001BF4 6A01                    	push 1	; arg count
  3014 00001BF6 488B4510                	mov rax, ENV
  3015 00001BFA 488B00                  	mov rax, qword [rax + 8 * 0]
  3016 00001BFD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3017 00001C00 803804                  	cmp byte [rax], T_closure
  3018 00001C03 0F85A2460000            	jne L_error_non_closure
  3019 00001C09 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3020 00001C0C FF5009                  	call SOB_CLOSURE_CODE(rax)
  3021 00001C0F 50                      	push rax
  3022 00001C10 6A01                    	push 1	; arg count
  3023 00001C12 488B4510                	mov rax, ENV
  3024 00001C16 488B00                  	mov rax, qword [rax + 8 * 0]
  3025 00001C19 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3026 00001C1C 803804                  	cmp byte [rax], T_closure
  3027 00001C1F 0F8586460000            	jne L_error_non_closure
  3028 00001C25 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3029 00001C28 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3030 00001C2B 803804                  	cmp byte [rax], T_closure
  3031 00001C2E 0F8577460000            	jne L_error_non_closure
  3032 00001C34 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3033 00001C37 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3034 00001C3A 50                      	push rax
  3035 00001C3B 6A01                    	push 1	; arg count
  3036                                  	; preparing a non-tail-call
  3037                                  	; preparing a non-tail-call
  3038                                  	; preparing a non-tail-call
  3039                                  	; preparing a non-tail-call
  3040 00001C3D 488B4510                	mov rax, ENV
  3041 00001C41 488B00                  	mov rax, qword [rax + 8 * 0]
  3042 00001C44 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3043 00001C47 50                      	push rax
  3044 00001C48 6A01                    	push 1	; arg count
  3045 00001C4A 488B4510                	mov rax, ENV
  3046 00001C4E 488B00                  	mov rax, qword [rax + 8 * 0]
  3047 00001C51 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3048 00001C54 803804                  	cmp byte [rax], T_closure
  3049 00001C57 0F854E460000            	jne L_error_non_closure
  3050 00001C5D FF7001                  	push SOB_CLOSURE_ENV(rax)
  3051 00001C60 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3052 00001C63 50                      	push rax
  3053 00001C64 6A01                    	push 1	; arg count
  3054 00001C66 488B4510                	mov rax, ENV
  3055 00001C6A 488B00                  	mov rax, qword [rax + 8 * 0]
  3056 00001C6D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3057 00001C70 803804                  	cmp byte [rax], T_closure
  3058 00001C73 0F8532460000            	jne L_error_non_closure
  3059 00001C79 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3060 00001C7C FF5009                  	call SOB_CLOSURE_CODE(rax)
  3061 00001C7F 50                      	push rax
  3062 00001C80 6A01                    	push 1	; arg count
  3063 00001C82 488B4510                	mov rax, ENV
  3064 00001C86 488B00                  	mov rax, qword [rax + 8 * 0]
  3065 00001C89 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3066 00001C8C 803804                  	cmp byte [rax], T_closure
  3067 00001C8F 0F8516460000            	jne L_error_non_closure
  3068 00001C95 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3069 00001C98 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3070 00001C9B 50                      	push rax
  3071 00001C9C 6A01                    	push 1	; arg count
  3072 00001C9E 488B4510                	mov rax, ENV
  3073 00001CA2 488B00                  	mov rax, qword [rax + 8 * 0]
  3074 00001CA5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3075 00001CA8 803804                  	cmp byte [rax], T_closure
  3076 00001CAB 0F85FA450000            	jne L_error_non_closure
  3077 00001CB1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3078 00001CB4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3079 00001CB7 803804                  	cmp byte [rax], T_closure
  3080 00001CBA 0F85EB450000            	jne L_error_non_closure
  3081 00001CC0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3082 00001CC3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3083 00001CC6 803804                  	cmp byte [rax], T_closure
  3084 00001CC9 0F85DC450000            	jne L_error_non_closure
  3085 00001CCF FF7001                  	push SOB_CLOSURE_ENV(rax)
  3086 00001CD2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3087 00001CD5 50                      	push rax
  3088 00001CD6 6A01                    	push 1	; arg count
  3089                                  	; preparing a non-tail-call
  3090                                  	; preparing a non-tail-call
  3091                                  	; preparing a non-tail-call
  3092                                  	; preparing a non-tail-call
  3093 00001CD8 488B4510                	mov rax, ENV
  3094 00001CDC 488B00                  	mov rax, qword [rax + 8 * 0]
  3095 00001CDF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3096 00001CE2 50                      	push rax
  3097 00001CE3 6A01                    	push 1	; arg count
  3098 00001CE5 488B4510                	mov rax, ENV
  3099 00001CE9 488B00                  	mov rax, qword [rax + 8 * 0]
  3100 00001CEC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3101 00001CEF 803804                  	cmp byte [rax], T_closure
  3102 00001CF2 0F85B3450000            	jne L_error_non_closure
  3103 00001CF8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3104 00001CFB FF5009                  	call SOB_CLOSURE_CODE(rax)
  3105 00001CFE 50                      	push rax
  3106 00001CFF 6A01                    	push 1	; arg count
  3107 00001D01 488B4510                	mov rax, ENV
  3108 00001D05 488B00                  	mov rax, qword [rax + 8 * 0]
  3109 00001D08 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3110 00001D0B 803804                  	cmp byte [rax], T_closure
  3111 00001D0E 0F8597450000            	jne L_error_non_closure
  3112 00001D14 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3113 00001D17 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3114 00001D1A 50                      	push rax
  3115 00001D1B 6A01                    	push 1	; arg count
  3116 00001D1D 488B4510                	mov rax, ENV
  3117 00001D21 488B00                  	mov rax, qword [rax + 8 * 0]
  3118 00001D24 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3119 00001D27 803804                  	cmp byte [rax], T_closure
  3120 00001D2A 0F857B450000            	jne L_error_non_closure
  3121 00001D30 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3122 00001D33 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3123 00001D36 50                      	push rax
  3124 00001D37 6A01                    	push 1	; arg count
  3125 00001D39 488B4510                	mov rax, ENV
  3126 00001D3D 488B00                  	mov rax, qword [rax + 8 * 0]
  3127 00001D40 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3128 00001D43 803804                  	cmp byte [rax], T_closure
  3129 00001D46 0F855F450000            	jne L_error_non_closure
  3130 00001D4C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3131 00001D4F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3132 00001D52 803804                  	cmp byte [rax], T_closure
  3133 00001D55 0F8550450000            	jne L_error_non_closure
  3134 00001D5B FF7001                  	push SOB_CLOSURE_ENV(rax)
  3135 00001D5E FF5009                  	call SOB_CLOSURE_CODE(rax)
  3136 00001D61 803804                  	cmp byte [rax], T_closure
  3137 00001D64 0F8541450000            	jne L_error_non_closure
  3138 00001D6A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3139 00001D6D FF5009                  	call SOB_CLOSURE_CODE(rax)
  3140 00001D70 803804                  	cmp byte [rax], T_closure
  3141 00001D73 0F8532450000            	jne L_error_non_closure
  3142 00001D79 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3143 00001D7C FF5009                  	call SOB_CLOSURE_CODE(rax)
  3144 00001D7F 50                      	push rax
  3145 00001D80 6A01                    	push 1	; arg count
  3146                                  	; preparing a non-tail-call
  3147                                  	; preparing a non-tail-call
  3148                                  	; preparing a non-tail-call
  3149                                  	; preparing a non-tail-call
  3150                                  	; preparing a non-tail-call
  3151                                  	; preparing a non-tail-call
  3152                                  	; preparing a non-tail-call
  3153 00001D82 488B4510                	mov rax, ENV
  3154 00001D86 488B00                  	mov rax, qword [rax + 8 * 0]
  3155 00001D89 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3156 00001D8C 50                      	push rax
  3157 00001D8D 6A01                    	push 1	; arg count
  3158 00001D8F 488B4510                	mov rax, ENV
  3159 00001D93 488B00                  	mov rax, qword [rax + 8 * 0]
  3160 00001D96 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3161 00001D99 803804                  	cmp byte [rax], T_closure
  3162 00001D9C 0F8509450000            	jne L_error_non_closure
  3163 00001DA2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3164 00001DA5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3165 00001DA8 50                      	push rax
  3166 00001DA9 6A01                    	push 1	; arg count
  3167 00001DAB 488B4510                	mov rax, ENV
  3168 00001DAF 488B00                  	mov rax, qword [rax + 8 * 0]
  3169 00001DB2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3170 00001DB5 803804                  	cmp byte [rax], T_closure
  3171 00001DB8 0F85ED440000            	jne L_error_non_closure
  3172 00001DBE FF7001                  	push SOB_CLOSURE_ENV(rax)
  3173 00001DC1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3174 00001DC4 50                      	push rax
  3175 00001DC5 6A01                    	push 1	; arg count
  3176 00001DC7 488B4510                	mov rax, ENV
  3177 00001DCB 488B00                  	mov rax, qword [rax + 8 * 0]
  3178 00001DCE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3179 00001DD1 803804                  	cmp byte [rax], T_closure
  3180 00001DD4 0F85D1440000            	jne L_error_non_closure
  3181 00001DDA FF7001                  	push SOB_CLOSURE_ENV(rax)
  3182 00001DDD FF5009                  	call SOB_CLOSURE_CODE(rax)
  3183 00001DE0 50                      	push rax
  3184 00001DE1 6A01                    	push 1	; arg count
  3185                                  	; preparing a non-tail-call
  3186                                  	; preparing a non-tail-call
  3187                                  	; preparing a non-tail-call
  3188 00001DE3 488B4510                	mov rax, ENV
  3189 00001DE7 488B00                  	mov rax, qword [rax + 8 * 0]
  3190 00001DEA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3191 00001DED 50                      	push rax
  3192 00001DEE 6A01                    	push 1	; arg count
  3193 00001DF0 488B4510                	mov rax, ENV
  3194 00001DF4 488B00                  	mov rax, qword [rax + 8 * 0]
  3195 00001DF7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3196 00001DFA 803804                  	cmp byte [rax], T_closure
  3197 00001DFD 0F85A8440000            	jne L_error_non_closure
  3198 00001E03 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3199 00001E06 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3200 00001E09 50                      	push rax
  3201 00001E0A 6A01                    	push 1	; arg count
  3202 00001E0C 488B4510                	mov rax, ENV
  3203 00001E10 488B00                  	mov rax, qword [rax + 8 * 0]
  3204 00001E13 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3205 00001E16 803804                  	cmp byte [rax], T_closure
  3206 00001E19 0F858C440000            	jne L_error_non_closure
  3207 00001E1F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3208 00001E22 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3209 00001E25 50                      	push rax
  3210 00001E26 6A01                    	push 1	; arg count
  3211 00001E28 488B4510                	mov rax, ENV
  3212 00001E2C 488B00                  	mov rax, qword [rax + 8 * 0]
  3213 00001E2F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3214 00001E32 803804                  	cmp byte [rax], T_closure
  3215 00001E35 0F8570440000            	jne L_error_non_closure
  3216 00001E3B FF7001                  	push SOB_CLOSURE_ENV(rax)
  3217 00001E3E FF5009                  	call SOB_CLOSURE_CODE(rax)
  3218 00001E41 803804                  	cmp byte [rax], T_closure
  3219 00001E44 0F8561440000            	jne L_error_non_closure
  3220 00001E4A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3221 00001E4D FF5009                  	call SOB_CLOSURE_CODE(rax)
  3222 00001E50 50                      	push rax
  3223 00001E51 6A01                    	push 1	; arg count
  3224                                  	; preparing a non-tail-call
  3225                                  	; preparing a non-tail-call
  3226                                  	; preparing a non-tail-call
  3227                                  	; preparing a non-tail-call
  3228                                  	; preparing a non-tail-call
  3229                                  	; preparing a non-tail-call
  3230                                  	; preparing a non-tail-call
  3231 00001E53 488B4510                	mov rax, ENV
  3232 00001E57 488B00                  	mov rax, qword [rax + 8 * 0]
  3233 00001E5A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3234 00001E5D 50                      	push rax
  3235 00001E5E 6A01                    	push 1	; arg count
  3236 00001E60 488B4510                	mov rax, ENV
  3237 00001E64 488B00                  	mov rax, qword [rax + 8 * 0]
  3238 00001E67 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3239 00001E6A 803804                  	cmp byte [rax], T_closure
  3240 00001E6D 0F8538440000            	jne L_error_non_closure
  3241 00001E73 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3242 00001E76 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3243 00001E79 50                      	push rax
  3244 00001E7A 6A01                    	push 1	; arg count
  3245 00001E7C 488B4510                	mov rax, ENV
  3246 00001E80 488B00                  	mov rax, qword [rax + 8 * 0]
  3247 00001E83 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3248 00001E86 803804                  	cmp byte [rax], T_closure
  3249 00001E89 0F851C440000            	jne L_error_non_closure
  3250 00001E8F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3251 00001E92 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3252 00001E95 50                      	push rax
  3253 00001E96 6A01                    	push 1	; arg count
  3254 00001E98 488B4510                	mov rax, ENV
  3255 00001E9C 488B00                  	mov rax, qword [rax + 8 * 0]
  3256 00001E9F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3257 00001EA2 803804                  	cmp byte [rax], T_closure
  3258 00001EA5 0F8500440000            	jne L_error_non_closure
  3259 00001EAB FF7001                  	push SOB_CLOSURE_ENV(rax)
  3260 00001EAE FF5009                  	call SOB_CLOSURE_CODE(rax)
  3261 00001EB1 50                      	push rax
  3262 00001EB2 6A01                    	push 1	; arg count
  3263 00001EB4 488B4510                	mov rax, ENV
  3264 00001EB8 488B00                  	mov rax, qword [rax + 8 * 0]
  3265 00001EBB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3266 00001EBE 803804                  	cmp byte [rax], T_closure
  3267 00001EC1 0F85E4430000            	jne L_error_non_closure
  3268 00001EC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3269 00001ECA FF5009                  	call SOB_CLOSURE_CODE(rax)
  3270 00001ECD 50                      	push rax
  3271 00001ECE 6A01                    	push 1	; arg count
  3272                                  	; preparing a non-tail-call
  3273                                  	; preparing a non-tail-call
  3274                                  	; preparing a non-tail-call
  3275                                  	; preparing a non-tail-call
  3276                                  	; preparing a non-tail-call
  3277 00001ED0 488B4510                	mov rax, ENV
  3278 00001ED4 488B00                  	mov rax, qword [rax + 8 * 0]
  3279 00001ED7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3280 00001EDA 50                      	push rax
  3281 00001EDB 6A01                    	push 1	; arg count
  3282 00001EDD 488B4510                	mov rax, ENV
  3283 00001EE1 488B00                  	mov rax, qword [rax + 8 * 0]
  3284 00001EE4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3285 00001EE7 803804                  	cmp byte [rax], T_closure
  3286 00001EEA 0F85BB430000            	jne L_error_non_closure
  3287 00001EF0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3288 00001EF3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3289 00001EF6 50                      	push rax
  3290 00001EF7 6A01                    	push 1	; arg count
  3291 00001EF9 488B4510                	mov rax, ENV
  3292 00001EFD 488B00                  	mov rax, qword [rax + 8 * 0]
  3293 00001F00 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3294 00001F03 803804                  	cmp byte [rax], T_closure
  3295 00001F06 0F859F430000            	jne L_error_non_closure
  3296 00001F0C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3297 00001F0F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3298 00001F12 50                      	push rax
  3299 00001F13 6A01                    	push 1	; arg count
  3300 00001F15 488B4510                	mov rax, ENV
  3301 00001F19 488B00                  	mov rax, qword [rax + 8 * 0]
  3302 00001F1C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3303 00001F1F 803804                  	cmp byte [rax], T_closure
  3304 00001F22 0F8583430000            	jne L_error_non_closure
  3305 00001F28 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3306 00001F2B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3307 00001F2E 50                      	push rax
  3308 00001F2F 6A01                    	push 1	; arg count
  3309                                  	; preparing a non-tail-call
  3310                                  	; preparing a non-tail-call
  3311                                  	; preparing a non-tail-call
  3312 00001F31 488B4510                	mov rax, ENV
  3313 00001F35 488B00                  	mov rax, qword [rax + 8 * 0]
  3314 00001F38 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3315 00001F3B 50                      	push rax
  3316 00001F3C 6A01                    	push 1	; arg count
  3317 00001F3E 488B4510                	mov rax, ENV
  3318 00001F42 488B00                  	mov rax, qword [rax + 8 * 0]
  3319 00001F45 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3320 00001F48 803804                  	cmp byte [rax], T_closure
  3321 00001F4B 0F855A430000            	jne L_error_non_closure
  3322 00001F51 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3323 00001F54 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3324 00001F57 50                      	push rax
  3325 00001F58 6A01                    	push 1	; arg count
  3326 00001F5A 488B4510                	mov rax, ENV
  3327 00001F5E 488B00                  	mov rax, qword [rax + 8 * 0]
  3328 00001F61 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3329 00001F64 803804                  	cmp byte [rax], T_closure
  3330 00001F67 0F853E430000            	jne L_error_non_closure
  3331 00001F6D FF7001                  	push SOB_CLOSURE_ENV(rax)
  3332 00001F70 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3333 00001F73 50                      	push rax
  3334 00001F74 6A01                    	push 1	; arg count
  3335 00001F76 488B4510                	mov rax, ENV
  3336 00001F7A 488B00                  	mov rax, qword [rax + 8 * 0]
  3337 00001F7D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3338 00001F80 803804                  	cmp byte [rax], T_closure
  3339 00001F83 0F8522430000            	jne L_error_non_closure
  3340 00001F89 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3341 00001F8C FF5009                  	call SOB_CLOSURE_CODE(rax)
  3342 00001F8F 803804                  	cmp byte [rax], T_closure
  3343 00001F92 0F8513430000            	jne L_error_non_closure
  3344 00001F98 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3345 00001F9B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3346 00001F9E 50                      	push rax
  3347 00001F9F 6A01                    	push 1	; arg count
  3348                                  	; preparing a non-tail-call
  3349                                  	; preparing a non-tail-call
  3350                                  	; preparing a non-tail-call
  3351                                  	; preparing a non-tail-call
  3352 00001FA1 488B4510                	mov rax, ENV
  3353 00001FA5 488B00                  	mov rax, qword [rax + 8 * 0]
  3354 00001FA8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3355 00001FAB 50                      	push rax
  3356 00001FAC 6A01                    	push 1	; arg count
  3357 00001FAE 488B4510                	mov rax, ENV
  3358 00001FB2 488B00                  	mov rax, qword [rax + 8 * 0]
  3359 00001FB5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3360 00001FB8 803804                  	cmp byte [rax], T_closure
  3361 00001FBB 0F85EA420000            	jne L_error_non_closure
  3362 00001FC1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3363 00001FC4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3364 00001FC7 50                      	push rax
  3365 00001FC8 6A01                    	push 1	; arg count
  3366 00001FCA 488B4510                	mov rax, ENV
  3367 00001FCE 488B00                  	mov rax, qword [rax + 8 * 0]
  3368 00001FD1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3369 00001FD4 803804                  	cmp byte [rax], T_closure
  3370 00001FD7 0F85CE420000            	jne L_error_non_closure
  3371 00001FDD FF7001                  	push SOB_CLOSURE_ENV(rax)
  3372 00001FE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3373 00001FE3 50                      	push rax
  3374 00001FE4 6A01                    	push 1	; arg count
  3375 00001FE6 488B4510                	mov rax, ENV
  3376 00001FEA 488B00                  	mov rax, qword [rax + 8 * 0]
  3377 00001FED 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3378 00001FF0 803804                  	cmp byte [rax], T_closure
  3379 00001FF3 0F85B2420000            	jne L_error_non_closure
  3380 00001FF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3381 00001FFC FF5009                  	call SOB_CLOSURE_CODE(rax)
  3382 00001FFF 50                      	push rax
  3383 00002000 6A01                    	push 1	; arg count
  3384 00002002 488B4510                	mov rax, ENV
  3385 00002006 488B00                  	mov rax, qword [rax + 8 * 0]
  3386 00002009 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3387 0000200C 803804                  	cmp byte [rax], T_closure
  3388 0000200F 0F8596420000            	jne L_error_non_closure
  3389 00002015 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3390 00002018 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3391 0000201B 803804                  	cmp byte [rax], T_closure
  3392 0000201E 0F8587420000            	jne L_error_non_closure
  3393 00002024 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3394 00002027 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3395 0000202A 803804                  	cmp byte [rax], T_closure
  3396 0000202D 0F8578420000            	jne L_error_non_closure
  3397 00002033 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3398 00002036 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3399 00002039 50                      	push rax
  3400 0000203A 6A01                    	push 1	; arg count
  3401                                  	; preparing a non-tail-call
  3402                                  	; preparing a non-tail-call
  3403                                  	; preparing a non-tail-call
  3404                                  	; preparing a non-tail-call
  3405                                  	; preparing a non-tail-call
  3406                                  	; preparing a non-tail-call
  3407 0000203C 488B4510                	mov rax, ENV
  3408 00002040 488B00                  	mov rax, qword [rax + 8 * 0]
  3409 00002043 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3410 00002046 50                      	push rax
  3411 00002047 6A01                    	push 1	; arg count
  3412 00002049 488B4510                	mov rax, ENV
  3413 0000204D 488B00                  	mov rax, qword [rax + 8 * 0]
  3414 00002050 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3415 00002053 803804                  	cmp byte [rax], T_closure
  3416 00002056 0F854F420000            	jne L_error_non_closure
  3417 0000205C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3418 0000205F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3419 00002062 50                      	push rax
  3420 00002063 6A01                    	push 1	; arg count
  3421 00002065 488B4510                	mov rax, ENV
  3422 00002069 488B00                  	mov rax, qword [rax + 8 * 0]
  3423 0000206C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3424 0000206F 803804                  	cmp byte [rax], T_closure
  3425 00002072 0F8533420000            	jne L_error_non_closure
  3426 00002078 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3427 0000207B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3428 0000207E 50                      	push rax
  3429 0000207F 6A01                    	push 1	; arg count
  3430 00002081 488B4510                	mov rax, ENV
  3431 00002085 488B00                  	mov rax, qword [rax + 8 * 0]
  3432 00002088 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3433 0000208B 803804                  	cmp byte [rax], T_closure
  3434 0000208E 0F8517420000            	jne L_error_non_closure
  3435 00002094 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3436 00002097 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3437 0000209A 50                      	push rax
  3438 0000209B 6A01                    	push 1	; arg count
  3439 0000209D 488B4510                	mov rax, ENV
  3440 000020A1 488B00                  	mov rax, qword [rax + 8 * 0]
  3441 000020A4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3442 000020A7 803804                  	cmp byte [rax], T_closure
  3443 000020AA 0F85FB410000            	jne L_error_non_closure
  3444 000020B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3445 000020B3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3446 000020B6 50                      	push rax
  3447 000020B7 6A01                    	push 1	; arg count
  3448                                  	; preparing a non-tail-call
  3449                                  	; preparing a non-tail-call
  3450                                  	; preparing a non-tail-call
  3451 000020B9 488B4510                	mov rax, ENV
  3452 000020BD 488B00                  	mov rax, qword [rax + 8 * 0]
  3453 000020C0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3454 000020C3 50                      	push rax
  3455 000020C4 6A01                    	push 1	; arg count
  3456 000020C6 488B4510                	mov rax, ENV
  3457 000020CA 488B00                  	mov rax, qword [rax + 8 * 0]
  3458 000020CD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3459 000020D0 803804                  	cmp byte [rax], T_closure
  3460 000020D3 0F85D2410000            	jne L_error_non_closure
  3461 000020D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3462 000020DC FF5009                  	call SOB_CLOSURE_CODE(rax)
  3463 000020DF 50                      	push rax
  3464 000020E0 6A01                    	push 1	; arg count
  3465 000020E2 488B4510                	mov rax, ENV
  3466 000020E6 488B00                  	mov rax, qword [rax + 8 * 0]
  3467 000020E9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3468 000020EC 803804                  	cmp byte [rax], T_closure
  3469 000020EF 0F85B6410000            	jne L_error_non_closure
  3470 000020F5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3471 000020F8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3472 000020FB 50                      	push rax
  3473 000020FC 6A01                    	push 1	; arg count
  3474 000020FE 488B4510                	mov rax, ENV
  3475 00002102 488B00                  	mov rax, qword [rax + 8 * 0]
  3476 00002105 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3477 00002108 803804                  	cmp byte [rax], T_closure
  3478 0000210B 0F859A410000            	jne L_error_non_closure
  3479 00002111 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3480 00002114 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3481 00002117 803804                  	cmp byte [rax], T_closure
  3482 0000211A 0F858B410000            	jne L_error_non_closure
  3483 00002120 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3484 00002123 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3485 00002126 50                      	push rax
  3486 00002127 6A01                    	push 1	; arg count
  3487                                  	; preparing a non-tail-call
  3488                                  	; preparing a non-tail-call
  3489                                  	; preparing a non-tail-call
  3490                                  	; preparing a non-tail-call
  3491 00002129 488B4510                	mov rax, ENV
  3492 0000212D 488B00                  	mov rax, qword [rax + 8 * 0]
  3493 00002130 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3494 00002133 50                      	push rax
  3495 00002134 6A01                    	push 1	; arg count
  3496 00002136 488B4510                	mov rax, ENV
  3497 0000213A 488B00                  	mov rax, qword [rax + 8 * 0]
  3498 0000213D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3499 00002140 803804                  	cmp byte [rax], T_closure
  3500 00002143 0F8562410000            	jne L_error_non_closure
  3501 00002149 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3502 0000214C FF5009                  	call SOB_CLOSURE_CODE(rax)
  3503 0000214F 50                      	push rax
  3504 00002150 6A01                    	push 1	; arg count
  3505 00002152 488B4510                	mov rax, ENV
  3506 00002156 488B00                  	mov rax, qword [rax + 8 * 0]
  3507 00002159 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3508 0000215C 803804                  	cmp byte [rax], T_closure
  3509 0000215F 0F8546410000            	jne L_error_non_closure
  3510 00002165 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3511 00002168 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3512 0000216B 50                      	push rax
  3513 0000216C 6A01                    	push 1	; arg count
  3514 0000216E 488B4510                	mov rax, ENV
  3515 00002172 488B00                  	mov rax, qword [rax + 8 * 0]
  3516 00002175 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3517 00002178 803804                  	cmp byte [rax], T_closure
  3518 0000217B 0F852A410000            	jne L_error_non_closure
  3519 00002181 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3520 00002184 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3521 00002187 50                      	push rax
  3522 00002188 6A01                    	push 1	; arg count
  3523 0000218A 488B4510                	mov rax, ENV
  3524 0000218E 488B00                  	mov rax, qword [rax + 8 * 0]
  3525 00002191 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3526 00002194 803804                  	cmp byte [rax], T_closure
  3527 00002197 0F850E410000            	jne L_error_non_closure
  3528 0000219D FF7001                  	push SOB_CLOSURE_ENV(rax)
  3529 000021A0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3530 000021A3 803804                  	cmp byte [rax], T_closure
  3531 000021A6 0F85FF400000            	jne L_error_non_closure
  3532 000021AC FF7001                  	push SOB_CLOSURE_ENV(rax)
  3533 000021AF FF5009                  	call SOB_CLOSURE_CODE(rax)
  3534 000021B2 803804                  	cmp byte [rax], T_closure
  3535 000021B5 0F85F0400000            	jne L_error_non_closure
  3536 000021BB FF7001                  	push SOB_CLOSURE_ENV(rax)
  3537 000021BE FF5009                  	call SOB_CLOSURE_CODE(rax)
  3538 000021C1 50                      	push rax
  3539 000021C2 6A01                    	push 1	; arg count
  3540                                  	; preparing a non-tail-call
  3541                                  	; preparing a non-tail-call
  3542                                  	; preparing a non-tail-call
  3543                                  	; preparing a non-tail-call
  3544 000021C4 488B4510                	mov rax, ENV
  3545 000021C8 488B00                  	mov rax, qword [rax + 8 * 0]
  3546 000021CB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3547 000021CE 50                      	push rax
  3548 000021CF 6A01                    	push 1	; arg count
  3549 000021D1 488B4510                	mov rax, ENV
  3550 000021D5 488B00                  	mov rax, qword [rax + 8 * 0]
  3551 000021D8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3552 000021DB 803804                  	cmp byte [rax], T_closure
  3553 000021DE 0F85C7400000            	jne L_error_non_closure
  3554 000021E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3555 000021E7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3556 000021EA 50                      	push rax
  3557 000021EB 6A01                    	push 1	; arg count
  3558 000021ED 488B4510                	mov rax, ENV
  3559 000021F1 488B00                  	mov rax, qword [rax + 8 * 0]
  3560 000021F4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3561 000021F7 803804                  	cmp byte [rax], T_closure
  3562 000021FA 0F85AB400000            	jne L_error_non_closure
  3563 00002200 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3564 00002203 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3565 00002206 50                      	push rax
  3566 00002207 6A01                    	push 1	; arg count
  3567 00002209 488B4510                	mov rax, ENV
  3568 0000220D 488B00                  	mov rax, qword [rax + 8 * 0]
  3569 00002210 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3570 00002213 803804                  	cmp byte [rax], T_closure
  3571 00002216 0F858F400000            	jne L_error_non_closure
  3572 0000221C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3573 0000221F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3574 00002222 50                      	push rax
  3575 00002223 6A01                    	push 1	; arg count
  3576 00002225 488B4510                	mov rax, ENV
  3577 00002229 488B00                  	mov rax, qword [rax + 8 * 0]
  3578 0000222C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3579 0000222F 803804                  	cmp byte [rax], T_closure
  3580 00002232 0F8573400000            	jne L_error_non_closure
  3581 00002238 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3582 0000223B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3583 0000223E 803804                  	cmp byte [rax], T_closure
  3584 00002241 0F8564400000            	jne L_error_non_closure
  3585 00002247 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3586 0000224A FF5009                  	call SOB_CLOSURE_CODE(rax)
  3587 0000224D 803804                  	cmp byte [rax], T_closure
  3588 00002250 0F8555400000            	jne L_error_non_closure
  3589 00002256 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3590 00002259 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3591 0000225C 50                      	push rax
  3592 0000225D 6A01                    	push 1	; arg count
  3593                                  	; preparing a non-tail-call
  3594                                  	; preparing a non-tail-call
  3595                                  	; preparing a non-tail-call
  3596 0000225F 488B4510                	mov rax, ENV
  3597 00002263 488B00                  	mov rax, qword [rax + 8 * 0]
  3598 00002266 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3599 00002269 50                      	push rax
  3600 0000226A 6A01                    	push 1	; arg count
  3601 0000226C 488B4510                	mov rax, ENV
  3602 00002270 488B00                  	mov rax, qword [rax + 8 * 0]
  3603 00002273 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3604 00002276 803804                  	cmp byte [rax], T_closure
  3605 00002279 0F852C400000            	jne L_error_non_closure
  3606 0000227F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3607 00002282 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3608 00002285 50                      	push rax
  3609 00002286 6A01                    	push 1	; arg count
  3610 00002288 488B4510                	mov rax, ENV
  3611 0000228C 488B00                  	mov rax, qword [rax + 8 * 0]
  3612 0000228F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3613 00002292 803804                  	cmp byte [rax], T_closure
  3614 00002295 0F8510400000            	jne L_error_non_closure
  3615 0000229B FF7001                  	push SOB_CLOSURE_ENV(rax)
  3616 0000229E FF5009                  	call SOB_CLOSURE_CODE(rax)
  3617 000022A1 50                      	push rax
  3618 000022A2 6A01                    	push 1	; arg count
  3619 000022A4 488B4510                	mov rax, ENV
  3620 000022A8 488B00                  	mov rax, qword [rax + 8 * 0]
  3621 000022AB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3622 000022AE 803804                  	cmp byte [rax], T_closure
  3623 000022B1 0F85F43F0000            	jne L_error_non_closure
  3624 000022B7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3625 000022BA FF5009                  	call SOB_CLOSURE_CODE(rax)
  3626 000022BD 803804                  	cmp byte [rax], T_closure
  3627 000022C0 0F85E53F0000            	jne L_error_non_closure
  3628 000022C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3629 000022C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3630 000022CC 50                      	push rax
  3631 000022CD 6A01                    	push 1	; arg count
  3632                                  	; preparing a non-tail-call
  3633                                  	; preparing a non-tail-call
  3634                                  	; preparing a non-tail-call
  3635                                  	; preparing a non-tail-call
  3636 000022CF 488B4510                	mov rax, ENV
  3637 000022D3 488B00                  	mov rax, qword [rax + 8 * 0]
  3638 000022D6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3639 000022D9 50                      	push rax
  3640 000022DA 6A01                    	push 1	; arg count
  3641 000022DC 488B4510                	mov rax, ENV
  3642 000022E0 488B00                  	mov rax, qword [rax + 8 * 0]
  3643 000022E3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3644 000022E6 803804                  	cmp byte [rax], T_closure
  3645 000022E9 0F85BC3F0000            	jne L_error_non_closure
  3646 000022EF FF7001                  	push SOB_CLOSURE_ENV(rax)
  3647 000022F2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3648 000022F5 50                      	push rax
  3649 000022F6 6A01                    	push 1	; arg count
  3650 000022F8 488B4510                	mov rax, ENV
  3651 000022FC 488B00                  	mov rax, qword [rax + 8 * 0]
  3652 000022FF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3653 00002302 803804                  	cmp byte [rax], T_closure
  3654 00002305 0F85A03F0000            	jne L_error_non_closure
  3655 0000230B FF7001                  	push SOB_CLOSURE_ENV(rax)
  3656 0000230E FF5009                  	call SOB_CLOSURE_CODE(rax)
  3657 00002311 50                      	push rax
  3658 00002312 6A01                    	push 1	; arg count
  3659 00002314 488B4510                	mov rax, ENV
  3660 00002318 488B00                  	mov rax, qword [rax + 8 * 0]
  3661 0000231B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3662 0000231E 803804                  	cmp byte [rax], T_closure
  3663 00002321 0F85843F0000            	jne L_error_non_closure
  3664 00002327 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3665 0000232A FF5009                  	call SOB_CLOSURE_CODE(rax)
  3666 0000232D 50                      	push rax
  3667 0000232E 6A01                    	push 1	; arg count
  3668 00002330 488B4510                	mov rax, ENV
  3669 00002334 488B00                  	mov rax, qword [rax + 8 * 0]
  3670 00002337 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3671 0000233A 803804                  	cmp byte [rax], T_closure
  3672 0000233D 0F85683F0000            	jne L_error_non_closure
  3673 00002343 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3674 00002346 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3675 00002349 803804                  	cmp byte [rax], T_closure
  3676 0000234C 0F85593F0000            	jne L_error_non_closure
  3677 00002352 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3678 00002355 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3679 00002358 803804                  	cmp byte [rax], T_closure
  3680 0000235B 0F854A3F0000            	jne L_error_non_closure
  3681 00002361 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3682 00002364 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3683 00002367 803804                  	cmp byte [rax], T_closure
  3684 0000236A 0F853B3F0000            	jne L_error_non_closure
  3685 00002370 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3686 00002373 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3687 00002376 803804                  	cmp byte [rax], T_closure
  3688 00002379 0F852C3F0000            	jne L_error_non_closure
  3689 0000237F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3690 00002382 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3691 00002385 50                      	push rax
  3692 00002386 6A01                    	push 1	; arg count
  3693                                  	; preparing a non-tail-call
  3694                                  	; preparing a non-tail-call
  3695                                  	; preparing a non-tail-call
  3696                                  	; preparing a non-tail-call
  3697                                  	; preparing a non-tail-call
  3698                                  	; preparing a non-tail-call
  3699                                  	; preparing a non-tail-call
  3700                                  	; preparing a non-tail-call
  3701                                  	; preparing a non-tail-call
  3702                                  	; preparing a non-tail-call
  3703 00002388 488B4510                	mov rax, ENV
  3704 0000238C 488B00                  	mov rax, qword [rax + 8 * 0]
  3705 0000238F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3706 00002392 50                      	push rax
  3707 00002393 6A01                    	push 1	; arg count
  3708 00002395 488B4510                	mov rax, ENV
  3709 00002399 488B00                  	mov rax, qword [rax + 8 * 0]
  3710 0000239C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3711 0000239F 803804                  	cmp byte [rax], T_closure
  3712 000023A2 0F85033F0000            	jne L_error_non_closure
  3713 000023A8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3714 000023AB FF5009                  	call SOB_CLOSURE_CODE(rax)
  3715 000023AE 50                      	push rax
  3716 000023AF 6A01                    	push 1	; arg count
  3717 000023B1 488B4510                	mov rax, ENV
  3718 000023B5 488B00                  	mov rax, qword [rax + 8 * 0]
  3719 000023B8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3720 000023BB 803804                  	cmp byte [rax], T_closure
  3721 000023BE 0F85E73E0000            	jne L_error_non_closure
  3722 000023C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3723 000023C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3724 000023CA 50                      	push rax
  3725 000023CB 6A01                    	push 1	; arg count
  3726 000023CD 488B4510                	mov rax, ENV
  3727 000023D1 488B00                  	mov rax, qword [rax + 8 * 0]
  3728 000023D4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3729 000023D7 803804                  	cmp byte [rax], T_closure
  3730 000023DA 0F85CB3E0000            	jne L_error_non_closure
  3731 000023E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3732 000023E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3733 000023E6 50                      	push rax
  3734 000023E7 6A01                    	push 1	; arg count
  3735                                  	; preparing a non-tail-call
  3736                                  	; preparing a non-tail-call
  3737                                  	; preparing a non-tail-call
  3738                                  	; preparing a non-tail-call
  3739 000023E9 488B4510                	mov rax, ENV
  3740 000023ED 488B00                  	mov rax, qword [rax + 8 * 0]
  3741 000023F0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3742 000023F3 50                      	push rax
  3743 000023F4 6A01                    	push 1	; arg count
  3744 000023F6 488B4510                	mov rax, ENV
  3745 000023FA 488B00                  	mov rax, qword [rax + 8 * 0]
  3746 000023FD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3747 00002400 803804                  	cmp byte [rax], T_closure
  3748 00002403 0F85A23E0000            	jne L_error_non_closure
  3749 00002409 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3750 0000240C FF5009                  	call SOB_CLOSURE_CODE(rax)
  3751 0000240F 50                      	push rax
  3752 00002410 6A01                    	push 1	; arg count
  3753 00002412 488B4510                	mov rax, ENV
  3754 00002416 488B00                  	mov rax, qword [rax + 8 * 0]
  3755 00002419 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3756 0000241C 803804                  	cmp byte [rax], T_closure
  3757 0000241F 0F85863E0000            	jne L_error_non_closure
  3758 00002425 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3759 00002428 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3760 0000242B 50                      	push rax
  3761 0000242C 6A01                    	push 1	; arg count
  3762 0000242E 488B4510                	mov rax, ENV
  3763 00002432 488B00                  	mov rax, qword [rax + 8 * 0]
  3764 00002435 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3765 00002438 803804                  	cmp byte [rax], T_closure
  3766 0000243B 0F856A3E0000            	jne L_error_non_closure
  3767 00002441 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3768 00002444 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3769 00002447 50                      	push rax
  3770 00002448 6A01                    	push 1	; arg count
  3771                                  	; preparing a non-tail-call
  3772                                  	; preparing a non-tail-call
  3773                                  	; preparing a non-tail-call
  3774                                  	; preparing a non-tail-call
  3775 0000244A 488B4510                	mov rax, ENV
  3776 0000244E 488B00                  	mov rax, qword [rax + 8 * 0]
  3777 00002451 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3778 00002454 50                      	push rax
  3779 00002455 6A01                    	push 1	; arg count
  3780 00002457 488B4510                	mov rax, ENV
  3781 0000245B 488B00                  	mov rax, qword [rax + 8 * 0]
  3782 0000245E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3783 00002461 803804                  	cmp byte [rax], T_closure
  3784 00002464 0F85413E0000            	jne L_error_non_closure
  3785 0000246A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3786 0000246D FF5009                  	call SOB_CLOSURE_CODE(rax)
  3787 00002470 50                      	push rax
  3788 00002471 6A01                    	push 1	; arg count
  3789 00002473 488B4510                	mov rax, ENV
  3790 00002477 488B00                  	mov rax, qword [rax + 8 * 0]
  3791 0000247A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3792 0000247D 803804                  	cmp byte [rax], T_closure
  3793 00002480 0F85253E0000            	jne L_error_non_closure
  3794 00002486 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3795 00002489 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3796 0000248C 50                      	push rax
  3797 0000248D 6A01                    	push 1	; arg count
  3798 0000248F 488B4510                	mov rax, ENV
  3799 00002493 488B00                  	mov rax, qword [rax + 8 * 0]
  3800 00002496 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3801 00002499 803804                  	cmp byte [rax], T_closure
  3802 0000249C 0F85093E0000            	jne L_error_non_closure
  3803 000024A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3804 000024A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3805 000024A8 50                      	push rax
  3806 000024A9 6A01                    	push 1	; arg count
  3807 000024AB 488B4510                	mov rax, ENV
  3808 000024AF 488B00                  	mov rax, qword [rax + 8 * 0]
  3809 000024B2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3810 000024B5 803804                  	cmp byte [rax], T_closure
  3811 000024B8 0F85ED3D0000            	jne L_error_non_closure
  3812 000024BE FF7001                  	push SOB_CLOSURE_ENV(rax)
  3813 000024C1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3814 000024C4 803804                  	cmp byte [rax], T_closure
  3815 000024C7 0F85DE3D0000            	jne L_error_non_closure
  3816 000024CD FF7001                  	push SOB_CLOSURE_ENV(rax)
  3817 000024D0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3818 000024D3 803804                  	cmp byte [rax], T_closure
  3819 000024D6 0F85CF3D0000            	jne L_error_non_closure
  3820 000024DC FF7001                  	push SOB_CLOSURE_ENV(rax)
  3821 000024DF FF5009                  	call SOB_CLOSURE_CODE(rax)
  3822 000024E2 50                      	push rax
  3823 000024E3 6A01                    	push 1	; arg count
  3824                                  	; preparing a non-tail-call
  3825                                  	; preparing a non-tail-call
  3826                                  	; preparing a non-tail-call
  3827 000024E5 488B4510                	mov rax, ENV
  3828 000024E9 488B00                  	mov rax, qword [rax + 8 * 0]
  3829 000024EC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3830 000024EF 50                      	push rax
  3831 000024F0 6A01                    	push 1	; arg count
  3832 000024F2 488B4510                	mov rax, ENV
  3833 000024F6 488B00                  	mov rax, qword [rax + 8 * 0]
  3834 000024F9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3835 000024FC 803804                  	cmp byte [rax], T_closure
  3836 000024FF 0F85A63D0000            	jne L_error_non_closure
  3837 00002505 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3838 00002508 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3839 0000250B 50                      	push rax
  3840 0000250C 6A01                    	push 1	; arg count
  3841 0000250E 488B4510                	mov rax, ENV
  3842 00002512 488B00                  	mov rax, qword [rax + 8 * 0]
  3843 00002515 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3844 00002518 803804                  	cmp byte [rax], T_closure
  3845 0000251B 0F858A3D0000            	jne L_error_non_closure
  3846 00002521 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3847 00002524 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3848 00002527 50                      	push rax
  3849 00002528 6A01                    	push 1	; arg count
  3850 0000252A 488B4510                	mov rax, ENV
  3851 0000252E 488B00                  	mov rax, qword [rax + 8 * 0]
  3852 00002531 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3853 00002534 803804                  	cmp byte [rax], T_closure
  3854 00002537 0F856E3D0000            	jne L_error_non_closure
  3855 0000253D FF7001                  	push SOB_CLOSURE_ENV(rax)
  3856 00002540 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3857 00002543 803804                  	cmp byte [rax], T_closure
  3858 00002546 0F855F3D0000            	jne L_error_non_closure
  3859 0000254C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3860 0000254F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3861 00002552 50                      	push rax
  3862 00002553 6A01                    	push 1	; arg count
  3863                                  	; preparing a non-tail-call
  3864                                  	; preparing a non-tail-call
  3865                                  	; preparing a non-tail-call
  3866                                  	; preparing a non-tail-call
  3867                                  	; preparing a non-tail-call
  3868 00002555 488B4510                	mov rax, ENV
  3869 00002559 488B00                  	mov rax, qword [rax + 8 * 0]
  3870 0000255C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3871 0000255F 50                      	push rax
  3872 00002560 6A01                    	push 1	; arg count
  3873 00002562 488B4510                	mov rax, ENV
  3874 00002566 488B00                  	mov rax, qword [rax + 8 * 0]
  3875 00002569 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3876 0000256C 803804                  	cmp byte [rax], T_closure
  3877 0000256F 0F85363D0000            	jne L_error_non_closure
  3878 00002575 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3879 00002578 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3880 0000257B 50                      	push rax
  3881 0000257C 6A01                    	push 1	; arg count
  3882 0000257E 488B4510                	mov rax, ENV
  3883 00002582 488B00                  	mov rax, qword [rax + 8 * 0]
  3884 00002585 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3885 00002588 803804                  	cmp byte [rax], T_closure
  3886 0000258B 0F851A3D0000            	jne L_error_non_closure
  3887 00002591 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3888 00002594 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3889 00002597 50                      	push rax
  3890 00002598 6A01                    	push 1	; arg count
  3891 0000259A 488B4510                	mov rax, ENV
  3892 0000259E 488B00                  	mov rax, qword [rax + 8 * 0]
  3893 000025A1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3894 000025A4 803804                  	cmp byte [rax], T_closure
  3895 000025A7 0F85FE3C0000            	jne L_error_non_closure
  3896 000025AD FF7001                  	push SOB_CLOSURE_ENV(rax)
  3897 000025B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3898 000025B3 50                      	push rax
  3899 000025B4 6A01                    	push 1	; arg count
  3900                                  	; preparing a non-tail-call
  3901                                  	; preparing a non-tail-call
  3902                                  	; preparing a non-tail-call
  3903                                  	; preparing a non-tail-call
  3904 000025B6 488B4510                	mov rax, ENV
  3905 000025BA 488B00                  	mov rax, qword [rax + 8 * 0]
  3906 000025BD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3907 000025C0 50                      	push rax
  3908 000025C1 6A01                    	push 1	; arg count
  3909 000025C3 488B4510                	mov rax, ENV
  3910 000025C7 488B00                  	mov rax, qword [rax + 8 * 0]
  3911 000025CA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3912 000025CD 803804                  	cmp byte [rax], T_closure
  3913 000025D0 0F85D53C0000            	jne L_error_non_closure
  3914 000025D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3915 000025D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3916 000025DC 50                      	push rax
  3917 000025DD 6A01                    	push 1	; arg count
  3918 000025DF 488B4510                	mov rax, ENV
  3919 000025E3 488B00                  	mov rax, qword [rax + 8 * 0]
  3920 000025E6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3921 000025E9 803804                  	cmp byte [rax], T_closure
  3922 000025EC 0F85B93C0000            	jne L_error_non_closure
  3923 000025F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3924 000025F5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3925 000025F8 50                      	push rax
  3926 000025F9 6A01                    	push 1	; arg count
  3927 000025FB 488B4510                	mov rax, ENV
  3928 000025FF 488B00                  	mov rax, qword [rax + 8 * 0]
  3929 00002602 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3930 00002605 803804                  	cmp byte [rax], T_closure
  3931 00002608 0F859D3C0000            	jne L_error_non_closure
  3932 0000260E FF7001                  	push SOB_CLOSURE_ENV(rax)
  3933 00002611 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3934 00002614 50                      	push rax
  3935 00002615 6A01                    	push 1	; arg count
  3936                                  	; preparing a non-tail-call
  3937                                  	; preparing a non-tail-call
  3938                                  	; preparing a non-tail-call
  3939                                  	; preparing a non-tail-call
  3940 00002617 488B4510                	mov rax, ENV
  3941 0000261B 488B00                  	mov rax, qword [rax + 8 * 0]
  3942 0000261E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3943 00002621 50                      	push rax
  3944 00002622 6A01                    	push 1	; arg count
  3945 00002624 488B4510                	mov rax, ENV
  3946 00002628 488B00                  	mov rax, qword [rax + 8 * 0]
  3947 0000262B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3948 0000262E 803804                  	cmp byte [rax], T_closure
  3949 00002631 0F85743C0000            	jne L_error_non_closure
  3950 00002637 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3951 0000263A FF5009                  	call SOB_CLOSURE_CODE(rax)
  3952 0000263D 50                      	push rax
  3953 0000263E 6A01                    	push 1	; arg count
  3954 00002640 488B4510                	mov rax, ENV
  3955 00002644 488B00                  	mov rax, qword [rax + 8 * 0]
  3956 00002647 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3957 0000264A 803804                  	cmp byte [rax], T_closure
  3958 0000264D 0F85583C0000            	jne L_error_non_closure
  3959 00002653 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3960 00002656 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3961 00002659 50                      	push rax
  3962 0000265A 6A01                    	push 1	; arg count
  3963 0000265C 488B4510                	mov rax, ENV
  3964 00002660 488B00                  	mov rax, qword [rax + 8 * 0]
  3965 00002663 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3966 00002666 803804                  	cmp byte [rax], T_closure
  3967 00002669 0F853C3C0000            	jne L_error_non_closure
  3968 0000266F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3969 00002672 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3970 00002675 50                      	push rax
  3971 00002676 6A01                    	push 1	; arg count
  3972 00002678 488B4510                	mov rax, ENV
  3973 0000267C 488B00                  	mov rax, qword [rax + 8 * 0]
  3974 0000267F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3975 00002682 803804                  	cmp byte [rax], T_closure
  3976 00002685 0F85203C0000            	jne L_error_non_closure
  3977 0000268B FF7001                  	push SOB_CLOSURE_ENV(rax)
  3978 0000268E FF5009                  	call SOB_CLOSURE_CODE(rax)
  3979 00002691 803804                  	cmp byte [rax], T_closure
  3980 00002694 0F85113C0000            	jne L_error_non_closure
  3981 0000269A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3982 0000269D FF5009                  	call SOB_CLOSURE_CODE(rax)
  3983 000026A0 803804                  	cmp byte [rax], T_closure
  3984 000026A3 0F85023C0000            	jne L_error_non_closure
  3985 000026A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3986 000026AC FF5009                  	call SOB_CLOSURE_CODE(rax)
  3987 000026AF 50                      	push rax
  3988 000026B0 6A01                    	push 1	; arg count
  3989                                  	; preparing a non-tail-call
  3990                                  	; preparing a non-tail-call
  3991                                  	; preparing a non-tail-call
  3992                                  	; preparing a non-tail-call
  3993                                  	; preparing a non-tail-call
  3994 000026B2 488B4510                	mov rax, ENV
  3995 000026B6 488B00                  	mov rax, qword [rax + 8 * 0]
  3996 000026B9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  3997 000026BC 50                      	push rax
  3998 000026BD 6A01                    	push 1	; arg count
  3999 000026BF 488B4510                	mov rax, ENV
  4000 000026C3 488B00                  	mov rax, qword [rax + 8 * 0]
  4001 000026C6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4002 000026C9 803804                  	cmp byte [rax], T_closure
  4003 000026CC 0F85D93B0000            	jne L_error_non_closure
  4004 000026D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4005 000026D5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4006 000026D8 50                      	push rax
  4007 000026D9 6A01                    	push 1	; arg count
  4008 000026DB 488B4510                	mov rax, ENV
  4009 000026DF 488B00                  	mov rax, qword [rax + 8 * 0]
  4010 000026E2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4011 000026E5 803804                  	cmp byte [rax], T_closure
  4012 000026E8 0F85BD3B0000            	jne L_error_non_closure
  4013 000026EE FF7001                  	push SOB_CLOSURE_ENV(rax)
  4014 000026F1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4015 000026F4 50                      	push rax
  4016 000026F5 6A01                    	push 1	; arg count
  4017 000026F7 488B4510                	mov rax, ENV
  4018 000026FB 488B00                  	mov rax, qword [rax + 8 * 0]
  4019 000026FE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4020 00002701 803804                  	cmp byte [rax], T_closure
  4021 00002704 0F85A13B0000            	jne L_error_non_closure
  4022 0000270A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4023 0000270D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4024 00002710 50                      	push rax
  4025 00002711 6A01                    	push 1	; arg count
  4026                                  	; preparing a non-tail-call
  4027                                  	; preparing a non-tail-call
  4028                                  	; preparing a non-tail-call
  4029 00002713 488B4510                	mov rax, ENV
  4030 00002717 488B00                  	mov rax, qword [rax + 8 * 0]
  4031 0000271A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4032 0000271D 50                      	push rax
  4033 0000271E 6A01                    	push 1	; arg count
  4034 00002720 488B4510                	mov rax, ENV
  4035 00002724 488B00                  	mov rax, qword [rax + 8 * 0]
  4036 00002727 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4037 0000272A 803804                  	cmp byte [rax], T_closure
  4038 0000272D 0F85783B0000            	jne L_error_non_closure
  4039 00002733 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4040 00002736 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4041 00002739 50                      	push rax
  4042 0000273A 6A01                    	push 1	; arg count
  4043 0000273C 488B4510                	mov rax, ENV
  4044 00002740 488B00                  	mov rax, qword [rax + 8 * 0]
  4045 00002743 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4046 00002746 803804                  	cmp byte [rax], T_closure
  4047 00002749 0F855C3B0000            	jne L_error_non_closure
  4048 0000274F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4049 00002752 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4050 00002755 50                      	push rax
  4051 00002756 6A01                    	push 1	; arg count
  4052 00002758 488B4510                	mov rax, ENV
  4053 0000275C 488B00                  	mov rax, qword [rax + 8 * 0]
  4054 0000275F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4055 00002762 803804                  	cmp byte [rax], T_closure
  4056 00002765 0F85403B0000            	jne L_error_non_closure
  4057 0000276B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4058 0000276E FF5009                  	call SOB_CLOSURE_CODE(rax)
  4059 00002771 803804                  	cmp byte [rax], T_closure
  4060 00002774 0F85313B0000            	jne L_error_non_closure
  4061 0000277A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4062 0000277D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4063 00002780 50                      	push rax
  4064 00002781 6A01                    	push 1	; arg count
  4065                                  	; preparing a non-tail-call
  4066                                  	; preparing a non-tail-call
  4067                                  	; preparing a non-tail-call
  4068                                  	; preparing a non-tail-call
  4069                                  	; preparing a non-tail-call
  4070                                  	; preparing a non-tail-call
  4071                                  	; preparing a non-tail-call
  4072 00002783 488B4510                	mov rax, ENV
  4073 00002787 488B00                  	mov rax, qword [rax + 8 * 0]
  4074 0000278A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4075 0000278D 50                      	push rax
  4076 0000278E 6A01                    	push 1	; arg count
  4077 00002790 488B4510                	mov rax, ENV
  4078 00002794 488B00                  	mov rax, qword [rax + 8 * 0]
  4079 00002797 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4080 0000279A 803804                  	cmp byte [rax], T_closure
  4081 0000279D 0F85083B0000            	jne L_error_non_closure
  4082 000027A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4083 000027A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4084 000027A9 50                      	push rax
  4085 000027AA 6A01                    	push 1	; arg count
  4086 000027AC 488B4510                	mov rax, ENV
  4087 000027B0 488B00                  	mov rax, qword [rax + 8 * 0]
  4088 000027B3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4089 000027B6 803804                  	cmp byte [rax], T_closure
  4090 000027B9 0F85EC3A0000            	jne L_error_non_closure
  4091 000027BF FF7001                  	push SOB_CLOSURE_ENV(rax)
  4092 000027C2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4093 000027C5 50                      	push rax
  4094 000027C6 6A01                    	push 1	; arg count
  4095 000027C8 488B4510                	mov rax, ENV
  4096 000027CC 488B00                  	mov rax, qword [rax + 8 * 0]
  4097 000027CF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4098 000027D2 803804                  	cmp byte [rax], T_closure
  4099 000027D5 0F85D03A0000            	jne L_error_non_closure
  4100 000027DB FF7001                  	push SOB_CLOSURE_ENV(rax)
  4101 000027DE FF5009                  	call SOB_CLOSURE_CODE(rax)
  4102 000027E1 50                      	push rax
  4103 000027E2 6A01                    	push 1	; arg count
  4104 000027E4 488B4510                	mov rax, ENV
  4105 000027E8 488B00                  	mov rax, qword [rax + 8 * 0]
  4106 000027EB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4107 000027EE 803804                  	cmp byte [rax], T_closure
  4108 000027F1 0F85B43A0000            	jne L_error_non_closure
  4109 000027F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4110 000027FA FF5009                  	call SOB_CLOSURE_CODE(rax)
  4111 000027FD 50                      	push rax
  4112 000027FE 6A01                    	push 1	; arg count
  4113                                  	; preparing a non-tail-call
  4114                                  	; preparing a non-tail-call
  4115                                  	; preparing a non-tail-call
  4116                                  	; preparing a non-tail-call
  4117                                  	; preparing a non-tail-call
  4118 00002800 488B4510                	mov rax, ENV
  4119 00002804 488B00                  	mov rax, qword [rax + 8 * 0]
  4120 00002807 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4121 0000280A 50                      	push rax
  4122 0000280B 6A01                    	push 1	; arg count
  4123 0000280D 488B4510                	mov rax, ENV
  4124 00002811 488B00                  	mov rax, qword [rax + 8 * 0]
  4125 00002814 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4126 00002817 803804                  	cmp byte [rax], T_closure
  4127 0000281A 0F858B3A0000            	jne L_error_non_closure
  4128 00002820 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4129 00002823 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4130 00002826 50                      	push rax
  4131 00002827 6A01                    	push 1	; arg count
  4132 00002829 488B4510                	mov rax, ENV
  4133 0000282D 488B00                  	mov rax, qword [rax + 8 * 0]
  4134 00002830 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4135 00002833 803804                  	cmp byte [rax], T_closure
  4136 00002836 0F856F3A0000            	jne L_error_non_closure
  4137 0000283C FF7001                  	push SOB_CLOSURE_ENV(rax)
  4138 0000283F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4139 00002842 50                      	push rax
  4140 00002843 6A01                    	push 1	; arg count
  4141 00002845 488B4510                	mov rax, ENV
  4142 00002849 488B00                  	mov rax, qword [rax + 8 * 0]
  4143 0000284C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4144 0000284F 803804                  	cmp byte [rax], T_closure
  4145 00002852 0F85533A0000            	jne L_error_non_closure
  4146 00002858 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4147 0000285B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4148 0000285E 50                      	push rax
  4149 0000285F 6A01                    	push 1	; arg count
  4150                                  	; preparing a non-tail-call
  4151                                  	; preparing a non-tail-call
  4152                                  	; preparing a non-tail-call
  4153 00002861 488B4510                	mov rax, ENV
  4154 00002865 488B00                  	mov rax, qword [rax + 8 * 0]
  4155 00002868 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4156 0000286B 50                      	push rax
  4157 0000286C 6A01                    	push 1	; arg count
  4158 0000286E 488B4510                	mov rax, ENV
  4159 00002872 488B00                  	mov rax, qword [rax + 8 * 0]
  4160 00002875 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4161 00002878 803804                  	cmp byte [rax], T_closure
  4162 0000287B 0F852A3A0000            	jne L_error_non_closure
  4163 00002881 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4164 00002884 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4165 00002887 50                      	push rax
  4166 00002888 6A01                    	push 1	; arg count
  4167 0000288A 488B4510                	mov rax, ENV
  4168 0000288E 488B00                  	mov rax, qword [rax + 8 * 0]
  4169 00002891 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4170 00002894 803804                  	cmp byte [rax], T_closure
  4171 00002897 0F850E3A0000            	jne L_error_non_closure
  4172 0000289D FF7001                  	push SOB_CLOSURE_ENV(rax)
  4173 000028A0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4174 000028A3 50                      	push rax
  4175 000028A4 6A01                    	push 1	; arg count
  4176 000028A6 488B4510                	mov rax, ENV
  4177 000028AA 488B00                  	mov rax, qword [rax + 8 * 0]
  4178 000028AD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4179 000028B0 803804                  	cmp byte [rax], T_closure
  4180 000028B3 0F85F2390000            	jne L_error_non_closure
  4181 000028B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4182 000028BC FF5009                  	call SOB_CLOSURE_CODE(rax)
  4183 000028BF 803804                  	cmp byte [rax], T_closure
  4184 000028C2 0F85E3390000            	jne L_error_non_closure
  4185 000028C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4186 000028CB FF5009                  	call SOB_CLOSURE_CODE(rax)
  4187 000028CE 50                      	push rax
  4188 000028CF 6A01                    	push 1	; arg count
  4189                                  	; preparing a non-tail-call
  4190                                  	; preparing a non-tail-call
  4191                                  	; preparing a non-tail-call
  4192                                  	; preparing a non-tail-call
  4193 000028D1 488B4510                	mov rax, ENV
  4194 000028D5 488B00                  	mov rax, qword [rax + 8 * 0]
  4195 000028D8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4196 000028DB 50                      	push rax
  4197 000028DC 6A01                    	push 1	; arg count
  4198 000028DE 488B4510                	mov rax, ENV
  4199 000028E2 488B00                  	mov rax, qword [rax + 8 * 0]
  4200 000028E5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4201 000028E8 803804                  	cmp byte [rax], T_closure
  4202 000028EB 0F85BA390000            	jne L_error_non_closure
  4203 000028F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4204 000028F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4205 000028F7 50                      	push rax
  4206 000028F8 6A01                    	push 1	; arg count
  4207 000028FA 488B4510                	mov rax, ENV
  4208 000028FE 488B00                  	mov rax, qword [rax + 8 * 0]
  4209 00002901 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4210 00002904 803804                  	cmp byte [rax], T_closure
  4211 00002907 0F859E390000            	jne L_error_non_closure
  4212 0000290D FF7001                  	push SOB_CLOSURE_ENV(rax)
  4213 00002910 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4214 00002913 50                      	push rax
  4215 00002914 6A01                    	push 1	; arg count
  4216 00002916 488B4510                	mov rax, ENV
  4217 0000291A 488B00                  	mov rax, qword [rax + 8 * 0]
  4218 0000291D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4219 00002920 803804                  	cmp byte [rax], T_closure
  4220 00002923 0F8582390000            	jne L_error_non_closure
  4221 00002929 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4222 0000292C FF5009                  	call SOB_CLOSURE_CODE(rax)
  4223 0000292F 50                      	push rax
  4224 00002930 6A01                    	push 1	; arg count
  4225 00002932 488B4510                	mov rax, ENV
  4226 00002936 488B00                  	mov rax, qword [rax + 8 * 0]
  4227 00002939 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4228 0000293C 803804                  	cmp byte [rax], T_closure
  4229 0000293F 0F8566390000            	jne L_error_non_closure
  4230 00002945 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4231 00002948 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4232 0000294B 803804                  	cmp byte [rax], T_closure
  4233 0000294E 0F8557390000            	jne L_error_non_closure
  4234 00002954 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4235 00002957 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4236 0000295A 803804                  	cmp byte [rax], T_closure
  4237 0000295D 0F8548390000            	jne L_error_non_closure
  4238 00002963 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4239 00002966 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4240 00002969 50                      	push rax
  4241 0000296A 6A01                    	push 1	; arg count
  4242                                  	; preparing a non-tail-call
  4243                                  	; preparing a non-tail-call
  4244                                  	; preparing a non-tail-call
  4245                                  	; preparing a non-tail-call
  4246                                  	; preparing a non-tail-call
  4247                                  	; preparing a non-tail-call
  4248 0000296C 488B4510                	mov rax, ENV
  4249 00002970 488B00                  	mov rax, qword [rax + 8 * 0]
  4250 00002973 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4251 00002976 50                      	push rax
  4252 00002977 6A01                    	push 1	; arg count
  4253 00002979 488B4510                	mov rax, ENV
  4254 0000297D 488B00                  	mov rax, qword [rax + 8 * 0]
  4255 00002980 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4256 00002983 803804                  	cmp byte [rax], T_closure
  4257 00002986 0F851F390000            	jne L_error_non_closure
  4258 0000298C FF7001                  	push SOB_CLOSURE_ENV(rax)
  4259 0000298F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4260 00002992 50                      	push rax
  4261 00002993 6A01                    	push 1	; arg count
  4262 00002995 488B4510                	mov rax, ENV
  4263 00002999 488B00                  	mov rax, qword [rax + 8 * 0]
  4264 0000299C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4265 0000299F 803804                  	cmp byte [rax], T_closure
  4266 000029A2 0F8503390000            	jne L_error_non_closure
  4267 000029A8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4268 000029AB FF5009                  	call SOB_CLOSURE_CODE(rax)
  4269 000029AE 50                      	push rax
  4270 000029AF 6A01                    	push 1	; arg count
  4271 000029B1 488B4510                	mov rax, ENV
  4272 000029B5 488B00                  	mov rax, qword [rax + 8 * 0]
  4273 000029B8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4274 000029BB 803804                  	cmp byte [rax], T_closure
  4275 000029BE 0F85E7380000            	jne L_error_non_closure
  4276 000029C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4277 000029C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4278 000029CA 50                      	push rax
  4279 000029CB 6A01                    	push 1	; arg count
  4280 000029CD 488B4510                	mov rax, ENV
  4281 000029D1 488B00                  	mov rax, qword [rax + 8 * 0]
  4282 000029D4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4283 000029D7 803804                  	cmp byte [rax], T_closure
  4284 000029DA 0F85CB380000            	jne L_error_non_closure
  4285 000029E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4286 000029E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4287 000029E6 50                      	push rax
  4288 000029E7 6A01                    	push 1	; arg count
  4289                                  	; preparing a non-tail-call
  4290                                  	; preparing a non-tail-call
  4291                                  	; preparing a non-tail-call
  4292 000029E9 488B4510                	mov rax, ENV
  4293 000029ED 488B00                  	mov rax, qword [rax + 8 * 0]
  4294 000029F0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4295 000029F3 50                      	push rax
  4296 000029F4 6A01                    	push 1	; arg count
  4297 000029F6 488B4510                	mov rax, ENV
  4298 000029FA 488B00                  	mov rax, qword [rax + 8 * 0]
  4299 000029FD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4300 00002A00 803804                  	cmp byte [rax], T_closure
  4301 00002A03 0F85A2380000            	jne L_error_non_closure
  4302 00002A09 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4303 00002A0C FF5009                  	call SOB_CLOSURE_CODE(rax)
  4304 00002A0F 50                      	push rax
  4305 00002A10 6A01                    	push 1	; arg count
  4306 00002A12 488B4510                	mov rax, ENV
  4307 00002A16 488B00                  	mov rax, qword [rax + 8 * 0]
  4308 00002A19 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4309 00002A1C 803804                  	cmp byte [rax], T_closure
  4310 00002A1F 0F8586380000            	jne L_error_non_closure
  4311 00002A25 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4312 00002A28 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4313 00002A2B 50                      	push rax
  4314 00002A2C 6A01                    	push 1	; arg count
  4315 00002A2E 488B4510                	mov rax, ENV
  4316 00002A32 488B00                  	mov rax, qword [rax + 8 * 0]
  4317 00002A35 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4318 00002A38 803804                  	cmp byte [rax], T_closure
  4319 00002A3B 0F856A380000            	jne L_error_non_closure
  4320 00002A41 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4321 00002A44 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4322 00002A47 803804                  	cmp byte [rax], T_closure
  4323 00002A4A 0F855B380000            	jne L_error_non_closure
  4324 00002A50 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4325 00002A53 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4326 00002A56 50                      	push rax
  4327 00002A57 6A01                    	push 1	; arg count
  4328                                  	; preparing a non-tail-call
  4329                                  	; preparing a non-tail-call
  4330                                  	; preparing a non-tail-call
  4331                                  	; preparing a non-tail-call
  4332 00002A59 488B4510                	mov rax, ENV
  4333 00002A5D 488B00                  	mov rax, qword [rax + 8 * 0]
  4334 00002A60 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4335 00002A63 50                      	push rax
  4336 00002A64 6A01                    	push 1	; arg count
  4337 00002A66 488B4510                	mov rax, ENV
  4338 00002A6A 488B00                  	mov rax, qword [rax + 8 * 0]
  4339 00002A6D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4340 00002A70 803804                  	cmp byte [rax], T_closure
  4341 00002A73 0F8532380000            	jne L_error_non_closure
  4342 00002A79 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4343 00002A7C FF5009                  	call SOB_CLOSURE_CODE(rax)
  4344 00002A7F 50                      	push rax
  4345 00002A80 6A01                    	push 1	; arg count
  4346 00002A82 488B4510                	mov rax, ENV
  4347 00002A86 488B00                  	mov rax, qword [rax + 8 * 0]
  4348 00002A89 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4349 00002A8C 803804                  	cmp byte [rax], T_closure
  4350 00002A8F 0F8516380000            	jne L_error_non_closure
  4351 00002A95 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4352 00002A98 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4353 00002A9B 50                      	push rax
  4354 00002A9C 6A01                    	push 1	; arg count
  4355 00002A9E 488B4510                	mov rax, ENV
  4356 00002AA2 488B00                  	mov rax, qword [rax + 8 * 0]
  4357 00002AA5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4358 00002AA8 803804                  	cmp byte [rax], T_closure
  4359 00002AAB 0F85FA370000            	jne L_error_non_closure
  4360 00002AB1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4361 00002AB4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4362 00002AB7 50                      	push rax
  4363 00002AB8 6A01                    	push 1	; arg count
  4364 00002ABA 488B4510                	mov rax, ENV
  4365 00002ABE 488B00                  	mov rax, qword [rax + 8 * 0]
  4366 00002AC1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4367 00002AC4 803804                  	cmp byte [rax], T_closure
  4368 00002AC7 0F85DE370000            	jne L_error_non_closure
  4369 00002ACD FF7001                  	push SOB_CLOSURE_ENV(rax)
  4370 00002AD0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4371 00002AD3 803804                  	cmp byte [rax], T_closure
  4372 00002AD6 0F85CF370000            	jne L_error_non_closure
  4373 00002ADC FF7001                  	push SOB_CLOSURE_ENV(rax)
  4374 00002ADF FF5009                  	call SOB_CLOSURE_CODE(rax)
  4375 00002AE2 803804                  	cmp byte [rax], T_closure
  4376 00002AE5 0F85C0370000            	jne L_error_non_closure
  4377 00002AEB FF7001                  	push SOB_CLOSURE_ENV(rax)
  4378 00002AEE FF5009                  	call SOB_CLOSURE_CODE(rax)
  4379 00002AF1 50                      	push rax
  4380 00002AF2 6A01                    	push 1	; arg count
  4381                                  	; preparing a non-tail-call
  4382                                  	; preparing a non-tail-call
  4383                                  	; preparing a non-tail-call
  4384                                  	; preparing a non-tail-call
  4385 00002AF4 488B4510                	mov rax, ENV
  4386 00002AF8 488B00                  	mov rax, qword [rax + 8 * 0]
  4387 00002AFB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4388 00002AFE 50                      	push rax
  4389 00002AFF 6A01                    	push 1	; arg count
  4390 00002B01 488B4510                	mov rax, ENV
  4391 00002B05 488B00                  	mov rax, qword [rax + 8 * 0]
  4392 00002B08 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4393 00002B0B 803804                  	cmp byte [rax], T_closure
  4394 00002B0E 0F8597370000            	jne L_error_non_closure
  4395 00002B14 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4396 00002B17 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4397 00002B1A 50                      	push rax
  4398 00002B1B 6A01                    	push 1	; arg count
  4399 00002B1D 488B4510                	mov rax, ENV
  4400 00002B21 488B00                  	mov rax, qword [rax + 8 * 0]
  4401 00002B24 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4402 00002B27 803804                  	cmp byte [rax], T_closure
  4403 00002B2A 0F857B370000            	jne L_error_non_closure
  4404 00002B30 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4405 00002B33 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4406 00002B36 50                      	push rax
  4407 00002B37 6A01                    	push 1	; arg count
  4408 00002B39 488B4510                	mov rax, ENV
  4409 00002B3D 488B00                  	mov rax, qword [rax + 8 * 0]
  4410 00002B40 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4411 00002B43 803804                  	cmp byte [rax], T_closure
  4412 00002B46 0F855F370000            	jne L_error_non_closure
  4413 00002B4C FF7001                  	push SOB_CLOSURE_ENV(rax)
  4414 00002B4F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4415 00002B52 50                      	push rax
  4416 00002B53 6A01                    	push 1	; arg count
  4417 00002B55 488B4510                	mov rax, ENV
  4418 00002B59 488B00                  	mov rax, qword [rax + 8 * 0]
  4419 00002B5C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4420 00002B5F 803804                  	cmp byte [rax], T_closure
  4421 00002B62 0F8543370000            	jne L_error_non_closure
  4422 00002B68 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4423 00002B6B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4424 00002B6E 803804                  	cmp byte [rax], T_closure
  4425 00002B71 0F8534370000            	jne L_error_non_closure
  4426 00002B77 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4427 00002B7A FF5009                  	call SOB_CLOSURE_CODE(rax)
  4428 00002B7D 803804                  	cmp byte [rax], T_closure
  4429 00002B80 0F8525370000            	jne L_error_non_closure
  4430 00002B86 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4431 00002B89 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4432 00002B8C 803804                  	cmp byte [rax], T_closure
  4433 00002B8F 0F8516370000            	jne L_error_non_closure
  4434 00002B95 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4435 00002B98 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4436 00002B9B 803804                  	cmp byte [rax], T_closure
  4437 00002B9E 0F8507370000            	jne L_error_non_closure
  4438 00002BA4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4439 00002BA7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4440 00002BAA 50                      	push rax
  4441 00002BAB 6A01                    	push 1	; arg count
  4442                                  	; preparing a non-tail-call
  4443                                  	; preparing a non-tail-call
  4444                                  	; preparing a non-tail-call
  4445                                  	; preparing a non-tail-call
  4446                                  	; preparing a non-tail-call
  4447                                  	; preparing a non-tail-call
  4448 00002BAD 488B4510                	mov rax, ENV
  4449 00002BB1 488B00                  	mov rax, qword [rax + 8 * 0]
  4450 00002BB4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4451 00002BB7 50                      	push rax
  4452 00002BB8 6A01                    	push 1	; arg count
  4453 00002BBA 488B4510                	mov rax, ENV
  4454 00002BBE 488B00                  	mov rax, qword [rax + 8 * 0]
  4455 00002BC1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4456 00002BC4 803804                  	cmp byte [rax], T_closure
  4457 00002BC7 0F85DE360000            	jne L_error_non_closure
  4458 00002BCD FF7001                  	push SOB_CLOSURE_ENV(rax)
  4459 00002BD0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4460 00002BD3 50                      	push rax
  4461 00002BD4 6A01                    	push 1	; arg count
  4462 00002BD6 488B4510                	mov rax, ENV
  4463 00002BDA 488B00                  	mov rax, qword [rax + 8 * 0]
  4464 00002BDD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4465 00002BE0 803804                  	cmp byte [rax], T_closure
  4466 00002BE3 0F85C2360000            	jne L_error_non_closure
  4467 00002BE9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4468 00002BEC FF5009                  	call SOB_CLOSURE_CODE(rax)
  4469 00002BEF 50                      	push rax
  4470 00002BF0 6A01                    	push 1	; arg count
  4471 00002BF2 488B4510                	mov rax, ENV
  4472 00002BF6 488B00                  	mov rax, qword [rax + 8 * 0]
  4473 00002BF9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4474 00002BFC 803804                  	cmp byte [rax], T_closure
  4475 00002BFF 0F85A6360000            	jne L_error_non_closure
  4476 00002C05 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4477 00002C08 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4478 00002C0B 50                      	push rax
  4479 00002C0C 6A01                    	push 1	; arg count
  4480                                  	; preparing a non-tail-call
  4481                                  	; preparing a non-tail-call
  4482                                  	; preparing a non-tail-call
  4483                                  	; preparing a non-tail-call
  4484                                  	; preparing a non-tail-call
  4485 00002C0E 488B4510                	mov rax, ENV
  4486 00002C12 488B00                  	mov rax, qword [rax + 8 * 0]
  4487 00002C15 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4488 00002C18 50                      	push rax
  4489 00002C19 6A01                    	push 1	; arg count
  4490 00002C1B 488B4510                	mov rax, ENV
  4491 00002C1F 488B00                  	mov rax, qword [rax + 8 * 0]
  4492 00002C22 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4493 00002C25 803804                  	cmp byte [rax], T_closure
  4494 00002C28 0F857D360000            	jne L_error_non_closure
  4495 00002C2E FF7001                  	push SOB_CLOSURE_ENV(rax)
  4496 00002C31 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4497 00002C34 50                      	push rax
  4498 00002C35 6A01                    	push 1	; arg count
  4499 00002C37 488B4510                	mov rax, ENV
  4500 00002C3B 488B00                  	mov rax, qword [rax + 8 * 0]
  4501 00002C3E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4502 00002C41 803804                  	cmp byte [rax], T_closure
  4503 00002C44 0F8561360000            	jne L_error_non_closure
  4504 00002C4A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4505 00002C4D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4506 00002C50 50                      	push rax
  4507 00002C51 6A01                    	push 1	; arg count
  4508 00002C53 488B4510                	mov rax, ENV
  4509 00002C57 488B00                  	mov rax, qword [rax + 8 * 0]
  4510 00002C5A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4511 00002C5D 803804                  	cmp byte [rax], T_closure
  4512 00002C60 0F8545360000            	jne L_error_non_closure
  4513 00002C66 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4514 00002C69 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4515 00002C6C 50                      	push rax
  4516 00002C6D 6A01                    	push 1	; arg count
  4517                                  	; preparing a non-tail-call
  4518                                  	; preparing a non-tail-call
  4519                                  	; preparing a non-tail-call
  4520                                  	; preparing a non-tail-call
  4521 00002C6F 488B4510                	mov rax, ENV
  4522 00002C73 488B00                  	mov rax, qword [rax + 8 * 0]
  4523 00002C76 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4524 00002C79 50                      	push rax
  4525 00002C7A 6A01                    	push 1	; arg count
  4526 00002C7C 488B4510                	mov rax, ENV
  4527 00002C80 488B00                  	mov rax, qword [rax + 8 * 0]
  4528 00002C83 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4529 00002C86 803804                  	cmp byte [rax], T_closure
  4530 00002C89 0F851C360000            	jne L_error_non_closure
  4531 00002C8F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4532 00002C92 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4533 00002C95 50                      	push rax
  4534 00002C96 6A01                    	push 1	; arg count
  4535 00002C98 488B4510                	mov rax, ENV
  4536 00002C9C 488B00                  	mov rax, qword [rax + 8 * 0]
  4537 00002C9F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4538 00002CA2 803804                  	cmp byte [rax], T_closure
  4539 00002CA5 0F8500360000            	jne L_error_non_closure
  4540 00002CAB FF7001                  	push SOB_CLOSURE_ENV(rax)
  4541 00002CAE FF5009                  	call SOB_CLOSURE_CODE(rax)
  4542 00002CB1 50                      	push rax
  4543 00002CB2 6A01                    	push 1	; arg count
  4544 00002CB4 488B4510                	mov rax, ENV
  4545 00002CB8 488B00                  	mov rax, qword [rax + 8 * 0]
  4546 00002CBB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4547 00002CBE 803804                  	cmp byte [rax], T_closure
  4548 00002CC1 0F85E4350000            	jne L_error_non_closure
  4549 00002CC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4550 00002CCA FF5009                  	call SOB_CLOSURE_CODE(rax)
  4551 00002CCD 50                      	push rax
  4552 00002CCE 6A01                    	push 1	; arg count
  4553                                  	; preparing a non-tail-call
  4554                                  	; preparing a non-tail-call
  4555                                  	; preparing a non-tail-call
  4556                                  	; preparing a non-tail-call
  4557 00002CD0 488B4510                	mov rax, ENV
  4558 00002CD4 488B00                  	mov rax, qword [rax + 8 * 0]
  4559 00002CD7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4560 00002CDA 50                      	push rax
  4561 00002CDB 6A01                    	push 1	; arg count
  4562 00002CDD 488B4510                	mov rax, ENV
  4563 00002CE1 488B00                  	mov rax, qword [rax + 8 * 0]
  4564 00002CE4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4565 00002CE7 803804                  	cmp byte [rax], T_closure
  4566 00002CEA 0F85BB350000            	jne L_error_non_closure
  4567 00002CF0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4568 00002CF3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4569 00002CF6 50                      	push rax
  4570 00002CF7 6A01                    	push 1	; arg count
  4571 00002CF9 488B4510                	mov rax, ENV
  4572 00002CFD 488B00                  	mov rax, qword [rax + 8 * 0]
  4573 00002D00 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4574 00002D03 803804                  	cmp byte [rax], T_closure
  4575 00002D06 0F859F350000            	jne L_error_non_closure
  4576 00002D0C FF7001                  	push SOB_CLOSURE_ENV(rax)
  4577 00002D0F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4578 00002D12 50                      	push rax
  4579 00002D13 6A01                    	push 1	; arg count
  4580 00002D15 488B4510                	mov rax, ENV
  4581 00002D19 488B00                  	mov rax, qword [rax + 8 * 0]
  4582 00002D1C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4583 00002D1F 803804                  	cmp byte [rax], T_closure
  4584 00002D22 0F8583350000            	jne L_error_non_closure
  4585 00002D28 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4586 00002D2B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4587 00002D2E 50                      	push rax
  4588 00002D2F 6A01                    	push 1	; arg count
  4589 00002D31 488B4510                	mov rax, ENV
  4590 00002D35 488B00                  	mov rax, qword [rax + 8 * 0]
  4591 00002D38 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4592 00002D3B 803804                  	cmp byte [rax], T_closure
  4593 00002D3E 0F8567350000            	jne L_error_non_closure
  4594 00002D44 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4595 00002D47 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4596 00002D4A 803804                  	cmp byte [rax], T_closure
  4597 00002D4D 0F8558350000            	jne L_error_non_closure
  4598 00002D53 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4599 00002D56 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4600 00002D59 803804                  	cmp byte [rax], T_closure
  4601 00002D5C 0F8549350000            	jne L_error_non_closure
  4602 00002D62 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4603 00002D65 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4604 00002D68 50                      	push rax
  4605 00002D69 6A01                    	push 1	; arg count
  4606                                  	; preparing a non-tail-call
  4607                                  	; preparing a non-tail-call
  4608                                  	; preparing a non-tail-call
  4609                                  	; preparing a non-tail-call
  4610                                  	; preparing a non-tail-call
  4611 00002D6B 488B4510                	mov rax, ENV
  4612 00002D6F 488B00                  	mov rax, qword [rax + 8 * 0]
  4613 00002D72 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4614 00002D75 50                      	push rax
  4615 00002D76 6A01                    	push 1	; arg count
  4616 00002D78 488B4510                	mov rax, ENV
  4617 00002D7C 488B00                  	mov rax, qword [rax + 8 * 0]
  4618 00002D7F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4619 00002D82 803804                  	cmp byte [rax], T_closure
  4620 00002D85 0F8520350000            	jne L_error_non_closure
  4621 00002D8B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4622 00002D8E FF5009                  	call SOB_CLOSURE_CODE(rax)
  4623 00002D91 50                      	push rax
  4624 00002D92 6A01                    	push 1	; arg count
  4625 00002D94 488B4510                	mov rax, ENV
  4626 00002D98 488B00                  	mov rax, qword [rax + 8 * 0]
  4627 00002D9B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4628 00002D9E 803804                  	cmp byte [rax], T_closure
  4629 00002DA1 0F8504350000            	jne L_error_non_closure
  4630 00002DA7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4631 00002DAA FF5009                  	call SOB_CLOSURE_CODE(rax)
  4632 00002DAD 50                      	push rax
  4633 00002DAE 6A01                    	push 1	; arg count
  4634 00002DB0 488B4510                	mov rax, ENV
  4635 00002DB4 488B00                  	mov rax, qword [rax + 8 * 0]
  4636 00002DB7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4637 00002DBA 803804                  	cmp byte [rax], T_closure
  4638 00002DBD 0F85E8340000            	jne L_error_non_closure
  4639 00002DC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4640 00002DC6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4641 00002DC9 50                      	push rax
  4642 00002DCA 6A01                    	push 1	; arg count
  4643                                  	; preparing a non-tail-call
  4644                                  	; preparing a non-tail-call
  4645                                  	; preparing a non-tail-call
  4646 00002DCC 488B4510                	mov rax, ENV
  4647 00002DD0 488B00                  	mov rax, qword [rax + 8 * 0]
  4648 00002DD3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4649 00002DD6 50                      	push rax
  4650 00002DD7 6A01                    	push 1	; arg count
  4651 00002DD9 488B4510                	mov rax, ENV
  4652 00002DDD 488B00                  	mov rax, qword [rax + 8 * 0]
  4653 00002DE0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4654 00002DE3 803804                  	cmp byte [rax], T_closure
  4655 00002DE6 0F85BF340000            	jne L_error_non_closure
  4656 00002DEC FF7001                  	push SOB_CLOSURE_ENV(rax)
  4657 00002DEF FF5009                  	call SOB_CLOSURE_CODE(rax)
  4658 00002DF2 50                      	push rax
  4659 00002DF3 6A01                    	push 1	; arg count
  4660 00002DF5 488B4510                	mov rax, ENV
  4661 00002DF9 488B00                  	mov rax, qword [rax + 8 * 0]
  4662 00002DFC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4663 00002DFF 803804                  	cmp byte [rax], T_closure
  4664 00002E02 0F85A3340000            	jne L_error_non_closure
  4665 00002E08 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4666 00002E0B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4667 00002E0E 50                      	push rax
  4668 00002E0F 6A01                    	push 1	; arg count
  4669 00002E11 488B4510                	mov rax, ENV
  4670 00002E15 488B00                  	mov rax, qword [rax + 8 * 0]
  4671 00002E18 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4672 00002E1B 803804                  	cmp byte [rax], T_closure
  4673 00002E1E 0F8587340000            	jne L_error_non_closure
  4674 00002E24 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4675 00002E27 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4676 00002E2A 803804                  	cmp byte [rax], T_closure
  4677 00002E2D 0F8578340000            	jne L_error_non_closure
  4678 00002E33 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4679 00002E36 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4680 00002E39 50                      	push rax
  4681 00002E3A 6A01                    	push 1	; arg count
  4682                                  	; preparing a non-tail-call
  4683                                  	; preparing a non-tail-call
  4684                                  	; preparing a non-tail-call
  4685                                  	; preparing a non-tail-call
  4686                                  	; preparing a non-tail-call
  4687                                  	; preparing a non-tail-call
  4688                                  	; preparing a non-tail-call
  4689 00002E3C 488B4510                	mov rax, ENV
  4690 00002E40 488B00                  	mov rax, qword [rax + 8 * 0]
  4691 00002E43 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4692 00002E46 50                      	push rax
  4693 00002E47 6A01                    	push 1	; arg count
  4694 00002E49 488B4510                	mov rax, ENV
  4695 00002E4D 488B00                  	mov rax, qword [rax + 8 * 0]
  4696 00002E50 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4697 00002E53 803804                  	cmp byte [rax], T_closure
  4698 00002E56 0F854F340000            	jne L_error_non_closure
  4699 00002E5C FF7001                  	push SOB_CLOSURE_ENV(rax)
  4700 00002E5F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4701 00002E62 50                      	push rax
  4702 00002E63 6A01                    	push 1	; arg count
  4703 00002E65 488B4510                	mov rax, ENV
  4704 00002E69 488B00                  	mov rax, qword [rax + 8 * 0]
  4705 00002E6C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4706 00002E6F 803804                  	cmp byte [rax], T_closure
  4707 00002E72 0F8533340000            	jne L_error_non_closure
  4708 00002E78 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4709 00002E7B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4710 00002E7E 50                      	push rax
  4711 00002E7F 6A01                    	push 1	; arg count
  4712 00002E81 488B4510                	mov rax, ENV
  4713 00002E85 488B00                  	mov rax, qword [rax + 8 * 0]
  4714 00002E88 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4715 00002E8B 803804                  	cmp byte [rax], T_closure
  4716 00002E8E 0F8517340000            	jne L_error_non_closure
  4717 00002E94 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4718 00002E97 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4719 00002E9A 50                      	push rax
  4720 00002E9B 6A01                    	push 1	; arg count
  4721 00002E9D 488B4510                	mov rax, ENV
  4722 00002EA1 488B00                  	mov rax, qword [rax + 8 * 0]
  4723 00002EA4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4724 00002EA7 803804                  	cmp byte [rax], T_closure
  4725 00002EAA 0F85FB330000            	jne L_error_non_closure
  4726 00002EB0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4727 00002EB3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4728 00002EB6 50                      	push rax
  4729 00002EB7 6A01                    	push 1	; arg count
  4730                                  	; preparing a non-tail-call
  4731                                  	; preparing a non-tail-call
  4732                                  	; preparing a non-tail-call
  4733                                  	; preparing a non-tail-call
  4734                                  	; preparing a non-tail-call
  4735 00002EB9 488B4510                	mov rax, ENV
  4736 00002EBD 488B00                  	mov rax, qword [rax + 8 * 0]
  4737 00002EC0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4738 00002EC3 50                      	push rax
  4739 00002EC4 6A01                    	push 1	; arg count
  4740 00002EC6 488B4510                	mov rax, ENV
  4741 00002ECA 488B00                  	mov rax, qword [rax + 8 * 0]
  4742 00002ECD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4743 00002ED0 803804                  	cmp byte [rax], T_closure
  4744 00002ED3 0F85D2330000            	jne L_error_non_closure
  4745 00002ED9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4746 00002EDC FF5009                  	call SOB_CLOSURE_CODE(rax)
  4747 00002EDF 50                      	push rax
  4748 00002EE0 6A01                    	push 1	; arg count
  4749 00002EE2 488B4510                	mov rax, ENV
  4750 00002EE6 488B00                  	mov rax, qword [rax + 8 * 0]
  4751 00002EE9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4752 00002EEC 803804                  	cmp byte [rax], T_closure
  4753 00002EEF 0F85B6330000            	jne L_error_non_closure
  4754 00002EF5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4755 00002EF8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4756 00002EFB 50                      	push rax
  4757 00002EFC 6A01                    	push 1	; arg count
  4758 00002EFE 488B4510                	mov rax, ENV
  4759 00002F02 488B00                  	mov rax, qword [rax + 8 * 0]
  4760 00002F05 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4761 00002F08 803804                  	cmp byte [rax], T_closure
  4762 00002F0B 0F859A330000            	jne L_error_non_closure
  4763 00002F11 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4764 00002F14 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4765 00002F17 50                      	push rax
  4766 00002F18 6A01                    	push 1	; arg count
  4767                                  	; preparing a non-tail-call
  4768                                  	; preparing a non-tail-call
  4769                                  	; preparing a non-tail-call
  4770 00002F1A 488B4510                	mov rax, ENV
  4771 00002F1E 488B00                  	mov rax, qword [rax + 8 * 0]
  4772 00002F21 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4773 00002F24 50                      	push rax
  4774 00002F25 6A01                    	push 1	; arg count
  4775 00002F27 488B4510                	mov rax, ENV
  4776 00002F2B 488B00                  	mov rax, qword [rax + 8 * 0]
  4777 00002F2E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4778 00002F31 803804                  	cmp byte [rax], T_closure
  4779 00002F34 0F8571330000            	jne L_error_non_closure
  4780 00002F3A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4781 00002F3D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4782 00002F40 50                      	push rax
  4783 00002F41 6A01                    	push 1	; arg count
  4784 00002F43 488B4510                	mov rax, ENV
  4785 00002F47 488B00                  	mov rax, qword [rax + 8 * 0]
  4786 00002F4A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4787 00002F4D 803804                  	cmp byte [rax], T_closure
  4788 00002F50 0F8555330000            	jne L_error_non_closure
  4789 00002F56 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4790 00002F59 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4791 00002F5C 50                      	push rax
  4792 00002F5D 6A01                    	push 1	; arg count
  4793 00002F5F 488B4510                	mov rax, ENV
  4794 00002F63 488B00                  	mov rax, qword [rax + 8 * 0]
  4795 00002F66 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4796 00002F69 803804                  	cmp byte [rax], T_closure
  4797 00002F6C 0F8539330000            	jne L_error_non_closure
  4798 00002F72 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4799 00002F75 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4800 00002F78 803804                  	cmp byte [rax], T_closure
  4801 00002F7B 0F852A330000            	jne L_error_non_closure
  4802 00002F81 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4803 00002F84 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4804 00002F87 50                      	push rax
  4805 00002F88 6A01                    	push 1	; arg count
  4806                                  	; preparing a non-tail-call
  4807                                  	; preparing a non-tail-call
  4808                                  	; preparing a non-tail-call
  4809                                  	; preparing a non-tail-call
  4810 00002F8A 488B4510                	mov rax, ENV
  4811 00002F8E 488B00                  	mov rax, qword [rax + 8 * 0]
  4812 00002F91 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4813 00002F94 50                      	push rax
  4814 00002F95 6A01                    	push 1	; arg count
  4815 00002F97 488B4510                	mov rax, ENV
  4816 00002F9B 488B00                  	mov rax, qword [rax + 8 * 0]
  4817 00002F9E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4818 00002FA1 803804                  	cmp byte [rax], T_closure
  4819 00002FA4 0F8501330000            	jne L_error_non_closure
  4820 00002FAA FF7001                  	push SOB_CLOSURE_ENV(rax)
  4821 00002FAD FF5009                  	call SOB_CLOSURE_CODE(rax)
  4822 00002FB0 50                      	push rax
  4823 00002FB1 6A01                    	push 1	; arg count
  4824 00002FB3 488B4510                	mov rax, ENV
  4825 00002FB7 488B00                  	mov rax, qword [rax + 8 * 0]
  4826 00002FBA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4827 00002FBD 803804                  	cmp byte [rax], T_closure
  4828 00002FC0 0F85E5320000            	jne L_error_non_closure
  4829 00002FC6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4830 00002FC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4831 00002FCC 50                      	push rax
  4832 00002FCD 6A01                    	push 1	; arg count
  4833 00002FCF 488B4510                	mov rax, ENV
  4834 00002FD3 488B00                  	mov rax, qword [rax + 8 * 0]
  4835 00002FD6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4836 00002FD9 803804                  	cmp byte [rax], T_closure
  4837 00002FDC 0F85C9320000            	jne L_error_non_closure
  4838 00002FE2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4839 00002FE5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4840 00002FE8 50                      	push rax
  4841 00002FE9 6A01                    	push 1	; arg count
  4842 00002FEB 488B4510                	mov rax, ENV
  4843 00002FEF 488B00                  	mov rax, qword [rax + 8 * 0]
  4844 00002FF2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4845 00002FF5 803804                  	cmp byte [rax], T_closure
  4846 00002FF8 0F85AD320000            	jne L_error_non_closure
  4847 00002FFE FF7001                  	push SOB_CLOSURE_ENV(rax)
  4848 00003001 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4849 00003004 803804                  	cmp byte [rax], T_closure
  4850 00003007 0F859E320000            	jne L_error_non_closure
  4851 0000300D FF7001                  	push SOB_CLOSURE_ENV(rax)
  4852 00003010 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4853 00003013 803804                  	cmp byte [rax], T_closure
  4854 00003016 0F858F320000            	jne L_error_non_closure
  4855 0000301C FF7001                  	push SOB_CLOSURE_ENV(rax)
  4856 0000301F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4857 00003022 50                      	push rax
  4858 00003023 6A01                    	push 1	; arg count
  4859                                  	; preparing a non-tail-call
  4860                                  	; preparing a non-tail-call
  4861                                  	; preparing a non-tail-call
  4862                                  	; preparing a non-tail-call
  4863                                  	; preparing a non-tail-call
  4864                                  	; preparing a non-tail-call
  4865 00003025 488B4510                	mov rax, ENV
  4866 00003029 488B00                  	mov rax, qword [rax + 8 * 0]
  4867 0000302C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4868 0000302F 50                      	push rax
  4869 00003030 6A01                    	push 1	; arg count
  4870 00003032 488B4510                	mov rax, ENV
  4871 00003036 488B00                  	mov rax, qword [rax + 8 * 0]
  4872 00003039 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4873 0000303C 803804                  	cmp byte [rax], T_closure
  4874 0000303F 0F8566320000            	jne L_error_non_closure
  4875 00003045 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4876 00003048 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4877 0000304B 50                      	push rax
  4878 0000304C 6A01                    	push 1	; arg count
  4879 0000304E 488B4510                	mov rax, ENV
  4880 00003052 488B00                  	mov rax, qword [rax + 8 * 0]
  4881 00003055 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4882 00003058 803804                  	cmp byte [rax], T_closure
  4883 0000305B 0F854A320000            	jne L_error_non_closure
  4884 00003061 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4885 00003064 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4886 00003067 50                      	push rax
  4887 00003068 6A01                    	push 1	; arg count
  4888 0000306A 488B4510                	mov rax, ENV
  4889 0000306E 488B00                  	mov rax, qword [rax + 8 * 0]
  4890 00003071 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4891 00003074 803804                  	cmp byte [rax], T_closure
  4892 00003077 0F852E320000            	jne L_error_non_closure
  4893 0000307D FF7001                  	push SOB_CLOSURE_ENV(rax)
  4894 00003080 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4895 00003083 50                      	push rax
  4896 00003084 6A01                    	push 1	; arg count
  4897 00003086 488B4510                	mov rax, ENV
  4898 0000308A 488B00                  	mov rax, qword [rax + 8 * 0]
  4899 0000308D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4900 00003090 803804                  	cmp byte [rax], T_closure
  4901 00003093 0F8512320000            	jne L_error_non_closure
  4902 00003099 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4903 0000309C FF5009                  	call SOB_CLOSURE_CODE(rax)
  4904 0000309F 50                      	push rax
  4905 000030A0 6A01                    	push 1	; arg count
  4906                                  	; preparing a non-tail-call
  4907                                  	; preparing a non-tail-call
  4908                                  	; preparing a non-tail-call
  4909 000030A2 488B4510                	mov rax, ENV
  4910 000030A6 488B00                  	mov rax, qword [rax + 8 * 0]
  4911 000030A9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4912 000030AC 50                      	push rax
  4913 000030AD 6A01                    	push 1	; arg count
  4914 000030AF 488B4510                	mov rax, ENV
  4915 000030B3 488B00                  	mov rax, qword [rax + 8 * 0]
  4916 000030B6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4917 000030B9 803804                  	cmp byte [rax], T_closure
  4918 000030BC 0F85E9310000            	jne L_error_non_closure
  4919 000030C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4920 000030C5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4921 000030C8 50                      	push rax
  4922 000030C9 6A01                    	push 1	; arg count
  4923 000030CB 488B4510                	mov rax, ENV
  4924 000030CF 488B00                  	mov rax, qword [rax + 8 * 0]
  4925 000030D2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4926 000030D5 803804                  	cmp byte [rax], T_closure
  4927 000030D8 0F85CD310000            	jne L_error_non_closure
  4928 000030DE FF7001                  	push SOB_CLOSURE_ENV(rax)
  4929 000030E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4930 000030E4 50                      	push rax
  4931 000030E5 6A01                    	push 1	; arg count
  4932 000030E7 488B4510                	mov rax, ENV
  4933 000030EB 488B00                  	mov rax, qword [rax + 8 * 0]
  4934 000030EE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4935 000030F1 803804                  	cmp byte [rax], T_closure
  4936 000030F4 0F85B1310000            	jne L_error_non_closure
  4937 000030FA FF7001                  	push SOB_CLOSURE_ENV(rax)
  4938 000030FD FF5009                  	call SOB_CLOSURE_CODE(rax)
  4939 00003100 803804                  	cmp byte [rax], T_closure
  4940 00003103 0F85A2310000            	jne L_error_non_closure
  4941 00003109 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4942 0000310C FF5009                  	call SOB_CLOSURE_CODE(rax)
  4943 0000310F 50                      	push rax
  4944 00003110 6A01                    	push 1	; arg count
  4945                                  	; preparing a non-tail-call
  4946                                  	; preparing a non-tail-call
  4947                                  	; preparing a non-tail-call
  4948                                  	; preparing a non-tail-call
  4949 00003112 488B4510                	mov rax, ENV
  4950 00003116 488B00                  	mov rax, qword [rax + 8 * 0]
  4951 00003119 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4952 0000311C 50                      	push rax
  4953 0000311D 6A01                    	push 1	; arg count
  4954 0000311F 488B4510                	mov rax, ENV
  4955 00003123 488B00                  	mov rax, qword [rax + 8 * 0]
  4956 00003126 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4957 00003129 803804                  	cmp byte [rax], T_closure
  4958 0000312C 0F8579310000            	jne L_error_non_closure
  4959 00003132 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4960 00003135 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4961 00003138 50                      	push rax
  4962 00003139 6A01                    	push 1	; arg count
  4963 0000313B 488B4510                	mov rax, ENV
  4964 0000313F 488B00                  	mov rax, qword [rax + 8 * 0]
  4965 00003142 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4966 00003145 803804                  	cmp byte [rax], T_closure
  4967 00003148 0F855D310000            	jne L_error_non_closure
  4968 0000314E FF7001                  	push SOB_CLOSURE_ENV(rax)
  4969 00003151 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4970 00003154 50                      	push rax
  4971 00003155 6A01                    	push 1	; arg count
  4972 00003157 488B4510                	mov rax, ENV
  4973 0000315B 488B00                  	mov rax, qword [rax + 8 * 0]
  4974 0000315E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4975 00003161 803804                  	cmp byte [rax], T_closure
  4976 00003164 0F8541310000            	jne L_error_non_closure
  4977 0000316A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4978 0000316D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4979 00003170 50                      	push rax
  4980 00003171 6A01                    	push 1	; arg count
  4981 00003173 488B4510                	mov rax, ENV
  4982 00003177 488B00                  	mov rax, qword [rax + 8 * 0]
  4983 0000317A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  4984 0000317D 803804                  	cmp byte [rax], T_closure
  4985 00003180 0F8525310000            	jne L_error_non_closure
  4986 00003186 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4987 00003189 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4988 0000318C 803804                  	cmp byte [rax], T_closure
  4989 0000318F 0F8516310000            	jne L_error_non_closure
  4990 00003195 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4991 00003198 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4992 0000319B 803804                  	cmp byte [rax], T_closure
  4993 0000319E 0F8507310000            	jne L_error_non_closure
  4994 000031A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4995 000031A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4996 000031AA 50                      	push rax
  4997 000031AB 6A01                    	push 1	; arg count
  4998                                  	; preparing a non-tail-call
  4999                                  	; preparing a non-tail-call
  5000                                  	; preparing a non-tail-call
  5001                                  	; preparing a non-tail-call
  5002 000031AD 488B4510                	mov rax, ENV
  5003 000031B1 488B00                  	mov rax, qword [rax + 8 * 0]
  5004 000031B4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5005 000031B7 50                      	push rax
  5006 000031B8 6A01                    	push 1	; arg count
  5007 000031BA 488B4510                	mov rax, ENV
  5008 000031BE 488B00                  	mov rax, qword [rax + 8 * 0]
  5009 000031C1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5010 000031C4 803804                  	cmp byte [rax], T_closure
  5011 000031C7 0F85DE300000            	jne L_error_non_closure
  5012 000031CD FF7001                  	push SOB_CLOSURE_ENV(rax)
  5013 000031D0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5014 000031D3 50                      	push rax
  5015 000031D4 6A01                    	push 1	; arg count
  5016 000031D6 488B4510                	mov rax, ENV
  5017 000031DA 488B00                  	mov rax, qword [rax + 8 * 0]
  5018 000031DD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5019 000031E0 803804                  	cmp byte [rax], T_closure
  5020 000031E3 0F85C2300000            	jne L_error_non_closure
  5021 000031E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5022 000031EC FF5009                  	call SOB_CLOSURE_CODE(rax)
  5023 000031EF 50                      	push rax
  5024 000031F0 6A01                    	push 1	; arg count
  5025 000031F2 488B4510                	mov rax, ENV
  5026 000031F6 488B00                  	mov rax, qword [rax + 8 * 0]
  5027 000031F9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5028 000031FC 803804                  	cmp byte [rax], T_closure
  5029 000031FF 0F85A6300000            	jne L_error_non_closure
  5030 00003205 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5031 00003208 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5032 0000320B 50                      	push rax
  5033 0000320C 6A01                    	push 1	; arg count
  5034 0000320E 488B4510                	mov rax, ENV
  5035 00003212 488B00                  	mov rax, qword [rax + 8 * 0]
  5036 00003215 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5037 00003218 803804                  	cmp byte [rax], T_closure
  5038 0000321B 0F858A300000            	jne L_error_non_closure
  5039 00003221 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5040 00003224 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5041 00003227 803804                  	cmp byte [rax], T_closure
  5042 0000322A 0F857B300000            	jne L_error_non_closure
  5043 00003230 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5044 00003233 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5045 00003236 803804                  	cmp byte [rax], T_closure
  5046 00003239 0F856C300000            	jne L_error_non_closure
  5047 0000323F FF7001                  	push SOB_CLOSURE_ENV(rax)
  5048 00003242 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5049 00003245 803804                  	cmp byte [rax], T_closure
  5050 00003248 0F855D300000            	jne L_error_non_closure
  5051 0000324E FF7001                  	push SOB_CLOSURE_ENV(rax)
  5052 00003251 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5053 00003254 803804                  	cmp byte [rax], T_closure
  5054 00003257 0F854E300000            	jne L_error_non_closure
  5055 0000325D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5056 00003260 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5057 00003263 50                      	push rax
  5058 00003264 6A01                    	push 1	; arg count
  5059                                  	; preparing a non-tail-call
  5060                                  	; preparing a non-tail-call
  5061                                  	; preparing a non-tail-call
  5062                                  	; preparing a non-tail-call
  5063                                  	; preparing a non-tail-call
  5064 00003266 488B4510                	mov rax, ENV
  5065 0000326A 488B00                  	mov rax, qword [rax + 8 * 0]
  5066 0000326D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5067 00003270 50                      	push rax
  5068 00003271 6A01                    	push 1	; arg count
  5069 00003273 488B4510                	mov rax, ENV
  5070 00003277 488B00                  	mov rax, qword [rax + 8 * 0]
  5071 0000327A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5072 0000327D 803804                  	cmp byte [rax], T_closure
  5073 00003280 0F8525300000            	jne L_error_non_closure
  5074 00003286 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5075 00003289 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5076 0000328C 50                      	push rax
  5077 0000328D 6A01                    	push 1	; arg count
  5078 0000328F 488B4510                	mov rax, ENV
  5079 00003293 488B00                  	mov rax, qword [rax + 8 * 0]
  5080 00003296 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5081 00003299 803804                  	cmp byte [rax], T_closure
  5082 0000329C 0F8509300000            	jne L_error_non_closure
  5083 000032A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5084 000032A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5085 000032A8 50                      	push rax
  5086 000032A9 6A01                    	push 1	; arg count
  5087 000032AB 488B4510                	mov rax, ENV
  5088 000032AF 488B00                  	mov rax, qword [rax + 8 * 0]
  5089 000032B2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5090 000032B5 803804                  	cmp byte [rax], T_closure
  5091 000032B8 0F85ED2F0000            	jne L_error_non_closure
  5092 000032BE FF7001                  	push SOB_CLOSURE_ENV(rax)
  5093 000032C1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5094 000032C4 50                      	push rax
  5095 000032C5 6A01                    	push 1	; arg count
  5096                                  	; preparing a non-tail-call
  5097                                  	; preparing a non-tail-call
  5098                                  	; preparing a non-tail-call
  5099                                  	; preparing a non-tail-call
  5100                                  	; preparing a non-tail-call
  5101                                  	; preparing a non-tail-call
  5102 000032C7 488B4510                	mov rax, ENV
  5103 000032CB 488B00                  	mov rax, qword [rax + 8 * 0]
  5104 000032CE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5105 000032D1 50                      	push rax
  5106 000032D2 6A01                    	push 1	; arg count
  5107 000032D4 488B4510                	mov rax, ENV
  5108 000032D8 488B00                  	mov rax, qword [rax + 8 * 0]
  5109 000032DB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5110 000032DE 803804                  	cmp byte [rax], T_closure
  5111 000032E1 0F85C42F0000            	jne L_error_non_closure
  5112 000032E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5113 000032EA FF5009                  	call SOB_CLOSURE_CODE(rax)
  5114 000032ED 50                      	push rax
  5115 000032EE 6A01                    	push 1	; arg count
  5116 000032F0 488B4510                	mov rax, ENV
  5117 000032F4 488B00                  	mov rax, qword [rax + 8 * 0]
  5118 000032F7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5119 000032FA 803804                  	cmp byte [rax], T_closure
  5120 000032FD 0F85A82F0000            	jne L_error_non_closure
  5121 00003303 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5122 00003306 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5123 00003309 50                      	push rax
  5124 0000330A 6A01                    	push 1	; arg count
  5125 0000330C 488B4510                	mov rax, ENV
  5126 00003310 488B00                  	mov rax, qword [rax + 8 * 0]
  5127 00003313 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5128 00003316 803804                  	cmp byte [rax], T_closure
  5129 00003319 0F858C2F0000            	jne L_error_non_closure
  5130 0000331F FF7001                  	push SOB_CLOSURE_ENV(rax)
  5131 00003322 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5132 00003325 50                      	push rax
  5133 00003326 6A01                    	push 1	; arg count
  5134 00003328 488B4510                	mov rax, ENV
  5135 0000332C 488B00                  	mov rax, qword [rax + 8 * 0]
  5136 0000332F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5137 00003332 803804                  	cmp byte [rax], T_closure
  5138 00003335 0F85702F0000            	jne L_error_non_closure
  5139 0000333B FF7001                  	push SOB_CLOSURE_ENV(rax)
  5140 0000333E FF5009                  	call SOB_CLOSURE_CODE(rax)
  5141 00003341 50                      	push rax
  5142 00003342 6A01                    	push 1	; arg count
  5143                                  	; preparing a non-tail-call
  5144                                  	; preparing a non-tail-call
  5145                                  	; preparing a non-tail-call
  5146 00003344 488B4510                	mov rax, ENV
  5147 00003348 488B00                  	mov rax, qword [rax + 8 * 0]
  5148 0000334B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5149 0000334E 50                      	push rax
  5150 0000334F 6A01                    	push 1	; arg count
  5151 00003351 488B4510                	mov rax, ENV
  5152 00003355 488B00                  	mov rax, qword [rax + 8 * 0]
  5153 00003358 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5154 0000335B 803804                  	cmp byte [rax], T_closure
  5155 0000335E 0F85472F0000            	jne L_error_non_closure
  5156 00003364 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5157 00003367 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5158 0000336A 50                      	push rax
  5159 0000336B 6A01                    	push 1	; arg count
  5160 0000336D 488B4510                	mov rax, ENV
  5161 00003371 488B00                  	mov rax, qword [rax + 8 * 0]
  5162 00003374 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5163 00003377 803804                  	cmp byte [rax], T_closure
  5164 0000337A 0F852B2F0000            	jne L_error_non_closure
  5165 00003380 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5166 00003383 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5167 00003386 50                      	push rax
  5168 00003387 6A01                    	push 1	; arg count
  5169 00003389 488B4510                	mov rax, ENV
  5170 0000338D 488B00                  	mov rax, qword [rax + 8 * 0]
  5171 00003390 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5172 00003393 803804                  	cmp byte [rax], T_closure
  5173 00003396 0F850F2F0000            	jne L_error_non_closure
  5174 0000339C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5175 0000339F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5176 000033A2 803804                  	cmp byte [rax], T_closure
  5177 000033A5 0F85002F0000            	jne L_error_non_closure
  5178 000033AB FF7001                  	push SOB_CLOSURE_ENV(rax)
  5179 000033AE FF5009                  	call SOB_CLOSURE_CODE(rax)
  5180 000033B1 50                      	push rax
  5181 000033B2 6A01                    	push 1	; arg count
  5182                                  	; preparing a non-tail-call
  5183                                  	; preparing a non-tail-call
  5184                                  	; preparing a non-tail-call
  5185                                  	; preparing a non-tail-call
  5186 000033B4 488B4510                	mov rax, ENV
  5187 000033B8 488B00                  	mov rax, qword [rax + 8 * 0]
  5188 000033BB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5189 000033BE 50                      	push rax
  5190 000033BF 6A01                    	push 1	; arg count
  5191 000033C1 488B4510                	mov rax, ENV
  5192 000033C5 488B00                  	mov rax, qword [rax + 8 * 0]
  5193 000033C8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5194 000033CB 803804                  	cmp byte [rax], T_closure
  5195 000033CE 0F85D72E0000            	jne L_error_non_closure
  5196 000033D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5197 000033D7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5198 000033DA 50                      	push rax
  5199 000033DB 6A01                    	push 1	; arg count
  5200 000033DD 488B4510                	mov rax, ENV
  5201 000033E1 488B00                  	mov rax, qword [rax + 8 * 0]
  5202 000033E4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5203 000033E7 803804                  	cmp byte [rax], T_closure
  5204 000033EA 0F85BB2E0000            	jne L_error_non_closure
  5205 000033F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5206 000033F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5207 000033F6 50                      	push rax
  5208 000033F7 6A01                    	push 1	; arg count
  5209 000033F9 488B4510                	mov rax, ENV
  5210 000033FD 488B00                  	mov rax, qword [rax + 8 * 0]
  5211 00003400 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5212 00003403 803804                  	cmp byte [rax], T_closure
  5213 00003406 0F859F2E0000            	jne L_error_non_closure
  5214 0000340C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5215 0000340F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5216 00003412 50                      	push rax
  5217 00003413 6A01                    	push 1	; arg count
  5218 00003415 488B4510                	mov rax, ENV
  5219 00003419 488B00                  	mov rax, qword [rax + 8 * 0]
  5220 0000341C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5221 0000341F 803804                  	cmp byte [rax], T_closure
  5222 00003422 0F85832E0000            	jne L_error_non_closure
  5223 00003428 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5224 0000342B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5225 0000342E 803804                  	cmp byte [rax], T_closure
  5226 00003431 0F85742E0000            	jne L_error_non_closure
  5227 00003437 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5228 0000343A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5229 0000343D 803804                  	cmp byte [rax], T_closure
  5230 00003440 0F85652E0000            	jne L_error_non_closure
  5231 00003446 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5232 00003449 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5233 0000344C 50                      	push rax
  5234 0000344D 6A01                    	push 1	; arg count
  5235                                  	; preparing a non-tail-call
  5236                                  	; preparing a non-tail-call
  5237                                  	; preparing a non-tail-call
  5238                                  	; preparing a non-tail-call
  5239 0000344F 488B4510                	mov rax, ENV
  5240 00003453 488B00                  	mov rax, qword [rax + 8 * 0]
  5241 00003456 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5242 00003459 50                      	push rax
  5243 0000345A 6A01                    	push 1	; arg count
  5244 0000345C 488B4510                	mov rax, ENV
  5245 00003460 488B00                  	mov rax, qword [rax + 8 * 0]
  5246 00003463 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5247 00003466 803804                  	cmp byte [rax], T_closure
  5248 00003469 0F853C2E0000            	jne L_error_non_closure
  5249 0000346F FF7001                  	push SOB_CLOSURE_ENV(rax)
  5250 00003472 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5251 00003475 50                      	push rax
  5252 00003476 6A01                    	push 1	; arg count
  5253 00003478 488B4510                	mov rax, ENV
  5254 0000347C 488B00                  	mov rax, qword [rax + 8 * 0]
  5255 0000347F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5256 00003482 803804                  	cmp byte [rax], T_closure
  5257 00003485 0F85202E0000            	jne L_error_non_closure
  5258 0000348B FF7001                  	push SOB_CLOSURE_ENV(rax)
  5259 0000348E FF5009                  	call SOB_CLOSURE_CODE(rax)
  5260 00003491 50                      	push rax
  5261 00003492 6A01                    	push 1	; arg count
  5262 00003494 488B4510                	mov rax, ENV
  5263 00003498 488B00                  	mov rax, qword [rax + 8 * 0]
  5264 0000349B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5265 0000349E 803804                  	cmp byte [rax], T_closure
  5266 000034A1 0F85042E0000            	jne L_error_non_closure
  5267 000034A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5268 000034AA FF5009                  	call SOB_CLOSURE_CODE(rax)
  5269 000034AD 50                      	push rax
  5270 000034AE 6A01                    	push 1	; arg count
  5271                                  	; preparing a non-tail-call
  5272                                  	; preparing a non-tail-call
  5273                                  	; preparing a non-tail-call
  5274                                  	; preparing a non-tail-call
  5275                                  	; preparing a non-tail-call
  5276                                  	; preparing a non-tail-call
  5277 000034B0 488B4510                	mov rax, ENV
  5278 000034B4 488B00                  	mov rax, qword [rax + 8 * 0]
  5279 000034B7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5280 000034BA 50                      	push rax
  5281 000034BB 6A01                    	push 1	; arg count
  5282 000034BD 488B4510                	mov rax, ENV
  5283 000034C1 488B00                  	mov rax, qword [rax + 8 * 0]
  5284 000034C4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5285 000034C7 803804                  	cmp byte [rax], T_closure
  5286 000034CA 0F85DB2D0000            	jne L_error_non_closure
  5287 000034D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5288 000034D3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5289 000034D6 50                      	push rax
  5290 000034D7 6A01                    	push 1	; arg count
  5291 000034D9 488B4510                	mov rax, ENV
  5292 000034DD 488B00                  	mov rax, qword [rax + 8 * 0]
  5293 000034E0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5294 000034E3 803804                  	cmp byte [rax], T_closure
  5295 000034E6 0F85BF2D0000            	jne L_error_non_closure
  5296 000034EC FF7001                  	push SOB_CLOSURE_ENV(rax)
  5297 000034EF FF5009                  	call SOB_CLOSURE_CODE(rax)
  5298 000034F2 50                      	push rax
  5299 000034F3 6A01                    	push 1	; arg count
  5300 000034F5 488B4510                	mov rax, ENV
  5301 000034F9 488B00                  	mov rax, qword [rax + 8 * 0]
  5302 000034FC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5303 000034FF 803804                  	cmp byte [rax], T_closure
  5304 00003502 0F85A32D0000            	jne L_error_non_closure
  5305 00003508 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5306 0000350B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5307 0000350E 50                      	push rax
  5308 0000350F 6A01                    	push 1	; arg count
  5309 00003511 488B4510                	mov rax, ENV
  5310 00003515 488B00                  	mov rax, qword [rax + 8 * 0]
  5311 00003518 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5312 0000351B 803804                  	cmp byte [rax], T_closure
  5313 0000351E 0F85872D0000            	jne L_error_non_closure
  5314 00003524 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5315 00003527 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5316 0000352A 50                      	push rax
  5317 0000352B 6A01                    	push 1	; arg count
  5318                                  	; preparing a non-tail-call
  5319                                  	; preparing a non-tail-call
  5320                                  	; preparing a non-tail-call
  5321 0000352D 488B4510                	mov rax, ENV
  5322 00003531 488B00                  	mov rax, qword [rax + 8 * 0]
  5323 00003534 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5324 00003537 50                      	push rax
  5325 00003538 6A01                    	push 1	; arg count
  5326 0000353A 488B4510                	mov rax, ENV
  5327 0000353E 488B00                  	mov rax, qword [rax + 8 * 0]
  5328 00003541 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5329 00003544 803804                  	cmp byte [rax], T_closure
  5330 00003547 0F855E2D0000            	jne L_error_non_closure
  5331 0000354D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5332 00003550 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5333 00003553 50                      	push rax
  5334 00003554 6A01                    	push 1	; arg count
  5335 00003556 488B4510                	mov rax, ENV
  5336 0000355A 488B00                  	mov rax, qword [rax + 8 * 0]
  5337 0000355D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5338 00003560 803804                  	cmp byte [rax], T_closure
  5339 00003563 0F85422D0000            	jne L_error_non_closure
  5340 00003569 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5341 0000356C FF5009                  	call SOB_CLOSURE_CODE(rax)
  5342 0000356F 50                      	push rax
  5343 00003570 6A01                    	push 1	; arg count
  5344 00003572 488B4510                	mov rax, ENV
  5345 00003576 488B00                  	mov rax, qword [rax + 8 * 0]
  5346 00003579 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5347 0000357C 803804                  	cmp byte [rax], T_closure
  5348 0000357F 0F85262D0000            	jne L_error_non_closure
  5349 00003585 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5350 00003588 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5351 0000358B 803804                  	cmp byte [rax], T_closure
  5352 0000358E 0F85172D0000            	jne L_error_non_closure
  5353 00003594 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5354 00003597 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5355 0000359A 50                      	push rax
  5356 0000359B 6A01                    	push 1	; arg count
  5357                                  	; preparing a non-tail-call
  5358                                  	; preparing a non-tail-call
  5359                                  	; preparing a non-tail-call
  5360                                  	; preparing a non-tail-call
  5361 0000359D 488B4510                	mov rax, ENV
  5362 000035A1 488B00                  	mov rax, qword [rax + 8 * 0]
  5363 000035A4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5364 000035A7 50                      	push rax
  5365 000035A8 6A01                    	push 1	; arg count
  5366 000035AA 488B4510                	mov rax, ENV
  5367 000035AE 488B00                  	mov rax, qword [rax + 8 * 0]
  5368 000035B1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5369 000035B4 803804                  	cmp byte [rax], T_closure
  5370 000035B7 0F85EE2C0000            	jne L_error_non_closure
  5371 000035BD FF7001                  	push SOB_CLOSURE_ENV(rax)
  5372 000035C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5373 000035C3 50                      	push rax
  5374 000035C4 6A01                    	push 1	; arg count
  5375 000035C6 488B4510                	mov rax, ENV
  5376 000035CA 488B00                  	mov rax, qword [rax + 8 * 0]
  5377 000035CD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5378 000035D0 803804                  	cmp byte [rax], T_closure
  5379 000035D3 0F85D22C0000            	jne L_error_non_closure
  5380 000035D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5381 000035DC FF5009                  	call SOB_CLOSURE_CODE(rax)
  5382 000035DF 50                      	push rax
  5383 000035E0 6A01                    	push 1	; arg count
  5384 000035E2 488B4510                	mov rax, ENV
  5385 000035E6 488B00                  	mov rax, qword [rax + 8 * 0]
  5386 000035E9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5387 000035EC 803804                  	cmp byte [rax], T_closure
  5388 000035EF 0F85B62C0000            	jne L_error_non_closure
  5389 000035F5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5390 000035F8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5391 000035FB 50                      	push rax
  5392 000035FC 6A01                    	push 1	; arg count
  5393 000035FE 488B4510                	mov rax, ENV
  5394 00003602 488B00                  	mov rax, qword [rax + 8 * 0]
  5395 00003605 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5396 00003608 803804                  	cmp byte [rax], T_closure
  5397 0000360B 0F859A2C0000            	jne L_error_non_closure
  5398 00003611 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5399 00003614 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5400 00003617 803804                  	cmp byte [rax], T_closure
  5401 0000361A 0F858B2C0000            	jne L_error_non_closure
  5402 00003620 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5403 00003623 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5404 00003626 803804                  	cmp byte [rax], T_closure
  5405 00003629 0F857C2C0000            	jne L_error_non_closure
  5406 0000362F FF7001                  	push SOB_CLOSURE_ENV(rax)
  5407 00003632 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5408 00003635 803804                  	cmp byte [rax], T_closure
  5409 00003638 0F856D2C0000            	jne L_error_non_closure
  5410 0000363E FF7001                  	push SOB_CLOSURE_ENV(rax)
  5411 00003641 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5412 00003644 803804                  	cmp byte [rax], T_closure
  5413 00003647 0F855E2C0000            	jne L_error_non_closure
  5414 0000364D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5415 00003650 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5416 00003653 50                      	push rax
  5417 00003654 6A01                    	push 1	; arg count
  5418                                  	; preparing a non-tail-call
  5419                                  	; preparing a non-tail-call
  5420                                  	; preparing a non-tail-call
  5421                                  	; preparing a non-tail-call
  5422 00003656 488B4510                	mov rax, ENV
  5423 0000365A 488B00                  	mov rax, qword [rax + 8 * 0]
  5424 0000365D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5425 00003660 50                      	push rax
  5426 00003661 6A01                    	push 1	; arg count
  5427 00003663 488B4510                	mov rax, ENV
  5428 00003667 488B00                  	mov rax, qword [rax + 8 * 0]
  5429 0000366A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5430 0000366D 803804                  	cmp byte [rax], T_closure
  5431 00003670 0F85352C0000            	jne L_error_non_closure
  5432 00003676 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5433 00003679 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5434 0000367C 50                      	push rax
  5435 0000367D 6A01                    	push 1	; arg count
  5436 0000367F 488B4510                	mov rax, ENV
  5437 00003683 488B00                  	mov rax, qword [rax + 8 * 0]
  5438 00003686 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5439 00003689 803804                  	cmp byte [rax], T_closure
  5440 0000368C 0F85192C0000            	jne L_error_non_closure
  5441 00003692 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5442 00003695 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5443 00003698 50                      	push rax
  5444 00003699 6A01                    	push 1	; arg count
  5445 0000369B 488B4510                	mov rax, ENV
  5446 0000369F 488B00                  	mov rax, qword [rax + 8 * 0]
  5447 000036A2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5448 000036A5 803804                  	cmp byte [rax], T_closure
  5449 000036A8 0F85FD2B0000            	jne L_error_non_closure
  5450 000036AE FF7001                  	push SOB_CLOSURE_ENV(rax)
  5451 000036B1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5452 000036B4 50                      	push rax
  5453 000036B5 6A01                    	push 1	; arg count
  5454 000036B7 488B4510                	mov rax, ENV
  5455 000036BB 488B00                  	mov rax, qword [rax + 8 * 0]
  5456 000036BE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5457 000036C1 803804                  	cmp byte [rax], T_closure
  5458 000036C4 0F85E12B0000            	jne L_error_non_closure
  5459 000036CA FF7001                  	push SOB_CLOSURE_ENV(rax)
  5460 000036CD FF5009                  	call SOB_CLOSURE_CODE(rax)
  5461 000036D0 803804                  	cmp byte [rax], T_closure
  5462 000036D3 0F85D22B0000            	jne L_error_non_closure
  5463 000036D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5464 000036DC FF5009                  	call SOB_CLOSURE_CODE(rax)
  5465 000036DF 803804                  	cmp byte [rax], T_closure
  5466 000036E2 0F85C32B0000            	jne L_error_non_closure
  5467 000036E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5468 000036EB FF5009                  	call SOB_CLOSURE_CODE(rax)
  5469 000036EE 50                      	push rax
  5470 000036EF 6A01                    	push 1	; arg count
  5471                                  	; preparing a non-tail-call
  5472                                  	; preparing a non-tail-call
  5473                                  	; preparing a non-tail-call
  5474                                  	; preparing a non-tail-call
  5475                                  	; preparing a non-tail-call
  5476                                  	; preparing a non-tail-call
  5477                                  	; preparing a non-tail-call
  5478 000036F1 488B4510                	mov rax, ENV
  5479 000036F5 488B00                  	mov rax, qword [rax + 8 * 0]
  5480 000036F8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5481 000036FB 50                      	push rax
  5482 000036FC 6A01                    	push 1	; arg count
  5483 000036FE 488B4510                	mov rax, ENV
  5484 00003702 488B00                  	mov rax, qword [rax + 8 * 0]
  5485 00003705 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5486 00003708 803804                  	cmp byte [rax], T_closure
  5487 0000370B 0F859A2B0000            	jne L_error_non_closure
  5488 00003711 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5489 00003714 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5490 00003717 50                      	push rax
  5491 00003718 6A01                    	push 1	; arg count
  5492 0000371A 488B4510                	mov rax, ENV
  5493 0000371E 488B00                  	mov rax, qword [rax + 8 * 0]
  5494 00003721 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5495 00003724 803804                  	cmp byte [rax], T_closure
  5496 00003727 0F857E2B0000            	jne L_error_non_closure
  5497 0000372D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5498 00003730 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5499 00003733 50                      	push rax
  5500 00003734 6A01                    	push 1	; arg count
  5501 00003736 488B4510                	mov rax, ENV
  5502 0000373A 488B00                  	mov rax, qword [rax + 8 * 0]
  5503 0000373D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5504 00003740 803804                  	cmp byte [rax], T_closure
  5505 00003743 0F85622B0000            	jne L_error_non_closure
  5506 00003749 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5507 0000374C FF5009                  	call SOB_CLOSURE_CODE(rax)
  5508 0000374F 50                      	push rax
  5509 00003750 6A01                    	push 1	; arg count
  5510                                  	; preparing a non-tail-call
  5511                                  	; preparing a non-tail-call
  5512                                  	; preparing a non-tail-call
  5513                                  	; preparing a non-tail-call
  5514                                  	; preparing a non-tail-call
  5515 00003752 488B4510                	mov rax, ENV
  5516 00003756 488B00                  	mov rax, qword [rax + 8 * 0]
  5517 00003759 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5518 0000375C 50                      	push rax
  5519 0000375D 6A01                    	push 1	; arg count
  5520 0000375F 488B4510                	mov rax, ENV
  5521 00003763 488B00                  	mov rax, qword [rax + 8 * 0]
  5522 00003766 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5523 00003769 803804                  	cmp byte [rax], T_closure
  5524 0000376C 0F85392B0000            	jne L_error_non_closure
  5525 00003772 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5526 00003775 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5527 00003778 50                      	push rax
  5528 00003779 6A01                    	push 1	; arg count
  5529 0000377B 488B4510                	mov rax, ENV
  5530 0000377F 488B00                  	mov rax, qword [rax + 8 * 0]
  5531 00003782 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5532 00003785 803804                  	cmp byte [rax], T_closure
  5533 00003788 0F851D2B0000            	jne L_error_non_closure
  5534 0000378E FF7001                  	push SOB_CLOSURE_ENV(rax)
  5535 00003791 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5536 00003794 50                      	push rax
  5537 00003795 6A01                    	push 1	; arg count
  5538 00003797 488B4510                	mov rax, ENV
  5539 0000379B 488B00                  	mov rax, qword [rax + 8 * 0]
  5540 0000379E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5541 000037A1 803804                  	cmp byte [rax], T_closure
  5542 000037A4 0F85012B0000            	jne L_error_non_closure
  5543 000037AA FF7001                  	push SOB_CLOSURE_ENV(rax)
  5544 000037AD FF5009                  	call SOB_CLOSURE_CODE(rax)
  5545 000037B0 50                      	push rax
  5546 000037B1 6A01                    	push 1	; arg count
  5547                                  	; preparing a non-tail-call
  5548                                  	; preparing a non-tail-call
  5549                                  	; preparing a non-tail-call
  5550                                  	; preparing a non-tail-call
  5551 000037B3 488B4510                	mov rax, ENV
  5552 000037B7 488B00                  	mov rax, qword [rax + 8 * 0]
  5553 000037BA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5554 000037BD 50                      	push rax
  5555 000037BE 6A01                    	push 1	; arg count
  5556 000037C0 488B4510                	mov rax, ENV
  5557 000037C4 488B00                  	mov rax, qword [rax + 8 * 0]
  5558 000037C7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5559 000037CA 803804                  	cmp byte [rax], T_closure
  5560 000037CD 0F85D82A0000            	jne L_error_non_closure
  5561 000037D3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5562 000037D6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5563 000037D9 50                      	push rax
  5564 000037DA 6A01                    	push 1	; arg count
  5565 000037DC 488B4510                	mov rax, ENV
  5566 000037E0 488B00                  	mov rax, qword [rax + 8 * 0]
  5567 000037E3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5568 000037E6 803804                  	cmp byte [rax], T_closure
  5569 000037E9 0F85BC2A0000            	jne L_error_non_closure
  5570 000037EF FF7001                  	push SOB_CLOSURE_ENV(rax)
  5571 000037F2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5572 000037F5 50                      	push rax
  5573 000037F6 6A01                    	push 1	; arg count
  5574 000037F8 488B4510                	mov rax, ENV
  5575 000037FC 488B00                  	mov rax, qword [rax + 8 * 0]
  5576 000037FF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5577 00003802 803804                  	cmp byte [rax], T_closure
  5578 00003805 0F85A02A0000            	jne L_error_non_closure
  5579 0000380B FF7001                  	push SOB_CLOSURE_ENV(rax)
  5580 0000380E FF5009                  	call SOB_CLOSURE_CODE(rax)
  5581 00003811 50                      	push rax
  5582 00003812 6A01                    	push 1	; arg count
  5583                                  	; preparing a non-tail-call
  5584                                  	; preparing a non-tail-call
  5585                                  	; preparing a non-tail-call
  5586                                  	; preparing a non-tail-call
  5587 00003814 488B4510                	mov rax, ENV
  5588 00003818 488B00                  	mov rax, qword [rax + 8 * 0]
  5589 0000381B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5590 0000381E 50                      	push rax
  5591 0000381F 6A01                    	push 1	; arg count
  5592 00003821 488B4510                	mov rax, ENV
  5593 00003825 488B00                  	mov rax, qword [rax + 8 * 0]
  5594 00003828 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5595 0000382B 803804                  	cmp byte [rax], T_closure
  5596 0000382E 0F85772A0000            	jne L_error_non_closure
  5597 00003834 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5598 00003837 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5599 0000383A 50                      	push rax
  5600 0000383B 6A01                    	push 1	; arg count
  5601 0000383D 488B4510                	mov rax, ENV
  5602 00003841 488B00                  	mov rax, qword [rax + 8 * 0]
  5603 00003844 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5604 00003847 803804                  	cmp byte [rax], T_closure
  5605 0000384A 0F855B2A0000            	jne L_error_non_closure
  5606 00003850 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5607 00003853 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5608 00003856 50                      	push rax
  5609 00003857 6A01                    	push 1	; arg count
  5610 00003859 488B4510                	mov rax, ENV
  5611 0000385D 488B00                  	mov rax, qword [rax + 8 * 0]
  5612 00003860 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5613 00003863 803804                  	cmp byte [rax], T_closure
  5614 00003866 0F853F2A0000            	jne L_error_non_closure
  5615 0000386C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5616 0000386F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5617 00003872 50                      	push rax
  5618 00003873 6A01                    	push 1	; arg count
  5619 00003875 488B4510                	mov rax, ENV
  5620 00003879 488B00                  	mov rax, qword [rax + 8 * 0]
  5621 0000387C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5622 0000387F 803804                  	cmp byte [rax], T_closure
  5623 00003882 0F85232A0000            	jne L_error_non_closure
  5624 00003888 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5625 0000388B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5626 0000388E 803804                  	cmp byte [rax], T_closure
  5627 00003891 0F85142A0000            	jne L_error_non_closure
  5628 00003897 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5629 0000389A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5630 0000389D 803804                  	cmp byte [rax], T_closure
  5631 000038A0 0F85052A0000            	jne L_error_non_closure
  5632 000038A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5633 000038A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5634 000038AC 50                      	push rax
  5635 000038AD 6A01                    	push 1	; arg count
  5636                                  	; preparing a non-tail-call
  5637                                  	; preparing a non-tail-call
  5638                                  	; preparing a non-tail-call
  5639                                  	; preparing a non-tail-call
  5640                                  	; preparing a non-tail-call
  5641 000038AF 488B4510                	mov rax, ENV
  5642 000038B3 488B00                  	mov rax, qword [rax + 8 * 0]
  5643 000038B6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5644 000038B9 50                      	push rax
  5645 000038BA 6A01                    	push 1	; arg count
  5646 000038BC 488B4510                	mov rax, ENV
  5647 000038C0 488B00                  	mov rax, qword [rax + 8 * 0]
  5648 000038C3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5649 000038C6 803804                  	cmp byte [rax], T_closure
  5650 000038C9 0F85DC290000            	jne L_error_non_closure
  5651 000038CF FF7001                  	push SOB_CLOSURE_ENV(rax)
  5652 000038D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5653 000038D5 50                      	push rax
  5654 000038D6 6A01                    	push 1	; arg count
  5655 000038D8 488B4510                	mov rax, ENV
  5656 000038DC 488B00                  	mov rax, qword [rax + 8 * 0]
  5657 000038DF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5658 000038E2 803804                  	cmp byte [rax], T_closure
  5659 000038E5 0F85C0290000            	jne L_error_non_closure
  5660 000038EB FF7001                  	push SOB_CLOSURE_ENV(rax)
  5661 000038EE FF5009                  	call SOB_CLOSURE_CODE(rax)
  5662 000038F1 50                      	push rax
  5663 000038F2 6A01                    	push 1	; arg count
  5664 000038F4 488B4510                	mov rax, ENV
  5665 000038F8 488B00                  	mov rax, qword [rax + 8 * 0]
  5666 000038FB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5667 000038FE 803804                  	cmp byte [rax], T_closure
  5668 00003901 0F85A4290000            	jne L_error_non_closure
  5669 00003907 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5670 0000390A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5671 0000390D 50                      	push rax
  5672 0000390E 6A01                    	push 1	; arg count
  5673                                  	; preparing a non-tail-call
  5674                                  	; preparing a non-tail-call
  5675                                  	; preparing a non-tail-call
  5676 00003910 488B4510                	mov rax, ENV
  5677 00003914 488B00                  	mov rax, qword [rax + 8 * 0]
  5678 00003917 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5679 0000391A 50                      	push rax
  5680 0000391B 6A01                    	push 1	; arg count
  5681 0000391D 488B4510                	mov rax, ENV
  5682 00003921 488B00                  	mov rax, qword [rax + 8 * 0]
  5683 00003924 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5684 00003927 803804                  	cmp byte [rax], T_closure
  5685 0000392A 0F857B290000            	jne L_error_non_closure
  5686 00003930 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5687 00003933 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5688 00003936 50                      	push rax
  5689 00003937 6A01                    	push 1	; arg count
  5690 00003939 488B4510                	mov rax, ENV
  5691 0000393D 488B00                  	mov rax, qword [rax + 8 * 0]
  5692 00003940 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5693 00003943 803804                  	cmp byte [rax], T_closure
  5694 00003946 0F855F290000            	jne L_error_non_closure
  5695 0000394C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5696 0000394F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5697 00003952 50                      	push rax
  5698 00003953 6A01                    	push 1	; arg count
  5699 00003955 488B4510                	mov rax, ENV
  5700 00003959 488B00                  	mov rax, qword [rax + 8 * 0]
  5701 0000395C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5702 0000395F 803804                  	cmp byte [rax], T_closure
  5703 00003962 0F8543290000            	jne L_error_non_closure
  5704 00003968 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5705 0000396B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5706 0000396E 803804                  	cmp byte [rax], T_closure
  5707 00003971 0F8534290000            	jne L_error_non_closure
  5708 00003977 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5709 0000397A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5710 0000397D 50                      	push rax
  5711 0000397E 6A01                    	push 1	; arg count
  5712                                  	; preparing a non-tail-call
  5713                                  	; preparing a non-tail-call
  5714                                  	; preparing a non-tail-call
  5715                                  	; preparing a non-tail-call
  5716                                  	; preparing a non-tail-call
  5717                                  	; preparing a non-tail-call
  5718                                  	; preparing a non-tail-call
  5719 00003980 488B4510                	mov rax, ENV
  5720 00003984 488B00                  	mov rax, qword [rax + 8 * 0]
  5721 00003987 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5722 0000398A 50                      	push rax
  5723 0000398B 6A01                    	push 1	; arg count
  5724 0000398D 488B4510                	mov rax, ENV
  5725 00003991 488B00                  	mov rax, qword [rax + 8 * 0]
  5726 00003994 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5727 00003997 803804                  	cmp byte [rax], T_closure
  5728 0000399A 0F850B290000            	jne L_error_non_closure
  5729 000039A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5730 000039A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5731 000039A6 50                      	push rax
  5732 000039A7 6A01                    	push 1	; arg count
  5733 000039A9 488B4510                	mov rax, ENV
  5734 000039AD 488B00                  	mov rax, qword [rax + 8 * 0]
  5735 000039B0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5736 000039B3 803804                  	cmp byte [rax], T_closure
  5737 000039B6 0F85EF280000            	jne L_error_non_closure
  5738 000039BC FF7001                  	push SOB_CLOSURE_ENV(rax)
  5739 000039BF FF5009                  	call SOB_CLOSURE_CODE(rax)
  5740 000039C2 50                      	push rax
  5741 000039C3 6A01                    	push 1	; arg count
  5742 000039C5 488B4510                	mov rax, ENV
  5743 000039C9 488B00                  	mov rax, qword [rax + 8 * 0]
  5744 000039CC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5745 000039CF 803804                  	cmp byte [rax], T_closure
  5746 000039D2 0F85D3280000            	jne L_error_non_closure
  5747 000039D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5748 000039DB FF5009                  	call SOB_CLOSURE_CODE(rax)
  5749 000039DE 50                      	push rax
  5750 000039DF 6A01                    	push 1	; arg count
  5751 000039E1 488B4510                	mov rax, ENV
  5752 000039E5 488B00                  	mov rax, qword [rax + 8 * 0]
  5753 000039E8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5754 000039EB 803804                  	cmp byte [rax], T_closure
  5755 000039EE 0F85B7280000            	jne L_error_non_closure
  5756 000039F4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5757 000039F7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5758 000039FA 50                      	push rax
  5759 000039FB 6A01                    	push 1	; arg count
  5760                                  	; preparing a non-tail-call
  5761                                  	; preparing a non-tail-call
  5762                                  	; preparing a non-tail-call
  5763                                  	; preparing a non-tail-call
  5764                                  	; preparing a non-tail-call
  5765 000039FD 488B4510                	mov rax, ENV
  5766 00003A01 488B00                  	mov rax, qword [rax + 8 * 0]
  5767 00003A04 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5768 00003A07 50                      	push rax
  5769 00003A08 6A01                    	push 1	; arg count
  5770 00003A0A 488B4510                	mov rax, ENV
  5771 00003A0E 488B00                  	mov rax, qword [rax + 8 * 0]
  5772 00003A11 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5773 00003A14 803804                  	cmp byte [rax], T_closure
  5774 00003A17 0F858E280000            	jne L_error_non_closure
  5775 00003A1D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5776 00003A20 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5777 00003A23 50                      	push rax
  5778 00003A24 6A01                    	push 1	; arg count
  5779 00003A26 488B4510                	mov rax, ENV
  5780 00003A2A 488B00                  	mov rax, qword [rax + 8 * 0]
  5781 00003A2D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5782 00003A30 803804                  	cmp byte [rax], T_closure
  5783 00003A33 0F8572280000            	jne L_error_non_closure
  5784 00003A39 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5785 00003A3C FF5009                  	call SOB_CLOSURE_CODE(rax)
  5786 00003A3F 50                      	push rax
  5787 00003A40 6A01                    	push 1	; arg count
  5788 00003A42 488B4510                	mov rax, ENV
  5789 00003A46 488B00                  	mov rax, qword [rax + 8 * 0]
  5790 00003A49 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5791 00003A4C 803804                  	cmp byte [rax], T_closure
  5792 00003A4F 0F8556280000            	jne L_error_non_closure
  5793 00003A55 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5794 00003A58 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5795 00003A5B 50                      	push rax
  5796 00003A5C 6A01                    	push 1	; arg count
  5797                                  	; preparing a non-tail-call
  5798                                  	; preparing a non-tail-call
  5799                                  	; preparing a non-tail-call
  5800 00003A5E 488B4510                	mov rax, ENV
  5801 00003A62 488B00                  	mov rax, qword [rax + 8 * 0]
  5802 00003A65 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5803 00003A68 50                      	push rax
  5804 00003A69 6A01                    	push 1	; arg count
  5805 00003A6B 488B4510                	mov rax, ENV
  5806 00003A6F 488B00                  	mov rax, qword [rax + 8 * 0]
  5807 00003A72 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5808 00003A75 803804                  	cmp byte [rax], T_closure
  5809 00003A78 0F852D280000            	jne L_error_non_closure
  5810 00003A7E FF7001                  	push SOB_CLOSURE_ENV(rax)
  5811 00003A81 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5812 00003A84 50                      	push rax
  5813 00003A85 6A01                    	push 1	; arg count
  5814 00003A87 488B4510                	mov rax, ENV
  5815 00003A8B 488B00                  	mov rax, qword [rax + 8 * 0]
  5816 00003A8E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5817 00003A91 803804                  	cmp byte [rax], T_closure
  5818 00003A94 0F8511280000            	jne L_error_non_closure
  5819 00003A9A FF7001                  	push SOB_CLOSURE_ENV(rax)
  5820 00003A9D FF5009                  	call SOB_CLOSURE_CODE(rax)
  5821 00003AA0 50                      	push rax
  5822 00003AA1 6A01                    	push 1	; arg count
  5823 00003AA3 488B4510                	mov rax, ENV
  5824 00003AA7 488B00                  	mov rax, qword [rax + 8 * 0]
  5825 00003AAA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5826 00003AAD 803804                  	cmp byte [rax], T_closure
  5827 00003AB0 0F85F5270000            	jne L_error_non_closure
  5828 00003AB6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5829 00003AB9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5830 00003ABC 803804                  	cmp byte [rax], T_closure
  5831 00003ABF 0F85E6270000            	jne L_error_non_closure
  5832 00003AC5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5833 00003AC8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5834 00003ACB 50                      	push rax
  5835 00003ACC 6A01                    	push 1	; arg count
  5836                                  	; preparing a non-tail-call
  5837                                  	; preparing a non-tail-call
  5838                                  	; preparing a non-tail-call
  5839                                  	; preparing a non-tail-call
  5840 00003ACE 488B4510                	mov rax, ENV
  5841 00003AD2 488B00                  	mov rax, qword [rax + 8 * 0]
  5842 00003AD5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5843 00003AD8 50                      	push rax
  5844 00003AD9 6A01                    	push 1	; arg count
  5845 00003ADB 488B4510                	mov rax, ENV
  5846 00003ADF 488B00                  	mov rax, qword [rax + 8 * 0]
  5847 00003AE2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5848 00003AE5 803804                  	cmp byte [rax], T_closure
  5849 00003AE8 0F85BD270000            	jne L_error_non_closure
  5850 00003AEE FF7001                  	push SOB_CLOSURE_ENV(rax)
  5851 00003AF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5852 00003AF4 50                      	push rax
  5853 00003AF5 6A01                    	push 1	; arg count
  5854 00003AF7 488B4510                	mov rax, ENV
  5855 00003AFB 488B00                  	mov rax, qword [rax + 8 * 0]
  5856 00003AFE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5857 00003B01 803804                  	cmp byte [rax], T_closure
  5858 00003B04 0F85A1270000            	jne L_error_non_closure
  5859 00003B0A FF7001                  	push SOB_CLOSURE_ENV(rax)
  5860 00003B0D FF5009                  	call SOB_CLOSURE_CODE(rax)
  5861 00003B10 50                      	push rax
  5862 00003B11 6A01                    	push 1	; arg count
  5863 00003B13 488B4510                	mov rax, ENV
  5864 00003B17 488B00                  	mov rax, qword [rax + 8 * 0]
  5865 00003B1A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5866 00003B1D 803804                  	cmp byte [rax], T_closure
  5867 00003B20 0F8585270000            	jne L_error_non_closure
  5868 00003B26 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5869 00003B29 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5870 00003B2C 50                      	push rax
  5871 00003B2D 6A01                    	push 1	; arg count
  5872 00003B2F 488B4510                	mov rax, ENV
  5873 00003B33 488B00                  	mov rax, qword [rax + 8 * 0]
  5874 00003B36 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5875 00003B39 803804                  	cmp byte [rax], T_closure
  5876 00003B3C 0F8569270000            	jne L_error_non_closure
  5877 00003B42 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5878 00003B45 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5879 00003B48 803804                  	cmp byte [rax], T_closure
  5880 00003B4B 0F855A270000            	jne L_error_non_closure
  5881 00003B51 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5882 00003B54 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5883 00003B57 803804                  	cmp byte [rax], T_closure
  5884 00003B5A 0F854B270000            	jne L_error_non_closure
  5885 00003B60 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5886 00003B63 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5887 00003B66 50                      	push rax
  5888 00003B67 6A01                    	push 1	; arg count
  5889                                  	; preparing a non-tail-call
  5890                                  	; preparing a non-tail-call
  5891                                  	; preparing a non-tail-call
  5892                                  	; preparing a non-tail-call
  5893                                  	; preparing a non-tail-call
  5894                                  	; preparing a non-tail-call
  5895 00003B69 488B4510                	mov rax, ENV
  5896 00003B6D 488B00                  	mov rax, qword [rax + 8 * 0]
  5897 00003B70 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5898 00003B73 50                      	push rax
  5899 00003B74 6A01                    	push 1	; arg count
  5900 00003B76 488B4510                	mov rax, ENV
  5901 00003B7A 488B00                  	mov rax, qword [rax + 8 * 0]
  5902 00003B7D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5903 00003B80 803804                  	cmp byte [rax], T_closure
  5904 00003B83 0F8522270000            	jne L_error_non_closure
  5905 00003B89 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5906 00003B8C FF5009                  	call SOB_CLOSURE_CODE(rax)
  5907 00003B8F 50                      	push rax
  5908 00003B90 6A01                    	push 1	; arg count
  5909 00003B92 488B4510                	mov rax, ENV
  5910 00003B96 488B00                  	mov rax, qword [rax + 8 * 0]
  5911 00003B99 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5912 00003B9C 803804                  	cmp byte [rax], T_closure
  5913 00003B9F 0F8506270000            	jne L_error_non_closure
  5914 00003BA5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5915 00003BA8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5916 00003BAB 50                      	push rax
  5917 00003BAC 6A01                    	push 1	; arg count
  5918 00003BAE 488B4510                	mov rax, ENV
  5919 00003BB2 488B00                  	mov rax, qword [rax + 8 * 0]
  5920 00003BB5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5921 00003BB8 803804                  	cmp byte [rax], T_closure
  5922 00003BBB 0F85EA260000            	jne L_error_non_closure
  5923 00003BC1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5924 00003BC4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5925 00003BC7 50                      	push rax
  5926 00003BC8 6A01                    	push 1	; arg count
  5927 00003BCA 488B4510                	mov rax, ENV
  5928 00003BCE 488B00                  	mov rax, qword [rax + 8 * 0]
  5929 00003BD1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5930 00003BD4 803804                  	cmp byte [rax], T_closure
  5931 00003BD7 0F85CE260000            	jne L_error_non_closure
  5932 00003BDD FF7001                  	push SOB_CLOSURE_ENV(rax)
  5933 00003BE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5934 00003BE3 50                      	push rax
  5935 00003BE4 6A01                    	push 1	; arg count
  5936                                  	; preparing a non-tail-call
  5937                                  	; preparing a non-tail-call
  5938                                  	; preparing a non-tail-call
  5939 00003BE6 488B4510                	mov rax, ENV
  5940 00003BEA 488B00                  	mov rax, qword [rax + 8 * 0]
  5941 00003BED 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5942 00003BF0 50                      	push rax
  5943 00003BF1 6A01                    	push 1	; arg count
  5944 00003BF3 488B4510                	mov rax, ENV
  5945 00003BF7 488B00                  	mov rax, qword [rax + 8 * 0]
  5946 00003BFA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5947 00003BFD 803804                  	cmp byte [rax], T_closure
  5948 00003C00 0F85A5260000            	jne L_error_non_closure
  5949 00003C06 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5950 00003C09 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5951 00003C0C 50                      	push rax
  5952 00003C0D 6A01                    	push 1	; arg count
  5953 00003C0F 488B4510                	mov rax, ENV
  5954 00003C13 488B00                  	mov rax, qword [rax + 8 * 0]
  5955 00003C16 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5956 00003C19 803804                  	cmp byte [rax], T_closure
  5957 00003C1C 0F8589260000            	jne L_error_non_closure
  5958 00003C22 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5959 00003C25 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5960 00003C28 50                      	push rax
  5961 00003C29 6A01                    	push 1	; arg count
  5962 00003C2B 488B4510                	mov rax, ENV
  5963 00003C2F 488B00                  	mov rax, qword [rax + 8 * 0]
  5964 00003C32 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5965 00003C35 803804                  	cmp byte [rax], T_closure
  5966 00003C38 0F856D260000            	jne L_error_non_closure
  5967 00003C3E FF7001                  	push SOB_CLOSURE_ENV(rax)
  5968 00003C41 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5969 00003C44 803804                  	cmp byte [rax], T_closure
  5970 00003C47 0F855E260000            	jne L_error_non_closure
  5971 00003C4D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5972 00003C50 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5973 00003C53 50                      	push rax
  5974 00003C54 6A01                    	push 1	; arg count
  5975                                  	; preparing a non-tail-call
  5976                                  	; preparing a non-tail-call
  5977                                  	; preparing a non-tail-call
  5978                                  	; preparing a non-tail-call
  5979 00003C56 488B4510                	mov rax, ENV
  5980 00003C5A 488B00                  	mov rax, qword [rax + 8 * 0]
  5981 00003C5D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5982 00003C60 50                      	push rax
  5983 00003C61 6A01                    	push 1	; arg count
  5984 00003C63 488B4510                	mov rax, ENV
  5985 00003C67 488B00                  	mov rax, qword [rax + 8 * 0]
  5986 00003C6A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5987 00003C6D 803804                  	cmp byte [rax], T_closure
  5988 00003C70 0F8535260000            	jne L_error_non_closure
  5989 00003C76 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5990 00003C79 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5991 00003C7C 50                      	push rax
  5992 00003C7D 6A01                    	push 1	; arg count
  5993 00003C7F 488B4510                	mov rax, ENV
  5994 00003C83 488B00                  	mov rax, qword [rax + 8 * 0]
  5995 00003C86 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  5996 00003C89 803804                  	cmp byte [rax], T_closure
  5997 00003C8C 0F8519260000            	jne L_error_non_closure
  5998 00003C92 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5999 00003C95 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6000 00003C98 50                      	push rax
  6001 00003C99 6A01                    	push 1	; arg count
  6002 00003C9B 488B4510                	mov rax, ENV
  6003 00003C9F 488B00                  	mov rax, qword [rax + 8 * 0]
  6004 00003CA2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6005 00003CA5 803804                  	cmp byte [rax], T_closure
  6006 00003CA8 0F85FD250000            	jne L_error_non_closure
  6007 00003CAE FF7001                  	push SOB_CLOSURE_ENV(rax)
  6008 00003CB1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6009 00003CB4 50                      	push rax
  6010 00003CB5 6A01                    	push 1	; arg count
  6011 00003CB7 488B4510                	mov rax, ENV
  6012 00003CBB 488B00                  	mov rax, qword [rax + 8 * 0]
  6013 00003CBE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6014 00003CC1 803804                  	cmp byte [rax], T_closure
  6015 00003CC4 0F85E1250000            	jne L_error_non_closure
  6016 00003CCA FF7001                  	push SOB_CLOSURE_ENV(rax)
  6017 00003CCD FF5009                  	call SOB_CLOSURE_CODE(rax)
  6018 00003CD0 803804                  	cmp byte [rax], T_closure
  6019 00003CD3 0F85D2250000            	jne L_error_non_closure
  6020 00003CD9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6021 00003CDC FF5009                  	call SOB_CLOSURE_CODE(rax)
  6022 00003CDF 803804                  	cmp byte [rax], T_closure
  6023 00003CE2 0F85C3250000            	jne L_error_non_closure
  6024 00003CE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6025 00003CEB FF5009                  	call SOB_CLOSURE_CODE(rax)
  6026 00003CEE 50                      	push rax
  6027 00003CEF 6A01                    	push 1	; arg count
  6028                                  	; preparing a non-tail-call
  6029                                  	; preparing a non-tail-call
  6030                                  	; preparing a non-tail-call
  6031                                  	; preparing a non-tail-call
  6032 00003CF1 488B4510                	mov rax, ENV
  6033 00003CF5 488B00                  	mov rax, qword [rax + 8 * 0]
  6034 00003CF8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6035 00003CFB 50                      	push rax
  6036 00003CFC 6A01                    	push 1	; arg count
  6037 00003CFE 488B4510                	mov rax, ENV
  6038 00003D02 488B00                  	mov rax, qword [rax + 8 * 0]
  6039 00003D05 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6040 00003D08 803804                  	cmp byte [rax], T_closure
  6041 00003D0B 0F859A250000            	jne L_error_non_closure
  6042 00003D11 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6043 00003D14 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6044 00003D17 50                      	push rax
  6045 00003D18 6A01                    	push 1	; arg count
  6046 00003D1A 488B4510                	mov rax, ENV
  6047 00003D1E 488B00                  	mov rax, qword [rax + 8 * 0]
  6048 00003D21 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6049 00003D24 803804                  	cmp byte [rax], T_closure
  6050 00003D27 0F857E250000            	jne L_error_non_closure
  6051 00003D2D FF7001                  	push SOB_CLOSURE_ENV(rax)
  6052 00003D30 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6053 00003D33 50                      	push rax
  6054 00003D34 6A01                    	push 1	; arg count
  6055 00003D36 488B4510                	mov rax, ENV
  6056 00003D3A 488B00                  	mov rax, qword [rax + 8 * 0]
  6057 00003D3D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6058 00003D40 803804                  	cmp byte [rax], T_closure
  6059 00003D43 0F8562250000            	jne L_error_non_closure
  6060 00003D49 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6061 00003D4C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6062 00003D4F 50                      	push rax
  6063 00003D50 6A01                    	push 1	; arg count
  6064 00003D52 488B4510                	mov rax, ENV
  6065 00003D56 488B00                  	mov rax, qword [rax + 8 * 0]
  6066 00003D59 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6067 00003D5C 803804                  	cmp byte [rax], T_closure
  6068 00003D5F 0F8546250000            	jne L_error_non_closure
  6069 00003D65 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6070 00003D68 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6071 00003D6B 803804                  	cmp byte [rax], T_closure
  6072 00003D6E 0F8537250000            	jne L_error_non_closure
  6073 00003D74 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6074 00003D77 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6075 00003D7A 803804                  	cmp byte [rax], T_closure
  6076 00003D7D 0F8528250000            	jne L_error_non_closure
  6077 00003D83 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6078 00003D86 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6079 00003D89 803804                  	cmp byte [rax], T_closure
  6080 00003D8C 0F8519250000            	jne L_error_non_closure
  6081 00003D92 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6082 00003D95 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6083 00003D98 803804                  	cmp byte [rax], T_closure
  6084 00003D9B 0F850A250000            	jne L_error_non_closure
  6085 00003DA1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6086 00003DA4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6087 00003DA7 50                      	push rax
  6088 00003DA8 6A01                    	push 1	; arg count
  6089                                  	; preparing a non-tail-call
  6090                                  	; preparing a non-tail-call
  6091                                  	; preparing a non-tail-call
  6092                                  	; preparing a non-tail-call
  6093                                  	; preparing a non-tail-call
  6094                                  	; preparing a non-tail-call
  6095 00003DAA 488B4510                	mov rax, ENV
  6096 00003DAE 488B00                  	mov rax, qword [rax + 8 * 0]
  6097 00003DB1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6098 00003DB4 50                      	push rax
  6099 00003DB5 6A01                    	push 1	; arg count
  6100 00003DB7 488B4510                	mov rax, ENV
  6101 00003DBB 488B00                  	mov rax, qword [rax + 8 * 0]
  6102 00003DBE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6103 00003DC1 803804                  	cmp byte [rax], T_closure
  6104 00003DC4 0F85E1240000            	jne L_error_non_closure
  6105 00003DCA FF7001                  	push SOB_CLOSURE_ENV(rax)
  6106 00003DCD FF5009                  	call SOB_CLOSURE_CODE(rax)
  6107 00003DD0 50                      	push rax
  6108 00003DD1 6A01                    	push 1	; arg count
  6109 00003DD3 488B4510                	mov rax, ENV
  6110 00003DD7 488B00                  	mov rax, qword [rax + 8 * 0]
  6111 00003DDA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6112 00003DDD 803804                  	cmp byte [rax], T_closure
  6113 00003DE0 0F85C5240000            	jne L_error_non_closure
  6114 00003DE6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6115 00003DE9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6116 00003DEC 50                      	push rax
  6117 00003DED 6A01                    	push 1	; arg count
  6118 00003DEF 488B4510                	mov rax, ENV
  6119 00003DF3 488B00                  	mov rax, qword [rax + 8 * 0]
  6120 00003DF6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6121 00003DF9 803804                  	cmp byte [rax], T_closure
  6122 00003DFC 0F85A9240000            	jne L_error_non_closure
  6123 00003E02 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6124 00003E05 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6125 00003E08 50                      	push rax
  6126 00003E09 6A01                    	push 1	; arg count
  6127                                  	; preparing a non-tail-call
  6128                                  	; preparing a non-tail-call
  6129                                  	; preparing a non-tail-call
  6130                                  	; preparing a non-tail-call
  6131                                  	; preparing a non-tail-call
  6132                                  	; preparing a non-tail-call
  6133 00003E0B 488B4510                	mov rax, ENV
  6134 00003E0F 488B00                  	mov rax, qword [rax + 8 * 0]
  6135 00003E12 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6136 00003E15 50                      	push rax
  6137 00003E16 6A01                    	push 1	; arg count
  6138 00003E18 488B4510                	mov rax, ENV
  6139 00003E1C 488B00                  	mov rax, qword [rax + 8 * 0]
  6140 00003E1F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6141 00003E22 803804                  	cmp byte [rax], T_closure
  6142 00003E25 0F8580240000            	jne L_error_non_closure
  6143 00003E2B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6144 00003E2E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6145 00003E31 50                      	push rax
  6146 00003E32 6A01                    	push 1	; arg count
  6147 00003E34 488B4510                	mov rax, ENV
  6148 00003E38 488B00                  	mov rax, qword [rax + 8 * 0]
  6149 00003E3B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6150 00003E3E 803804                  	cmp byte [rax], T_closure
  6151 00003E41 0F8564240000            	jne L_error_non_closure
  6152 00003E47 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6153 00003E4A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6154 00003E4D 50                      	push rax
  6155 00003E4E 6A01                    	push 1	; arg count
  6156 00003E50 488B4510                	mov rax, ENV
  6157 00003E54 488B00                  	mov rax, qword [rax + 8 * 0]
  6158 00003E57 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6159 00003E5A 803804                  	cmp byte [rax], T_closure
  6160 00003E5D 0F8548240000            	jne L_error_non_closure
  6161 00003E63 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6162 00003E66 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6163 00003E69 50                      	push rax
  6164 00003E6A 6A01                    	push 1	; arg count
  6165 00003E6C 488B4510                	mov rax, ENV
  6166 00003E70 488B00                  	mov rax, qword [rax + 8 * 0]
  6167 00003E73 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6168 00003E76 803804                  	cmp byte [rax], T_closure
  6169 00003E79 0F852C240000            	jne L_error_non_closure
  6170 00003E7F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6171 00003E82 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6172 00003E85 50                      	push rax
  6173 00003E86 6A01                    	push 1	; arg count
  6174                                  	; preparing a non-tail-call
  6175                                  	; preparing a non-tail-call
  6176                                  	; preparing a non-tail-call
  6177 00003E88 488B4510                	mov rax, ENV
  6178 00003E8C 488B00                  	mov rax, qword [rax + 8 * 0]
  6179 00003E8F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6180 00003E92 50                      	push rax
  6181 00003E93 6A01                    	push 1	; arg count
  6182 00003E95 488B4510                	mov rax, ENV
  6183 00003E99 488B00                  	mov rax, qword [rax + 8 * 0]
  6184 00003E9C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6185 00003E9F 803804                  	cmp byte [rax], T_closure
  6186 00003EA2 0F8503240000            	jne L_error_non_closure
  6187 00003EA8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6188 00003EAB FF5009                  	call SOB_CLOSURE_CODE(rax)
  6189 00003EAE 50                      	push rax
  6190 00003EAF 6A01                    	push 1	; arg count
  6191 00003EB1 488B4510                	mov rax, ENV
  6192 00003EB5 488B00                  	mov rax, qword [rax + 8 * 0]
  6193 00003EB8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6194 00003EBB 803804                  	cmp byte [rax], T_closure
  6195 00003EBE 0F85E7230000            	jne L_error_non_closure
  6196 00003EC4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6197 00003EC7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6198 00003ECA 50                      	push rax
  6199 00003ECB 6A01                    	push 1	; arg count
  6200 00003ECD 488B4510                	mov rax, ENV
  6201 00003ED1 488B00                  	mov rax, qword [rax + 8 * 0]
  6202 00003ED4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6203 00003ED7 803804                  	cmp byte [rax], T_closure
  6204 00003EDA 0F85CB230000            	jne L_error_non_closure
  6205 00003EE0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6206 00003EE3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6207 00003EE6 803804                  	cmp byte [rax], T_closure
  6208 00003EE9 0F85BC230000            	jne L_error_non_closure
  6209 00003EEF FF7001                  	push SOB_CLOSURE_ENV(rax)
  6210 00003EF2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6211 00003EF5 50                      	push rax
  6212 00003EF6 6A01                    	push 1	; arg count
  6213                                  	; preparing a non-tail-call
  6214                                  	; preparing a non-tail-call
  6215                                  	; preparing a non-tail-call
  6216                                  	; preparing a non-tail-call
  6217 00003EF8 488B4510                	mov rax, ENV
  6218 00003EFC 488B00                  	mov rax, qword [rax + 8 * 0]
  6219 00003EFF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6220 00003F02 50                      	push rax
  6221 00003F03 6A01                    	push 1	; arg count
  6222 00003F05 488B4510                	mov rax, ENV
  6223 00003F09 488B00                  	mov rax, qword [rax + 8 * 0]
  6224 00003F0C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6225 00003F0F 803804                  	cmp byte [rax], T_closure
  6226 00003F12 0F8593230000            	jne L_error_non_closure
  6227 00003F18 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6228 00003F1B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6229 00003F1E 50                      	push rax
  6230 00003F1F 6A01                    	push 1	; arg count
  6231 00003F21 488B4510                	mov rax, ENV
  6232 00003F25 488B00                  	mov rax, qword [rax + 8 * 0]
  6233 00003F28 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6234 00003F2B 803804                  	cmp byte [rax], T_closure
  6235 00003F2E 0F8577230000            	jne L_error_non_closure
  6236 00003F34 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6237 00003F37 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6238 00003F3A 50                      	push rax
  6239 00003F3B 6A01                    	push 1	; arg count
  6240 00003F3D 488B4510                	mov rax, ENV
  6241 00003F41 488B00                  	mov rax, qword [rax + 8 * 0]
  6242 00003F44 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6243 00003F47 803804                  	cmp byte [rax], T_closure
  6244 00003F4A 0F855B230000            	jne L_error_non_closure
  6245 00003F50 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6246 00003F53 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6247 00003F56 50                      	push rax
  6248 00003F57 6A01                    	push 1	; arg count
  6249 00003F59 488B4510                	mov rax, ENV
  6250 00003F5D 488B00                  	mov rax, qword [rax + 8 * 0]
  6251 00003F60 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6252 00003F63 803804                  	cmp byte [rax], T_closure
  6253 00003F66 0F853F230000            	jne L_error_non_closure
  6254 00003F6C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6255 00003F6F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6256 00003F72 803804                  	cmp byte [rax], T_closure
  6257 00003F75 0F8530230000            	jne L_error_non_closure
  6258 00003F7B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6259 00003F7E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6260 00003F81 803804                  	cmp byte [rax], T_closure
  6261 00003F84 0F8521230000            	jne L_error_non_closure
  6262 00003F8A FF7001                  	push SOB_CLOSURE_ENV(rax)
  6263 00003F8D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6264 00003F90 50                      	push rax
  6265 00003F91 6A01                    	push 1	; arg count
  6266                                  	; preparing a non-tail-call
  6267                                  	; preparing a non-tail-call
  6268                                  	; preparing a non-tail-call
  6269                                  	; preparing a non-tail-call
  6270 00003F93 488B4510                	mov rax, ENV
  6271 00003F97 488B00                  	mov rax, qword [rax + 8 * 0]
  6272 00003F9A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6273 00003F9D 50                      	push rax
  6274 00003F9E 6A01                    	push 1	; arg count
  6275 00003FA0 488B4510                	mov rax, ENV
  6276 00003FA4 488B00                  	mov rax, qword [rax + 8 * 0]
  6277 00003FA7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6278 00003FAA 803804                  	cmp byte [rax], T_closure
  6279 00003FAD 0F85F8220000            	jne L_error_non_closure
  6280 00003FB3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6281 00003FB6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6282 00003FB9 50                      	push rax
  6283 00003FBA 6A01                    	push 1	; arg count
  6284 00003FBC 488B4510                	mov rax, ENV
  6285 00003FC0 488B00                  	mov rax, qword [rax + 8 * 0]
  6286 00003FC3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6287 00003FC6 803804                  	cmp byte [rax], T_closure
  6288 00003FC9 0F85DC220000            	jne L_error_non_closure
  6289 00003FCF FF7001                  	push SOB_CLOSURE_ENV(rax)
  6290 00003FD2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6291 00003FD5 50                      	push rax
  6292 00003FD6 6A01                    	push 1	; arg count
  6293 00003FD8 488B4510                	mov rax, ENV
  6294 00003FDC 488B00                  	mov rax, qword [rax + 8 * 0]
  6295 00003FDF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6296 00003FE2 803804                  	cmp byte [rax], T_closure
  6297 00003FE5 0F85C0220000            	jne L_error_non_closure
  6298 00003FEB FF7001                  	push SOB_CLOSURE_ENV(rax)
  6299 00003FEE FF5009                  	call SOB_CLOSURE_CODE(rax)
  6300 00003FF1 50                      	push rax
  6301 00003FF2 6A01                    	push 1	; arg count
  6302 00003FF4 488B4510                	mov rax, ENV
  6303 00003FF8 488B00                  	mov rax, qword [rax + 8 * 0]
  6304 00003FFB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6305 00003FFE 803804                  	cmp byte [rax], T_closure
  6306 00004001 0F85A4220000            	jne L_error_non_closure
  6307 00004007 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6308 0000400A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6309 0000400D 803804                  	cmp byte [rax], T_closure
  6310 00004010 0F8595220000            	jne L_error_non_closure
  6311 00004016 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6312 00004019 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6313 0000401C 50                      	push rax
  6314 0000401D 6A01                    	push 1	; arg count
  6315                                  	; preparing a non-tail-call
  6316                                  	; preparing a non-tail-call
  6317                                  	; preparing a non-tail-call
  6318                                  	; preparing a non-tail-call
  6319 0000401F 488B4510                	mov rax, ENV
  6320 00004023 488B00                  	mov rax, qword [rax + 8 * 0]
  6321 00004026 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6322 00004029 50                      	push rax
  6323 0000402A 6A01                    	push 1	; arg count
  6324 0000402C 488B4510                	mov rax, ENV
  6325 00004030 488B00                  	mov rax, qword [rax + 8 * 0]
  6326 00004033 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6327 00004036 803804                  	cmp byte [rax], T_closure
  6328 00004039 0F856C220000            	jne L_error_non_closure
  6329 0000403F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6330 00004042 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6331 00004045 50                      	push rax
  6332 00004046 6A01                    	push 1	; arg count
  6333 00004048 488B4510                	mov rax, ENV
  6334 0000404C 488B00                  	mov rax, qword [rax + 8 * 0]
  6335 0000404F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6336 00004052 803804                  	cmp byte [rax], T_closure
  6337 00004055 0F8550220000            	jne L_error_non_closure
  6338 0000405B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6339 0000405E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6340 00004061 50                      	push rax
  6341 00004062 6A01                    	push 1	; arg count
  6342 00004064 488B4510                	mov rax, ENV
  6343 00004068 488B00                  	mov rax, qword [rax + 8 * 0]
  6344 0000406B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6345 0000406E 803804                  	cmp byte [rax], T_closure
  6346 00004071 0F8534220000            	jne L_error_non_closure
  6347 00004077 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6348 0000407A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6349 0000407D 50                      	push rax
  6350 0000407E 6A01                    	push 1	; arg count
  6351                                  	; preparing a non-tail-call
  6352                                  	; preparing a non-tail-call
  6353                                  	; preparing a non-tail-call
  6354                                  	; preparing a non-tail-call
  6355                                  	; preparing a non-tail-call
  6356                                  	; preparing a non-tail-call
  6357 00004080 488B4510                	mov rax, ENV
  6358 00004084 488B00                  	mov rax, qword [rax + 8 * 0]
  6359 00004087 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6360 0000408A 50                      	push rax
  6361 0000408B 6A01                    	push 1	; arg count
  6362 0000408D 488B4510                	mov rax, ENV
  6363 00004091 488B00                  	mov rax, qword [rax + 8 * 0]
  6364 00004094 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6365 00004097 803804                  	cmp byte [rax], T_closure
  6366 0000409A 0F850B220000            	jne L_error_non_closure
  6367 000040A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6368 000040A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6369 000040A6 50                      	push rax
  6370 000040A7 6A01                    	push 1	; arg count
  6371 000040A9 488B4510                	mov rax, ENV
  6372 000040AD 488B00                  	mov rax, qword [rax + 8 * 0]
  6373 000040B0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6374 000040B3 803804                  	cmp byte [rax], T_closure
  6375 000040B6 0F85EF210000            	jne L_error_non_closure
  6376 000040BC FF7001                  	push SOB_CLOSURE_ENV(rax)
  6377 000040BF FF5009                  	call SOB_CLOSURE_CODE(rax)
  6378 000040C2 50                      	push rax
  6379 000040C3 6A01                    	push 1	; arg count
  6380 000040C5 488B4510                	mov rax, ENV
  6381 000040C9 488B00                  	mov rax, qword [rax + 8 * 0]
  6382 000040CC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6383 000040CF 803804                  	cmp byte [rax], T_closure
  6384 000040D2 0F85D3210000            	jne L_error_non_closure
  6385 000040D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6386 000040DB FF5009                  	call SOB_CLOSURE_CODE(rax)
  6387 000040DE 50                      	push rax
  6388 000040DF 6A01                    	push 1	; arg count
  6389 000040E1 488B4510                	mov rax, ENV
  6390 000040E5 488B00                  	mov rax, qword [rax + 8 * 0]
  6391 000040E8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6392 000040EB 803804                  	cmp byte [rax], T_closure
  6393 000040EE 0F85B7210000            	jne L_error_non_closure
  6394 000040F4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6395 000040F7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6396 000040FA 50                      	push rax
  6397 000040FB 6A01                    	push 1	; arg count
  6398                                  	; preparing a non-tail-call
  6399                                  	; preparing a non-tail-call
  6400                                  	; preparing a non-tail-call
  6401 000040FD 488B4510                	mov rax, ENV
  6402 00004101 488B00                  	mov rax, qword [rax + 8 * 0]
  6403 00004104 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6404 00004107 50                      	push rax
  6405 00004108 6A01                    	push 1	; arg count
  6406 0000410A 488B4510                	mov rax, ENV
  6407 0000410E 488B00                  	mov rax, qword [rax + 8 * 0]
  6408 00004111 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6409 00004114 803804                  	cmp byte [rax], T_closure
  6410 00004117 0F858E210000            	jne L_error_non_closure
  6411 0000411D FF7001                  	push SOB_CLOSURE_ENV(rax)
  6412 00004120 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6413 00004123 50                      	push rax
  6414 00004124 6A01                    	push 1	; arg count
  6415 00004126 488B4510                	mov rax, ENV
  6416 0000412A 488B00                  	mov rax, qword [rax + 8 * 0]
  6417 0000412D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6418 00004130 803804                  	cmp byte [rax], T_closure
  6419 00004133 0F8572210000            	jne L_error_non_closure
  6420 00004139 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6421 0000413C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6422 0000413F 50                      	push rax
  6423 00004140 6A01                    	push 1	; arg count
  6424 00004142 488B4510                	mov rax, ENV
  6425 00004146 488B00                  	mov rax, qword [rax + 8 * 0]
  6426 00004149 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6427 0000414C 803804                  	cmp byte [rax], T_closure
  6428 0000414F 0F8556210000            	jne L_error_non_closure
  6429 00004155 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6430 00004158 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6431 0000415B 803804                  	cmp byte [rax], T_closure
  6432 0000415E 0F8547210000            	jne L_error_non_closure
  6433 00004164 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6434 00004167 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6435 0000416A 50                      	push rax
  6436 0000416B 6A01                    	push 1	; arg count
  6437                                  	; preparing a non-tail-call
  6438                                  	; preparing a non-tail-call
  6439                                  	; preparing a non-tail-call
  6440                                  	; preparing a non-tail-call
  6441 0000416D 488B4510                	mov rax, ENV
  6442 00004171 488B00                  	mov rax, qword [rax + 8 * 0]
  6443 00004174 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6444 00004177 50                      	push rax
  6445 00004178 6A01                    	push 1	; arg count
  6446 0000417A 488B4510                	mov rax, ENV
  6447 0000417E 488B00                  	mov rax, qword [rax + 8 * 0]
  6448 00004181 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6449 00004184 803804                  	cmp byte [rax], T_closure
  6450 00004187 0F851E210000            	jne L_error_non_closure
  6451 0000418D FF7001                  	push SOB_CLOSURE_ENV(rax)
  6452 00004190 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6453 00004193 50                      	push rax
  6454 00004194 6A01                    	push 1	; arg count
  6455 00004196 488B4510                	mov rax, ENV
  6456 0000419A 488B00                  	mov rax, qword [rax + 8 * 0]
  6457 0000419D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6458 000041A0 803804                  	cmp byte [rax], T_closure
  6459 000041A3 0F8502210000            	jne L_error_non_closure
  6460 000041A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6461 000041AC FF5009                  	call SOB_CLOSURE_CODE(rax)
  6462 000041AF 50                      	push rax
  6463 000041B0 6A01                    	push 1	; arg count
  6464 000041B2 488B4510                	mov rax, ENV
  6465 000041B6 488B00                  	mov rax, qword [rax + 8 * 0]
  6466 000041B9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6467 000041BC 803804                  	cmp byte [rax], T_closure
  6468 000041BF 0F85E6200000            	jne L_error_non_closure
  6469 000041C5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6470 000041C8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6471 000041CB 50                      	push rax
  6472 000041CC 6A01                    	push 1	; arg count
  6473 000041CE 488B4510                	mov rax, ENV
  6474 000041D2 488B00                  	mov rax, qword [rax + 8 * 0]
  6475 000041D5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6476 000041D8 803804                  	cmp byte [rax], T_closure
  6477 000041DB 0F85CA200000            	jne L_error_non_closure
  6478 000041E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6479 000041E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6480 000041E7 803804                  	cmp byte [rax], T_closure
  6481 000041EA 0F85BB200000            	jne L_error_non_closure
  6482 000041F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6483 000041F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6484 000041F6 803804                  	cmp byte [rax], T_closure
  6485 000041F9 0F85AC200000            	jne L_error_non_closure
  6486 000041FF FF7001                  	push SOB_CLOSURE_ENV(rax)
  6487 00004202 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6488 00004205 803804                  	cmp byte [rax], T_closure
  6489 00004208 0F859D200000            	jne L_error_non_closure
  6490 0000420E FF7001                  	push SOB_CLOSURE_ENV(rax)
  6491 00004211 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6492 00004214 803804                  	cmp byte [rax], T_closure
  6493 00004217 0F858E200000            	jne L_error_non_closure
  6494 0000421D FF7001                  	push SOB_CLOSURE_ENV(rax)
  6495 00004220 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6496 00004223 50                      	push rax
  6497 00004224 6A01                    	push 1	; arg count
  6498                                  	; preparing a non-tail-call
  6499                                  	; preparing a non-tail-call
  6500                                  	; preparing a non-tail-call
  6501                                  	; preparing a non-tail-call
  6502                                  	; preparing a non-tail-call
  6503                                  	; preparing a non-tail-call
  6504                                  	; preparing a non-tail-call
  6505 00004226 488B4510                	mov rax, ENV
  6506 0000422A 488B00                  	mov rax, qword [rax + 8 * 0]
  6507 0000422D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6508 00004230 50                      	push rax
  6509 00004231 6A01                    	push 1	; arg count
  6510 00004233 488B4510                	mov rax, ENV
  6511 00004237 488B00                  	mov rax, qword [rax + 8 * 0]
  6512 0000423A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6513 0000423D 803804                  	cmp byte [rax], T_closure
  6514 00004240 0F8565200000            	jne L_error_non_closure
  6515 00004246 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6516 00004249 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6517 0000424C 50                      	push rax
  6518 0000424D 6A01                    	push 1	; arg count
  6519 0000424F 488B4510                	mov rax, ENV
  6520 00004253 488B00                  	mov rax, qword [rax + 8 * 0]
  6521 00004256 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6522 00004259 803804                  	cmp byte [rax], T_closure
  6523 0000425C 0F8549200000            	jne L_error_non_closure
  6524 00004262 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6525 00004265 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6526 00004268 50                      	push rax
  6527 00004269 6A01                    	push 1	; arg count
  6528 0000426B 488B4510                	mov rax, ENV
  6529 0000426F 488B00                  	mov rax, qword [rax + 8 * 0]
  6530 00004272 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6531 00004275 803804                  	cmp byte [rax], T_closure
  6532 00004278 0F852D200000            	jne L_error_non_closure
  6533 0000427E FF7001                  	push SOB_CLOSURE_ENV(rax)
  6534 00004281 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6535 00004284 50                      	push rax
  6536 00004285 6A01                    	push 1	; arg count
  6537                                  	; preparing a non-tail-call
  6538                                  	; preparing a non-tail-call
  6539                                  	; preparing a non-tail-call
  6540                                  	; preparing a non-tail-call
  6541 00004287 488B4510                	mov rax, ENV
  6542 0000428B 488B00                  	mov rax, qword [rax + 8 * 0]
  6543 0000428E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6544 00004291 50                      	push rax
  6545 00004292 6A01                    	push 1	; arg count
  6546 00004294 488B4510                	mov rax, ENV
  6547 00004298 488B00                  	mov rax, qword [rax + 8 * 0]
  6548 0000429B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6549 0000429E 803804                  	cmp byte [rax], T_closure
  6550 000042A1 0F8504200000            	jne L_error_non_closure
  6551 000042A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6552 000042AA FF5009                  	call SOB_CLOSURE_CODE(rax)
  6553 000042AD 50                      	push rax
  6554 000042AE 6A01                    	push 1	; arg count
  6555 000042B0 488B4510                	mov rax, ENV
  6556 000042B4 488B00                  	mov rax, qword [rax + 8 * 0]
  6557 000042B7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6558 000042BA 803804                  	cmp byte [rax], T_closure
  6559 000042BD 0F85E81F0000            	jne L_error_non_closure
  6560 000042C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6561 000042C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6562 000042C9 50                      	push rax
  6563 000042CA 6A01                    	push 1	; arg count
  6564 000042CC 488B4510                	mov rax, ENV
  6565 000042D0 488B00                  	mov rax, qword [rax + 8 * 0]
  6566 000042D3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6567 000042D6 803804                  	cmp byte [rax], T_closure
  6568 000042D9 0F85CC1F0000            	jne L_error_non_closure
  6569 000042DF FF7001                  	push SOB_CLOSURE_ENV(rax)
  6570 000042E2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6571 000042E5 50                      	push rax
  6572 000042E6 6A01                    	push 1	; arg count
  6573                                  	; preparing a non-tail-call
  6574                                  	; preparing a non-tail-call
  6575                                  	; preparing a non-tail-call
  6576                                  	; preparing a non-tail-call
  6577 000042E8 488B4510                	mov rax, ENV
  6578 000042EC 488B00                  	mov rax, qword [rax + 8 * 0]
  6579 000042EF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6580 000042F2 50                      	push rax
  6581 000042F3 6A01                    	push 1	; arg count
  6582 000042F5 488B4510                	mov rax, ENV
  6583 000042F9 488B00                  	mov rax, qword [rax + 8 * 0]
  6584 000042FC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6585 000042FF 803804                  	cmp byte [rax], T_closure
  6586 00004302 0F85A31F0000            	jne L_error_non_closure
  6587 00004308 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6588 0000430B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6589 0000430E 50                      	push rax
  6590 0000430F 6A01                    	push 1	; arg count
  6591 00004311 488B4510                	mov rax, ENV
  6592 00004315 488B00                  	mov rax, qword [rax + 8 * 0]
  6593 00004318 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6594 0000431B 803804                  	cmp byte [rax], T_closure
  6595 0000431E 0F85871F0000            	jne L_error_non_closure
  6596 00004324 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6597 00004327 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6598 0000432A 50                      	push rax
  6599 0000432B 6A01                    	push 1	; arg count
  6600 0000432D 488B4510                	mov rax, ENV
  6601 00004331 488B00                  	mov rax, qword [rax + 8 * 0]
  6602 00004334 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6603 00004337 803804                  	cmp byte [rax], T_closure
  6604 0000433A 0F856B1F0000            	jne L_error_non_closure
  6605 00004340 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6606 00004343 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6607 00004346 50                      	push rax
  6608 00004347 6A01                    	push 1	; arg count
  6609 00004349 488B4510                	mov rax, ENV
  6610 0000434D 488B00                  	mov rax, qword [rax + 8 * 0]
  6611 00004350 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6612 00004353 803804                  	cmp byte [rax], T_closure
  6613 00004356 0F854F1F0000            	jne L_error_non_closure
  6614 0000435C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6615 0000435F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6616 00004362 803804                  	cmp byte [rax], T_closure
  6617 00004365 0F85401F0000            	jne L_error_non_closure
  6618 0000436B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6619 0000436E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6620 00004371 803804                  	cmp byte [rax], T_closure
  6621 00004374 0F85311F0000            	jne L_error_non_closure
  6622 0000437A FF7001                  	push SOB_CLOSURE_ENV(rax)
  6623 0000437D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6624 00004380 50                      	push rax
  6625 00004381 6A01                    	push 1	; arg count
  6626                                  	; preparing a non-tail-call
  6627                                  	; preparing a non-tail-call
  6628                                  	; preparing a non-tail-call
  6629                                  	; preparing a non-tail-call
  6630                                  	; preparing a non-tail-call
  6631 00004383 488B4510                	mov rax, ENV
  6632 00004387 488B00                  	mov rax, qword [rax + 8 * 0]
  6633 0000438A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6634 0000438D 50                      	push rax
  6635 0000438E 6A01                    	push 1	; arg count
  6636 00004390 488B4510                	mov rax, ENV
  6637 00004394 488B00                  	mov rax, qword [rax + 8 * 0]
  6638 00004397 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6639 0000439A 803804                  	cmp byte [rax], T_closure
  6640 0000439D 0F85081F0000            	jne L_error_non_closure
  6641 000043A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6642 000043A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6643 000043A9 50                      	push rax
  6644 000043AA 6A01                    	push 1	; arg count
  6645 000043AC 488B4510                	mov rax, ENV
  6646 000043B0 488B00                  	mov rax, qword [rax + 8 * 0]
  6647 000043B3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6648 000043B6 803804                  	cmp byte [rax], T_closure
  6649 000043B9 0F85EC1E0000            	jne L_error_non_closure
  6650 000043BF FF7001                  	push SOB_CLOSURE_ENV(rax)
  6651 000043C2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6652 000043C5 50                      	push rax
  6653 000043C6 6A01                    	push 1	; arg count
  6654 000043C8 488B4510                	mov rax, ENV
  6655 000043CC 488B00                  	mov rax, qword [rax + 8 * 0]
  6656 000043CF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6657 000043D2 803804                  	cmp byte [rax], T_closure
  6658 000043D5 0F85D01E0000            	jne L_error_non_closure
  6659 000043DB FF7001                  	push SOB_CLOSURE_ENV(rax)
  6660 000043DE FF5009                  	call SOB_CLOSURE_CODE(rax)
  6661 000043E1 50                      	push rax
  6662 000043E2 6A01                    	push 1	; arg count
  6663                                  	; preparing a non-tail-call
  6664                                  	; preparing a non-tail-call
  6665                                  	; preparing a non-tail-call
  6666 000043E4 488B4510                	mov rax, ENV
  6667 000043E8 488B00                  	mov rax, qword [rax + 8 * 0]
  6668 000043EB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6669 000043EE 50                      	push rax
  6670 000043EF 6A01                    	push 1	; arg count
  6671 000043F1 488B4510                	mov rax, ENV
  6672 000043F5 488B00                  	mov rax, qword [rax + 8 * 0]
  6673 000043F8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6674 000043FB 803804                  	cmp byte [rax], T_closure
  6675 000043FE 0F85A71E0000            	jne L_error_non_closure
  6676 00004404 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6677 00004407 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6678 0000440A 50                      	push rax
  6679 0000440B 6A01                    	push 1	; arg count
  6680 0000440D 488B4510                	mov rax, ENV
  6681 00004411 488B00                  	mov rax, qword [rax + 8 * 0]
  6682 00004414 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6683 00004417 803804                  	cmp byte [rax], T_closure
  6684 0000441A 0F858B1E0000            	jne L_error_non_closure
  6685 00004420 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6686 00004423 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6687 00004426 50                      	push rax
  6688 00004427 6A01                    	push 1	; arg count
  6689 00004429 488B4510                	mov rax, ENV
  6690 0000442D 488B00                  	mov rax, qword [rax + 8 * 0]
  6691 00004430 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6692 00004433 803804                  	cmp byte [rax], T_closure
  6693 00004436 0F856F1E0000            	jne L_error_non_closure
  6694 0000443C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6695 0000443F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6696 00004442 803804                  	cmp byte [rax], T_closure
  6697 00004445 0F85601E0000            	jne L_error_non_closure
  6698 0000444B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6699 0000444E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6700 00004451 50                      	push rax
  6701 00004452 6A01                    	push 1	; arg count
  6702                                  	; preparing a non-tail-call
  6703                                  	; preparing a non-tail-call
  6704                                  	; preparing a non-tail-call
  6705                                  	; preparing a non-tail-call
  6706                                  	; preparing a non-tail-call
  6707                                  	; preparing a non-tail-call
  6708                                  	; preparing a non-tail-call
  6709 00004454 488B4510                	mov rax, ENV
  6710 00004458 488B00                  	mov rax, qword [rax + 8 * 0]
  6711 0000445B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6712 0000445E 50                      	push rax
  6713 0000445F 6A01                    	push 1	; arg count
  6714 00004461 488B4510                	mov rax, ENV
  6715 00004465 488B00                  	mov rax, qword [rax + 8 * 0]
  6716 00004468 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6717 0000446B 803804                  	cmp byte [rax], T_closure
  6718 0000446E 0F85371E0000            	jne L_error_non_closure
  6719 00004474 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6720 00004477 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6721 0000447A 50                      	push rax
  6722 0000447B 6A01                    	push 1	; arg count
  6723 0000447D 488B4510                	mov rax, ENV
  6724 00004481 488B00                  	mov rax, qword [rax + 8 * 0]
  6725 00004484 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6726 00004487 803804                  	cmp byte [rax], T_closure
  6727 0000448A 0F851B1E0000            	jne L_error_non_closure
  6728 00004490 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6729 00004493 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6730 00004496 50                      	push rax
  6731 00004497 6A01                    	push 1	; arg count
  6732 00004499 488B4510                	mov rax, ENV
  6733 0000449D 488B00                  	mov rax, qword [rax + 8 * 0]
  6734 000044A0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6735 000044A3 803804                  	cmp byte [rax], T_closure
  6736 000044A6 0F85FF1D0000            	jne L_error_non_closure
  6737 000044AC FF7001                  	push SOB_CLOSURE_ENV(rax)
  6738 000044AF FF5009                  	call SOB_CLOSURE_CODE(rax)
  6739 000044B2 50                      	push rax
  6740 000044B3 6A01                    	push 1	; arg count
  6741 000044B5 488B4510                	mov rax, ENV
  6742 000044B9 488B00                  	mov rax, qword [rax + 8 * 0]
  6743 000044BC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6744 000044BF 803804                  	cmp byte [rax], T_closure
  6745 000044C2 0F85E31D0000            	jne L_error_non_closure
  6746 000044C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6747 000044CB FF5009                  	call SOB_CLOSURE_CODE(rax)
  6748 000044CE 50                      	push rax
  6749 000044CF 6A01                    	push 1	; arg count
  6750                                  	; preparing a non-tail-call
  6751                                  	; preparing a non-tail-call
  6752                                  	; preparing a non-tail-call
  6753                                  	; preparing a non-tail-call
  6754                                  	; preparing a non-tail-call
  6755 000044D1 488B4510                	mov rax, ENV
  6756 000044D5 488B00                  	mov rax, qword [rax + 8 * 0]
  6757 000044D8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6758 000044DB 50                      	push rax
  6759 000044DC 6A01                    	push 1	; arg count
  6760 000044DE 488B4510                	mov rax, ENV
  6761 000044E2 488B00                  	mov rax, qword [rax + 8 * 0]
  6762 000044E5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6763 000044E8 803804                  	cmp byte [rax], T_closure
  6764 000044EB 0F85BA1D0000            	jne L_error_non_closure
  6765 000044F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6766 000044F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6767 000044F7 50                      	push rax
  6768 000044F8 6A01                    	push 1	; arg count
  6769 000044FA 488B4510                	mov rax, ENV
  6770 000044FE 488B00                  	mov rax, qword [rax + 8 * 0]
  6771 00004501 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6772 00004504 803804                  	cmp byte [rax], T_closure
  6773 00004507 0F859E1D0000            	jne L_error_non_closure
  6774 0000450D FF7001                  	push SOB_CLOSURE_ENV(rax)
  6775 00004510 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6776 00004513 50                      	push rax
  6777 00004514 6A01                    	push 1	; arg count
  6778 00004516 488B4510                	mov rax, ENV
  6779 0000451A 488B00                  	mov rax, qword [rax + 8 * 0]
  6780 0000451D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6781 00004520 803804                  	cmp byte [rax], T_closure
  6782 00004523 0F85821D0000            	jne L_error_non_closure
  6783 00004529 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6784 0000452C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6785 0000452F 50                      	push rax
  6786 00004530 6A01                    	push 1	; arg count
  6787                                  	; preparing a non-tail-call
  6788                                  	; preparing a non-tail-call
  6789                                  	; preparing a non-tail-call
  6790 00004532 488B4510                	mov rax, ENV
  6791 00004536 488B00                  	mov rax, qword [rax + 8 * 0]
  6792 00004539 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6793 0000453C 50                      	push rax
  6794 0000453D 6A01                    	push 1	; arg count
  6795 0000453F 488B4510                	mov rax, ENV
  6796 00004543 488B00                  	mov rax, qword [rax + 8 * 0]
  6797 00004546 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6798 00004549 803804                  	cmp byte [rax], T_closure
  6799 0000454C 0F85591D0000            	jne L_error_non_closure
  6800 00004552 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6801 00004555 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6802 00004558 50                      	push rax
  6803 00004559 6A01                    	push 1	; arg count
  6804 0000455B 488B4510                	mov rax, ENV
  6805 0000455F 488B00                  	mov rax, qword [rax + 8 * 0]
  6806 00004562 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6807 00004565 803804                  	cmp byte [rax], T_closure
  6808 00004568 0F853D1D0000            	jne L_error_non_closure
  6809 0000456E FF7001                  	push SOB_CLOSURE_ENV(rax)
  6810 00004571 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6811 00004574 50                      	push rax
  6812 00004575 6A01                    	push 1	; arg count
  6813 00004577 488B4510                	mov rax, ENV
  6814 0000457B 488B00                  	mov rax, qword [rax + 8 * 0]
  6815 0000457E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6816 00004581 803804                  	cmp byte [rax], T_closure
  6817 00004584 0F85211D0000            	jne L_error_non_closure
  6818 0000458A FF7001                  	push SOB_CLOSURE_ENV(rax)
  6819 0000458D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6820 00004590 803804                  	cmp byte [rax], T_closure
  6821 00004593 0F85121D0000            	jne L_error_non_closure
  6822 00004599 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6823 0000459C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6824 0000459F 50                      	push rax
  6825 000045A0 6A01                    	push 1	; arg count
  6826                                  	; preparing a non-tail-call
  6827                                  	; preparing a non-tail-call
  6828                                  	; preparing a non-tail-call
  6829                                  	; preparing a non-tail-call
  6830 000045A2 488B4510                	mov rax, ENV
  6831 000045A6 488B00                  	mov rax, qword [rax + 8 * 0]
  6832 000045A9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6833 000045AC 50                      	push rax
  6834 000045AD 6A01                    	push 1	; arg count
  6835 000045AF 488B4510                	mov rax, ENV
  6836 000045B3 488B00                  	mov rax, qword [rax + 8 * 0]
  6837 000045B6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6838 000045B9 803804                  	cmp byte [rax], T_closure
  6839 000045BC 0F85E91C0000            	jne L_error_non_closure
  6840 000045C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6841 000045C5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6842 000045C8 50                      	push rax
  6843 000045C9 6A01                    	push 1	; arg count
  6844 000045CB 488B4510                	mov rax, ENV
  6845 000045CF 488B00                  	mov rax, qword [rax + 8 * 0]
  6846 000045D2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6847 000045D5 803804                  	cmp byte [rax], T_closure
  6848 000045D8 0F85CD1C0000            	jne L_error_non_closure
  6849 000045DE FF7001                  	push SOB_CLOSURE_ENV(rax)
  6850 000045E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6851 000045E4 50                      	push rax
  6852 000045E5 6A01                    	push 1	; arg count
  6853 000045E7 488B4510                	mov rax, ENV
  6854 000045EB 488B00                  	mov rax, qword [rax + 8 * 0]
  6855 000045EE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6856 000045F1 803804                  	cmp byte [rax], T_closure
  6857 000045F4 0F85B11C0000            	jne L_error_non_closure
  6858 000045FA FF7001                  	push SOB_CLOSURE_ENV(rax)
  6859 000045FD FF5009                  	call SOB_CLOSURE_CODE(rax)
  6860 00004600 50                      	push rax
  6861 00004601 6A01                    	push 1	; arg count
  6862 00004603 488B4510                	mov rax, ENV
  6863 00004607 488B00                  	mov rax, qword [rax + 8 * 0]
  6864 0000460A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6865 0000460D 803804                  	cmp byte [rax], T_closure
  6866 00004610 0F85951C0000            	jne L_error_non_closure
  6867 00004616 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6868 00004619 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6869 0000461C 803804                  	cmp byte [rax], T_closure
  6870 0000461F 0F85861C0000            	jne L_error_non_closure
  6871 00004625 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6872 00004628 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6873 0000462B 803804                  	cmp byte [rax], T_closure
  6874 0000462E 0F85771C0000            	jne L_error_non_closure
  6875 00004634 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6876 00004637 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6877 0000463A 50                      	push rax
  6878 0000463B 6A01                    	push 1	; arg count
  6879                                  	; preparing a non-tail-call
  6880                                  	; preparing a non-tail-call
  6881                                  	; preparing a non-tail-call
  6882                                  	; preparing a non-tail-call
  6883                                  	; preparing a non-tail-call
  6884                                  	; preparing a non-tail-call
  6885 0000463D 488B4510                	mov rax, ENV
  6886 00004641 488B00                  	mov rax, qword [rax + 8 * 0]
  6887 00004644 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6888 00004647 50                      	push rax
  6889 00004648 6A01                    	push 1	; arg count
  6890 0000464A 488B4510                	mov rax, ENV
  6891 0000464E 488B00                  	mov rax, qword [rax + 8 * 0]
  6892 00004651 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6893 00004654 803804                  	cmp byte [rax], T_closure
  6894 00004657 0F854E1C0000            	jne L_error_non_closure
  6895 0000465D FF7001                  	push SOB_CLOSURE_ENV(rax)
  6896 00004660 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6897 00004663 50                      	push rax
  6898 00004664 6A01                    	push 1	; arg count
  6899 00004666 488B4510                	mov rax, ENV
  6900 0000466A 488B00                  	mov rax, qword [rax + 8 * 0]
  6901 0000466D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6902 00004670 803804                  	cmp byte [rax], T_closure
  6903 00004673 0F85321C0000            	jne L_error_non_closure
  6904 00004679 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6905 0000467C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6906 0000467F 50                      	push rax
  6907 00004680 6A01                    	push 1	; arg count
  6908 00004682 488B4510                	mov rax, ENV
  6909 00004686 488B00                  	mov rax, qword [rax + 8 * 0]
  6910 00004689 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6911 0000468C 803804                  	cmp byte [rax], T_closure
  6912 0000468F 0F85161C0000            	jne L_error_non_closure
  6913 00004695 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6914 00004698 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6915 0000469B 50                      	push rax
  6916 0000469C 6A01                    	push 1	; arg count
  6917 0000469E 488B4510                	mov rax, ENV
  6918 000046A2 488B00                  	mov rax, qword [rax + 8 * 0]
  6919 000046A5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6920 000046A8 803804                  	cmp byte [rax], T_closure
  6921 000046AB 0F85FA1B0000            	jne L_error_non_closure
  6922 000046B1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6923 000046B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6924 000046B7 50                      	push rax
  6925 000046B8 6A01                    	push 1	; arg count
  6926                                  	; preparing a non-tail-call
  6927                                  	; preparing a non-tail-call
  6928                                  	; preparing a non-tail-call
  6929 000046BA 488B4510                	mov rax, ENV
  6930 000046BE 488B00                  	mov rax, qword [rax + 8 * 0]
  6931 000046C1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6932 000046C4 50                      	push rax
  6933 000046C5 6A01                    	push 1	; arg count
  6934 000046C7 488B4510                	mov rax, ENV
  6935 000046CB 488B00                  	mov rax, qword [rax + 8 * 0]
  6936 000046CE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6937 000046D1 803804                  	cmp byte [rax], T_closure
  6938 000046D4 0F85D11B0000            	jne L_error_non_closure
  6939 000046DA FF7001                  	push SOB_CLOSURE_ENV(rax)
  6940 000046DD FF5009                  	call SOB_CLOSURE_CODE(rax)
  6941 000046E0 50                      	push rax
  6942 000046E1 6A01                    	push 1	; arg count
  6943 000046E3 488B4510                	mov rax, ENV
  6944 000046E7 488B00                  	mov rax, qword [rax + 8 * 0]
  6945 000046EA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6946 000046ED 803804                  	cmp byte [rax], T_closure
  6947 000046F0 0F85B51B0000            	jne L_error_non_closure
  6948 000046F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6949 000046F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6950 000046FC 50                      	push rax
  6951 000046FD 6A01                    	push 1	; arg count
  6952 000046FF 488B4510                	mov rax, ENV
  6953 00004703 488B00                  	mov rax, qword [rax + 8 * 0]
  6954 00004706 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6955 00004709 803804                  	cmp byte [rax], T_closure
  6956 0000470C 0F85991B0000            	jne L_error_non_closure
  6957 00004712 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6958 00004715 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6959 00004718 803804                  	cmp byte [rax], T_closure
  6960 0000471B 0F858A1B0000            	jne L_error_non_closure
  6961 00004721 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6962 00004724 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6963 00004727 50                      	push rax
  6964 00004728 6A01                    	push 1	; arg count
  6965                                  	; preparing a non-tail-call
  6966                                  	; preparing a non-tail-call
  6967                                  	; preparing a non-tail-call
  6968                                  	; preparing a non-tail-call
  6969 0000472A 488B4510                	mov rax, ENV
  6970 0000472E 488B00                  	mov rax, qword [rax + 8 * 0]
  6971 00004731 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6972 00004734 50                      	push rax
  6973 00004735 6A01                    	push 1	; arg count
  6974 00004737 488B4510                	mov rax, ENV
  6975 0000473B 488B00                  	mov rax, qword [rax + 8 * 0]
  6976 0000473E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6977 00004741 803804                  	cmp byte [rax], T_closure
  6978 00004744 0F85611B0000            	jne L_error_non_closure
  6979 0000474A FF7001                  	push SOB_CLOSURE_ENV(rax)
  6980 0000474D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6981 00004750 50                      	push rax
  6982 00004751 6A01                    	push 1	; arg count
  6983 00004753 488B4510                	mov rax, ENV
  6984 00004757 488B00                  	mov rax, qword [rax + 8 * 0]
  6985 0000475A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6986 0000475D 803804                  	cmp byte [rax], T_closure
  6987 00004760 0F85451B0000            	jne L_error_non_closure
  6988 00004766 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6989 00004769 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6990 0000476C 50                      	push rax
  6991 0000476D 6A01                    	push 1	; arg count
  6992 0000476F 488B4510                	mov rax, ENV
  6993 00004773 488B00                  	mov rax, qword [rax + 8 * 0]
  6994 00004776 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  6995 00004779 803804                  	cmp byte [rax], T_closure
  6996 0000477C 0F85291B0000            	jne L_error_non_closure
  6997 00004782 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6998 00004785 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6999 00004788 50                      	push rax
  7000 00004789 6A01                    	push 1	; arg count
  7001 0000478B 488B4510                	mov rax, ENV
  7002 0000478F 488B00                  	mov rax, qword [rax + 8 * 0]
  7003 00004792 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7004 00004795 803804                  	cmp byte [rax], T_closure
  7005 00004798 0F850D1B0000            	jne L_error_non_closure
  7006 0000479E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7007 000047A1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7008 000047A4 803804                  	cmp byte [rax], T_closure
  7009 000047A7 0F85FE1A0000            	jne L_error_non_closure
  7010 000047AD FF7001                  	push SOB_CLOSURE_ENV(rax)
  7011 000047B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7012 000047B3 803804                  	cmp byte [rax], T_closure
  7013 000047B6 0F85EF1A0000            	jne L_error_non_closure
  7014 000047BC FF7001                  	push SOB_CLOSURE_ENV(rax)
  7015 000047BF FF5009                  	call SOB_CLOSURE_CODE(rax)
  7016 000047C2 50                      	push rax
  7017 000047C3 6A01                    	push 1	; arg count
  7018                                  	; preparing a non-tail-call
  7019                                  	; preparing a non-tail-call
  7020                                  	; preparing a non-tail-call
  7021                                  	; preparing a non-tail-call
  7022 000047C5 488B4510                	mov rax, ENV
  7023 000047C9 488B00                  	mov rax, qword [rax + 8 * 0]
  7024 000047CC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7025 000047CF 50                      	push rax
  7026 000047D0 6A01                    	push 1	; arg count
  7027 000047D2 488B4510                	mov rax, ENV
  7028 000047D6 488B00                  	mov rax, qword [rax + 8 * 0]
  7029 000047D9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7030 000047DC 803804                  	cmp byte [rax], T_closure
  7031 000047DF 0F85C61A0000            	jne L_error_non_closure
  7032 000047E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7033 000047E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7034 000047EB 50                      	push rax
  7035 000047EC 6A01                    	push 1	; arg count
  7036 000047EE 488B4510                	mov rax, ENV
  7037 000047F2 488B00                  	mov rax, qword [rax + 8 * 0]
  7038 000047F5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7039 000047F8 803804                  	cmp byte [rax], T_closure
  7040 000047FB 0F85AA1A0000            	jne L_error_non_closure
  7041 00004801 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7042 00004804 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7043 00004807 50                      	push rax
  7044 00004808 6A01                    	push 1	; arg count
  7045 0000480A 488B4510                	mov rax, ENV
  7046 0000480E 488B00                  	mov rax, qword [rax + 8 * 0]
  7047 00004811 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7048 00004814 803804                  	cmp byte [rax], T_closure
  7049 00004817 0F858E1A0000            	jne L_error_non_closure
  7050 0000481D FF7001                  	push SOB_CLOSURE_ENV(rax)
  7051 00004820 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7052 00004823 50                      	push rax
  7053 00004824 6A01                    	push 1	; arg count
  7054 00004826 488B4510                	mov rax, ENV
  7055 0000482A 488B00                  	mov rax, qword [rax + 8 * 0]
  7056 0000482D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7057 00004830 803804                  	cmp byte [rax], T_closure
  7058 00004833 0F85721A0000            	jne L_error_non_closure
  7059 00004839 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7060 0000483C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7061 0000483F 803804                  	cmp byte [rax], T_closure
  7062 00004842 0F85631A0000            	jne L_error_non_closure
  7063 00004848 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7064 0000484B FF5009                  	call SOB_CLOSURE_CODE(rax)
  7065 0000484E 803804                  	cmp byte [rax], T_closure
  7066 00004851 0F85541A0000            	jne L_error_non_closure
  7067 00004857 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7068 0000485A FF5009                  	call SOB_CLOSURE_CODE(rax)
  7069 0000485D 803804                  	cmp byte [rax], T_closure
  7070 00004860 0F85451A0000            	jne L_error_non_closure
  7071 00004866 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7072 00004869 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7073 0000486C 50                      	push rax
  7074 0000486D 6A01                    	push 1	; arg count
  7075                                  	; preparing a non-tail-call
  7076                                  	; preparing a non-tail-call
  7077                                  	; preparing a non-tail-call
  7078                                  	; preparing a non-tail-call
  7079                                  	; preparing a non-tail-call
  7080                                  	; preparing a non-tail-call
  7081                                  	; preparing a non-tail-call
  7082 0000486F 488B4510                	mov rax, ENV
  7083 00004873 488B00                  	mov rax, qword [rax + 8 * 0]
  7084 00004876 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7085 00004879 50                      	push rax
  7086 0000487A 6A01                    	push 1	; arg count
  7087 0000487C 488B4510                	mov rax, ENV
  7088 00004880 488B00                  	mov rax, qword [rax + 8 * 0]
  7089 00004883 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7090 00004886 803804                  	cmp byte [rax], T_closure
  7091 00004889 0F851C1A0000            	jne L_error_non_closure
  7092 0000488F FF7001                  	push SOB_CLOSURE_ENV(rax)
  7093 00004892 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7094 00004895 50                      	push rax
  7095 00004896 6A01                    	push 1	; arg count
  7096 00004898 488B4510                	mov rax, ENV
  7097 0000489C 488B00                  	mov rax, qword [rax + 8 * 0]
  7098 0000489F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7099 000048A2 803804                  	cmp byte [rax], T_closure
  7100 000048A5 0F85001A0000            	jne L_error_non_closure
  7101 000048AB FF7001                  	push SOB_CLOSURE_ENV(rax)
  7102 000048AE FF5009                  	call SOB_CLOSURE_CODE(rax)
  7103 000048B1 50                      	push rax
  7104 000048B2 6A01                    	push 1	; arg count
  7105 000048B4 488B4510                	mov rax, ENV
  7106 000048B8 488B00                  	mov rax, qword [rax + 8 * 0]
  7107 000048BB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7108 000048BE 803804                  	cmp byte [rax], T_closure
  7109 000048C1 0F85E4190000            	jne L_error_non_closure
  7110 000048C7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7111 000048CA FF5009                  	call SOB_CLOSURE_CODE(rax)
  7112 000048CD 50                      	push rax
  7113 000048CE 6A01                    	push 1	; arg count
  7114                                  	; preparing a non-tail-call
  7115                                  	; preparing a non-tail-call
  7116                                  	; preparing a non-tail-call
  7117 000048D0 488B4510                	mov rax, ENV
  7118 000048D4 488B00                  	mov rax, qword [rax + 8 * 0]
  7119 000048D7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7120 000048DA 50                      	push rax
  7121 000048DB 6A01                    	push 1	; arg count
  7122 000048DD 488B4510                	mov rax, ENV
  7123 000048E1 488B00                  	mov rax, qword [rax + 8 * 0]
  7124 000048E4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7125 000048E7 803804                  	cmp byte [rax], T_closure
  7126 000048EA 0F85BB190000            	jne L_error_non_closure
  7127 000048F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7128 000048F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7129 000048F6 50                      	push rax
  7130 000048F7 6A01                    	push 1	; arg count
  7131 000048F9 488B4510                	mov rax, ENV
  7132 000048FD 488B00                  	mov rax, qword [rax + 8 * 0]
  7133 00004900 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7134 00004903 803804                  	cmp byte [rax], T_closure
  7135 00004906 0F859F190000            	jne L_error_non_closure
  7136 0000490C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7137 0000490F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7138 00004912 50                      	push rax
  7139 00004913 6A01                    	push 1	; arg count
  7140 00004915 488B4510                	mov rax, ENV
  7141 00004919 488B00                  	mov rax, qword [rax + 8 * 0]
  7142 0000491C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7143 0000491F 803804                  	cmp byte [rax], T_closure
  7144 00004922 0F8583190000            	jne L_error_non_closure
  7145 00004928 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7146 0000492B FF5009                  	call SOB_CLOSURE_CODE(rax)
  7147 0000492E 803804                  	cmp byte [rax], T_closure
  7148 00004931 0F8574190000            	jne L_error_non_closure
  7149 00004937 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7150 0000493A FF5009                  	call SOB_CLOSURE_CODE(rax)
  7151 0000493D 50                      	push rax
  7152 0000493E 6A01                    	push 1	; arg count
  7153                                  	; preparing a non-tail-call
  7154                                  	; preparing a non-tail-call
  7155                                  	; preparing a non-tail-call
  7156                                  	; preparing a non-tail-call
  7157                                  	; preparing a non-tail-call
  7158                                  	; preparing a non-tail-call
  7159                                  	; preparing a non-tail-call
  7160 00004940 488B4510                	mov rax, ENV
  7161 00004944 488B00                  	mov rax, qword [rax + 8 * 0]
  7162 00004947 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7163 0000494A 50                      	push rax
  7164 0000494B 6A01                    	push 1	; arg count
  7165 0000494D 488B4510                	mov rax, ENV
  7166 00004951 488B00                  	mov rax, qword [rax + 8 * 0]
  7167 00004954 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7168 00004957 803804                  	cmp byte [rax], T_closure
  7169 0000495A 0F854B190000            	jne L_error_non_closure
  7170 00004960 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7171 00004963 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7172 00004966 50                      	push rax
  7173 00004967 6A01                    	push 1	; arg count
  7174 00004969 488B4510                	mov rax, ENV
  7175 0000496D 488B00                  	mov rax, qword [rax + 8 * 0]
  7176 00004970 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7177 00004973 803804                  	cmp byte [rax], T_closure
  7178 00004976 0F852F190000            	jne L_error_non_closure
  7179 0000497C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7180 0000497F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7181 00004982 50                      	push rax
  7182 00004983 6A01                    	push 1	; arg count
  7183 00004985 488B4510                	mov rax, ENV
  7184 00004989 488B00                  	mov rax, qword [rax + 8 * 0]
  7185 0000498C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7186 0000498F 803804                  	cmp byte [rax], T_closure
  7187 00004992 0F8513190000            	jne L_error_non_closure
  7188 00004998 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7189 0000499B FF5009                  	call SOB_CLOSURE_CODE(rax)
  7190 0000499E 50                      	push rax
  7191 0000499F 6A01                    	push 1	; arg count
  7192 000049A1 488B4510                	mov rax, ENV
  7193 000049A5 488B00                  	mov rax, qword [rax + 8 * 0]
  7194 000049A8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7195 000049AB 803804                  	cmp byte [rax], T_closure
  7196 000049AE 0F85F7180000            	jne L_error_non_closure
  7197 000049B4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7198 000049B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7199 000049BA 50                      	push rax
  7200 000049BB 6A01                    	push 1	; arg count
  7201                                  	; preparing a non-tail-call
  7202                                  	; preparing a non-tail-call
  7203                                  	; preparing a non-tail-call
  7204                                  	; preparing a non-tail-call
  7205                                  	; preparing a non-tail-call
  7206 000049BD 488B4510                	mov rax, ENV
  7207 000049C1 488B00                  	mov rax, qword [rax + 8 * 0]
  7208 000049C4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7209 000049C7 50                      	push rax
  7210 000049C8 6A01                    	push 1	; arg count
  7211 000049CA 488B4510                	mov rax, ENV
  7212 000049CE 488B00                  	mov rax, qword [rax + 8 * 0]
  7213 000049D1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7214 000049D4 803804                  	cmp byte [rax], T_closure
  7215 000049D7 0F85CE180000            	jne L_error_non_closure
  7216 000049DD FF7001                  	push SOB_CLOSURE_ENV(rax)
  7217 000049E0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7218 000049E3 50                      	push rax
  7219 000049E4 6A01                    	push 1	; arg count
  7220 000049E6 488B4510                	mov rax, ENV
  7221 000049EA 488B00                  	mov rax, qword [rax + 8 * 0]
  7222 000049ED 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7223 000049F0 803804                  	cmp byte [rax], T_closure
  7224 000049F3 0F85B2180000            	jne L_error_non_closure
  7225 000049F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7226 000049FC FF5009                  	call SOB_CLOSURE_CODE(rax)
  7227 000049FF 50                      	push rax
  7228 00004A00 6A01                    	push 1	; arg count
  7229 00004A02 488B4510                	mov rax, ENV
  7230 00004A06 488B00                  	mov rax, qword [rax + 8 * 0]
  7231 00004A09 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7232 00004A0C 803804                  	cmp byte [rax], T_closure
  7233 00004A0F 0F8596180000            	jne L_error_non_closure
  7234 00004A15 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7235 00004A18 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7236 00004A1B 50                      	push rax
  7237 00004A1C 6A01                    	push 1	; arg count
  7238                                  	; preparing a non-tail-call
  7239                                  	; preparing a non-tail-call
  7240                                  	; preparing a non-tail-call
  7241 00004A1E 488B4510                	mov rax, ENV
  7242 00004A22 488B00                  	mov rax, qword [rax + 8 * 0]
  7243 00004A25 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7244 00004A28 50                      	push rax
  7245 00004A29 6A01                    	push 1	; arg count
  7246 00004A2B 488B4510                	mov rax, ENV
  7247 00004A2F 488B00                  	mov rax, qword [rax + 8 * 0]
  7248 00004A32 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7249 00004A35 803804                  	cmp byte [rax], T_closure
  7250 00004A38 0F856D180000            	jne L_error_non_closure
  7251 00004A3E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7252 00004A41 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7253 00004A44 50                      	push rax
  7254 00004A45 6A01                    	push 1	; arg count
  7255 00004A47 488B4510                	mov rax, ENV
  7256 00004A4B 488B00                  	mov rax, qword [rax + 8 * 0]
  7257 00004A4E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7258 00004A51 803804                  	cmp byte [rax], T_closure
  7259 00004A54 0F8551180000            	jne L_error_non_closure
  7260 00004A5A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7261 00004A5D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7262 00004A60 50                      	push rax
  7263 00004A61 6A01                    	push 1	; arg count
  7264 00004A63 488B4510                	mov rax, ENV
  7265 00004A67 488B00                  	mov rax, qword [rax + 8 * 0]
  7266 00004A6A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7267 00004A6D 803804                  	cmp byte [rax], T_closure
  7268 00004A70 0F8535180000            	jne L_error_non_closure
  7269 00004A76 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7270 00004A79 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7271 00004A7C 803804                  	cmp byte [rax], T_closure
  7272 00004A7F 0F8526180000            	jne L_error_non_closure
  7273 00004A85 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7274 00004A88 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7275 00004A8B 50                      	push rax
  7276 00004A8C 6A01                    	push 1	; arg count
  7277                                  	; preparing a non-tail-call
  7278                                  	; preparing a non-tail-call
  7279                                  	; preparing a non-tail-call
  7280                                  	; preparing a non-tail-call
  7281 00004A8E 488B4510                	mov rax, ENV
  7282 00004A92 488B00                  	mov rax, qword [rax + 8 * 0]
  7283 00004A95 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7284 00004A98 50                      	push rax
  7285 00004A99 6A01                    	push 1	; arg count
  7286 00004A9B 488B4510                	mov rax, ENV
  7287 00004A9F 488B00                  	mov rax, qword [rax + 8 * 0]
  7288 00004AA2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7289 00004AA5 803804                  	cmp byte [rax], T_closure
  7290 00004AA8 0F85FD170000            	jne L_error_non_closure
  7291 00004AAE FF7001                  	push SOB_CLOSURE_ENV(rax)
  7292 00004AB1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7293 00004AB4 50                      	push rax
  7294 00004AB5 6A01                    	push 1	; arg count
  7295 00004AB7 488B4510                	mov rax, ENV
  7296 00004ABB 488B00                  	mov rax, qword [rax + 8 * 0]
  7297 00004ABE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7298 00004AC1 803804                  	cmp byte [rax], T_closure
  7299 00004AC4 0F85E1170000            	jne L_error_non_closure
  7300 00004ACA FF7001                  	push SOB_CLOSURE_ENV(rax)
  7301 00004ACD FF5009                  	call SOB_CLOSURE_CODE(rax)
  7302 00004AD0 50                      	push rax
  7303 00004AD1 6A01                    	push 1	; arg count
  7304 00004AD3 488B4510                	mov rax, ENV
  7305 00004AD7 488B00                  	mov rax, qword [rax + 8 * 0]
  7306 00004ADA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7307 00004ADD 803804                  	cmp byte [rax], T_closure
  7308 00004AE0 0F85C5170000            	jne L_error_non_closure
  7309 00004AE6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7310 00004AE9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7311 00004AEC 50                      	push rax
  7312 00004AED 6A01                    	push 1	; arg count
  7313 00004AEF 488B4510                	mov rax, ENV
  7314 00004AF3 488B00                  	mov rax, qword [rax + 8 * 0]
  7315 00004AF6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7316 00004AF9 803804                  	cmp byte [rax], T_closure
  7317 00004AFC 0F85A9170000            	jne L_error_non_closure
  7318 00004B02 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7319 00004B05 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7320 00004B08 803804                  	cmp byte [rax], T_closure
  7321 00004B0B 0F859A170000            	jne L_error_non_closure
  7322 00004B11 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7323 00004B14 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7324 00004B17 803804                  	cmp byte [rax], T_closure
  7325 00004B1A 0F858B170000            	jne L_error_non_closure
  7326 00004B20 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7327 00004B23 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7328 00004B26 50                      	push rax
  7329 00004B27 6A01                    	push 1	; arg count
  7330                                  	; preparing a non-tail-call
  7331                                  	; preparing a non-tail-call
  7332                                  	; preparing a non-tail-call
  7333                                  	; preparing a non-tail-call
  7334                                  	; preparing a non-tail-call
  7335                                  	; preparing a non-tail-call
  7336 00004B29 488B4510                	mov rax, ENV
  7337 00004B2D 488B00                  	mov rax, qword [rax + 8 * 0]
  7338 00004B30 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7339 00004B33 50                      	push rax
  7340 00004B34 6A01                    	push 1	; arg count
  7341 00004B36 488B4510                	mov rax, ENV
  7342 00004B3A 488B00                  	mov rax, qword [rax + 8 * 0]
  7343 00004B3D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7344 00004B40 803804                  	cmp byte [rax], T_closure
  7345 00004B43 0F8562170000            	jne L_error_non_closure
  7346 00004B49 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7347 00004B4C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7348 00004B4F 50                      	push rax
  7349 00004B50 6A01                    	push 1	; arg count
  7350 00004B52 488B4510                	mov rax, ENV
  7351 00004B56 488B00                  	mov rax, qword [rax + 8 * 0]
  7352 00004B59 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7353 00004B5C 803804                  	cmp byte [rax], T_closure
  7354 00004B5F 0F8546170000            	jne L_error_non_closure
  7355 00004B65 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7356 00004B68 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7357 00004B6B 50                      	push rax
  7358 00004B6C 6A01                    	push 1	; arg count
  7359 00004B6E 488B4510                	mov rax, ENV
  7360 00004B72 488B00                  	mov rax, qword [rax + 8 * 0]
  7361 00004B75 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7362 00004B78 803804                  	cmp byte [rax], T_closure
  7363 00004B7B 0F852A170000            	jne L_error_non_closure
  7364 00004B81 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7365 00004B84 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7366 00004B87 50                      	push rax
  7367 00004B88 6A01                    	push 1	; arg count
  7368 00004B8A 488B4510                	mov rax, ENV
  7369 00004B8E 488B00                  	mov rax, qword [rax + 8 * 0]
  7370 00004B91 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7371 00004B94 803804                  	cmp byte [rax], T_closure
  7372 00004B97 0F850E170000            	jne L_error_non_closure
  7373 00004B9D FF7001                  	push SOB_CLOSURE_ENV(rax)
  7374 00004BA0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7375 00004BA3 50                      	push rax
  7376 00004BA4 6A01                    	push 1	; arg count
  7377                                  	; preparing a non-tail-call
  7378                                  	; preparing a non-tail-call
  7379                                  	; preparing a non-tail-call
  7380 00004BA6 488B4510                	mov rax, ENV
  7381 00004BAA 488B00                  	mov rax, qword [rax + 8 * 0]
  7382 00004BAD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7383 00004BB0 50                      	push rax
  7384 00004BB1 6A01                    	push 1	; arg count
  7385 00004BB3 488B4510                	mov rax, ENV
  7386 00004BB7 488B00                  	mov rax, qword [rax + 8 * 0]
  7387 00004BBA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7388 00004BBD 803804                  	cmp byte [rax], T_closure
  7389 00004BC0 0F85E5160000            	jne L_error_non_closure
  7390 00004BC6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7391 00004BC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7392 00004BCC 50                      	push rax
  7393 00004BCD 6A01                    	push 1	; arg count
  7394 00004BCF 488B4510                	mov rax, ENV
  7395 00004BD3 488B00                  	mov rax, qword [rax + 8 * 0]
  7396 00004BD6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7397 00004BD9 803804                  	cmp byte [rax], T_closure
  7398 00004BDC 0F85C9160000            	jne L_error_non_closure
  7399 00004BE2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7400 00004BE5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7401 00004BE8 50                      	push rax
  7402 00004BE9 6A01                    	push 1	; arg count
  7403 00004BEB 488B4510                	mov rax, ENV
  7404 00004BEF 488B00                  	mov rax, qword [rax + 8 * 0]
  7405 00004BF2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7406 00004BF5 803804                  	cmp byte [rax], T_closure
  7407 00004BF8 0F85AD160000            	jne L_error_non_closure
  7408 00004BFE FF7001                  	push SOB_CLOSURE_ENV(rax)
  7409 00004C01 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7410 00004C04 803804                  	cmp byte [rax], T_closure
  7411 00004C07 0F859E160000            	jne L_error_non_closure
  7412 00004C0D FF7001                  	push SOB_CLOSURE_ENV(rax)
  7413 00004C10 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7414 00004C13 50                      	push rax
  7415 00004C14 6A01                    	push 1	; arg count
  7416                                  	; preparing a non-tail-call
  7417                                  	; preparing a non-tail-call
  7418                                  	; preparing a non-tail-call
  7419                                  	; preparing a non-tail-call
  7420 00004C16 488B4510                	mov rax, ENV
  7421 00004C1A 488B00                  	mov rax, qword [rax + 8 * 0]
  7422 00004C1D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7423 00004C20 50                      	push rax
  7424 00004C21 6A01                    	push 1	; arg count
  7425 00004C23 488B4510                	mov rax, ENV
  7426 00004C27 488B00                  	mov rax, qword [rax + 8 * 0]
  7427 00004C2A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7428 00004C2D 803804                  	cmp byte [rax], T_closure
  7429 00004C30 0F8575160000            	jne L_error_non_closure
  7430 00004C36 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7431 00004C39 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7432 00004C3C 50                      	push rax
  7433 00004C3D 6A01                    	push 1	; arg count
  7434 00004C3F 488B4510                	mov rax, ENV
  7435 00004C43 488B00                  	mov rax, qword [rax + 8 * 0]
  7436 00004C46 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7437 00004C49 803804                  	cmp byte [rax], T_closure
  7438 00004C4C 0F8559160000            	jne L_error_non_closure
  7439 00004C52 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7440 00004C55 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7441 00004C58 50                      	push rax
  7442 00004C59 6A01                    	push 1	; arg count
  7443 00004C5B 488B4510                	mov rax, ENV
  7444 00004C5F 488B00                  	mov rax, qword [rax + 8 * 0]
  7445 00004C62 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7446 00004C65 803804                  	cmp byte [rax], T_closure
  7447 00004C68 0F853D160000            	jne L_error_non_closure
  7448 00004C6E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7449 00004C71 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7450 00004C74 50                      	push rax
  7451 00004C75 6A01                    	push 1	; arg count
  7452 00004C77 488B4510                	mov rax, ENV
  7453 00004C7B 488B00                  	mov rax, qword [rax + 8 * 0]
  7454 00004C7E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7455 00004C81 803804                  	cmp byte [rax], T_closure
  7456 00004C84 0F8521160000            	jne L_error_non_closure
  7457 00004C8A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7458 00004C8D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7459 00004C90 803804                  	cmp byte [rax], T_closure
  7460 00004C93 0F8512160000            	jne L_error_non_closure
  7461 00004C99 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7462 00004C9C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7463 00004C9F 803804                  	cmp byte [rax], T_closure
  7464 00004CA2 0F8503160000            	jne L_error_non_closure
  7465 00004CA8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7466 00004CAB FF5009                  	call SOB_CLOSURE_CODE(rax)
  7467 00004CAE 50                      	push rax
  7468 00004CAF 6A01                    	push 1	; arg count
  7469                                  	; preparing a non-tail-call
  7470                                  	; preparing a non-tail-call
  7471                                  	; preparing a non-tail-call
  7472                                  	; preparing a non-tail-call
  7473 00004CB1 488B4510                	mov rax, ENV
  7474 00004CB5 488B00                  	mov rax, qword [rax + 8 * 0]
  7475 00004CB8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7476 00004CBB 50                      	push rax
  7477 00004CBC 6A01                    	push 1	; arg count
  7478 00004CBE 488B4510                	mov rax, ENV
  7479 00004CC2 488B00                  	mov rax, qword [rax + 8 * 0]
  7480 00004CC5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7481 00004CC8 803804                  	cmp byte [rax], T_closure
  7482 00004CCB 0F85DA150000            	jne L_error_non_closure
  7483 00004CD1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7484 00004CD4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7485 00004CD7 50                      	push rax
  7486 00004CD8 6A01                    	push 1	; arg count
  7487 00004CDA 488B4510                	mov rax, ENV
  7488 00004CDE 488B00                  	mov rax, qword [rax + 8 * 0]
  7489 00004CE1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7490 00004CE4 803804                  	cmp byte [rax], T_closure
  7491 00004CE7 0F85BE150000            	jne L_error_non_closure
  7492 00004CED FF7001                  	push SOB_CLOSURE_ENV(rax)
  7493 00004CF0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7494 00004CF3 50                      	push rax
  7495 00004CF4 6A01                    	push 1	; arg count
  7496 00004CF6 488B4510                	mov rax, ENV
  7497 00004CFA 488B00                  	mov rax, qword [rax + 8 * 0]
  7498 00004CFD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7499 00004D00 803804                  	cmp byte [rax], T_closure
  7500 00004D03 0F85A2150000            	jne L_error_non_closure
  7501 00004D09 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7502 00004D0C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7503 00004D0F 50                      	push rax
  7504 00004D10 6A01                    	push 1	; arg count
  7505 00004D12 488B4510                	mov rax, ENV
  7506 00004D16 488B00                  	mov rax, qword [rax + 8 * 0]
  7507 00004D19 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7508 00004D1C 803804                  	cmp byte [rax], T_closure
  7509 00004D1F 0F8586150000            	jne L_error_non_closure
  7510 00004D25 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7511 00004D28 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7512 00004D2B 803804                  	cmp byte [rax], T_closure
  7513 00004D2E 0F8577150000            	jne L_error_non_closure
  7514 00004D34 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7515 00004D37 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7516 00004D3A 803804                  	cmp byte [rax], T_closure
  7517 00004D3D 0F8568150000            	jne L_error_non_closure
  7518 00004D43 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7519 00004D46 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7520 00004D49 50                      	push rax
  7521 00004D4A 6A01                    	push 1	; arg count
  7522                                  	; preparing a non-tail-call
  7523                                  	; preparing a non-tail-call
  7524                                  	; preparing a non-tail-call
  7525 00004D4C 488B4510                	mov rax, ENV
  7526 00004D50 488B00                  	mov rax, qword [rax + 8 * 0]
  7527 00004D53 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7528 00004D56 50                      	push rax
  7529 00004D57 6A01                    	push 1	; arg count
  7530 00004D59 488B4510                	mov rax, ENV
  7531 00004D5D 488B00                  	mov rax, qword [rax + 8 * 0]
  7532 00004D60 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7533 00004D63 803804                  	cmp byte [rax], T_closure
  7534 00004D66 0F853F150000            	jne L_error_non_closure
  7535 00004D6C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7536 00004D6F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7537 00004D72 50                      	push rax
  7538 00004D73 6A01                    	push 1	; arg count
  7539 00004D75 488B4510                	mov rax, ENV
  7540 00004D79 488B00                  	mov rax, qword [rax + 8 * 0]
  7541 00004D7C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7542 00004D7F 803804                  	cmp byte [rax], T_closure
  7543 00004D82 0F8523150000            	jne L_error_non_closure
  7544 00004D88 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7545 00004D8B FF5009                  	call SOB_CLOSURE_CODE(rax)
  7546 00004D8E 50                      	push rax
  7547 00004D8F 6A01                    	push 1	; arg count
  7548 00004D91 488B4510                	mov rax, ENV
  7549 00004D95 488B00                  	mov rax, qword [rax + 8 * 0]
  7550 00004D98 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7551 00004D9B 803804                  	cmp byte [rax], T_closure
  7552 00004D9E 0F8507150000            	jne L_error_non_closure
  7553 00004DA4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7554 00004DA7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7555 00004DAA 803804                  	cmp byte [rax], T_closure
  7556 00004DAD 0F85F8140000            	jne L_error_non_closure
  7557 00004DB3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7558 00004DB6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7559 00004DB9 50                      	push rax
  7560 00004DBA 6A01                    	push 1	; arg count
  7561                                  	; preparing a non-tail-call
  7562                                  	; preparing a non-tail-call
  7563                                  	; preparing a non-tail-call
  7564                                  	; preparing a non-tail-call
  7565 00004DBC 488B4510                	mov rax, ENV
  7566 00004DC0 488B00                  	mov rax, qword [rax + 8 * 0]
  7567 00004DC3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7568 00004DC6 50                      	push rax
  7569 00004DC7 6A01                    	push 1	; arg count
  7570 00004DC9 488B4510                	mov rax, ENV
  7571 00004DCD 488B00                  	mov rax, qword [rax + 8 * 0]
  7572 00004DD0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7573 00004DD3 803804                  	cmp byte [rax], T_closure
  7574 00004DD6 0F85CF140000            	jne L_error_non_closure
  7575 00004DDC FF7001                  	push SOB_CLOSURE_ENV(rax)
  7576 00004DDF FF5009                  	call SOB_CLOSURE_CODE(rax)
  7577 00004DE2 50                      	push rax
  7578 00004DE3 6A01                    	push 1	; arg count
  7579 00004DE5 488B4510                	mov rax, ENV
  7580 00004DE9 488B00                  	mov rax, qword [rax + 8 * 0]
  7581 00004DEC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7582 00004DEF 803804                  	cmp byte [rax], T_closure
  7583 00004DF2 0F85B3140000            	jne L_error_non_closure
  7584 00004DF8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7585 00004DFB FF5009                  	call SOB_CLOSURE_CODE(rax)
  7586 00004DFE 50                      	push rax
  7587 00004DFF 6A01                    	push 1	; arg count
  7588 00004E01 488B4510                	mov rax, ENV
  7589 00004E05 488B00                  	mov rax, qword [rax + 8 * 0]
  7590 00004E08 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7591 00004E0B 803804                  	cmp byte [rax], T_closure
  7592 00004E0E 0F8597140000            	jne L_error_non_closure
  7593 00004E14 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7594 00004E17 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7595 00004E1A 50                      	push rax
  7596 00004E1B 6A01                    	push 1	; arg count
  7597 00004E1D 488B4510                	mov rax, ENV
  7598 00004E21 488B00                  	mov rax, qword [rax + 8 * 0]
  7599 00004E24 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7600 00004E27 803804                  	cmp byte [rax], T_closure
  7601 00004E2A 0F857B140000            	jne L_error_non_closure
  7602 00004E30 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7603 00004E33 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7604 00004E36 803804                  	cmp byte [rax], T_closure
  7605 00004E39 0F856C140000            	jne L_error_non_closure
  7606 00004E3F FF7001                  	push SOB_CLOSURE_ENV(rax)
  7607 00004E42 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7608 00004E45 803804                  	cmp byte [rax], T_closure
  7609 00004E48 0F855D140000            	jne L_error_non_closure
  7610 00004E4E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7611 00004E51 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7612 00004E54 50                      	push rax
  7613 00004E55 6A01                    	push 1	; arg count
  7614                                  	; preparing a non-tail-call
  7615                                  	; preparing a non-tail-call
  7616                                  	; preparing a non-tail-call
  7617                                  	; preparing a non-tail-call
  7618 00004E57 488B4510                	mov rax, ENV
  7619 00004E5B 488B00                  	mov rax, qword [rax + 8 * 0]
  7620 00004E5E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7621 00004E61 50                      	push rax
  7622 00004E62 6A01                    	push 1	; arg count
  7623 00004E64 488B4510                	mov rax, ENV
  7624 00004E68 488B00                  	mov rax, qword [rax + 8 * 0]
  7625 00004E6B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7626 00004E6E 803804                  	cmp byte [rax], T_closure
  7627 00004E71 0F8534140000            	jne L_error_non_closure
  7628 00004E77 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7629 00004E7A FF5009                  	call SOB_CLOSURE_CODE(rax)
  7630 00004E7D 50                      	push rax
  7631 00004E7E 6A01                    	push 1	; arg count
  7632 00004E80 488B4510                	mov rax, ENV
  7633 00004E84 488B00                  	mov rax, qword [rax + 8 * 0]
  7634 00004E87 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7635 00004E8A 803804                  	cmp byte [rax], T_closure
  7636 00004E8D 0F8518140000            	jne L_error_non_closure
  7637 00004E93 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7638 00004E96 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7639 00004E99 50                      	push rax
  7640 00004E9A 6A01                    	push 1	; arg count
  7641 00004E9C 488B4510                	mov rax, ENV
  7642 00004EA0 488B00                  	mov rax, qword [rax + 8 * 0]
  7643 00004EA3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7644 00004EA6 803804                  	cmp byte [rax], T_closure
  7645 00004EA9 0F85FC130000            	jne L_error_non_closure
  7646 00004EAF FF7001                  	push SOB_CLOSURE_ENV(rax)
  7647 00004EB2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7648 00004EB5 50                      	push rax
  7649 00004EB6 6A01                    	push 1	; arg count
  7650                                  	; preparing a non-tail-call
  7651                                  	; preparing a non-tail-call
  7652                                  	; preparing a non-tail-call
  7653                                  	; preparing a non-tail-call
  7654                                  	; preparing a non-tail-call
  7655                                  	; preparing a non-tail-call
  7656 00004EB8 488B4510                	mov rax, ENV
  7657 00004EBC 488B00                  	mov rax, qword [rax + 8 * 0]
  7658 00004EBF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7659 00004EC2 50                      	push rax
  7660 00004EC3 6A01                    	push 1	; arg count
  7661 00004EC5 488B4510                	mov rax, ENV
  7662 00004EC9 488B00                  	mov rax, qword [rax + 8 * 0]
  7663 00004ECC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7664 00004ECF 803804                  	cmp byte [rax], T_closure
  7665 00004ED2 0F85D3130000            	jne L_error_non_closure
  7666 00004ED8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7667 00004EDB FF5009                  	call SOB_CLOSURE_CODE(rax)
  7668 00004EDE 50                      	push rax
  7669 00004EDF 6A01                    	push 1	; arg count
  7670 00004EE1 488B4510                	mov rax, ENV
  7671 00004EE5 488B00                  	mov rax, qword [rax + 8 * 0]
  7672 00004EE8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7673 00004EEB 803804                  	cmp byte [rax], T_closure
  7674 00004EEE 0F85B7130000            	jne L_error_non_closure
  7675 00004EF4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7676 00004EF7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7677 00004EFA 50                      	push rax
  7678 00004EFB 6A01                    	push 1	; arg count
  7679 00004EFD 488B4510                	mov rax, ENV
  7680 00004F01 488B00                  	mov rax, qword [rax + 8 * 0]
  7681 00004F04 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7682 00004F07 803804                  	cmp byte [rax], T_closure
  7683 00004F0A 0F859B130000            	jne L_error_non_closure
  7684 00004F10 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7685 00004F13 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7686 00004F16 50                      	push rax
  7687 00004F17 6A01                    	push 1	; arg count
  7688 00004F19 488B4510                	mov rax, ENV
  7689 00004F1D 488B00                  	mov rax, qword [rax + 8 * 0]
  7690 00004F20 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7691 00004F23 803804                  	cmp byte [rax], T_closure
  7692 00004F26 0F857F130000            	jne L_error_non_closure
  7693 00004F2C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7694 00004F2F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7695 00004F32 50                      	push rax
  7696 00004F33 6A01                    	push 1	; arg count
  7697                                  	; preparing a non-tail-call
  7698                                  	; preparing a non-tail-call
  7699                                  	; preparing a non-tail-call
  7700 00004F35 488B4510                	mov rax, ENV
  7701 00004F39 488B00                  	mov rax, qword [rax + 8 * 0]
  7702 00004F3C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7703 00004F3F 50                      	push rax
  7704 00004F40 6A01                    	push 1	; arg count
  7705 00004F42 488B4510                	mov rax, ENV
  7706 00004F46 488B00                  	mov rax, qword [rax + 8 * 0]
  7707 00004F49 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7708 00004F4C 803804                  	cmp byte [rax], T_closure
  7709 00004F4F 0F8556130000            	jne L_error_non_closure
  7710 00004F55 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7711 00004F58 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7712 00004F5B 50                      	push rax
  7713 00004F5C 6A01                    	push 1	; arg count
  7714 00004F5E 488B4510                	mov rax, ENV
  7715 00004F62 488B00                  	mov rax, qword [rax + 8 * 0]
  7716 00004F65 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7717 00004F68 803804                  	cmp byte [rax], T_closure
  7718 00004F6B 0F853A130000            	jne L_error_non_closure
  7719 00004F71 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7720 00004F74 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7721 00004F77 50                      	push rax
  7722 00004F78 6A01                    	push 1	; arg count
  7723 00004F7A 488B4510                	mov rax, ENV
  7724 00004F7E 488B00                  	mov rax, qword [rax + 8 * 0]
  7725 00004F81 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7726 00004F84 803804                  	cmp byte [rax], T_closure
  7727 00004F87 0F851E130000            	jne L_error_non_closure
  7728 00004F8D FF7001                  	push SOB_CLOSURE_ENV(rax)
  7729 00004F90 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7730 00004F93 803804                  	cmp byte [rax], T_closure
  7731 00004F96 0F850F130000            	jne L_error_non_closure
  7732 00004F9C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7733 00004F9F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7734 00004FA2 50                      	push rax
  7735 00004FA3 6A01                    	push 1	; arg count
  7736                                  	; preparing a non-tail-call
  7737                                  	; preparing a non-tail-call
  7738                                  	; preparing a non-tail-call
  7739                                  	; preparing a non-tail-call
  7740 00004FA5 488B4510                	mov rax, ENV
  7741 00004FA9 488B00                  	mov rax, qword [rax + 8 * 0]
  7742 00004FAC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7743 00004FAF 50                      	push rax
  7744 00004FB0 6A01                    	push 1	; arg count
  7745 00004FB2 488B4510                	mov rax, ENV
  7746 00004FB6 488B00                  	mov rax, qword [rax + 8 * 0]
  7747 00004FB9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7748 00004FBC 803804                  	cmp byte [rax], T_closure
  7749 00004FBF 0F85E6120000            	jne L_error_non_closure
  7750 00004FC5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7751 00004FC8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7752 00004FCB 50                      	push rax
  7753 00004FCC 6A01                    	push 1	; arg count
  7754 00004FCE 488B4510                	mov rax, ENV
  7755 00004FD2 488B00                  	mov rax, qword [rax + 8 * 0]
  7756 00004FD5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7757 00004FD8 803804                  	cmp byte [rax], T_closure
  7758 00004FDB 0F85CA120000            	jne L_error_non_closure
  7759 00004FE1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7760 00004FE4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7761 00004FE7 50                      	push rax
  7762 00004FE8 6A01                    	push 1	; arg count
  7763 00004FEA 488B4510                	mov rax, ENV
  7764 00004FEE 488B00                  	mov rax, qword [rax + 8 * 0]
  7765 00004FF1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7766 00004FF4 803804                  	cmp byte [rax], T_closure
  7767 00004FF7 0F85AE120000            	jne L_error_non_closure
  7768 00004FFD FF7001                  	push SOB_CLOSURE_ENV(rax)
  7769 00005000 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7770 00005003 50                      	push rax
  7771 00005004 6A01                    	push 1	; arg count
  7772 00005006 488B4510                	mov rax, ENV
  7773 0000500A 488B00                  	mov rax, qword [rax + 8 * 0]
  7774 0000500D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7775 00005010 803804                  	cmp byte [rax], T_closure
  7776 00005013 0F8592120000            	jne L_error_non_closure
  7777 00005019 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7778 0000501C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7779 0000501F 803804                  	cmp byte [rax], T_closure
  7780 00005022 0F8583120000            	jne L_error_non_closure
  7781 00005028 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7782 0000502B FF5009                  	call SOB_CLOSURE_CODE(rax)
  7783 0000502E 803804                  	cmp byte [rax], T_closure
  7784 00005031 0F8574120000            	jne L_error_non_closure
  7785 00005037 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7786 0000503A FF5009                  	call SOB_CLOSURE_CODE(rax)
  7787 0000503D 803804                  	cmp byte [rax], T_closure
  7788 00005040 0F8565120000            	jne L_error_non_closure
  7789 00005046 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7790 00005049 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7791 0000504C 803804                  	cmp byte [rax], T_closure
  7792 0000504F 0F8556120000            	jne L_error_non_closure
  7793 00005055 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7794 00005058 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7795 0000505B 50                      	push rax
  7796 0000505C 6A01                    	push 1	; arg count
  7797                                  	; preparing a non-tail-call
  7798                                  	; preparing a non-tail-call
  7799                                  	; preparing a non-tail-call
  7800                                  	; preparing a non-tail-call
  7801 0000505E 488B4510                	mov rax, ENV
  7802 00005062 488B00                  	mov rax, qword [rax + 8 * 0]
  7803 00005065 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7804 00005068 50                      	push rax
  7805 00005069 6A01                    	push 1	; arg count
  7806 0000506B 488B4510                	mov rax, ENV
  7807 0000506F 488B00                  	mov rax, qword [rax + 8 * 0]
  7808 00005072 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7809 00005075 803804                  	cmp byte [rax], T_closure
  7810 00005078 0F852D120000            	jne L_error_non_closure
  7811 0000507E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7812 00005081 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7813 00005084 50                      	push rax
  7814 00005085 6A01                    	push 1	; arg count
  7815 00005087 488B4510                	mov rax, ENV
  7816 0000508B 488B00                  	mov rax, qword [rax + 8 * 0]
  7817 0000508E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7818 00005091 803804                  	cmp byte [rax], T_closure
  7819 00005094 0F8511120000            	jne L_error_non_closure
  7820 0000509A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7821 0000509D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7822 000050A0 50                      	push rax
  7823 000050A1 6A01                    	push 1	; arg count
  7824 000050A3 488B4510                	mov rax, ENV
  7825 000050A7 488B00                  	mov rax, qword [rax + 8 * 0]
  7826 000050AA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7827 000050AD 803804                  	cmp byte [rax], T_closure
  7828 000050B0 0F85F5110000            	jne L_error_non_closure
  7829 000050B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7830 000050B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7831 000050BC 50                      	push rax
  7832 000050BD 6A01                    	push 1	; arg count
  7833 000050BF 488B4510                	mov rax, ENV
  7834 000050C3 488B00                  	mov rax, qword [rax + 8 * 0]
  7835 000050C6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7836 000050C9 803804                  	cmp byte [rax], T_closure
  7837 000050CC 0F85D9110000            	jne L_error_non_closure
  7838 000050D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7839 000050D5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7840 000050D8 803804                  	cmp byte [rax], T_closure
  7841 000050DB 0F85CA110000            	jne L_error_non_closure
  7842 000050E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7843 000050E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7844 000050E7 803804                  	cmp byte [rax], T_closure
  7845 000050EA 0F85BB110000            	jne L_error_non_closure
  7846 000050F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7847 000050F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7848 000050F6 50                      	push rax
  7849 000050F7 6A01                    	push 1	; arg count
  7850                                  	; preparing a non-tail-call
  7851                                  	; preparing a non-tail-call
  7852                                  	; preparing a non-tail-call
  7853                                  	; preparing a non-tail-call
  7854                                  	; preparing a non-tail-call
  7855 000050F9 488B4510                	mov rax, ENV
  7856 000050FD 488B00                  	mov rax, qword [rax + 8 * 0]
  7857 00005100 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7858 00005103 50                      	push rax
  7859 00005104 6A01                    	push 1	; arg count
  7860 00005106 488B4510                	mov rax, ENV
  7861 0000510A 488B00                  	mov rax, qword [rax + 8 * 0]
  7862 0000510D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7863 00005110 803804                  	cmp byte [rax], T_closure
  7864 00005113 0F8592110000            	jne L_error_non_closure
  7865 00005119 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7866 0000511C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7867 0000511F 50                      	push rax
  7868 00005120 6A01                    	push 1	; arg count
  7869 00005122 488B4510                	mov rax, ENV
  7870 00005126 488B00                  	mov rax, qword [rax + 8 * 0]
  7871 00005129 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7872 0000512C 803804                  	cmp byte [rax], T_closure
  7873 0000512F 0F8576110000            	jne L_error_non_closure
  7874 00005135 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7875 00005138 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7876 0000513B 50                      	push rax
  7877 0000513C 6A01                    	push 1	; arg count
  7878 0000513E 488B4510                	mov rax, ENV
  7879 00005142 488B00                  	mov rax, qword [rax + 8 * 0]
  7880 00005145 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7881 00005148 803804                  	cmp byte [rax], T_closure
  7882 0000514B 0F855A110000            	jne L_error_non_closure
  7883 00005151 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7884 00005154 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7885 00005157 50                      	push rax
  7886 00005158 6A01                    	push 1	; arg count
  7887                                  	; preparing a non-tail-call
  7888                                  	; preparing a non-tail-call
  7889                                  	; preparing a non-tail-call
  7890                                  	; preparing a non-tail-call
  7891 0000515A 488B4510                	mov rax, ENV
  7892 0000515E 488B00                  	mov rax, qword [rax + 8 * 0]
  7893 00005161 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7894 00005164 50                      	push rax
  7895 00005165 6A01                    	push 1	; arg count
  7896 00005167 488B4510                	mov rax, ENV
  7897 0000516B 488B00                  	mov rax, qword [rax + 8 * 0]
  7898 0000516E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7899 00005171 803804                  	cmp byte [rax], T_closure
  7900 00005174 0F8531110000            	jne L_error_non_closure
  7901 0000517A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7902 0000517D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7903 00005180 50                      	push rax
  7904 00005181 6A01                    	push 1	; arg count
  7905 00005183 488B4510                	mov rax, ENV
  7906 00005187 488B00                  	mov rax, qword [rax + 8 * 0]
  7907 0000518A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7908 0000518D 803804                  	cmp byte [rax], T_closure
  7909 00005190 0F8515110000            	jne L_error_non_closure
  7910 00005196 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7911 00005199 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7912 0000519C 50                      	push rax
  7913 0000519D 6A01                    	push 1	; arg count
  7914 0000519F 488B4510                	mov rax, ENV
  7915 000051A3 488B00                  	mov rax, qword [rax + 8 * 0]
  7916 000051A6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7917 000051A9 803804                  	cmp byte [rax], T_closure
  7918 000051AC 0F85F9100000            	jne L_error_non_closure
  7919 000051B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7920 000051B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7921 000051B8 50                      	push rax
  7922 000051B9 6A01                    	push 1	; arg count
  7923                                  	; preparing a non-tail-call
  7924                                  	; preparing a non-tail-call
  7925                                  	; preparing a non-tail-call
  7926                                  	; preparing a non-tail-call
  7927 000051BB 488B4510                	mov rax, ENV
  7928 000051BF 488B00                  	mov rax, qword [rax + 8 * 0]
  7929 000051C2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7930 000051C5 50                      	push rax
  7931 000051C6 6A01                    	push 1	; arg count
  7932 000051C8 488B4510                	mov rax, ENV
  7933 000051CC 488B00                  	mov rax, qword [rax + 8 * 0]
  7934 000051CF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7935 000051D2 803804                  	cmp byte [rax], T_closure
  7936 000051D5 0F85D0100000            	jne L_error_non_closure
  7937 000051DB FF7001                  	push SOB_CLOSURE_ENV(rax)
  7938 000051DE FF5009                  	call SOB_CLOSURE_CODE(rax)
  7939 000051E1 50                      	push rax
  7940 000051E2 6A01                    	push 1	; arg count
  7941 000051E4 488B4510                	mov rax, ENV
  7942 000051E8 488B00                  	mov rax, qword [rax + 8 * 0]
  7943 000051EB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7944 000051EE 803804                  	cmp byte [rax], T_closure
  7945 000051F1 0F85B4100000            	jne L_error_non_closure
  7946 000051F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7947 000051FA FF5009                  	call SOB_CLOSURE_CODE(rax)
  7948 000051FD 50                      	push rax
  7949 000051FE 6A01                    	push 1	; arg count
  7950 00005200 488B4510                	mov rax, ENV
  7951 00005204 488B00                  	mov rax, qword [rax + 8 * 0]
  7952 00005207 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7953 0000520A 803804                  	cmp byte [rax], T_closure
  7954 0000520D 0F8598100000            	jne L_error_non_closure
  7955 00005213 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7956 00005216 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7957 00005219 50                      	push rax
  7958 0000521A 6A01                    	push 1	; arg count
  7959 0000521C 488B4510                	mov rax, ENV
  7960 00005220 488B00                  	mov rax, qword [rax + 8 * 0]
  7961 00005223 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7962 00005226 803804                  	cmp byte [rax], T_closure
  7963 00005229 0F857C100000            	jne L_error_non_closure
  7964 0000522F FF7001                  	push SOB_CLOSURE_ENV(rax)
  7965 00005232 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7966 00005235 803804                  	cmp byte [rax], T_closure
  7967 00005238 0F856D100000            	jne L_error_non_closure
  7968 0000523E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7969 00005241 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7970 00005244 803804                  	cmp byte [rax], T_closure
  7971 00005247 0F855E100000            	jne L_error_non_closure
  7972 0000524D FF7001                  	push SOB_CLOSURE_ENV(rax)
  7973 00005250 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7974 00005253 50                      	push rax
  7975 00005254 6A01                    	push 1	; arg count
  7976                                  	; preparing a non-tail-call
  7977                                  	; preparing a non-tail-call
  7978                                  	; preparing a non-tail-call
  7979                                  	; preparing a non-tail-call
  7980                                  	; preparing a non-tail-call
  7981 00005256 488B4510                	mov rax, ENV
  7982 0000525A 488B00                  	mov rax, qword [rax + 8 * 0]
  7983 0000525D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7984 00005260 50                      	push rax
  7985 00005261 6A01                    	push 1	; arg count
  7986 00005263 488B4510                	mov rax, ENV
  7987 00005267 488B00                  	mov rax, qword [rax + 8 * 0]
  7988 0000526A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7989 0000526D 803804                  	cmp byte [rax], T_closure
  7990 00005270 0F8535100000            	jne L_error_non_closure
  7991 00005276 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7992 00005279 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7993 0000527C 50                      	push rax
  7994 0000527D 6A01                    	push 1	; arg count
  7995 0000527F 488B4510                	mov rax, ENV
  7996 00005283 488B00                  	mov rax, qword [rax + 8 * 0]
  7997 00005286 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  7998 00005289 803804                  	cmp byte [rax], T_closure
  7999 0000528C 0F8519100000            	jne L_error_non_closure
  8000 00005292 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8001 00005295 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8002 00005298 50                      	push rax
  8003 00005299 6A01                    	push 1	; arg count
  8004 0000529B 488B4510                	mov rax, ENV
  8005 0000529F 488B00                  	mov rax, qword [rax + 8 * 0]
  8006 000052A2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8007 000052A5 803804                  	cmp byte [rax], T_closure
  8008 000052A8 0F85FD0F0000            	jne L_error_non_closure
  8009 000052AE FF7001                  	push SOB_CLOSURE_ENV(rax)
  8010 000052B1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8011 000052B4 50                      	push rax
  8012 000052B5 6A01                    	push 1	; arg count
  8013                                  	; preparing a non-tail-call
  8014                                  	; preparing a non-tail-call
  8015                                  	; preparing a non-tail-call
  8016 000052B7 488B4510                	mov rax, ENV
  8017 000052BB 488B00                  	mov rax, qword [rax + 8 * 0]
  8018 000052BE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8019 000052C1 50                      	push rax
  8020 000052C2 6A01                    	push 1	; arg count
  8021 000052C4 488B4510                	mov rax, ENV
  8022 000052C8 488B00                  	mov rax, qword [rax + 8 * 0]
  8023 000052CB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8024 000052CE 803804                  	cmp byte [rax], T_closure
  8025 000052D1 0F85D40F0000            	jne L_error_non_closure
  8026 000052D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8027 000052DA FF5009                  	call SOB_CLOSURE_CODE(rax)
  8028 000052DD 50                      	push rax
  8029 000052DE 6A01                    	push 1	; arg count
  8030 000052E0 488B4510                	mov rax, ENV
  8031 000052E4 488B00                  	mov rax, qword [rax + 8 * 0]
  8032 000052E7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8033 000052EA 803804                  	cmp byte [rax], T_closure
  8034 000052ED 0F85B80F0000            	jne L_error_non_closure
  8035 000052F3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8036 000052F6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8037 000052F9 50                      	push rax
  8038 000052FA 6A01                    	push 1	; arg count
  8039 000052FC 488B4510                	mov rax, ENV
  8040 00005300 488B00                  	mov rax, qword [rax + 8 * 0]
  8041 00005303 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8042 00005306 803804                  	cmp byte [rax], T_closure
  8043 00005309 0F859C0F0000            	jne L_error_non_closure
  8044 0000530F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8045 00005312 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8046 00005315 803804                  	cmp byte [rax], T_closure
  8047 00005318 0F858D0F0000            	jne L_error_non_closure
  8048 0000531E FF7001                  	push SOB_CLOSURE_ENV(rax)
  8049 00005321 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8050 00005324 50                      	push rax
  8051 00005325 6A01                    	push 1	; arg count
  8052                                  	; preparing a non-tail-call
  8053                                  	; preparing a non-tail-call
  8054                                  	; preparing a non-tail-call
  8055                                  	; preparing a non-tail-call
  8056                                  	; preparing a non-tail-call
  8057                                  	; preparing a non-tail-call
  8058                                  	; preparing a non-tail-call
  8059 00005327 488B4510                	mov rax, ENV
  8060 0000532B 488B00                  	mov rax, qword [rax + 8 * 0]
  8061 0000532E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8062 00005331 50                      	push rax
  8063 00005332 6A01                    	push 1	; arg count
  8064 00005334 488B4510                	mov rax, ENV
  8065 00005338 488B00                  	mov rax, qword [rax + 8 * 0]
  8066 0000533B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8067 0000533E 803804                  	cmp byte [rax], T_closure
  8068 00005341 0F85640F0000            	jne L_error_non_closure
  8069 00005347 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8070 0000534A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8071 0000534D 50                      	push rax
  8072 0000534E 6A01                    	push 1	; arg count
  8073 00005350 488B4510                	mov rax, ENV
  8074 00005354 488B00                  	mov rax, qword [rax + 8 * 0]
  8075 00005357 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8076 0000535A 803804                  	cmp byte [rax], T_closure
  8077 0000535D 0F85480F0000            	jne L_error_non_closure
  8078 00005363 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8079 00005366 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8080 00005369 50                      	push rax
  8081 0000536A 6A01                    	push 1	; arg count
  8082 0000536C 488B4510                	mov rax, ENV
  8083 00005370 488B00                  	mov rax, qword [rax + 8 * 0]
  8084 00005373 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8085 00005376 803804                  	cmp byte [rax], T_closure
  8086 00005379 0F852C0F0000            	jne L_error_non_closure
  8087 0000537F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8088 00005382 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8089 00005385 50                      	push rax
  8090 00005386 6A01                    	push 1	; arg count
  8091 00005388 488B4510                	mov rax, ENV
  8092 0000538C 488B00                  	mov rax, qword [rax + 8 * 0]
  8093 0000538F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8094 00005392 803804                  	cmp byte [rax], T_closure
  8095 00005395 0F85100F0000            	jne L_error_non_closure
  8096 0000539B FF7001                  	push SOB_CLOSURE_ENV(rax)
  8097 0000539E FF5009                  	call SOB_CLOSURE_CODE(rax)
  8098 000053A1 50                      	push rax
  8099 000053A2 6A01                    	push 1	; arg count
  8100                                  	; preparing a non-tail-call
  8101                                  	; preparing a non-tail-call
  8102                                  	; preparing a non-tail-call
  8103                                  	; preparing a non-tail-call
  8104                                  	; preparing a non-tail-call
  8105 000053A4 488B4510                	mov rax, ENV
  8106 000053A8 488B00                  	mov rax, qword [rax + 8 * 0]
  8107 000053AB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8108 000053AE 50                      	push rax
  8109 000053AF 6A01                    	push 1	; arg count
  8110 000053B1 488B4510                	mov rax, ENV
  8111 000053B5 488B00                  	mov rax, qword [rax + 8 * 0]
  8112 000053B8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8113 000053BB 803804                  	cmp byte [rax], T_closure
  8114 000053BE 0F85E70E0000            	jne L_error_non_closure
  8115 000053C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8116 000053C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8117 000053CA 50                      	push rax
  8118 000053CB 6A01                    	push 1	; arg count
  8119 000053CD 488B4510                	mov rax, ENV
  8120 000053D1 488B00                  	mov rax, qword [rax + 8 * 0]
  8121 000053D4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8122 000053D7 803804                  	cmp byte [rax], T_closure
  8123 000053DA 0F85CB0E0000            	jne L_error_non_closure
  8124 000053E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8125 000053E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8126 000053E6 50                      	push rax
  8127 000053E7 6A01                    	push 1	; arg count
  8128 000053E9 488B4510                	mov rax, ENV
  8129 000053ED 488B00                  	mov rax, qword [rax + 8 * 0]
  8130 000053F0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8131 000053F3 803804                  	cmp byte [rax], T_closure
  8132 000053F6 0F85AF0E0000            	jne L_error_non_closure
  8133 000053FC FF7001                  	push SOB_CLOSURE_ENV(rax)
  8134 000053FF FF5009                  	call SOB_CLOSURE_CODE(rax)
  8135 00005402 50                      	push rax
  8136 00005403 6A01                    	push 1	; arg count
  8137                                  	; preparing a non-tail-call
  8138                                  	; preparing a non-tail-call
  8139                                  	; preparing a non-tail-call
  8140 00005405 488B4510                	mov rax, ENV
  8141 00005409 488B00                  	mov rax, qword [rax + 8 * 0]
  8142 0000540C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8143 0000540F 50                      	push rax
  8144 00005410 6A01                    	push 1	; arg count
  8145 00005412 488B4510                	mov rax, ENV
  8146 00005416 488B00                  	mov rax, qword [rax + 8 * 0]
  8147 00005419 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8148 0000541C 803804                  	cmp byte [rax], T_closure
  8149 0000541F 0F85860E0000            	jne L_error_non_closure
  8150 00005425 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8151 00005428 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8152 0000542B 50                      	push rax
  8153 0000542C 6A01                    	push 1	; arg count
  8154 0000542E 488B4510                	mov rax, ENV
  8155 00005432 488B00                  	mov rax, qword [rax + 8 * 0]
  8156 00005435 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8157 00005438 803804                  	cmp byte [rax], T_closure
  8158 0000543B 0F856A0E0000            	jne L_error_non_closure
  8159 00005441 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8160 00005444 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8161 00005447 50                      	push rax
  8162 00005448 6A01                    	push 1	; arg count
  8163 0000544A 488B4510                	mov rax, ENV
  8164 0000544E 488B00                  	mov rax, qword [rax + 8 * 0]
  8165 00005451 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8166 00005454 803804                  	cmp byte [rax], T_closure
  8167 00005457 0F854E0E0000            	jne L_error_non_closure
  8168 0000545D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8169 00005460 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8170 00005463 803804                  	cmp byte [rax], T_closure
  8171 00005466 0F853F0E0000            	jne L_error_non_closure
  8172 0000546C FF7001                  	push SOB_CLOSURE_ENV(rax)
  8173 0000546F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8174 00005472 50                      	push rax
  8175 00005473 6A01                    	push 1	; arg count
  8176                                  	; preparing a non-tail-call
  8177                                  	; preparing a non-tail-call
  8178                                  	; preparing a non-tail-call
  8179                                  	; preparing a non-tail-call
  8180 00005475 488B4510                	mov rax, ENV
  8181 00005479 488B00                  	mov rax, qword [rax + 8 * 0]
  8182 0000547C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8183 0000547F 50                      	push rax
  8184 00005480 6A01                    	push 1	; arg count
  8185 00005482 488B4510                	mov rax, ENV
  8186 00005486 488B00                  	mov rax, qword [rax + 8 * 0]
  8187 00005489 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8188 0000548C 803804                  	cmp byte [rax], T_closure
  8189 0000548F 0F85160E0000            	jne L_error_non_closure
  8190 00005495 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8191 00005498 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8192 0000549B 50                      	push rax
  8193 0000549C 6A01                    	push 1	; arg count
  8194 0000549E 488B4510                	mov rax, ENV
  8195 000054A2 488B00                  	mov rax, qword [rax + 8 * 0]
  8196 000054A5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8197 000054A8 803804                  	cmp byte [rax], T_closure
  8198 000054AB 0F85FA0D0000            	jne L_error_non_closure
  8199 000054B1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8200 000054B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8201 000054B7 50                      	push rax
  8202 000054B8 6A01                    	push 1	; arg count
  8203 000054BA 488B4510                	mov rax, ENV
  8204 000054BE 488B00                  	mov rax, qword [rax + 8 * 0]
  8205 000054C1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8206 000054C4 803804                  	cmp byte [rax], T_closure
  8207 000054C7 0F85DE0D0000            	jne L_error_non_closure
  8208 000054CD FF7001                  	push SOB_CLOSURE_ENV(rax)
  8209 000054D0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8210 000054D3 50                      	push rax
  8211 000054D4 6A01                    	push 1	; arg count
  8212 000054D6 488B4510                	mov rax, ENV
  8213 000054DA 488B00                  	mov rax, qword [rax + 8 * 0]
  8214 000054DD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8215 000054E0 803804                  	cmp byte [rax], T_closure
  8216 000054E3 0F85C20D0000            	jne L_error_non_closure
  8217 000054E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8218 000054EC FF5009                  	call SOB_CLOSURE_CODE(rax)
  8219 000054EF 803804                  	cmp byte [rax], T_closure
  8220 000054F2 0F85B30D0000            	jne L_error_non_closure
  8221 000054F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8222 000054FB FF5009                  	call SOB_CLOSURE_CODE(rax)
  8223 000054FE 803804                  	cmp byte [rax], T_closure
  8224 00005501 0F85A40D0000            	jne L_error_non_closure
  8225 00005507 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8226 0000550A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8227 0000550D 50                      	push rax
  8228 0000550E 6A01                    	push 1	; arg count
  8229                                  	; preparing a non-tail-call
  8230                                  	; preparing a non-tail-call
  8231                                  	; preparing a non-tail-call
  8232                                  	; preparing a non-tail-call
  8233                                  	; preparing a non-tail-call
  8234                                  	; preparing a non-tail-call
  8235 00005510 488B4510                	mov rax, ENV
  8236 00005514 488B00                  	mov rax, qword [rax + 8 * 0]
  8237 00005517 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8238 0000551A 50                      	push rax
  8239 0000551B 6A01                    	push 1	; arg count
  8240 0000551D 488B4510                	mov rax, ENV
  8241 00005521 488B00                  	mov rax, qword [rax + 8 * 0]
  8242 00005524 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8243 00005527 803804                  	cmp byte [rax], T_closure
  8244 0000552A 0F857B0D0000            	jne L_error_non_closure
  8245 00005530 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8246 00005533 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8247 00005536 50                      	push rax
  8248 00005537 6A01                    	push 1	; arg count
  8249 00005539 488B4510                	mov rax, ENV
  8250 0000553D 488B00                  	mov rax, qword [rax + 8 * 0]
  8251 00005540 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8252 00005543 803804                  	cmp byte [rax], T_closure
  8253 00005546 0F855F0D0000            	jne L_error_non_closure
  8254 0000554C FF7001                  	push SOB_CLOSURE_ENV(rax)
  8255 0000554F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8256 00005552 50                      	push rax
  8257 00005553 6A01                    	push 1	; arg count
  8258 00005555 488B4510                	mov rax, ENV
  8259 00005559 488B00                  	mov rax, qword [rax + 8 * 0]
  8260 0000555C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8261 0000555F 803804                  	cmp byte [rax], T_closure
  8262 00005562 0F85430D0000            	jne L_error_non_closure
  8263 00005568 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8264 0000556B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8265 0000556E 50                      	push rax
  8266 0000556F 6A01                    	push 1	; arg count
  8267 00005571 488B4510                	mov rax, ENV
  8268 00005575 488B00                  	mov rax, qword [rax + 8 * 0]
  8269 00005578 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8270 0000557B 803804                  	cmp byte [rax], T_closure
  8271 0000557E 0F85270D0000            	jne L_error_non_closure
  8272 00005584 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8273 00005587 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8274 0000558A 50                      	push rax
  8275 0000558B 6A01                    	push 1	; arg count
  8276                                  	; preparing a non-tail-call
  8277                                  	; preparing a non-tail-call
  8278                                  	; preparing a non-tail-call
  8279 0000558D 488B4510                	mov rax, ENV
  8280 00005591 488B00                  	mov rax, qword [rax + 8 * 0]
  8281 00005594 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8282 00005597 50                      	push rax
  8283 00005598 6A01                    	push 1	; arg count
  8284 0000559A 488B4510                	mov rax, ENV
  8285 0000559E 488B00                  	mov rax, qword [rax + 8 * 0]
  8286 000055A1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8287 000055A4 803804                  	cmp byte [rax], T_closure
  8288 000055A7 0F85FE0C0000            	jne L_error_non_closure
  8289 000055AD FF7001                  	push SOB_CLOSURE_ENV(rax)
  8290 000055B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8291 000055B3 50                      	push rax
  8292 000055B4 6A01                    	push 1	; arg count
  8293 000055B6 488B4510                	mov rax, ENV
  8294 000055BA 488B00                  	mov rax, qword [rax + 8 * 0]
  8295 000055BD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8296 000055C0 803804                  	cmp byte [rax], T_closure
  8297 000055C3 0F85E20C0000            	jne L_error_non_closure
  8298 000055C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8299 000055CC FF5009                  	call SOB_CLOSURE_CODE(rax)
  8300 000055CF 50                      	push rax
  8301 000055D0 6A01                    	push 1	; arg count
  8302 000055D2 488B4510                	mov rax, ENV
  8303 000055D6 488B00                  	mov rax, qword [rax + 8 * 0]
  8304 000055D9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8305 000055DC 803804                  	cmp byte [rax], T_closure
  8306 000055DF 0F85C60C0000            	jne L_error_non_closure
  8307 000055E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8308 000055E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8309 000055EB 803804                  	cmp byte [rax], T_closure
  8310 000055EE 0F85B70C0000            	jne L_error_non_closure
  8311 000055F4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8312 000055F7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8313 000055FA 50                      	push rax
  8314 000055FB 6A01                    	push 1	; arg count
  8315                                  	; preparing a non-tail-call
  8316                                  	; preparing a non-tail-call
  8317                                  	; preparing a non-tail-call
  8318                                  	; preparing a non-tail-call
  8319 000055FD 488B4510                	mov rax, ENV
  8320 00005601 488B00                  	mov rax, qword [rax + 8 * 0]
  8321 00005604 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8322 00005607 50                      	push rax
  8323 00005608 6A01                    	push 1	; arg count
  8324 0000560A 488B4510                	mov rax, ENV
  8325 0000560E 488B00                  	mov rax, qword [rax + 8 * 0]
  8326 00005611 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8327 00005614 803804                  	cmp byte [rax], T_closure
  8328 00005617 0F858E0C0000            	jne L_error_non_closure
  8329 0000561D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8330 00005620 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8331 00005623 50                      	push rax
  8332 00005624 6A01                    	push 1	; arg count
  8333 00005626 488B4510                	mov rax, ENV
  8334 0000562A 488B00                  	mov rax, qword [rax + 8 * 0]
  8335 0000562D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8336 00005630 803804                  	cmp byte [rax], T_closure
  8337 00005633 0F85720C0000            	jne L_error_non_closure
  8338 00005639 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8339 0000563C FF5009                  	call SOB_CLOSURE_CODE(rax)
  8340 0000563F 50                      	push rax
  8341 00005640 6A01                    	push 1	; arg count
  8342 00005642 488B4510                	mov rax, ENV
  8343 00005646 488B00                  	mov rax, qword [rax + 8 * 0]
  8344 00005649 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8345 0000564C 803804                  	cmp byte [rax], T_closure
  8346 0000564F 0F85560C0000            	jne L_error_non_closure
  8347 00005655 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8348 00005658 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8349 0000565B 50                      	push rax
  8350 0000565C 6A01                    	push 1	; arg count
  8351 0000565E 488B4510                	mov rax, ENV
  8352 00005662 488B00                  	mov rax, qword [rax + 8 * 0]
  8353 00005665 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8354 00005668 803804                  	cmp byte [rax], T_closure
  8355 0000566B 0F853A0C0000            	jne L_error_non_closure
  8356 00005671 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8357 00005674 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8358 00005677 803804                  	cmp byte [rax], T_closure
  8359 0000567A 0F852B0C0000            	jne L_error_non_closure
  8360 00005680 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8361 00005683 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8362 00005686 803804                  	cmp byte [rax], T_closure
  8363 00005689 0F851C0C0000            	jne L_error_non_closure
  8364 0000568F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8365 00005692 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8366 00005695 50                      	push rax
  8367 00005696 6A01                    	push 1	; arg count
  8368                                  	; preparing a non-tail-call
  8369                                  	; preparing a non-tail-call
  8370                                  	; preparing a non-tail-call
  8371                                  	; preparing a non-tail-call
  8372 00005698 488B4510                	mov rax, ENV
  8373 0000569C 488B00                  	mov rax, qword [rax + 8 * 0]
  8374 0000569F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8375 000056A2 50                      	push rax
  8376 000056A3 6A01                    	push 1	; arg count
  8377 000056A5 488B4510                	mov rax, ENV
  8378 000056A9 488B00                  	mov rax, qword [rax + 8 * 0]
  8379 000056AC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8380 000056AF 803804                  	cmp byte [rax], T_closure
  8381 000056B2 0F85F30B0000            	jne L_error_non_closure
  8382 000056B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8383 000056BB FF5009                  	call SOB_CLOSURE_CODE(rax)
  8384 000056BE 50                      	push rax
  8385 000056BF 6A01                    	push 1	; arg count
  8386 000056C1 488B4510                	mov rax, ENV
  8387 000056C5 488B00                  	mov rax, qword [rax + 8 * 0]
  8388 000056C8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8389 000056CB 803804                  	cmp byte [rax], T_closure
  8390 000056CE 0F85D70B0000            	jne L_error_non_closure
  8391 000056D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8392 000056D7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8393 000056DA 50                      	push rax
  8394 000056DB 6A01                    	push 1	; arg count
  8395 000056DD 488B4510                	mov rax, ENV
  8396 000056E1 488B00                  	mov rax, qword [rax + 8 * 0]
  8397 000056E4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8398 000056E7 803804                  	cmp byte [rax], T_closure
  8399 000056EA 0F85BB0B0000            	jne L_error_non_closure
  8400 000056F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8401 000056F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8402 000056F6 50                      	push rax
  8403 000056F7 6A01                    	push 1	; arg count
  8404 000056F9 488B4510                	mov rax, ENV
  8405 000056FD 488B00                  	mov rax, qword [rax + 8 * 0]
  8406 00005700 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8407 00005703 803804                  	cmp byte [rax], T_closure
  8408 00005706 0F859F0B0000            	jne L_error_non_closure
  8409 0000570C FF7001                  	push SOB_CLOSURE_ENV(rax)
  8410 0000570F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8411 00005712 803804                  	cmp byte [rax], T_closure
  8412 00005715 0F85900B0000            	jne L_error_non_closure
  8413 0000571B FF7001                  	push SOB_CLOSURE_ENV(rax)
  8414 0000571E FF5009                  	call SOB_CLOSURE_CODE(rax)
  8415 00005721 803804                  	cmp byte [rax], T_closure
  8416 00005724 0F85810B0000            	jne L_error_non_closure
  8417 0000572A FF7001                  	push SOB_CLOSURE_ENV(rax)
  8418 0000572D FF5009                  	call SOB_CLOSURE_CODE(rax)
  8419 00005730 803804                  	cmp byte [rax], T_closure
  8420 00005733 0F85720B0000            	jne L_error_non_closure
  8421 00005739 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8422 0000573C FF5009                  	call SOB_CLOSURE_CODE(rax)
  8423 0000573F 803804                  	cmp byte [rax], T_closure
  8424 00005742 0F85630B0000            	jne L_error_non_closure
  8425 00005748 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8426 0000574B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8427 0000574E 50                      	push rax
  8428 0000574F 6A01                    	push 1	; arg count
  8429                                  	; preparing a non-tail-call
  8430                                  	; preparing a non-tail-call
  8431                                  	; preparing a non-tail-call
  8432                                  	; preparing a non-tail-call
  8433                                  	; preparing a non-tail-call
  8434 00005751 488B4510                	mov rax, ENV
  8435 00005755 488B00                  	mov rax, qword [rax + 8 * 0]
  8436 00005758 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8437 0000575B 50                      	push rax
  8438 0000575C 6A01                    	push 1	; arg count
  8439 0000575E 488B4510                	mov rax, ENV
  8440 00005762 488B00                  	mov rax, qword [rax + 8 * 0]
  8441 00005765 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8442 00005768 803804                  	cmp byte [rax], T_closure
  8443 0000576B 0F853A0B0000            	jne L_error_non_closure
  8444 00005771 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8445 00005774 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8446 00005777 50                      	push rax
  8447 00005778 6A01                    	push 1	; arg count
  8448 0000577A 488B4510                	mov rax, ENV
  8449 0000577E 488B00                  	mov rax, qword [rax + 8 * 0]
  8450 00005781 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8451 00005784 803804                  	cmp byte [rax], T_closure
  8452 00005787 0F851E0B0000            	jne L_error_non_closure
  8453 0000578D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8454 00005790 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8455 00005793 50                      	push rax
  8456 00005794 6A01                    	push 1	; arg count
  8457 00005796 488B4510                	mov rax, ENV
  8458 0000579A 488B00                  	mov rax, qword [rax + 8 * 0]
  8459 0000579D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8460 000057A0 803804                  	cmp byte [rax], T_closure
  8461 000057A3 0F85020B0000            	jne L_error_non_closure
  8462 000057A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8463 000057AC FF5009                  	call SOB_CLOSURE_CODE(rax)
  8464 000057AF 50                      	push rax
  8465 000057B0 6A01                    	push 1	; arg count
  8466                                  	; preparing a non-tail-call
  8467                                  	; preparing a non-tail-call
  8468                                  	; preparing a non-tail-call
  8469 000057B2 488B4510                	mov rax, ENV
  8470 000057B6 488B00                  	mov rax, qword [rax + 8 * 0]
  8471 000057B9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8472 000057BC 50                      	push rax
  8473 000057BD 6A01                    	push 1	; arg count
  8474 000057BF 488B4510                	mov rax, ENV
  8475 000057C3 488B00                  	mov rax, qword [rax + 8 * 0]
  8476 000057C6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8477 000057C9 803804                  	cmp byte [rax], T_closure
  8478 000057CC 0F85D90A0000            	jne L_error_non_closure
  8479 000057D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8480 000057D5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8481 000057D8 50                      	push rax
  8482 000057D9 6A01                    	push 1	; arg count
  8483 000057DB 488B4510                	mov rax, ENV
  8484 000057DF 488B00                  	mov rax, qword [rax + 8 * 0]
  8485 000057E2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8486 000057E5 803804                  	cmp byte [rax], T_closure
  8487 000057E8 0F85BD0A0000            	jne L_error_non_closure
  8488 000057EE FF7001                  	push SOB_CLOSURE_ENV(rax)
  8489 000057F1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8490 000057F4 50                      	push rax
  8491 000057F5 6A01                    	push 1	; arg count
  8492 000057F7 488B4510                	mov rax, ENV
  8493 000057FB 488B00                  	mov rax, qword [rax + 8 * 0]
  8494 000057FE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8495 00005801 803804                  	cmp byte [rax], T_closure
  8496 00005804 0F85A10A0000            	jne L_error_non_closure
  8497 0000580A FF7001                  	push SOB_CLOSURE_ENV(rax)
  8498 0000580D FF5009                  	call SOB_CLOSURE_CODE(rax)
  8499 00005810 803804                  	cmp byte [rax], T_closure
  8500 00005813 0F85920A0000            	jne L_error_non_closure
  8501 00005819 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8502 0000581C FF5009                  	call SOB_CLOSURE_CODE(rax)
  8503 0000581F 50                      	push rax
  8504 00005820 6A01                    	push 1	; arg count
  8505                                  	; preparing a non-tail-call
  8506                                  	; preparing a non-tail-call
  8507                                  	; preparing a non-tail-call
  8508                                  	; preparing a non-tail-call
  8509                                  	; preparing a non-tail-call
  8510                                  	; preparing a non-tail-call
  8511                                  	; preparing a non-tail-call
  8512 00005822 488B4510                	mov rax, ENV
  8513 00005826 488B00                  	mov rax, qword [rax + 8 * 0]
  8514 00005829 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8515 0000582C 50                      	push rax
  8516 0000582D 6A01                    	push 1	; arg count
  8517 0000582F 488B4510                	mov rax, ENV
  8518 00005833 488B00                  	mov rax, qword [rax + 8 * 0]
  8519 00005836 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8520 00005839 803804                  	cmp byte [rax], T_closure
  8521 0000583C 0F85690A0000            	jne L_error_non_closure
  8522 00005842 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8523 00005845 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8524 00005848 50                      	push rax
  8525 00005849 6A01                    	push 1	; arg count
  8526 0000584B 488B4510                	mov rax, ENV
  8527 0000584F 488B00                  	mov rax, qword [rax + 8 * 0]
  8528 00005852 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8529 00005855 803804                  	cmp byte [rax], T_closure
  8530 00005858 0F854D0A0000            	jne L_error_non_closure
  8531 0000585E FF7001                  	push SOB_CLOSURE_ENV(rax)
  8532 00005861 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8533 00005864 50                      	push rax
  8534 00005865 6A01                    	push 1	; arg count
  8535 00005867 488B4510                	mov rax, ENV
  8536 0000586B 488B00                  	mov rax, qword [rax + 8 * 0]
  8537 0000586E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8538 00005871 803804                  	cmp byte [rax], T_closure
  8539 00005874 0F85310A0000            	jne L_error_non_closure
  8540 0000587A FF7001                  	push SOB_CLOSURE_ENV(rax)
  8541 0000587D FF5009                  	call SOB_CLOSURE_CODE(rax)
  8542 00005880 50                      	push rax
  8543 00005881 6A01                    	push 1	; arg count
  8544 00005883 488B4510                	mov rax, ENV
  8545 00005887 488B00                  	mov rax, qword [rax + 8 * 0]
  8546 0000588A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8547 0000588D 803804                  	cmp byte [rax], T_closure
  8548 00005890 0F85150A0000            	jne L_error_non_closure
  8549 00005896 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8550 00005899 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8551 0000589C 50                      	push rax
  8552 0000589D 6A01                    	push 1	; arg count
  8553                                  	; preparing a non-tail-call
  8554                                  	; preparing a non-tail-call
  8555                                  	; preparing a non-tail-call
  8556                                  	; preparing a non-tail-call
  8557                                  	; preparing a non-tail-call
  8558 0000589F 488B4510                	mov rax, ENV
  8559 000058A3 488B00                  	mov rax, qword [rax + 8 * 0]
  8560 000058A6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8561 000058A9 50                      	push rax
  8562 000058AA 6A01                    	push 1	; arg count
  8563 000058AC 488B4510                	mov rax, ENV
  8564 000058B0 488B00                  	mov rax, qword [rax + 8 * 0]
  8565 000058B3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8566 000058B6 803804                  	cmp byte [rax], T_closure
  8567 000058B9 0F85EC090000            	jne L_error_non_closure
  8568 000058BF FF7001                  	push SOB_CLOSURE_ENV(rax)
  8569 000058C2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8570 000058C5 50                      	push rax
  8571 000058C6 6A01                    	push 1	; arg count
  8572 000058C8 488B4510                	mov rax, ENV
  8573 000058CC 488B00                  	mov rax, qword [rax + 8 * 0]
  8574 000058CF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8575 000058D2 803804                  	cmp byte [rax], T_closure
  8576 000058D5 0F85D0090000            	jne L_error_non_closure
  8577 000058DB FF7001                  	push SOB_CLOSURE_ENV(rax)
  8578 000058DE FF5009                  	call SOB_CLOSURE_CODE(rax)
  8579 000058E1 50                      	push rax
  8580 000058E2 6A01                    	push 1	; arg count
  8581 000058E4 488B4510                	mov rax, ENV
  8582 000058E8 488B00                  	mov rax, qword [rax + 8 * 0]
  8583 000058EB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8584 000058EE 803804                  	cmp byte [rax], T_closure
  8585 000058F1 0F85B4090000            	jne L_error_non_closure
  8586 000058F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8587 000058FA FF5009                  	call SOB_CLOSURE_CODE(rax)
  8588 000058FD 50                      	push rax
  8589 000058FE 6A01                    	push 1	; arg count
  8590                                  	; preparing a non-tail-call
  8591                                  	; preparing a non-tail-call
  8592                                  	; preparing a non-tail-call
  8593 00005900 488B4510                	mov rax, ENV
  8594 00005904 488B00                  	mov rax, qword [rax + 8 * 0]
  8595 00005907 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8596 0000590A 50                      	push rax
  8597 0000590B 6A01                    	push 1	; arg count
  8598 0000590D 488B4510                	mov rax, ENV
  8599 00005911 488B00                  	mov rax, qword [rax + 8 * 0]
  8600 00005914 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8601 00005917 803804                  	cmp byte [rax], T_closure
  8602 0000591A 0F858B090000            	jne L_error_non_closure
  8603 00005920 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8604 00005923 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8605 00005926 50                      	push rax
  8606 00005927 6A01                    	push 1	; arg count
  8607 00005929 488B4510                	mov rax, ENV
  8608 0000592D 488B00                  	mov rax, qword [rax + 8 * 0]
  8609 00005930 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8610 00005933 803804                  	cmp byte [rax], T_closure
  8611 00005936 0F856F090000            	jne L_error_non_closure
  8612 0000593C FF7001                  	push SOB_CLOSURE_ENV(rax)
  8613 0000593F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8614 00005942 50                      	push rax
  8615 00005943 6A01                    	push 1	; arg count
  8616 00005945 488B4510                	mov rax, ENV
  8617 00005949 488B00                  	mov rax, qword [rax + 8 * 0]
  8618 0000594C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8619 0000594F 803804                  	cmp byte [rax], T_closure
  8620 00005952 0F8553090000            	jne L_error_non_closure
  8621 00005958 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8622 0000595B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8623 0000595E 803804                  	cmp byte [rax], T_closure
  8624 00005961 0F8544090000            	jne L_error_non_closure
  8625 00005967 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8626 0000596A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8627 0000596D 50                      	push rax
  8628 0000596E 6A01                    	push 1	; arg count
  8629                                  	; preparing a non-tail-call
  8630                                  	; preparing a non-tail-call
  8631                                  	; preparing a non-tail-call
  8632                                  	; preparing a non-tail-call
  8633 00005970 488B4510                	mov rax, ENV
  8634 00005974 488B00                  	mov rax, qword [rax + 8 * 0]
  8635 00005977 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8636 0000597A 50                      	push rax
  8637 0000597B 6A01                    	push 1	; arg count
  8638 0000597D 488B4510                	mov rax, ENV
  8639 00005981 488B00                  	mov rax, qword [rax + 8 * 0]
  8640 00005984 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8641 00005987 803804                  	cmp byte [rax], T_closure
  8642 0000598A 0F851B090000            	jne L_error_non_closure
  8643 00005990 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8644 00005993 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8645 00005996 50                      	push rax
  8646 00005997 6A01                    	push 1	; arg count
  8647 00005999 488B4510                	mov rax, ENV
  8648 0000599D 488B00                  	mov rax, qword [rax + 8 * 0]
  8649 000059A0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8650 000059A3 803804                  	cmp byte [rax], T_closure
  8651 000059A6 0F85FF080000            	jne L_error_non_closure
  8652 000059AC FF7001                  	push SOB_CLOSURE_ENV(rax)
  8653 000059AF FF5009                  	call SOB_CLOSURE_CODE(rax)
  8654 000059B2 50                      	push rax
  8655 000059B3 6A01                    	push 1	; arg count
  8656 000059B5 488B4510                	mov rax, ENV
  8657 000059B9 488B00                  	mov rax, qword [rax + 8 * 0]
  8658 000059BC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8659 000059BF 803804                  	cmp byte [rax], T_closure
  8660 000059C2 0F85E3080000            	jne L_error_non_closure
  8661 000059C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8662 000059CB FF5009                  	call SOB_CLOSURE_CODE(rax)
  8663 000059CE 50                      	push rax
  8664 000059CF 6A01                    	push 1	; arg count
  8665 000059D1 488B4510                	mov rax, ENV
  8666 000059D5 488B00                  	mov rax, qword [rax + 8 * 0]
  8667 000059D8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8668 000059DB 803804                  	cmp byte [rax], T_closure
  8669 000059DE 0F85C7080000            	jne L_error_non_closure
  8670 000059E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8671 000059E7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8672 000059EA 803804                  	cmp byte [rax], T_closure
  8673 000059ED 0F85B8080000            	jne L_error_non_closure
  8674 000059F3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8675 000059F6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8676 000059F9 803804                  	cmp byte [rax], T_closure
  8677 000059FC 0F85A9080000            	jne L_error_non_closure
  8678 00005A02 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8679 00005A05 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8680 00005A08 50                      	push rax
  8681 00005A09 6A01                    	push 1	; arg count
  8682                                  	; preparing a non-tail-call
  8683                                  	; preparing a non-tail-call
  8684                                  	; preparing a non-tail-call
  8685                                  	; preparing a non-tail-call
  8686                                  	; preparing a non-tail-call
  8687                                  	; preparing a non-tail-call
  8688 00005A0B 488B4510                	mov rax, ENV
  8689 00005A0F 488B00                  	mov rax, qword [rax + 8 * 0]
  8690 00005A12 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8691 00005A15 50                      	push rax
  8692 00005A16 6A01                    	push 1	; arg count
  8693 00005A18 488B4510                	mov rax, ENV
  8694 00005A1C 488B00                  	mov rax, qword [rax + 8 * 0]
  8695 00005A1F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8696 00005A22 803804                  	cmp byte [rax], T_closure
  8697 00005A25 0F8580080000            	jne L_error_non_closure
  8698 00005A2B FF7001                  	push SOB_CLOSURE_ENV(rax)
  8699 00005A2E FF5009                  	call SOB_CLOSURE_CODE(rax)
  8700 00005A31 50                      	push rax
  8701 00005A32 6A01                    	push 1	; arg count
  8702 00005A34 488B4510                	mov rax, ENV
  8703 00005A38 488B00                  	mov rax, qword [rax + 8 * 0]
  8704 00005A3B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8705 00005A3E 803804                  	cmp byte [rax], T_closure
  8706 00005A41 0F8564080000            	jne L_error_non_closure
  8707 00005A47 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8708 00005A4A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8709 00005A4D 50                      	push rax
  8710 00005A4E 6A01                    	push 1	; arg count
  8711 00005A50 488B4510                	mov rax, ENV
  8712 00005A54 488B00                  	mov rax, qword [rax + 8 * 0]
  8713 00005A57 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8714 00005A5A 803804                  	cmp byte [rax], T_closure
  8715 00005A5D 0F8548080000            	jne L_error_non_closure
  8716 00005A63 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8717 00005A66 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8718 00005A69 50                      	push rax
  8719 00005A6A 6A01                    	push 1	; arg count
  8720 00005A6C 488B4510                	mov rax, ENV
  8721 00005A70 488B00                  	mov rax, qword [rax + 8 * 0]
  8722 00005A73 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8723 00005A76 803804                  	cmp byte [rax], T_closure
  8724 00005A79 0F852C080000            	jne L_error_non_closure
  8725 00005A7F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8726 00005A82 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8727 00005A85 50                      	push rax
  8728 00005A86 6A01                    	push 1	; arg count
  8729                                  	; preparing a non-tail-call
  8730                                  	; preparing a non-tail-call
  8731                                  	; preparing a non-tail-call
  8732 00005A88 488B4510                	mov rax, ENV
  8733 00005A8C 488B00                  	mov rax, qword [rax + 8 * 0]
  8734 00005A8F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8735 00005A92 50                      	push rax
  8736 00005A93 6A01                    	push 1	; arg count
  8737 00005A95 488B4510                	mov rax, ENV
  8738 00005A99 488B00                  	mov rax, qword [rax + 8 * 0]
  8739 00005A9C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8740 00005A9F 803804                  	cmp byte [rax], T_closure
  8741 00005AA2 0F8503080000            	jne L_error_non_closure
  8742 00005AA8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8743 00005AAB FF5009                  	call SOB_CLOSURE_CODE(rax)
  8744 00005AAE 50                      	push rax
  8745 00005AAF 6A01                    	push 1	; arg count
  8746 00005AB1 488B4510                	mov rax, ENV
  8747 00005AB5 488B00                  	mov rax, qword [rax + 8 * 0]
  8748 00005AB8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8749 00005ABB 803804                  	cmp byte [rax], T_closure
  8750 00005ABE 0F85E7070000            	jne L_error_non_closure
  8751 00005AC4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8752 00005AC7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8753 00005ACA 50                      	push rax
  8754 00005ACB 6A01                    	push 1	; arg count
  8755 00005ACD 488B4510                	mov rax, ENV
  8756 00005AD1 488B00                  	mov rax, qword [rax + 8 * 0]
  8757 00005AD4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8758 00005AD7 803804                  	cmp byte [rax], T_closure
  8759 00005ADA 0F85CB070000            	jne L_error_non_closure
  8760 00005AE0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8761 00005AE3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8762 00005AE6 803804                  	cmp byte [rax], T_closure
  8763 00005AE9 0F85BC070000            	jne L_error_non_closure
  8764 00005AEF FF7001                  	push SOB_CLOSURE_ENV(rax)
  8765 00005AF2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8766 00005AF5 50                      	push rax
  8767 00005AF6 6A01                    	push 1	; arg count
  8768                                  	; preparing a non-tail-call
  8769                                  	; preparing a non-tail-call
  8770                                  	; preparing a non-tail-call
  8771                                  	; preparing a non-tail-call
  8772 00005AF8 488B4510                	mov rax, ENV
  8773 00005AFC 488B00                  	mov rax, qword [rax + 8 * 0]
  8774 00005AFF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8775 00005B02 50                      	push rax
  8776 00005B03 6A01                    	push 1	; arg count
  8777 00005B05 488B4510                	mov rax, ENV
  8778 00005B09 488B00                  	mov rax, qword [rax + 8 * 0]
  8779 00005B0C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8780 00005B0F 803804                  	cmp byte [rax], T_closure
  8781 00005B12 0F8593070000            	jne L_error_non_closure
  8782 00005B18 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8783 00005B1B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8784 00005B1E 50                      	push rax
  8785 00005B1F 6A01                    	push 1	; arg count
  8786 00005B21 488B4510                	mov rax, ENV
  8787 00005B25 488B00                  	mov rax, qword [rax + 8 * 0]
  8788 00005B28 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8789 00005B2B 803804                  	cmp byte [rax], T_closure
  8790 00005B2E 0F8577070000            	jne L_error_non_closure
  8791 00005B34 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8792 00005B37 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8793 00005B3A 50                      	push rax
  8794 00005B3B 6A01                    	push 1	; arg count
  8795 00005B3D 488B4510                	mov rax, ENV
  8796 00005B41 488B00                  	mov rax, qword [rax + 8 * 0]
  8797 00005B44 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8798 00005B47 803804                  	cmp byte [rax], T_closure
  8799 00005B4A 0F855B070000            	jne L_error_non_closure
  8800 00005B50 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8801 00005B53 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8802 00005B56 50                      	push rax
  8803 00005B57 6A01                    	push 1	; arg count
  8804 00005B59 488B4510                	mov rax, ENV
  8805 00005B5D 488B00                  	mov rax, qword [rax + 8 * 0]
  8806 00005B60 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8807 00005B63 803804                  	cmp byte [rax], T_closure
  8808 00005B66 0F853F070000            	jne L_error_non_closure
  8809 00005B6C FF7001                  	push SOB_CLOSURE_ENV(rax)
  8810 00005B6F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8811 00005B72 803804                  	cmp byte [rax], T_closure
  8812 00005B75 0F8530070000            	jne L_error_non_closure
  8813 00005B7B FF7001                  	push SOB_CLOSURE_ENV(rax)
  8814 00005B7E FF5009                  	call SOB_CLOSURE_CODE(rax)
  8815 00005B81 803804                  	cmp byte [rax], T_closure
  8816 00005B84 0F8521070000            	jne L_error_non_closure
  8817 00005B8A FF7001                  	push SOB_CLOSURE_ENV(rax)
  8818 00005B8D FF5009                  	call SOB_CLOSURE_CODE(rax)
  8819 00005B90 50                      	push rax
  8820 00005B91 6A01                    	push 1	; arg count
  8821                                  	; preparing a non-tail-call
  8822                                  	; preparing a non-tail-call
  8823                                  	; preparing a non-tail-call
  8824                                  	; preparing a non-tail-call
  8825 00005B93 488B4510                	mov rax, ENV
  8826 00005B97 488B00                  	mov rax, qword [rax + 8 * 0]
  8827 00005B9A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8828 00005B9D 50                      	push rax
  8829 00005B9E 6A01                    	push 1	; arg count
  8830 00005BA0 488B4510                	mov rax, ENV
  8831 00005BA4 488B00                  	mov rax, qword [rax + 8 * 0]
  8832 00005BA7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8833 00005BAA 803804                  	cmp byte [rax], T_closure
  8834 00005BAD 0F85F8060000            	jne L_error_non_closure
  8835 00005BB3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8836 00005BB6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8837 00005BB9 50                      	push rax
  8838 00005BBA 6A01                    	push 1	; arg count
  8839 00005BBC 488B4510                	mov rax, ENV
  8840 00005BC0 488B00                  	mov rax, qword [rax + 8 * 0]
  8841 00005BC3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8842 00005BC6 803804                  	cmp byte [rax], T_closure
  8843 00005BC9 0F85DC060000            	jne L_error_non_closure
  8844 00005BCF FF7001                  	push SOB_CLOSURE_ENV(rax)
  8845 00005BD2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8846 00005BD5 50                      	push rax
  8847 00005BD6 6A01                    	push 1	; arg count
  8848 00005BD8 488B4510                	mov rax, ENV
  8849 00005BDC 488B00                  	mov rax, qword [rax + 8 * 0]
  8850 00005BDF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8851 00005BE2 803804                  	cmp byte [rax], T_closure
  8852 00005BE5 0F85C0060000            	jne L_error_non_closure
  8853 00005BEB FF7001                  	push SOB_CLOSURE_ENV(rax)
  8854 00005BEE FF5009                  	call SOB_CLOSURE_CODE(rax)
  8855 00005BF1 50                      	push rax
  8856 00005BF2 6A01                    	push 1	; arg count
  8857 00005BF4 488B4510                	mov rax, ENV
  8858 00005BF8 488B00                  	mov rax, qword [rax + 8 * 0]
  8859 00005BFB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8860 00005BFE 803804                  	cmp byte [rax], T_closure
  8861 00005C01 0F85A4060000            	jne L_error_non_closure
  8862 00005C07 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8863 00005C0A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8864 00005C0D 803804                  	cmp byte [rax], T_closure
  8865 00005C10 0F8595060000            	jne L_error_non_closure
  8866 00005C16 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8867 00005C19 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8868 00005C1C 803804                  	cmp byte [rax], T_closure
  8869 00005C1F 0F8586060000            	jne L_error_non_closure
  8870 00005C25 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8871 00005C28 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8872 00005C2B 803804                  	cmp byte [rax], T_closure
  8873 00005C2E 0F8577060000            	jne L_error_non_closure
  8874 00005C34 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8875 00005C37 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8876 00005C3A 803804                  	cmp byte [rax], T_closure
  8877 00005C3D 0F8568060000            	jne L_error_non_closure
  8878 00005C43 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8879 00005C46 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8880 00005C49 50                      	push rax
  8881 00005C4A 6A01                    	push 1	; arg count
  8882                                  	; preparing a non-tail-call
  8883                                  	; preparing a non-tail-call
  8884                                  	; preparing a non-tail-call
  8885                                  	; preparing a non-tail-call
  8886                                  	; preparing a non-tail-call
  8887 00005C4C 488B4510                	mov rax, ENV
  8888 00005C50 488B00                  	mov rax, qword [rax + 8 * 0]
  8889 00005C53 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8890 00005C56 50                      	push rax
  8891 00005C57 6A01                    	push 1	; arg count
  8892 00005C59 488B4510                	mov rax, ENV
  8893 00005C5D 488B00                  	mov rax, qword [rax + 8 * 0]
  8894 00005C60 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8895 00005C63 803804                  	cmp byte [rax], T_closure
  8896 00005C66 0F853F060000            	jne L_error_non_closure
  8897 00005C6C FF7001                  	push SOB_CLOSURE_ENV(rax)
  8898 00005C6F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8899 00005C72 50                      	push rax
  8900 00005C73 6A01                    	push 1	; arg count
  8901 00005C75 488B4510                	mov rax, ENV
  8902 00005C79 488B00                  	mov rax, qword [rax + 8 * 0]
  8903 00005C7C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8904 00005C7F 803804                  	cmp byte [rax], T_closure
  8905 00005C82 0F8523060000            	jne L_error_non_closure
  8906 00005C88 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8907 00005C8B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8908 00005C8E 50                      	push rax
  8909 00005C8F 6A01                    	push 1	; arg count
  8910 00005C91 488B4510                	mov rax, ENV
  8911 00005C95 488B00                  	mov rax, qword [rax + 8 * 0]
  8912 00005C98 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8913 00005C9B 803804                  	cmp byte [rax], T_closure
  8914 00005C9E 0F8507060000            	jne L_error_non_closure
  8915 00005CA4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8916 00005CA7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8917 00005CAA 50                      	push rax
  8918 00005CAB 6A01                    	push 1	; arg count
  8919                                  	; preparing a non-tail-call
  8920                                  	; preparing a non-tail-call
  8921                                  	; preparing a non-tail-call
  8922 00005CAD 488B4510                	mov rax, ENV
  8923 00005CB1 488B00                  	mov rax, qword [rax + 8 * 0]
  8924 00005CB4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8925 00005CB7 50                      	push rax
  8926 00005CB8 6A01                    	push 1	; arg count
  8927 00005CBA 488B4510                	mov rax, ENV
  8928 00005CBE 488B00                  	mov rax, qword [rax + 8 * 0]
  8929 00005CC1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8930 00005CC4 803804                  	cmp byte [rax], T_closure
  8931 00005CC7 0F85DE050000            	jne L_error_non_closure
  8932 00005CCD FF7001                  	push SOB_CLOSURE_ENV(rax)
  8933 00005CD0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8934 00005CD3 50                      	push rax
  8935 00005CD4 6A01                    	push 1	; arg count
  8936 00005CD6 488B4510                	mov rax, ENV
  8937 00005CDA 488B00                  	mov rax, qword [rax + 8 * 0]
  8938 00005CDD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8939 00005CE0 803804                  	cmp byte [rax], T_closure
  8940 00005CE3 0F85C2050000            	jne L_error_non_closure
  8941 00005CE9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8942 00005CEC FF5009                  	call SOB_CLOSURE_CODE(rax)
  8943 00005CEF 50                      	push rax
  8944 00005CF0 6A01                    	push 1	; arg count
  8945 00005CF2 488B4510                	mov rax, ENV
  8946 00005CF6 488B00                  	mov rax, qword [rax + 8 * 0]
  8947 00005CF9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8948 00005CFC 803804                  	cmp byte [rax], T_closure
  8949 00005CFF 0F85A6050000            	jne L_error_non_closure
  8950 00005D05 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8951 00005D08 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8952 00005D0B 803804                  	cmp byte [rax], T_closure
  8953 00005D0E 0F8597050000            	jne L_error_non_closure
  8954 00005D14 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8955 00005D17 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8956 00005D1A 50                      	push rax
  8957 00005D1B 6A01                    	push 1	; arg count
  8958                                  	; preparing a non-tail-call
  8959                                  	; preparing a non-tail-call
  8960                                  	; preparing a non-tail-call
  8961                                  	; preparing a non-tail-call
  8962                                  	; preparing a non-tail-call
  8963                                  	; preparing a non-tail-call
  8964                                  	; preparing a non-tail-call
  8965 00005D1D 488B4510                	mov rax, ENV
  8966 00005D21 488B00                  	mov rax, qword [rax + 8 * 0]
  8967 00005D24 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8968 00005D27 50                      	push rax
  8969 00005D28 6A01                    	push 1	; arg count
  8970 00005D2A 488B4510                	mov rax, ENV
  8971 00005D2E 488B00                  	mov rax, qword [rax + 8 * 0]
  8972 00005D31 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8973 00005D34 803804                  	cmp byte [rax], T_closure
  8974 00005D37 0F856E050000            	jne L_error_non_closure
  8975 00005D3D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8976 00005D40 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8977 00005D43 50                      	push rax
  8978 00005D44 6A01                    	push 1	; arg count
  8979 00005D46 488B4510                	mov rax, ENV
  8980 00005D4A 488B00                  	mov rax, qword [rax + 8 * 0]
  8981 00005D4D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8982 00005D50 803804                  	cmp byte [rax], T_closure
  8983 00005D53 0F8552050000            	jne L_error_non_closure
  8984 00005D59 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8985 00005D5C FF5009                  	call SOB_CLOSURE_CODE(rax)
  8986 00005D5F 50                      	push rax
  8987 00005D60 6A01                    	push 1	; arg count
  8988 00005D62 488B4510                	mov rax, ENV
  8989 00005D66 488B00                  	mov rax, qword [rax + 8 * 0]
  8990 00005D69 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  8991 00005D6C 803804                  	cmp byte [rax], T_closure
  8992 00005D6F 0F8536050000            	jne L_error_non_closure
  8993 00005D75 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8994 00005D78 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8995 00005D7B 50                      	push rax
  8996 00005D7C 6A01                    	push 1	; arg count
  8997 00005D7E 488B4510                	mov rax, ENV
  8998 00005D82 488B00                  	mov rax, qword [rax + 8 * 0]
  8999 00005D85 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9000 00005D88 803804                  	cmp byte [rax], T_closure
  9001 00005D8B 0F851A050000            	jne L_error_non_closure
  9002 00005D91 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9003 00005D94 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9004 00005D97 50                      	push rax
  9005 00005D98 6A01                    	push 1	; arg count
  9006                                  	; preparing a non-tail-call
  9007                                  	; preparing a non-tail-call
  9008                                  	; preparing a non-tail-call
  9009                                  	; preparing a non-tail-call
  9010                                  	; preparing a non-tail-call
  9011 00005D9A 488B4510                	mov rax, ENV
  9012 00005D9E 488B00                  	mov rax, qword [rax + 8 * 0]
  9013 00005DA1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9014 00005DA4 50                      	push rax
  9015 00005DA5 6A01                    	push 1	; arg count
  9016 00005DA7 488B4510                	mov rax, ENV
  9017 00005DAB 488B00                  	mov rax, qword [rax + 8 * 0]
  9018 00005DAE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9019 00005DB1 803804                  	cmp byte [rax], T_closure
  9020 00005DB4 0F85F1040000            	jne L_error_non_closure
  9021 00005DBA FF7001                  	push SOB_CLOSURE_ENV(rax)
  9022 00005DBD FF5009                  	call SOB_CLOSURE_CODE(rax)
  9023 00005DC0 50                      	push rax
  9024 00005DC1 6A01                    	push 1	; arg count
  9025 00005DC3 488B4510                	mov rax, ENV
  9026 00005DC7 488B00                  	mov rax, qword [rax + 8 * 0]
  9027 00005DCA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9028 00005DCD 803804                  	cmp byte [rax], T_closure
  9029 00005DD0 0F85D5040000            	jne L_error_non_closure
  9030 00005DD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9031 00005DD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9032 00005DDC 50                      	push rax
  9033 00005DDD 6A01                    	push 1	; arg count
  9034 00005DDF 488B4510                	mov rax, ENV
  9035 00005DE3 488B00                  	mov rax, qword [rax + 8 * 0]
  9036 00005DE6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9037 00005DE9 803804                  	cmp byte [rax], T_closure
  9038 00005DEC 0F85B9040000            	jne L_error_non_closure
  9039 00005DF2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9040 00005DF5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9041 00005DF8 50                      	push rax
  9042 00005DF9 6A01                    	push 1	; arg count
  9043                                  	; preparing a non-tail-call
  9044                                  	; preparing a non-tail-call
  9045                                  	; preparing a non-tail-call
  9046 00005DFB 488B4510                	mov rax, ENV
  9047 00005DFF 488B00                  	mov rax, qword [rax + 8 * 0]
  9048 00005E02 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9049 00005E05 50                      	push rax
  9050 00005E06 6A01                    	push 1	; arg count
  9051 00005E08 488B4510                	mov rax, ENV
  9052 00005E0C 488B00                  	mov rax, qword [rax + 8 * 0]
  9053 00005E0F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9054 00005E12 803804                  	cmp byte [rax], T_closure
  9055 00005E15 0F8590040000            	jne L_error_non_closure
  9056 00005E1B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9057 00005E1E FF5009                  	call SOB_CLOSURE_CODE(rax)
  9058 00005E21 50                      	push rax
  9059 00005E22 6A01                    	push 1	; arg count
  9060 00005E24 488B4510                	mov rax, ENV
  9061 00005E28 488B00                  	mov rax, qword [rax + 8 * 0]
  9062 00005E2B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9063 00005E2E 803804                  	cmp byte [rax], T_closure
  9064 00005E31 0F8574040000            	jne L_error_non_closure
  9065 00005E37 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9066 00005E3A FF5009                  	call SOB_CLOSURE_CODE(rax)
  9067 00005E3D 50                      	push rax
  9068 00005E3E 6A01                    	push 1	; arg count
  9069 00005E40 488B4510                	mov rax, ENV
  9070 00005E44 488B00                  	mov rax, qword [rax + 8 * 0]
  9071 00005E47 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9072 00005E4A 803804                  	cmp byte [rax], T_closure
  9073 00005E4D 0F8558040000            	jne L_error_non_closure
  9074 00005E53 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9075 00005E56 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9076 00005E59 803804                  	cmp byte [rax], T_closure
  9077 00005E5C 0F8549040000            	jne L_error_non_closure
  9078 00005E62 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9079 00005E65 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9080 00005E68 50                      	push rax
  9081 00005E69 6A01                    	push 1	; arg count
  9082                                  	; preparing a non-tail-call
  9083                                  	; preparing a non-tail-call
  9084                                  	; preparing a non-tail-call
  9085                                  	; preparing a non-tail-call
  9086 00005E6B 488B4510                	mov rax, ENV
  9087 00005E6F 488B00                  	mov rax, qword [rax + 8 * 0]
  9088 00005E72 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9089 00005E75 50                      	push rax
  9090 00005E76 6A01                    	push 1	; arg count
  9091 00005E78 488B4510                	mov rax, ENV
  9092 00005E7C 488B00                  	mov rax, qword [rax + 8 * 0]
  9093 00005E7F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9094 00005E82 803804                  	cmp byte [rax], T_closure
  9095 00005E85 0F8520040000            	jne L_error_non_closure
  9096 00005E8B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9097 00005E8E FF5009                  	call SOB_CLOSURE_CODE(rax)
  9098 00005E91 50                      	push rax
  9099 00005E92 6A01                    	push 1	; arg count
  9100 00005E94 488B4510                	mov rax, ENV
  9101 00005E98 488B00                  	mov rax, qword [rax + 8 * 0]
  9102 00005E9B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9103 00005E9E 803804                  	cmp byte [rax], T_closure
  9104 00005EA1 0F8504040000            	jne L_error_non_closure
  9105 00005EA7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9106 00005EAA FF5009                  	call SOB_CLOSURE_CODE(rax)
  9107 00005EAD 50                      	push rax
  9108 00005EAE 6A01                    	push 1	; arg count
  9109 00005EB0 488B4510                	mov rax, ENV
  9110 00005EB4 488B00                  	mov rax, qword [rax + 8 * 0]
  9111 00005EB7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9112 00005EBA 803804                  	cmp byte [rax], T_closure
  9113 00005EBD 0F85E8030000            	jne L_error_non_closure
  9114 00005EC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9115 00005EC6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9116 00005EC9 50                      	push rax
  9117 00005ECA 6A01                    	push 1	; arg count
  9118 00005ECC 488B4510                	mov rax, ENV
  9119 00005ED0 488B00                  	mov rax, qword [rax + 8 * 0]
  9120 00005ED3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9121 00005ED6 803804                  	cmp byte [rax], T_closure
  9122 00005ED9 0F85CC030000            	jne L_error_non_closure
  9123 00005EDF FF7001                  	push SOB_CLOSURE_ENV(rax)
  9124 00005EE2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9125 00005EE5 803804                  	cmp byte [rax], T_closure
  9126 00005EE8 0F85BD030000            	jne L_error_non_closure
  9127 00005EEE FF7001                  	push SOB_CLOSURE_ENV(rax)
  9128 00005EF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9129 00005EF4 803804                  	cmp byte [rax], T_closure
  9130 00005EF7 0F85AE030000            	jne L_error_non_closure
  9131 00005EFD FF7001                  	push SOB_CLOSURE_ENV(rax)
  9132 00005F00 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9133 00005F03 50                      	push rax
  9134 00005F04 6A01                    	push 1	; arg count
  9135                                  	; preparing a non-tail-call
  9136                                  	; preparing a non-tail-call
  9137                                  	; preparing a non-tail-call
  9138                                  	; preparing a non-tail-call
  9139                                  	; preparing a non-tail-call
  9140                                  	; preparing a non-tail-call
  9141 00005F06 488B4510                	mov rax, ENV
  9142 00005F0A 488B00                  	mov rax, qword [rax + 8 * 0]
  9143 00005F0D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9144 00005F10 50                      	push rax
  9145 00005F11 6A01                    	push 1	; arg count
  9146 00005F13 488B4510                	mov rax, ENV
  9147 00005F17 488B00                  	mov rax, qword [rax + 8 * 0]
  9148 00005F1A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9149 00005F1D 803804                  	cmp byte [rax], T_closure
  9150 00005F20 0F8585030000            	jne L_error_non_closure
  9151 00005F26 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9152 00005F29 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9153 00005F2C 50                      	push rax
  9154 00005F2D 6A01                    	push 1	; arg count
  9155 00005F2F 488B4510                	mov rax, ENV
  9156 00005F33 488B00                  	mov rax, qword [rax + 8 * 0]
  9157 00005F36 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9158 00005F39 803804                  	cmp byte [rax], T_closure
  9159 00005F3C 0F8569030000            	jne L_error_non_closure
  9160 00005F42 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9161 00005F45 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9162 00005F48 50                      	push rax
  9163 00005F49 6A01                    	push 1	; arg count
  9164 00005F4B 488B4510                	mov rax, ENV
  9165 00005F4F 488B00                  	mov rax, qword [rax + 8 * 0]
  9166 00005F52 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9167 00005F55 803804                  	cmp byte [rax], T_closure
  9168 00005F58 0F854D030000            	jne L_error_non_closure
  9169 00005F5E FF7001                  	push SOB_CLOSURE_ENV(rax)
  9170 00005F61 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9171 00005F64 50                      	push rax
  9172 00005F65 6A01                    	push 1	; arg count
  9173 00005F67 488B4510                	mov rax, ENV
  9174 00005F6B 488B00                  	mov rax, qword [rax + 8 * 0]
  9175 00005F6E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9176 00005F71 803804                  	cmp byte [rax], T_closure
  9177 00005F74 0F8531030000            	jne L_error_non_closure
  9178 00005F7A FF7001                  	push SOB_CLOSURE_ENV(rax)
  9179 00005F7D FF5009                  	call SOB_CLOSURE_CODE(rax)
  9180 00005F80 50                      	push rax
  9181 00005F81 6A01                    	push 1	; arg count
  9182                                  	; preparing a non-tail-call
  9183                                  	; preparing a non-tail-call
  9184                                  	; preparing a non-tail-call
  9185 00005F83 488B4510                	mov rax, ENV
  9186 00005F87 488B00                  	mov rax, qword [rax + 8 * 0]
  9187 00005F8A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9188 00005F8D 50                      	push rax
  9189 00005F8E 6A01                    	push 1	; arg count
  9190 00005F90 488B4510                	mov rax, ENV
  9191 00005F94 488B00                  	mov rax, qword [rax + 8 * 0]
  9192 00005F97 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9193 00005F9A 803804                  	cmp byte [rax], T_closure
  9194 00005F9D 0F8508030000            	jne L_error_non_closure
  9195 00005FA3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9196 00005FA6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9197 00005FA9 50                      	push rax
  9198 00005FAA 6A01                    	push 1	; arg count
  9199 00005FAC 488B4510                	mov rax, ENV
  9200 00005FB0 488B00                  	mov rax, qword [rax + 8 * 0]
  9201 00005FB3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9202 00005FB6 803804                  	cmp byte [rax], T_closure
  9203 00005FB9 0F85EC020000            	jne L_error_non_closure
  9204 00005FBF FF7001                  	push SOB_CLOSURE_ENV(rax)
  9205 00005FC2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9206 00005FC5 50                      	push rax
  9207 00005FC6 6A01                    	push 1	; arg count
  9208 00005FC8 488B4510                	mov rax, ENV
  9209 00005FCC 488B00                  	mov rax, qword [rax + 8 * 0]
  9210 00005FCF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9211 00005FD2 803804                  	cmp byte [rax], T_closure
  9212 00005FD5 0F85D0020000            	jne L_error_non_closure
  9213 00005FDB FF7001                  	push SOB_CLOSURE_ENV(rax)
  9214 00005FDE FF5009                  	call SOB_CLOSURE_CODE(rax)
  9215 00005FE1 803804                  	cmp byte [rax], T_closure
  9216 00005FE4 0F85C1020000            	jne L_error_non_closure
  9217 00005FEA FF7001                  	push SOB_CLOSURE_ENV(rax)
  9218 00005FED FF5009                  	call SOB_CLOSURE_CODE(rax)
  9219 00005FF0 50                      	push rax
  9220 00005FF1 6A01                    	push 1	; arg count
  9221                                  	; preparing a non-tail-call
  9222                                  	; preparing a non-tail-call
  9223                                  	; preparing a non-tail-call
  9224                                  	; preparing a non-tail-call
  9225 00005FF3 488B4510                	mov rax, ENV
  9226 00005FF7 488B00                  	mov rax, qword [rax + 8 * 0]
  9227 00005FFA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9228 00005FFD 50                      	push rax
  9229 00005FFE 6A01                    	push 1	; arg count
  9230 00006000 488B4510                	mov rax, ENV
  9231 00006004 488B00                  	mov rax, qword [rax + 8 * 0]
  9232 00006007 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9233 0000600A 803804                  	cmp byte [rax], T_closure
  9234 0000600D 0F8598020000            	jne L_error_non_closure
  9235 00006013 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9236 00006016 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9237 00006019 50                      	push rax
  9238 0000601A 6A01                    	push 1	; arg count
  9239 0000601C 488B4510                	mov rax, ENV
  9240 00006020 488B00                  	mov rax, qword [rax + 8 * 0]
  9241 00006023 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9242 00006026 803804                  	cmp byte [rax], T_closure
  9243 00006029 0F857C020000            	jne L_error_non_closure
  9244 0000602F FF7001                  	push SOB_CLOSURE_ENV(rax)
  9245 00006032 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9246 00006035 50                      	push rax
  9247 00006036 6A01                    	push 1	; arg count
  9248 00006038 488B4510                	mov rax, ENV
  9249 0000603C 488B00                  	mov rax, qword [rax + 8 * 0]
  9250 0000603F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9251 00006042 803804                  	cmp byte [rax], T_closure
  9252 00006045 0F8560020000            	jne L_error_non_closure
  9253 0000604B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9254 0000604E FF5009                  	call SOB_CLOSURE_CODE(rax)
  9255 00006051 50                      	push rax
  9256 00006052 6A01                    	push 1	; arg count
  9257 00006054 488B4510                	mov rax, ENV
  9258 00006058 488B00                  	mov rax, qword [rax + 8 * 0]
  9259 0000605B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9260 0000605E 803804                  	cmp byte [rax], T_closure
  9261 00006061 0F8544020000            	jne L_error_non_closure
  9262 00006067 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9263 0000606A FF5009                  	call SOB_CLOSURE_CODE(rax)
  9264 0000606D 803804                  	cmp byte [rax], T_closure
  9265 00006070 0F8535020000            	jne L_error_non_closure
  9266 00006076 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9267 00006079 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9268 0000607C 803804                  	cmp byte [rax], T_closure
  9269 0000607F 0F8526020000            	jne L_error_non_closure
  9270 00006085 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9271 00006088 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9272 0000608B 50                      	push rax
  9273 0000608C 6A01                    	push 1	; arg count
  9274                                  	; preparing a non-tail-call
  9275                                  	; preparing a non-tail-call
  9276                                  	; preparing a non-tail-call
  9277                                  	; preparing a non-tail-call
  9278 0000608E 488B4510                	mov rax, ENV
  9279 00006092 488B00                  	mov rax, qword [rax + 8 * 0]
  9280 00006095 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9281 00006098 50                      	push rax
  9282 00006099 6A01                    	push 1	; arg count
  9283 0000609B 488B4510                	mov rax, ENV
  9284 0000609F 488B00                  	mov rax, qword [rax + 8 * 0]
  9285 000060A2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9286 000060A5 803804                  	cmp byte [rax], T_closure
  9287 000060A8 0F85FD010000            	jne L_error_non_closure
  9288 000060AE FF7001                  	push SOB_CLOSURE_ENV(rax)
  9289 000060B1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9290 000060B4 50                      	push rax
  9291 000060B5 6A01                    	push 1	; arg count
  9292 000060B7 488B4510                	mov rax, ENV
  9293 000060BB 488B00                  	mov rax, qword [rax + 8 * 0]
  9294 000060BE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9295 000060C1 803804                  	cmp byte [rax], T_closure
  9296 000060C4 0F85E1010000            	jne L_error_non_closure
  9297 000060CA FF7001                  	push SOB_CLOSURE_ENV(rax)
  9298 000060CD FF5009                  	call SOB_CLOSURE_CODE(rax)
  9299 000060D0 50                      	push rax
  9300 000060D1 6A01                    	push 1	; arg count
  9301 000060D3 488B4510                	mov rax, ENV
  9302 000060D7 488B00                  	mov rax, qword [rax + 8 * 0]
  9303 000060DA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9304 000060DD 803804                  	cmp byte [rax], T_closure
  9305 000060E0 0F85C5010000            	jne L_error_non_closure
  9306 000060E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9307 000060E9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9308 000060EC 50                      	push rax
  9309 000060ED 6A01                    	push 1	; arg count
  9310 000060EF 488B4510                	mov rax, ENV
  9311 000060F3 488B00                  	mov rax, qword [rax + 8 * 0]
  9312 000060F6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  9313 000060F9 803804                  	cmp byte [rax], T_closure
  9314 000060FC 0F85A9010000            	jne L_error_non_closure
  9315 00006102 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9316 00006105 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9317 00006108 803804                  	cmp byte [rax], T_closure
  9318 0000610B 0F859A010000            	jne L_error_non_closure
  9319 00006111 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9320 00006114 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9321 00006117 803804                  	cmp byte [rax], T_closure
  9322 0000611A 0F858B010000            	jne L_error_non_closure
  9323 00006120 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9324 00006123 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9325 00006126 803804                  	cmp byte [rax], T_closure
  9326 00006129 0F857C010000            	jne L_error_non_closure
  9327 0000612F FF7001                  	push SOB_CLOSURE_ENV(rax)
  9328 00006132 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9329 00006135 803804                  	cmp byte [rax], T_closure
  9330 00006138 0F856D010000            	jne L_error_non_closure
  9331 0000613E FF7001                  	push SOB_CLOSURE_ENV(rax)
  9332 00006141 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9333 00006144 803804                  	cmp byte [rax], T_closure
  9334 00006147 0F855E010000            	jne L_error_non_closure
  9335 0000614D FF7001                  	push SOB_CLOSURE_ENV(rax)
  9336 00006150 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9337 00006153 803804                  	cmp byte [rax], T_closure
  9338 00006156 0F854F010000            	jne L_error_non_closure
  9339 0000615C FF7001                  	push SOB_CLOSURE_ENV(rax)
  9340 0000615F FF5009                  	call SOB_CLOSURE_CODE(rax)
  9341 00006162 803804                  	cmp byte [rax], T_closure
  9342 00006165 0F8540010000            	jne L_error_non_closure
  9343 0000616B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9344 0000616E FF7508                  	push qword [rbp + 8 * 1]
  9345                                   ; old ret addr	pop rbp
  9346                                  ; restore the old rbp	mov rbx, 1
  9347 00006171 4883C303                	add rbx, 3
  9348                                  	mov rdi, dword [rbp + 8*2]
  9348          ******************       error: mismatch in operand sizes
  9349                                  .L_tc_recycle_frame_loop_0006:
  9350 00006175 4883FB00                	cmp rbx, 0
  9351 00006179 7411                    je .L_tc_recycle_frame_done_0006
  9352 0000617B 488B0CDC                	mov rcx, qword [rsp + 8 * rbx]
  9353 0000617F 48894CFD18              	mov [rbp + 3*8 + 8 * rdi], rcx
  9354 00006184 48FFCF                  	dec rdi
  9355 00006187 48FFCB                  	dec rbx
  9356 0000618A EBE9                    jmp .L_tc_recycle_frame_loop_0006
  9357                                  .L_tc_recycle_frame_done_0006:
  9358 0000618C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9359 0000618F C9                      	leave
  9360 00006190 C21800                  	ret AND_KILL_FRAME(1)
  9361                                  .L_lambda_simple_end_0010:	; new closure is in rax
  9362 00006193 C9                      	leave
  9363 00006194 C22000                  	ret AND_KILL_FRAME(2)
  9364                                  .L_lambda_simple_end_000f:	; new closure is in rax
  9365 00006197 803804                  	cmp byte [rax], T_closure
  9366 0000619A 0F850B010000            	jne L_error_non_closure
  9367 000061A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9368 000061A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9369 000061A6 48890425[3B060000]      	mov qword [free_var_2], rax
  9370 000061AE 48B8-                   	mov rax, sob_void
  9370 000061B0 [0000000000000000] 
  9371                                  
  9372 000061B8 4889C7                  	mov rdi, rax
  9373 000061BB E8E9030000              	call print_sexpr_if_not_void
  9374                                  	; preparing a non-tail-call
  9375 000061C0 48B8-                   	mov rax, L_constants + 1552
  9375 000061C2 [1006000000000000] 
  9376 000061CA 50                      	push rax
  9377 000061CB 6A01                    	push 1	; arg count
  9378 000061CD 488B0425[3B060000]      	mov rax, qword [free_var_2]	; free var fact
  9379 000061D5 803805                  	cmp byte [rax], T_undefined
  9380 000061D8 744D                    	je L_error_fvar_undefined
  9381 000061DA 803804                  	cmp byte [rax], T_closure
  9382 000061DD 0F85C8000000            	jne L_error_non_closure
  9383 000061E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9384 000061E6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9385                                  Lend:
  9386 000061E9 4889C7                  	mov rdi, rax
  9387 000061EC E8B8030000              	call print_sexpr_if_not_void
  9388                                  
  9389 000061F1 48BF-                           mov rdi, fmt_memory_usage
  9389 000061F3 [F506000000000000] 
  9390 000061FB 488B3425[7B070000]              mov rsi, qword [top_of_memory]
  9391 00006203 4881EE[00000000]                sub rsi, memory
  9392 0000620A B800000000                      mov rax, 0
  9393                                          ENTER
    44 0000620F C8000000            <1>  enter 0, 0
    45 00006213 4883E4F0            <1>  and rsp, ~15
  9394 00006217 E8(00000000)                    call printf
  9395                                          LEAVE
    49 0000621C C9                  <1>  leave
  9396 0000621D B800000000                      mov rax, 0
  9397 00006222 E8(00000000)                    call exit
  9398                                  
  9399                                  L_error_fvar_undefined:
  9400 00006227 50                              push rax
  9401 00006228 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
  9402 00006230 48BE-                           mov rsi, fmt_undefined_free_var_1
  9402 00006232 [5D06000000000000] 
  9403 0000623A B800000000                      mov rax, 0
  9404                                          ENTER
    44 0000623F C8000000            <1>  enter 0, 0
    45 00006243 4883E4F0            <1>  and rsp, ~15
  9405 00006247 E8(00000000)                    call fprintf
  9406                                          LEAVE
    49 0000624C C9                  <1>  leave
  9407 0000624D 58                              pop rax
  9408 0000624E 488B4001                        mov rax, qword [rax + 1] ; string
  9409 00006252 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  9410 00006256 BE01000000                      mov rsi, 1               ; sizeof(char)
  9411 0000625B 488B5001                        mov rdx, qword [rax + 1] ; string-length
  9412 0000625F 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
  9413 00006267 B800000000                      mov rax, 0
  9414                                          ENTER
    44 0000626C C8000000            <1>  enter 0, 0
    45 00006270 4883E4F0            <1>  and rsp, ~15
  9415 00006274 E8(00000000)                    call fwrite
  9416                                          LEAVE
    49 00006279 C9                  <1>  leave
  9417 0000627A 488B3C25[00000000]              mov rdi, [stderr]       ; destination
  9418 00006282 48BE-                           mov rsi, fmt_undefined_free_var_2
  9418 00006284 [7406000000000000] 
  9419 0000628C B800000000                      mov rax, 0
  9420                                          ENTER
    44 00006291 C8000000            <1>  enter 0, 0
    45 00006295 4883E4F0            <1>  and rsp, ~15
  9421 00006299 E8(00000000)                    call fprintf
  9422                                          LEAVE
    49 0000629E C9                  <1>  leave
  9423 0000629F 48C7C0F6FFFFFF                  mov rax, -10
  9424 000062A6 E8(00000000)                    call exit
  9425                                  
  9426                                  L_error_non_closure:
  9427 000062AB 488B3C25[00000000]              mov rdi, qword [stderr]
  9428 000062B3 48BE-                           mov rsi, fmt_non_closure
  9428 000062B5 [2B07000000000000] 
  9429 000062BD B800000000                      mov rax, 0
  9430                                          ENTER
    44 000062C2 C8000000            <1>  enter 0, 0
    45 000062C6 4883E4F0            <1>  and rsp, ~15
  9431 000062CA E8(00000000)                    call fprintf
  9432                                          LEAVE
    49 000062CF C9                  <1>  leave
  9433 000062D0 48C7C0FEFFFFFF                  mov rax, -2
  9434 000062D7 E8(00000000)                    call exit
  9435                                  
  9436                                  L_error_improper_list:
  9437 000062DC 488B3C25[00000000]      	mov rdi, qword [stderr]
  9438 000062E4 48BE-                   	mov rsi, fmt_error_improper_list
  9438 000062E6 [5307000000000000] 
  9439 000062EE B800000000              	mov rax, 0
  9440                                          ENTER
    44 000062F3 C8000000            <1>  enter 0, 0
    45 000062F7 4883E4F0            <1>  and rsp, ~15
  9441 000062FB E8(00000000)            	call fprintf
  9442                                          LEAVE
    49 00006300 C9                  <1>  leave
  9443 00006301 48C7C0F9FFFFFF          	mov rax, -7
  9444 00006308 E8(00000000)            	call exit
  9445                                  
  9446                                  L_error_incorrect_arity_simple:
  9447 0000630D 488B3C25[00000000]              mov rdi, qword [stderr]
  9448 00006315 48BE-                           mov rsi, fmt_incorrect_arity_simple
  9448 00006317 [9606000000000000] 
  9449 0000631F EB12                            jmp L_error_incorrect_arity_common
  9450                                  L_error_incorrect_arity_opt:
  9451 00006321 488B3C25[00000000]              mov rdi, qword [stderr]
  9452 00006329 48BE-                           mov rsi, fmt_incorrect_arity_opt
  9452 0000632B [C106000000000000] 
  9453                                  L_error_incorrect_arity_common:
  9454 00006333 5A                              pop rdx
  9455 00006334 59                              pop rcx
  9456 00006335 B800000000                      mov rax, 0
  9457                                          ENTER
    44 0000633A C8000000            <1>  enter 0, 0
    45 0000633E 4883E4F0            <1>  and rsp, ~15
  9458 00006342 E8(00000000)                    call fprintf
  9459                                          LEAVE
    49 00006347 C9                  <1>  leave
  9460 00006348 48C7C0FAFFFFFF                  mov rax, -6
  9461 0000634F E8(00000000)                    call exit
  9462                                  
  9463                                  section .data
  9464                                  fmt_undefined_free_var_1:
  9465 0000065D 212121205468652066-             db `!!! The free variable \0`
  9465 00000666 726565207661726961-
  9465 0000066F 626C652000         
  9466                                  fmt_undefined_free_var_2:
  9467 00000674 207761732075736564-             db ` was used before it was defined.\n\0`
  9467 0000067D 206265666F72652069-
  9467 00000686 742077617320646566-
  9467 0000068F 696E65642E0A00     
  9468                                  fmt_incorrect_arity_simple:
  9469 00000696 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
  9469 0000069F 74656420256C642061-
  9469 000006A8 7267756D656E74732C-
  9469 000006B1 206275742067697665-
  9469 000006BA 6E20256C640A00     
  9470                                  fmt_incorrect_arity_opt:
  9471 000006C1 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
  9471 000006CA 746564206174206C65-
  9471 000006D3 61737420256C642061-
  9471 000006DC 7267756D656E74732C-
  9471 000006E5 206275742067697665-
  9471 000006EE 6E20256C640A00     
  9472                                  fmt_memory_usage:
  9473 000006F5 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
  9473 000006FE 20256C642062797465-
  9473 00000707 73206F662064796E61-
  9473 00000710 6D6963616C6C792D61-
  9473 00000719 6C6C6F636174656420-
  9473 00000722 6D656D6F72790A0A00 
  9474                                  fmt_non_closure:
  9475 0000072B 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
  9475 00000734 7074696E6720746F20-
  9475 0000073D 6170706C792061206E-
  9475 00000746 6F6E2D636C6F737572-
  9475 0000074F 65210A00           
  9476                                  fmt_error_improper_list:
  9477 00000753 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
  9477 0000075C 7267756D656E742069-
  9477 00000765 73206E6F7420612070-
  9477 0000076E 726F706572206C6973-
  9477 00000777 74210A00           
  9478                                  
  9479                                  section .bss
  9480                                  memory:
  9481 00000000 <res 40000000h>         	resb gbytes(1)
  9482                                  
  9483                                  section .data
  9484                                  top_of_memory:
  9485 0000077B [0000000000000000]              dq memory
  9486                                  
  9487                                  section .text
  9488                                  malloc:
  9489 00006354 488B0425[7B070000]              mov rax, qword [top_of_memory]
  9490 0000635C 48013C25[7B070000]              add qword [top_of_memory], rdi
  9491 00006364 C3                              ret
  9492                                  
  9493                                  L_code_ptr_return:
  9494 00006365 48837C241002            	cmp qword [rsp + 8*2], 2
  9495 0000636B 0F85C01C0000            	jne L_error_arg_count_2
  9496 00006371 488B4C2418              	mov rcx, qword [rsp + 8*3]
  9497                                  	assert_integer(rcx)
    53 00006376 803911              <1>  cmp byte [%1], %2
    54 00006379 0F85511D0000        <1>  jne L_error_incorrect_type
  9498 0000637F 488B4901                	mov rcx, qword [rcx + 1]
  9499 00006383 4883F900                	cmp rcx, 0
  9500 00006387 0F8CD81B0000            	jl L_error_integer_range
  9501 0000638D 488B442420              	mov rax, qword [rsp + 8*4]
  9502                                  .L0:
  9503 00006392 4883F900                        cmp rcx, 0
  9504 00006396 7409                            je .L1
  9505 00006398 488B6D00                	mov rbp, qword [rbp]
  9506 0000639C 48FFC9                  	dec rcx
  9507 0000639F 7FF1                    	jg .L0
  9508                                  .L1:
  9509 000063A1 4889EC                  	mov rsp, rbp
  9510 000063A4 5D                      	pop rbp
  9511 000063A5 5B                              pop rbx
  9512 000063A6 488B4C2408                      mov rcx, qword [rsp + 8*1]
  9513 000063AB 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
  9514 000063B0 FFE3                    	jmp rbx
  9515                                  
  9516                                  L_code_ptr_make_list:
  9517 000063B2 C8000000                	enter 0, 0
  9518 000063B6 48837D1801                      cmp COUNT, 1
  9519 000063BB 740C                            je .L0
  9520 000063BD 48837D1802                      cmp COUNT, 2
  9521 000063C2 7411                            je .L1
  9522 000063C4 E99D1C0000                      jmp L_error_arg_count_12
  9523                                  .L0:
  9524 000063C9 49B9-                           mov r9, sob_void
  9524 000063CB [0000000000000000] 
  9525 000063D3 EB04                            jmp .L2
  9526                                  .L1:
  9527 000063D5 4C8B4D28                        mov r9, PARAM(1)
  9528                                  .L2:
  9529 000063D9 488B4D20                        mov rcx, PARAM(0)
  9530                                          assert_integer(rcx)
    53 000063DD 803911              <1>  cmp byte [%1], %2
    54 000063E0 0F85EA1C0000        <1>  jne L_error_incorrect_type
  9531 000063E6 488B4901                        mov rcx, qword [rcx + 1]
  9532 000063EA 4883F900                        cmp rcx, 0
  9533 000063EE 0F8CA21B0000                    jl L_error_arg_negative
  9534 000063F4 49B8-                           mov r8, sob_nil
  9534 000063F6 [0100000000000000] 
  9535                                  .L3:
  9536 000063FE 4883F900                        cmp rcx, 0
  9537 00006402 7E1D                            jle .L4
  9538 00006404 BF11000000                      mov rdi, 1 + 8 + 8
  9539 00006409 E846FFFFFF                      call malloc
  9540 0000640E C60021                          mov byte [rax], T_pair
  9541 00006411 4C894801                        mov qword [rax + 1], r9
  9542 00006415 4C894009                        mov qword [rax + 1 + 8], r8
  9543 00006419 4989C0                          mov r8, rax
  9544 0000641C 48FFC9                          dec rcx
  9545 0000641F EBDD                            jmp .L3
  9546                                  .L4:
  9547 00006421 4C89C0                          mov rax, r8
  9548 00006424 48837D1802                      cmp COUNT, 2
  9549 00006429 7404                            je .L5
  9550 0000642B C9                              leave
  9551 0000642C C21800                          ret AND_KILL_FRAME(1)
  9552                                  .L5:
  9553 0000642F C9                      	leave
  9554 00006430 C22000                  	ret AND_KILL_FRAME(2)
  9555                                  
  9556                                  L_code_ptr_is_primitive:
  9557 00006433 C8000000                	enter 0, 0
  9558 00006437 48837D1801              	cmp COUNT, 1
  9559 0000643C 0F85BA1B0000            	jne L_error_arg_count_1
  9560 00006442 488B4520                	mov rax, PARAM(0)
  9561                                  	assert_closure(rax)
    53 00006446 803804              <1>  cmp byte [%1], %2
    54 00006449 0F85811C0000        <1>  jne L_error_incorrect_type
  9562 0000644F 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
  9563 00006454 750C                    	jne .L_false
  9564 00006456 48B8-                   	mov rax, sob_boolean_true
  9564 00006458 [0300000000000000] 
  9565 00006460 EB0A                    	jmp .L_end
  9566                                  .L_false:
  9567 00006462 48B8-                   	mov rax, sob_boolean_false
  9567 00006464 [0200000000000000] 
  9568                                  .L_end:
  9569 0000646C C9                      	leave
  9570 0000646D C21800                  	ret AND_KILL_FRAME(1)
  9571                                  
  9572                                  L_code_ptr_length:
  9573 00006470 C8000000                	enter 0, 0
  9574 00006474 48837D1801              	cmp COUNT, 1
  9575 00006479 0F857D1B0000            	jne L_error_arg_count_1
  9576 0000647F 488B5D20                	mov rbx, PARAM(0)
  9577 00006483 BF00000000              	mov rdi, 0
  9578                                  .L:
  9579 00006488 803B01                  	cmp byte [rbx], T_nil
  9580 0000648B 7412                    	je .L_end
  9581                                  	assert_pair(rbx)
    53 0000648D 803B21              <1>  cmp byte [%1], %2
    54 00006490 0F853A1C0000        <1>  jne L_error_incorrect_type
  9582 00006496 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
  9583 0000649A 48FFC7                  	inc rdi
  9584 0000649D EBE9                    	jmp .L
  9585                                  .L_end:
  9586 0000649F E8A71A0000              	call make_integer
  9587 000064A4 C9                      	leave
  9588 000064A5 C21800                  	ret AND_KILL_FRAME(1)
  9589                                  
  9590                                  L_code_ptr_break:
  9591 000064A8 48837C241000                    cmp qword [rsp + 8 * 2], 0
  9592 000064AE 0F85131B0000                    jne L_error_arg_count_0
  9593 000064B4 CC                              int3
  9594 000064B5 48B8-                           mov rax, sob_void
  9594 000064B7 [0000000000000000] 
  9595 000064BF C21000                          ret AND_KILL_FRAME(0)        
  9596                                  
  9597                                  L_code_ptr_frame:
  9598 000064C2 C8000000                        enter 0, 0
  9599 000064C6 48837D1800                      cmp COUNT, 0
  9600 000064CB 0F85F61A0000                    jne L_error_arg_count_0
  9601                                  
  9602 000064D1 48BF-                           mov rdi, fmt_frame
  9602 000064D3 [8307000000000000] 
  9603 000064DB 488B7500                        mov rsi, qword [rbp]    ; old rbp
  9604 000064DF 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
  9605 000064E3 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
  9606 000064E7 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
  9607 000064EB 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
  9608 000064EF 6A00                            push 0
  9609 000064F1 4151                            push r9
  9610 000064F3 4150                            push r8                   ; we'll use it when printing the params
  9611 000064F5 B800000000                      mov rax, 0
  9612                                          
  9613                                          ENTER
    44 000064FA C8000000            <1>  enter 0, 0
    45 000064FE 4883E4F0            <1>  and rsp, ~15
  9614 00006502 E8(00000000)                    call printf
  9615                                          LEAVE
    49 00006507 C9                  <1>  leave
  9616                                  
  9617                                  .L:
  9618 00006508 488B0C24                        mov rcx, qword [rsp]
  9619 0000650C 4883F900                        cmp rcx, 0
  9620 00006510 7467                            je .L_out
  9621 00006512 48BF-                           mov rdi, fmt_frame_param_prefix
  9621 00006514 [BC07000000000000] 
  9622 0000651C 488B742410                      mov rsi, qword [rsp + 8*2]
  9623 00006521 B800000000                      mov rax, 0
  9624                                          
  9625                                          ENTER
    44 00006526 C8000000            <1>  enter 0, 0
    45 0000652A 4883E4F0            <1>  and rsp, ~15
  9626 0000652E E8(00000000)                    call printf
  9627                                          LEAVE
    49 00006533 C9                  <1>  leave
  9628                                  
  9629 00006534 488B0C24                        mov rcx, qword [rsp]
  9630 00006538 48FFC9                          dec rcx
  9631 0000653B 48890C24                        mov qword [rsp], rcx    ; dec arg count
  9632 0000653F 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
  9633 00006544 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
  9634 00006549 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
  9635 0000654D 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
  9636 00006552 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
  9637 00006555 E87B000000                      call print_sexpr
  9638 0000655A 48BF-                           mov rdi, fmt_newline
  9638 0000655C [E807000000000000] 
  9639 00006564 B800000000                      mov rax, 0
  9640                                          ENTER
    44 00006569 C8000000            <1>  enter 0, 0
    45 0000656D 4883E4F0            <1>  and rsp, ~15
  9641 00006571 E8(00000000)                    call printf
  9642                                          LEAVE
    49 00006576 C9                  <1>  leave
  9643 00006577 EB8F                            jmp .L
  9644                                  .L_out:
  9645 00006579 48BF-                           mov rdi, fmt_frame_continue
  9645 0000657B [CD07000000000000] 
  9646 00006583 B800000000                      mov rax, 0
  9647                                          ENTER
    44 00006588 C8000000            <1>  enter 0, 0
    45 0000658C 4883E4F0            <1>  and rsp, ~15
  9648 00006590 E8(00000000)                    call printf
  9649 00006595 E8(00000000)                    call getchar
  9650                                          LEAVE
    49 0000659A C9                  <1>  leave
  9651                                          
  9652 0000659B 48B8-                           mov rax, sob_void
  9652 0000659D [0000000000000000] 
  9653 000065A5 C9                              leave
  9654 000065A6 C21000                          ret AND_KILL_FRAME(0)
  9655                                          
  9656                                  print_sexpr_if_not_void:
  9657 000065A9 4881FF[00000000]        	cmp rdi, sob_void
  9658 000065B0 7422                    	je .done
  9659 000065B2 E81E000000              	call print_sexpr
  9660 000065B7 48BF-                   	mov rdi, fmt_newline
  9660 000065B9 [E807000000000000] 
  9661 000065C1 B800000000              	mov rax, 0
  9662                                  	ENTER
    44 000065C6 C8000000            <1>  enter 0, 0
    45 000065CA 4883E4F0            <1>  and rsp, ~15
  9663 000065CE E8(00000000)            	call printf
  9664                                  	LEAVE
    49 000065D3 C9                  <1>  leave
  9665                                  .done:
  9666 000065D4 C3                      	ret
  9667                                  
  9668                                  section .data
  9669                                  fmt_frame:
  9670 00000783 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
  9670 0000078C 207265742061646472-
  9670 00000795 203D2025703B206C65-
  9670 0000079E 7820656E76203D2025-
  9670 000007A7 703B20706172616D20-
  9670 000007B0 636F756E74203D2025-
  9670 000007B9 640A00             
  9671                                  fmt_frame_param_prefix:
  9672 000007BC 3D3D5B706172616D20-             db `==[param %d]==> \0`
  9672 000007C5 25645D3D3D3E2000   
  9673                                  fmt_frame_continue:
  9674 000007CD 486974203C456E7465-             db `Hit <Enter> to continue...\0`
  9674 000007D6 723E20746F20636F6E-
  9674 000007DF 74696E75652E2E2E00 
  9675                                  fmt_newline:
  9676 000007E8 0A00                    	db `\n\0`
  9677                                  fmt_void:
  9678 000007EA 233C766F69643E00        	db `#<void>\0`
  9679                                  fmt_nil:
  9680 000007F2 282900                  	db `()\0`
  9681                                  fmt_boolean_false:
  9682 000007F5 236600                  	db `#f\0`
  9683                                  fmt_boolean_true:
  9684 000007F8 237400                  	db `#t\0`
  9685                                  fmt_char_backslash:
  9686 000007FB 235C5C00                	db `#\\\\\0`
  9687                                  fmt_char_dquote:
  9688 000007FF 235C2200                	db `#\\"\0`
  9689                                  fmt_char_simple:
  9690 00000803 235C256300              	db `#\\%c\0`
  9691                                  fmt_char_null:
  9692 00000808 235C6E756C00            	db `#\\nul\0`
  9693                                  fmt_char_bell:
  9694 0000080E 235C62656C6C00          	db `#\\bell\0`
  9695                                  fmt_char_backspace:
  9696 00000815 235C6261636B737061-     	db `#\\backspace\0`
  9696 0000081E 636500             
  9697                                  fmt_char_tab:
  9698 00000821 235C74616200            	db `#\\tab\0`
  9699                                  fmt_char_newline:
  9700 00000827 235C6E65776C696E65-     	db `#\\newline\0`
  9700 00000830 00                 
  9701                                  fmt_char_formfeed:
  9702 00000831 235C7061676500          	db `#\\page\0`
  9703                                  fmt_char_return:
  9704 00000838 235C72657475726E00      	db `#\\return\0`
  9705                                  fmt_char_escape:
  9706 00000841 235C65736300            	db `#\\esc\0`
  9707                                  fmt_char_space:
  9708 00000847 235C737061636500        	db `#\\space\0`
  9709                                  fmt_char_hex:
  9710 0000084F 235C782530325800        	db `#\\x%02X\0`
  9711                                  fmt_gensym:
  9712 00000857 47256C6400                      db `G%ld\0`
  9713                                  fmt_closure:
  9714 0000085C 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  9714 00000865 206174203078253038-
  9714 0000086E 5820656E763D307825-
  9714 00000877 30385820636F64653D-
  9714 00000880 3078253038583E00   
  9715                                  fmt_lparen:
  9716 00000888 2800                    	db `(\0`
  9717                                  fmt_dotted_pair:
  9718 0000088A 202E2000                	db ` . \0`
  9719                                  fmt_rparen:
  9720 0000088E 2900                    	db `)\0`
  9721                                  fmt_space:
  9722 00000890 2000                    	db ` \0`
  9723                                  fmt_empty_vector:
  9724 00000892 23282900                	db `#()\0`
  9725                                  fmt_vector:
  9726 00000896 232800                  	db `#(\0`
  9727                                  fmt_real:
  9728 00000899 256600                  	db `%f\0`
  9729                                  fmt_fraction:
  9730 0000089C 256C642F256C6400        	db `%ld/%ld\0`
  9731                                  fmt_zero:
  9732 000008A4 3000                    	db `0\0`
  9733                                  fmt_int:
  9734 000008A6 256C6400                	db `%ld\0`
  9735                                  fmt_unknown_scheme_object_error:
  9736 000008AA 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
  9736 000008B3 6F723A20556E6B6E6F-
  9736 000008BC 776E20536368656D65-
  9736 000008C5 2D6F626A6563742028-
  9736 000008CE 525454492030782530-
  9736 000008D7 32582920           
  9737 000008DB 617420616464726573-     	db `at address 0x%08X\n\n\0`
  9737 000008E4 73203078253038580A-
  9737 000008ED 0A00               
  9738                                  fmt_dquote:
  9739 000008EF 2200                    	db `\"\0`
  9740                                  fmt_string_char:
  9741 000008F1 256300                          db `%c\0`
  9742                                  fmt_string_char_7:
  9743 000008F4 5C6100                          db `\\a\0`
  9744                                  fmt_string_char_8:
  9745 000008F7 5C6200                          db `\\b\0`
  9746                                  fmt_string_char_9:
  9747 000008FA 5C7400                          db `\\t\0`
  9748                                  fmt_string_char_10:
  9749 000008FD 5C6E00                          db `\\n\0`
  9750                                  fmt_string_char_11:
  9751 00000900 5C7600                          db `\\v\0`
  9752                                  fmt_string_char_12:
  9753 00000903 5C6600                          db `\\f\0`
  9754                                  fmt_string_char_13:
  9755 00000906 5C7200                          db `\\r\0`
  9756                                  fmt_string_char_34:
  9757 00000909 5C2200                          db `\\"\0`
  9758                                  fmt_string_char_92:
  9759 0000090C 5C5C00                          db `\\\\\0`
  9760                                  fmt_string_char_hex:
  9761 0000090F 5C7825583B00                    db `\\x%X;\0`
  9762                                  
  9763                                  section .text
  9764                                  
  9765                                  print_sexpr:
  9766 000065D5 C8000000                	enter 0, 0
  9767 000065D9 8A07                    	mov al, byte [rdi]
  9768 000065DB 3C00                    	cmp al, T_void
  9769 000065DD 7465                    	je .Lvoid
  9770 000065DF 3C01                    	cmp al, T_nil
  9771 000065E1 7470                    	je .Lnil
  9772 000065E3 3C09                    	cmp al, T_boolean_false
  9773 000065E5 747B                    	je .Lboolean_false
  9774 000065E7 3C0A                    	cmp al, T_boolean_true
  9775 000065E9 0F8482000000            	je .Lboolean_true
  9776 000065EF 3C02                    	cmp al, T_char
  9777 000065F1 0F8489000000            	je .Lchar
  9778 000065F7 3C41                    	cmp al, T_interned_symbol
  9779 000065F9 0F84CB010000            	je .Linterned_symbol
  9780 000065FF 3C42                            cmp al, T_uninterned_symbol
  9781 00006601 0F84EF010000                    je .Luninterned_symbol
  9782 00006607 3C21                    	cmp al, T_pair
  9783 00006609 0F84FA010000            	je .Lpair
  9784 0000660F 3C22                    	cmp al, T_vector
  9785 00006611 0F84C3020000            	je .Lvector
  9786 00006617 3C04                    	cmp al, T_closure
  9787 00006619 0F8491010000            	je .Lclosure
  9788 0000661F 3C13                    	cmp al, T_real
  9789 00006621 0F8454030000            	je .Lreal
  9790 00006627 3C12                    	cmp al, T_fraction
  9791 00006629 0F847A030000            	je .Lfraction
  9792 0000662F 3C11                    	cmp al, T_integer
  9793 00006631 0F84B3030000            	je .Linteger
  9794 00006637 3C03                    	cmp al, T_string
  9795 00006639 0F84BE030000            	je .Lstring
  9796                                  
  9797 0000663F E9F6040000              	jmp .Lunknown_sexpr_type
  9798                                  
  9799                                  .Lvoid:
  9800 00006644 48BF-                   	mov rdi, fmt_void
  9800 00006646 [EA07000000000000] 
  9801 0000664E E91A050000              	jmp .Lemit
  9802                                  
  9803                                  .Lnil:
  9804 00006653 48BF-                   	mov rdi, fmt_nil
  9804 00006655 [F207000000000000] 
  9805 0000665D E90B050000              	jmp .Lemit
  9806                                  
  9807                                  .Lboolean_false:
  9808 00006662 48BF-                   	mov rdi, fmt_boolean_false
  9808 00006664 [F507000000000000] 
  9809 0000666C E9FC040000              	jmp .Lemit
  9810                                  
  9811                                  .Lboolean_true:
  9812 00006671 48BF-                   	mov rdi, fmt_boolean_true
  9812 00006673 [F807000000000000] 
  9813 0000667B E9ED040000              	jmp .Lemit
  9814                                  
  9815                                  .Lchar:
  9816 00006680 8A4701                  	mov al, byte [rdi + 1]
  9817 00006683 3C20                    	cmp al, ' '
  9818 00006685 7E28                    	jle .Lchar_whitespace
  9819 00006687 3C5C                    	cmp al, 92 		; backslash
  9820 00006689 0F847C000000            	je .Lchar_backslash
  9821 0000668F 3C22                    	cmp al, '"'
  9822 00006691 0F8483000000            	je .Lchar_dquote
  9823 00006697 4825FF000000            	and rax, 255
  9824 0000669D 48BF-                   	mov rdi, fmt_char_simple
  9824 0000669F [0308000000000000] 
  9825 000066A7 4889C6                  	mov rsi, rax
  9826 000066AA E9BE040000              	jmp .Lemit
  9827                                  
  9828                                  .Lchar_whitespace:
  9829 000066AF 3C00                    	cmp al, 0
  9830 000066B1 7476                    	je .Lchar_null
  9831 000066B3 3C07                    	cmp al, 7
  9832 000066B5 0F847D000000            	je .Lchar_bell
  9833 000066BB 3C08                    	cmp al, 8
  9834 000066BD 0F8484000000            	je .Lchar_backspace
  9835 000066C3 3C09                    	cmp al, 9
  9836 000066C5 0F848B000000            	je .Lchar_tab
  9837 000066CB 3C0A                    	cmp al, 10
  9838 000066CD 0F8492000000            	je .Lchar_newline
  9839 000066D3 3C0C                    	cmp al, 12
  9840 000066D5 0F8499000000            	je .Lchar_formfeed
  9841 000066DB 3C0D                    	cmp al, 13
  9842 000066DD 0F84A0000000            	je .Lchar_return
  9843 000066E3 3C1B                    	cmp al, 27
  9844 000066E5 0F84A7000000            	je .Lchar_escape
  9845 000066EB 4825FF000000            	and rax, 255
  9846 000066F1 3C20                    	cmp al, ' '
  9847 000066F3 0F84A8000000            	je .Lchar_space
  9848 000066F9 48BF-                   	mov rdi, fmt_char_hex
  9848 000066FB [4F08000000000000] 
  9849 00006703 4889C6                  	mov rsi, rax
  9850 00006706 E962040000              	jmp .Lemit	
  9851                                  
  9852                                  .Lchar_backslash:
  9853 0000670B 48BF-                   	mov rdi, fmt_char_backslash
  9853 0000670D [FB07000000000000] 
  9854 00006715 E953040000              	jmp .Lemit
  9855                                  
  9856                                  .Lchar_dquote:
  9857 0000671A 48BF-                   	mov rdi, fmt_char_dquote
  9857 0000671C [FF07000000000000] 
  9858 00006724 E944040000              	jmp .Lemit
  9859                                  
  9860                                  .Lchar_null:
  9861 00006729 48BF-                   	mov rdi, fmt_char_null
  9861 0000672B [0808000000000000] 
  9862 00006733 E935040000              	jmp .Lemit
  9863                                  
  9864                                  .Lchar_bell:
  9865 00006738 48BF-                   	mov rdi, fmt_char_bell
  9865 0000673A [0E08000000000000] 
  9866 00006742 E926040000              	jmp .Lemit
  9867                                  
  9868                                  .Lchar_backspace:
  9869 00006747 48BF-                   	mov rdi, fmt_char_backspace
  9869 00006749 [1508000000000000] 
  9870 00006751 E917040000              	jmp .Lemit
  9871                                  
  9872                                  .Lchar_tab:
  9873 00006756 48BF-                   	mov rdi, fmt_char_tab
  9873 00006758 [2108000000000000] 
  9874 00006760 E908040000              	jmp .Lemit
  9875                                  
  9876                                  .Lchar_newline:
  9877 00006765 48BF-                   	mov rdi, fmt_char_newline
  9877 00006767 [2708000000000000] 
  9878 0000676F E9F9030000              	jmp .Lemit
  9879                                  
  9880                                  .Lchar_formfeed:
  9881 00006774 48BF-                   	mov rdi, fmt_char_formfeed
  9881 00006776 [3108000000000000] 
  9882 0000677E E9EA030000              	jmp .Lemit
  9883                                  
  9884                                  .Lchar_return:
  9885 00006783 48BF-                   	mov rdi, fmt_char_return
  9885 00006785 [3808000000000000] 
  9886 0000678D E9DB030000              	jmp .Lemit
  9887                                  
  9888                                  .Lchar_escape:
  9889 00006792 48BF-                   	mov rdi, fmt_char_escape
  9889 00006794 [4108000000000000] 
  9890 0000679C E9CC030000              	jmp .Lemit
  9891                                  
  9892                                  .Lchar_space:
  9893 000067A1 48BF-                   	mov rdi, fmt_char_space
  9893 000067A3 [4708000000000000] 
  9894 000067AB E9BD030000              	jmp .Lemit
  9895                                  
  9896                                  .Lclosure:
  9897 000067B0 4889FE                  	mov rsi, qword rdi
  9898 000067B3 48BF-                   	mov rdi, fmt_closure
  9898 000067B5 [5C08000000000000] 
  9899 000067BD 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  9900 000067C1 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  9901 000067C5 E9A3030000              	jmp .Lemit
  9902                                  
  9903                                  .Linterned_symbol:
  9904 000067CA 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  9905 000067CE BE01000000              	mov rsi, 1		 ; size = 1 byte
  9906 000067D3 488B5701                	mov rdx, qword [rdi + 1] ; length
  9907 000067D7 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  9908 000067DB 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  9909                                  	ENTER
    44 000067E3 C8000000            <1>  enter 0, 0
    45 000067E7 4883E4F0            <1>  and rsp, ~15
  9910 000067EB E8(00000000)            	call fwrite
  9911                                  	LEAVE
    49 000067F0 C9                  <1>  leave
  9912 000067F1 E98C030000              	jmp .Lend
  9913                                  
  9914                                  .Luninterned_symbol:
  9915 000067F6 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  9916 000067FA 48BF-                           mov rdi, fmt_gensym
  9916 000067FC [5708000000000000] 
  9917 00006804 E964030000                      jmp .Lemit
  9918                                  	
  9919                                  .Lpair:
  9920 00006809 57                      	push rdi
  9921 0000680A 48BF-                   	mov rdi, fmt_lparen
  9921 0000680C [8808000000000000] 
  9922 00006814 B800000000              	mov rax, 0
  9923                                          ENTER
    44 00006819 C8000000            <1>  enter 0, 0
    45 0000681D 4883E4F0            <1>  and rsp, ~15
  9924 00006821 E8(00000000)            	call printf
  9925                                          LEAVE
    49 00006826 C9                  <1>  leave
  9926 00006827 488B3C24                	mov rdi, qword [rsp] 	; pair
  9927 0000682B 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  9928 0000682F E8A1FDFFFF              	call print_sexpr
  9929 00006834 5F                      	pop rdi 		; pair
  9930 00006835 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  9931                                  .Lcdr:
  9932 00006839 8A07                    	mov al, byte [rdi]
  9933 0000683B 3C01                    	cmp al, T_nil
  9934 0000683D 7447                    	je .Lcdr_nil
  9935 0000683F 3C21                    	cmp al, T_pair
  9936 00006841 7462                    	je .Lcdr_pair
  9937 00006843 57                      	push rdi
  9938 00006844 48BF-                   	mov rdi, fmt_dotted_pair
  9938 00006846 [8A08000000000000] 
  9939 0000684E B800000000              	mov rax, 0
  9940                                          ENTER
    44 00006853 C8000000            <1>  enter 0, 0
    45 00006857 4883E4F0            <1>  and rsp, ~15
  9941 0000685B E8(00000000)            	call printf
  9942                                          LEAVE
    49 00006860 C9                  <1>  leave
  9943 00006861 5F                      	pop rdi
  9944 00006862 E86EFDFFFF              	call print_sexpr
  9945 00006867 48BF-                   	mov rdi, fmt_rparen
  9945 00006869 [8E08000000000000] 
  9946 00006871 B800000000              	mov rax, 0
  9947                                          ENTER
    44 00006876 C8000000            <1>  enter 0, 0
    45 0000687A 4883E4F0            <1>  and rsp, ~15
  9948 0000687E E8(00000000)            	call printf
  9949                                          LEAVE
    49 00006883 C9                  <1>  leave
  9950 00006884 C9                      	leave
  9951 00006885 C3                      	ret
  9952                                  
  9953                                  .Lcdr_nil:
  9954 00006886 48BF-                   	mov rdi, fmt_rparen
  9954 00006888 [8E08000000000000] 
  9955 00006890 B800000000              	mov rax, 0
  9956                                          ENTER
    44 00006895 C8000000            <1>  enter 0, 0
    45 00006899 4883E4F0            <1>  and rsp, ~15
  9957 0000689D E8(00000000)            	call printf
  9958                                          LEAVE
    49 000068A2 C9                  <1>  leave
  9959 000068A3 C9                      	leave
  9960 000068A4 C3                      	ret
  9961                                  
  9962                                  .Lcdr_pair:
  9963 000068A5 57                      	push rdi
  9964 000068A6 48BF-                   	mov rdi, fmt_space
  9964 000068A8 [9008000000000000] 
  9965 000068B0 B800000000              	mov rax, 0
  9966                                          ENTER
    44 000068B5 C8000000            <1>  enter 0, 0
    45 000068B9 4883E4F0            <1>  and rsp, ~15
  9967 000068BD E8(00000000)            	call printf
  9968                                          LEAVE
    49 000068C2 C9                  <1>  leave
  9969 000068C3 488B3C24                	mov rdi, qword [rsp]
  9970 000068C7 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  9971 000068CB E805FDFFFF              	call print_sexpr
  9972 000068D0 5F                      	pop rdi
  9973 000068D1 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  9974 000068D5 E95FFFFFFF              	jmp .Lcdr
  9975                                  
  9976                                  .Lvector:
  9977 000068DA 488B4701                	mov rax, qword [rdi + 1] ; length
  9978 000068DE 4883F800                	cmp rax, 0
  9979 000068E2 0F8484000000            	je .Lvector_empty
  9980 000068E8 57                      	push rdi
  9981 000068E9 48BF-                   	mov rdi, fmt_vector
  9981 000068EB [9608000000000000] 
  9982 000068F3 B800000000              	mov rax, 0
  9983                                          ENTER
    44 000068F8 C8000000            <1>  enter 0, 0
    45 000068FC 4883E4F0            <1>  and rsp, ~15
  9984 00006900 E8(00000000)            	call printf
  9985                                          LEAVE
    49 00006905 C9                  <1>  leave
  9986 00006906 488B3C24                	mov rdi, qword [rsp]
  9987 0000690A FF7701                  	push qword [rdi + 1]
  9988 0000690D 6A01                    	push 1
  9989 0000690F 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  9990 00006913 E8BDFCFFFF              	call print_sexpr
  9991                                  .Lvector_loop:
  9992                                  	; [rsp] index
  9993                                  	; [rsp + 8*1] limit
  9994                                  	; [rsp + 8*2] vector
  9995 00006918 488B0424                	mov rax, qword [rsp]
  9996 0000691C 483B442408              	cmp rax, qword [rsp + 8*1]
  9997 00006921 7436                    	je .Lvector_end
  9998 00006923 48BF-                   	mov rdi, fmt_space
  9998 00006925 [9008000000000000] 
  9999 0000692D B800000000              	mov rax, 0
 10000                                          ENTER
    44 00006932 C8000000            <1>  enter 0, 0
    45 00006936 4883E4F0            <1>  and rsp, ~15
 10001 0000693A E8(00000000)            	call printf
 10002                                          LEAVE
    49 0000693F C9                  <1>  leave
 10003 00006940 488B0424                	mov rax, qword [rsp]
 10004 00006944 488B5C2410              	mov rbx, qword [rsp + 8*2]
 10005 00006949 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
 10006 0000694E E882FCFFFF              	call print_sexpr
 10007 00006953 48FF0424                	inc qword [rsp]
 10008 00006957 EBBF                    	jmp .Lvector_loop
 10009                                  
 10010                                  .Lvector_end:
 10011 00006959 4883C418                	add rsp, 8*3
 10012 0000695D 48BF-                   	mov rdi, fmt_rparen
 10012 0000695F [8E08000000000000] 
 10013 00006967 E901020000              	jmp .Lemit	
 10014                                  
 10015                                  .Lvector_empty:
 10016 0000696C 48BF-                   	mov rdi, fmt_empty_vector
 10016 0000696E [9208000000000000] 
 10017 00006976 E9F2010000              	jmp .Lemit
 10018                                  
 10019                                  .Lreal:
 10020 0000697B FF7701                  	push qword [rdi + 1]
 10021 0000697E F20F100424              	movsd xmm0, qword [rsp]
 10022 00006983 4883C408                	add rsp, 8*1
 10023 00006987 48BF-                   	mov rdi, fmt_real
 10023 00006989 [9908000000000000] 
 10024 00006991 B801000000              	mov rax, 1
 10025                                  	ENTER
    44 00006996 C8000000            <1>  enter 0, 0
    45 0000699A 4883E4F0            <1>  and rsp, ~15
 10026 0000699E E8(00000000)            	call printf
 10027                                  	LEAVE
    49 000069A3 C9                  <1>  leave
 10028 000069A4 E9D9010000              	jmp .Lend
 10029                                  
 10030                                  .Lfraction:
 10031 000069A9 488B7701                	mov rsi, qword [rdi + 1]
 10032 000069AD 488B5709                	mov rdx, qword [rdi + 1 + 8]
 10033 000069B1 4883FE00                	cmp rsi, 0
 10034 000069B5 7415                    	je .Lrat_zero
 10035 000069B7 4883FA01                	cmp rdx, 1
 10036 000069BB 741E                    	je .Lrat_int
 10037 000069BD 48BF-                   	mov rdi, fmt_fraction
 10037 000069BF [9C08000000000000] 
 10038 000069C7 E9A1010000              	jmp .Lemit
 10039                                  
 10040                                  .Lrat_zero:
 10041 000069CC 48BF-                   	mov rdi, fmt_zero
 10041 000069CE [A408000000000000] 
 10042 000069D6 E992010000              	jmp .Lemit
 10043                                  
 10044                                  .Lrat_int:
 10045 000069DB 48BF-                   	mov rdi, fmt_int
 10045 000069DD [A608000000000000] 
 10046 000069E5 E983010000              	jmp .Lemit
 10047                                  
 10048                                  .Linteger:
 10049 000069EA 488B7701                	mov rsi, qword [rdi + 1]
 10050 000069EE 48BF-                   	mov rdi, fmt_int
 10050 000069F0 [A608000000000000] 
 10051 000069F8 E970010000              	jmp .Lemit
 10052                                  
 10053                                  .Lstring:
 10054 000069FD 488D4709                	lea rax, [rdi + 1 + 8]
 10055 00006A01 50                      	push rax
 10056 00006A02 FF7701                  	push qword [rdi + 1]
 10057 00006A05 48BF-                   	mov rdi, fmt_dquote
 10057 00006A07 [EF08000000000000] 
 10058 00006A0F B800000000              	mov rax, 0
 10059                                  	ENTER
    44 00006A14 C8000000            <1>  enter 0, 0
    45 00006A18 4883E4F0            <1>  and rsp, ~15
 10060 00006A1C E8(00000000)            	call printf
 10061                                  	LEAVE
    49 00006A21 C9                  <1>  leave
 10062                                  .Lstring_loop:
 10063                                  	; qword [rsp]: limit
 10064                                  	; qword [rsp + 8*1]: char *
 10065 00006A22 48833C2400              	cmp qword [rsp], 0
 10066 00006A27 0F84FD000000            	je .Lstring_end
 10067 00006A2D 488B442408              	mov rax, qword [rsp + 8*1]
 10068 00006A32 8A00                    	mov al, byte [rax]
 10069 00006A34 4825FF000000            	and rax, 255
 10070 00006A3A 3C07                    	cmp al, 7
 10071 00006A3C 7468                            je .Lstring_char_7
 10072 00006A3E 3C08                            cmp al, 8
 10073 00006A40 7470                            je .Lstring_char_8
 10074 00006A42 3C09                            cmp al, 9
 10075 00006A44 7478                            je .Lstring_char_9
 10076 00006A46 3C0A                            cmp al, 10
 10077 00006A48 0F847C000000                    je .Lstring_char_10
 10078 00006A4E 3C0B                            cmp al, 11
 10079 00006A50 0F8480000000                    je .Lstring_char_11
 10080 00006A56 3C0C                            cmp al, 12
 10081 00006A58 0F8484000000                    je .Lstring_char_12
 10082 00006A5E 3C0D                            cmp al, 13
 10083 00006A60 0F8488000000                    je .Lstring_char_13
 10084 00006A66 3C22                            cmp al, 34
 10085 00006A68 0F848C000000                    je .Lstring_char_34
 10086 00006A6E 3C5C                            cmp al, 92              ;         je .Lstring_char_92
 10088 00006A70 3C20                            cmp al, ' '
 10089 00006A72 0F8CA0000000                    jl .Lstring_char_hex
 10090 00006A78 48BF-                           mov rdi, fmt_string_char
 10090 00006A7A [F108000000000000] 
 10091 00006A82 4889C6                          mov rsi, rax
 10092                                  .Lstring_char_emit:
 10093 00006A85 B800000000                      mov rax, 0
 10094                                          ENTER
    44 00006A8A C8000000            <1>  enter 0, 0
    45 00006A8E 4883E4F0            <1>  and rsp, ~15
 10095 00006A92 E8(00000000)                    call printf
 10096                                          LEAVE
    49 00006A97 C9                  <1>  leave
 10097 00006A98 48FF0C24                        dec qword [rsp]
 10098 00006A9C 48FF442408                      inc qword [rsp + 8*1]
 10099 00006AA1 E97CFFFFFF                      jmp .Lstring_loop
 10100                                  
 10101                                  .Lstring_char_7:
 10102 00006AA6 48BF-                           mov rdi, fmt_string_char_7
 10102 00006AA8 [F408000000000000] 
 10103 00006AB0 EBD3                            jmp .Lstring_char_emit
 10104                                  
 10105                                  .Lstring_char_8:
 10106 00006AB2 48BF-                           mov rdi, fmt_string_char_8
 10106 00006AB4 [F708000000000000] 
 10107 00006ABC EBC7                            jmp .Lstring_char_emit
 10108                                          
 10109                                  .Lstring_char_9:
 10110 00006ABE 48BF-                           mov rdi, fmt_string_char_9
 10110 00006AC0 [FA08000000000000] 
 10111 00006AC8 EBBB                            jmp .Lstring_char_emit
 10112                                  
 10113                                  .Lstring_char_10:
 10114 00006ACA 48BF-                           mov rdi, fmt_string_char_10
 10114 00006ACC [FD08000000000000] 
 10115 00006AD4 EBAF                            jmp .Lstring_char_emit
 10116                                  
 10117                                  .Lstring_char_11:
 10118 00006AD6 48BF-                           mov rdi, fmt_string_char_11
 10118 00006AD8 [0009000000000000] 
 10119 00006AE0 EBA3                            jmp .Lstring_char_emit
 10120                                  
 10121                                  .Lstring_char_12:
 10122 00006AE2 48BF-                           mov rdi, fmt_string_char_12
 10122 00006AE4 [0309000000000000] 
 10123 00006AEC EB97                            jmp .Lstring_char_emit
 10124                                  
 10125                                  .Lstring_char_13:
 10126 00006AEE 48BF-                           mov rdi, fmt_string_char_13
 10126 00006AF0 [0609000000000000] 
 10127 00006AF8 EB8B                            jmp .Lstring_char_emit
 10128                                  
 10129                                  .Lstring_char_34:
 10130 00006AFA 48BF-                           mov rdi, fmt_string_char_34
 10130 00006AFC [0909000000000000] 
 10131 00006B04 E97CFFFFFF                      jmp .Lstring_char_emit
 10132                                  
 10133                                  .Lstring_char_92:
 10134 00006B09 48BF-                           mov rdi, fmt_string_char_92
 10134 00006B0B [0C09000000000000] 
 10135 00006B13 E96DFFFFFF                      jmp .Lstring_char_emit
 10136                                  
 10137                                  .Lstring_char_hex:
 10138 00006B18 48BF-                           mov rdi, fmt_string_char_hex
 10138 00006B1A [0F09000000000000] 
 10139 00006B22 4889C6                          mov rsi, rax
 10140 00006B25 E95BFFFFFF                      jmp .Lstring_char_emit        
 10141                                  
 10142                                  .Lstring_end:
 10143 00006B2A 4883C410                	add rsp, 8 * 2
 10144 00006B2E 48BF-                   	mov rdi, fmt_dquote
 10144 00006B30 [EF08000000000000] 
 10145 00006B38 EB33                    	jmp .Lemit
 10146                                  
 10147                                  .Lunknown_sexpr_type:
 10148 00006B3A 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
 10148 00006B3C [AA08000000000000] 
 10149 00006B44 4825FF000000            	and rax, 255
 10150 00006B4A 4889C2                  	mov rdx, rax
 10151 00006B4D 4889F9                  	mov rcx, rdi
 10152 00006B50 488B3C25[00000000]      	mov rdi, qword [stderr]
 10153 00006B58 B800000000              	mov rax, 0
 10154                                          ENTER
    44 00006B5D C8000000            <1>  enter 0, 0
    45 00006B61 4883E4F0            <1>  and rsp, ~15
 10155 00006B65 E8(00000000)            	call fprintf
 10156                                          LEAVE
    49 00006B6A C9                  <1>  leave
 10157 00006B6B C9                              leave
 10158 00006B6C C3                              ret
 10159                                  
 10160                                  .Lemit:
 10161 00006B6D B800000000              	mov rax, 0
 10162                                          ENTER
    44 00006B72 C8000000            <1>  enter 0, 0
    45 00006B76 4883E4F0            <1>  and rsp, ~15
 10163 00006B7A E8(00000000)            	call printf
 10164                                          LEAVE
    49 00006B7F C9                  <1>  leave
 10165 00006B80 EB00                    	jmp .Lend
 10166                                  
 10167                                  .Lend:
 10168                                  	LEAVE
    49 00006B82 C9                  <1>  leave
 10169 00006B83 C3                      	ret
 10170                                  
 10171                                  ;;; rdi: address of free variable
 10172                                  ;;; rsi: address of code-pointer
 10173                                  bind_primitive:
 10174 00006B84 C8000000                        enter 0, 0
 10175 00006B88 57                              push rdi
 10176 00006B89 BF11000000                      mov rdi, (1 + 8 + 8)
 10177 00006B8E E8C1F7FFFF                      call malloc
 10178 00006B93 5F                              pop rdi
 10179 00006B94 C60004                          mov byte [rax], T_closure
 10180 00006B97 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
 10181 00006B9F 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
 10182 00006BA3 488907                          mov qword [rdi], rax
 10183 00006BA6 48B8-                           mov rax, sob_void
 10183 00006BA8 [0000000000000000] 
 10184 00006BB0 C9                              leave
 10185 00006BB1 C3                              ret
 10186                                  
 10187                                  L_code_ptr_ash:
 10188 00006BB2 C8000000                        enter 0, 0
 10189 00006BB6 48837D1802                      cmp COUNT, 2
 10190 00006BBB 0F8570140000                    jne L_error_arg_count_2
 10191 00006BC1 488B7D20                        mov rdi, PARAM(0)
 10192                                          assert_integer(rdi)
    53 00006BC5 803F11              <1>  cmp byte [%1], %2
    54 00006BC8 0F8502150000        <1>  jne L_error_incorrect_type
 10193 00006BCE 488B4D28                        mov rcx, PARAM(1)
 10194                                          assert_integer(rcx)
    53 00006BD2 803911              <1>  cmp byte [%1], %2
    54 00006BD5 0F85F5140000        <1>  jne L_error_incorrect_type
 10195 00006BDB 488B7F01                        mov rdi, qword [rdi + 1]
 10196 00006BDF 488B4901                        mov rcx, qword [rcx + 1]
 10197 00006BE3 4883F900                        cmp rcx, 0
 10198 00006BE7 7C0F                            jl .L_negative
 10199                                  .L_loop_positive:
 10200 00006BE9 4883F900                        cmp rcx, 0
 10201 00006BED 741B                            je .L_exit
 10202 00006BEF 48D3E7                          sal rdi, cl
 10203 00006BF2 48C1E908                        shr rcx, 8
 10204 00006BF6 EBF1                            jmp .L_loop_positive
 10205                                  .L_negative:
 10206 00006BF8 48F7D9                          neg rcx
 10207                                  .L_loop_negative:
 10208 00006BFB 4883F900                        cmp rcx, 0
 10209 00006BFF 7409                            je .L_exit
 10210 00006C01 48D3FF                          sar rdi, cl
 10211 00006C04 48C1E908                        shr rcx, 8
 10212 00006C08 EBF1                            jmp .L_loop_negative
 10213                                  .L_exit:
 10214 00006C0A E83C130000                      call make_integer
 10215 00006C0F C9                              leave
 10216 00006C10 C22000                          ret AND_KILL_FRAME(2)
 10217                                  
 10218                                  L_code_ptr_logand:
 10219 00006C13 C8000000                        enter 0, 0
 10220 00006C17 48837D1802                      cmp COUNT, 2
 10221 00006C1C 0F850F140000                    jne L_error_arg_count_2
 10222 00006C22 4C8B4520                        mov r8, PARAM(0)
 10223                                          assert_integer(r8)
    53 00006C26 41803811            <1>  cmp byte [%1], %2
    54 00006C2A 0F85A0140000        <1>  jne L_error_incorrect_type
 10224 00006C30 4C8B4D28                        mov r9, PARAM(1)
 10225                                          assert_integer(r9)
    53 00006C34 41803911            <1>  cmp byte [%1], %2
    54 00006C38 0F8592140000        <1>  jne L_error_incorrect_type
 10226 00006C3E 498B7801                        mov rdi, qword [r8 + 1]
 10227 00006C42 49237901                        and rdi, qword [r9 + 1]
 10228 00006C46 E800130000                      call make_integer
 10229 00006C4B C9                              leave
 10230 00006C4C C22000                          ret AND_KILL_FRAME(2)
 10231                                  
 10232                                  L_code_ptr_logor:
 10233 00006C4F C8000000                        enter 0, 0
 10234 00006C53 48837D1802                      cmp COUNT, 2
 10235 00006C58 0F85D3130000                    jne L_error_arg_count_2
 10236 00006C5E 4C8B4520                        mov r8, PARAM(0)
 10237                                          assert_integer(r8)
    53 00006C62 41803811            <1>  cmp byte [%1], %2
    54 00006C66 0F8564140000        <1>  jne L_error_incorrect_type
 10238 00006C6C 4C8B4D28                        mov r9, PARAM(1)
 10239                                          assert_integer(r9)
    53 00006C70 41803911            <1>  cmp byte [%1], %2
    54 00006C74 0F8556140000        <1>  jne L_error_incorrect_type
 10240 00006C7A 498B7801                        mov rdi, qword [r8 + 1]
 10241 00006C7E 490B7901                        or rdi, qword [r9 + 1]
 10242 00006C82 E8C4120000                      call make_integer
 10243 00006C87 C9                              leave
 10244 00006C88 C22000                          ret AND_KILL_FRAME(2)
 10245                                  
 10246                                  L_code_ptr_logxor:
 10247 00006C8B C8000000                        enter 0, 0
 10248 00006C8F 48837D1802                      cmp COUNT, 2
 10249 00006C94 0F8597130000                    jne L_error_arg_count_2
 10250 00006C9A 4C8B4520                        mov r8, PARAM(0)
 10251                                          assert_integer(r8)
    53 00006C9E 41803811            <1>  cmp byte [%1], %2
    54 00006CA2 0F8528140000        <1>  jne L_error_incorrect_type
 10252 00006CA8 4C8B4D28                        mov r9, PARAM(1)
 10253                                          assert_integer(r9)
    53 00006CAC 41803911            <1>  cmp byte [%1], %2
    54 00006CB0 0F851A140000        <1>  jne L_error_incorrect_type
 10254 00006CB6 498B7801                        mov rdi, qword [r8 + 1]
 10255 00006CBA 49337901                        xor rdi, qword [r9 + 1]
 10256 00006CBE E888120000                      call make_integer
 10257                                          LEAVE
    49 00006CC3 C9                  <1>  leave
 10258 00006CC4 C22000                          ret AND_KILL_FRAME(2)
 10259                                  
 10260                                  L_code_ptr_lognot:
 10261 00006CC7 C8000000                        enter 0, 0
 10262 00006CCB 48837D1801                      cmp COUNT, 1
 10263 00006CD0 0F8526130000                    jne L_error_arg_count_1
 10264 00006CD6 4C8B4520                        mov r8, PARAM(0)
 10265                                          assert_integer(r8)
    53 00006CDA 41803811            <1>  cmp byte [%1], %2
    54 00006CDE 0F85EC130000        <1>  jne L_error_incorrect_type
 10266 00006CE4 498B7801                        mov rdi, qword [r8 + 1]
 10267 00006CE8 48F7D7                          not rdi
 10268 00006CEB E85B120000                      call make_integer
 10269 00006CF0 C9                              leave
 10270 00006CF1 C21800                          ret AND_KILL_FRAME(1)
 10271                                  
 10272                                  L_code_ptr_bin_apply:
 10273                                  ;;; fill in for final project!
 10274 00006CF4 C8000000                enter 0, 0
 10275 00006CF8 48837D1803              cmp COUNT, 3
 10276 00006CFD 0F8598130000            jne L_error_arg_count_3
 10277 00006D03 488B7D20                mov rdi, PARAM(0)
 10278                                  assert_closure(rdi)
    53 00006D07 803F04              <1>  cmp byte [%1], %2
    54 00006D0A 0F85C0130000        <1>  jne L_error_incorrect_type
 10279 00006D10 488B7528                mov rsi, PARAM(1)
 10280                                  assert_integer(rsi)
    53 00006D14 803E11              <1>  cmp byte [%1], %2
    54 00006D17 0F85B3130000        <1>  jne L_error_incorrect_type
 10281 00006D1D 488B5530                mov rdx, PARAM(2)
 10282                                  assert_vector(rdx)
    53 00006D21 803A22              <1>  cmp byte [%1], %2
    54 00006D24 0F85A6130000        <1>  jne L_error_incorrect_type
 10283 00006D2A 488B4E01                mov rcx, qword [rsi + 1]
 10284 00006D2E 4883F900                cmp rcx, 0
 10285 00006D32 0F8C2D120000            jl L_error_integer_range
 10286 00006D38 4C8B4201                mov r8, qword [rdx + 1]
 10287 00006D3C 4C39C1                  cmp rcx, r8
 10288 00006D3F 0F8D20120000            jge L_error_integer_range
 10289 00006D45 4C8B4CCA09              mov r9, qword [rdx + 1 + 8 + 8 * rcx]
 10290 00006D4A 488B7F09                mov rdi, qword [rdi + 1 + 8]
 10291 00006D4E FFD7                    call rdi
 10292 00006D50 C9                      leave
 10293 00006D51 C22800                  ret AND_KILL_FRAME(3)
 10294                                  
 10295                                  L_code_ptr_is_null:
 10296 00006D54 C8000000                        enter 0, 0
 10297 00006D58 48837D1801                      cmp COUNT, 1
 10298 00006D5D 0F8599120000                    jne L_error_arg_count_1
 10299 00006D63 488B4520                        mov rax, PARAM(0)
 10300 00006D67 803801                          cmp byte [rax], T_nil
 10301 00006D6A 750C                            jne .L_false
 10302 00006D6C 48B8-                           mov rax, sob_boolean_true
 10302 00006D6E [0300000000000000] 
 10303 00006D76 EB0A                            jmp .L_end
 10304                                  .L_false:
 10305 00006D78 48B8-                           mov rax, sob_boolean_false
 10305 00006D7A [0200000000000000] 
 10306                                  .L_end:
 10307 00006D82 C9                              leave
 10308 00006D83 C21800                          ret AND_KILL_FRAME(1)
 10309                                  
 10310                                  L_code_ptr_is_pair:
 10311 00006D86 C8000000                        enter 0, 0
 10312 00006D8A 48837D1801                      cmp COUNT, 1
 10313 00006D8F 0F8567120000                    jne L_error_arg_count_1
 10314 00006D95 488B4520                        mov rax, PARAM(0)
 10315 00006D99 803821                          cmp byte [rax], T_pair
 10316 00006D9C 750C                            jne .L_false
 10317 00006D9E 48B8-                           mov rax, sob_boolean_true
 10317 00006DA0 [0300000000000000] 
 10318 00006DA8 EB0A                            jmp .L_end
 10319                                  .L_false:
 10320 00006DAA 48B8-                           mov rax, sob_boolean_false
 10320 00006DAC [0200000000000000] 
 10321                                  .L_end:
 10322 00006DB4 C9                              leave
 10323 00006DB5 C21800                          ret AND_KILL_FRAME(1)
 10324                                          
 10325                                  L_code_ptr_is_void:
 10326 00006DB8 C8000000                        enter 0, 0
 10327 00006DBC 48837D1801                      cmp COUNT, 1
 10328 00006DC1 0F8535120000                    jne L_error_arg_count_1
 10329 00006DC7 488B4520                        mov rax, PARAM(0)
 10330 00006DCB 803800                          cmp byte [rax], T_void
 10331 00006DCE 750C                            jne .L_false
 10332 00006DD0 48B8-                           mov rax, sob_boolean_true
 10332 00006DD2 [0300000000000000] 
 10333 00006DDA EB0A                            jmp .L_end
 10334                                  .L_false:
 10335 00006DDC 48B8-                           mov rax, sob_boolean_false
 10335 00006DDE [0200000000000000] 
 10336                                  .L_end:
 10337 00006DE6 C9                              leave
 10338 00006DE7 C21800                          ret AND_KILL_FRAME(1)
 10339                                  
 10340                                  L_code_ptr_is_char:
 10341 00006DEA C8000000                        enter 0, 0
 10342 00006DEE 48837D1801                      cmp COUNT, 1
 10343 00006DF3 0F8503120000                    jne L_error_arg_count_1
 10344 00006DF9 488B4520                        mov rax, PARAM(0)
 10345 00006DFD 803802                          cmp byte [rax], T_char
 10346 00006E00 750C                            jne .L_false
 10347 00006E02 48B8-                           mov rax, sob_boolean_true
 10347 00006E04 [0300000000000000] 
 10348 00006E0C EB0A                            jmp .L_end
 10349                                  .L_false:
 10350 00006E0E 48B8-                           mov rax, sob_boolean_false
 10350 00006E10 [0200000000000000] 
 10351                                  .L_end:
 10352 00006E18 C9                              leave
 10353 00006E19 C21800                          ret AND_KILL_FRAME(1)
 10354                                  
 10355                                  L_code_ptr_is_string:
 10356 00006E1C C8000000                        enter 0, 0
 10357 00006E20 48837D1801                      cmp COUNT, 1
 10358 00006E25 0F85D1110000                    jne L_error_arg_count_1
 10359 00006E2B 488B4520                        mov rax, PARAM(0)
 10360 00006E2F 803803                          cmp byte [rax], T_string
 10361 00006E32 750C                            jne .L_false
 10362 00006E34 48B8-                           mov rax, sob_boolean_true
 10362 00006E36 [0300000000000000] 
 10363 00006E3E EB0A                            jmp .L_end
 10364                                  .L_false:
 10365 00006E40 48B8-                           mov rax, sob_boolean_false
 10365 00006E42 [0200000000000000] 
 10366                                  .L_end:
 10367 00006E4A C9                              leave
 10368 00006E4B C21800                          ret AND_KILL_FRAME(1)
 10369                                  
 10370                                  L_code_ptr_is_symbol:
 10371 00006E4E C8000000                        enter 0, 0
 10372 00006E52 48837D1801                      cmp COUNT, 1
 10373 00006E57 0F859F110000                    jne L_error_arg_count_1
 10374 00006E5D 4C8B4520                        mov r8, PARAM(0)
 10375 00006E61 41802040                        and byte [r8], T_symbol
 10376 00006E65 740C                            jz .L_false
 10377 00006E67 48B8-                           mov rax, sob_boolean_true
 10377 00006E69 [0300000000000000] 
 10378 00006E71 EB0A                            jmp .L_exit
 10379                                  .L_false:
 10380 00006E73 48B8-                           mov rax, sob_boolean_false
 10380 00006E75 [0200000000000000] 
 10381                                  .L_exit:
 10382 00006E7D C9                              leave
 10383 00006E7E C21800                          ret AND_KILL_FRAME(1)
 10384                                  
 10385                                  L_code_ptr_is_uninterned_symbol:
 10386 00006E81 C8000000                        enter 0, 0
 10387 00006E85 48837D1801                      cmp COUNT, 1
 10388 00006E8A 0F856C110000                    jne L_error_arg_count_1
 10389 00006E90 4C8B4520                        mov r8, PARAM(0)
 10390 00006E94 41803842                        cmp byte [r8], T_uninterned_symbol
 10391 00006E98 750C                            jne .L_false
 10392 00006E9A 48B8-                           mov rax, sob_boolean_true
 10392 00006E9C [0300000000000000] 
 10393 00006EA4 EB0A                            jmp .L_exit
 10394                                  .L_false:
 10395 00006EA6 48B8-                           mov rax, sob_boolean_false
 10395 00006EA8 [0200000000000000] 
 10396                                  .L_exit:
 10397 00006EB0 C9                              leave
 10398 00006EB1 C21800                          ret AND_KILL_FRAME(1)
 10399                                  
 10400                                  L_code_ptr_is_interned_symbol:
 10401 00006EB4 C8000000                        enter 0, 0
 10402 00006EB8 48837D1801                      cmp COUNT, 1
 10403 00006EBD 0F8539110000                    jne L_error_arg_count_1
 10404 00006EC3 488B4520                        mov rax, PARAM(0)
 10405 00006EC7 803841                          cmp byte [rax], T_interned_symbol
 10406 00006ECA 750C                            jne .L_false
 10407 00006ECC 48B8-                           mov rax, sob_boolean_true
 10407 00006ECE [0300000000000000] 
 10408 00006ED6 EB0A                            jmp .L_end
 10409                                  .L_false:
 10410 00006ED8 48B8-                           mov rax, sob_boolean_false
 10410 00006EDA [0200000000000000] 
 10411                                  .L_end:
 10412 00006EE2 C9                              leave
 10413 00006EE3 C21800                          ret AND_KILL_FRAME(1)
 10414                                  
 10415                                  L_code_ptr_gensym:
 10416 00006EE6 C8000000                        enter 0, 0
 10417 00006EEA 48837D1800                      cmp COUNT, 0
 10418 00006EEF 0F85D2100000                    jne L_error_arg_count_0
 10419 00006EF5 48FF0425[15090000]              inc qword [gensym_count]
 10420 00006EFD BF09000000                      mov rdi, (1 + 8)
 10421 00006F02 E84DF4FFFF                      call malloc
 10422 00006F07 C60042                          mov byte [rax], T_uninterned_symbol
 10423 00006F0A 488B0C25[15090000]              mov rcx, qword [gensym_count]
 10424 00006F12 48894801                        mov qword [rax + 1], rcx
 10425 00006F16 C9                              leave
 10426 00006F17 C21000                          ret AND_KILL_FRAME(0)
 10427                                  
 10428                                  L_code_ptr_is_vector:
 10429 00006F1A C8000000                        enter 0, 0
 10430 00006F1E 48837D1801                      cmp COUNT, 1
 10431 00006F23 0F85D3100000                    jne L_error_arg_count_1
 10432 00006F29 488B4520                        mov rax, PARAM(0)
 10433 00006F2D 803822                          cmp byte [rax], T_vector
 10434 00006F30 750C                            jne .L_false
 10435 00006F32 48B8-                           mov rax, sob_boolean_true
 10435 00006F34 [0300000000000000] 
 10436 00006F3C EB0A                            jmp .L_end
 10437                                  .L_false:
 10438 00006F3E 48B8-                           mov rax, sob_boolean_false
 10438 00006F40 [0200000000000000] 
 10439                                  .L_end:
 10440 00006F48 C9                              leave
 10441 00006F49 C21800                          ret AND_KILL_FRAME(1)
 10442                                  
 10443                                  L_code_ptr_is_closure:
 10444 00006F4C C8000000                        enter 0, 0
 10445 00006F50 48837D1801                      cmp COUNT, 1
 10446 00006F55 0F85A1100000                    jne L_error_arg_count_1
 10447 00006F5B 488B4520                        mov rax, PARAM(0)
 10448 00006F5F 803804                          cmp byte [rax], T_closure
 10449 00006F62 750C                            jne .L_false
 10450 00006F64 48B8-                           mov rax, sob_boolean_true
 10450 00006F66 [0300000000000000] 
 10451 00006F6E EB0A                            jmp .L_end
 10452                                  .L_false:
 10453 00006F70 48B8-                           mov rax, sob_boolean_false
 10453 00006F72 [0200000000000000] 
 10454                                  .L_end:
 10455 00006F7A C9                              leave
 10456 00006F7B C21800                          ret AND_KILL_FRAME(1)
 10457                                  
 10458                                  L_code_ptr_is_real:
 10459 00006F7E C8000000                        enter 0, 0
 10460 00006F82 48837D1801                      cmp COUNT, 1
 10461 00006F87 0F856F100000                    jne L_error_arg_count_1
 10462 00006F8D 488B4520                        mov rax, PARAM(0)
 10463 00006F91 803813                          cmp byte [rax], T_real
 10464 00006F94 750C                            jne .L_false
 10465 00006F96 48B8-                           mov rax, sob_boolean_true
 10465 00006F98 [0300000000000000] 
 10466 00006FA0 EB0A                            jmp .L_end
 10467                                  .L_false:
 10468 00006FA2 48B8-                           mov rax, sob_boolean_false
 10468 00006FA4 [0200000000000000] 
 10469                                  .L_end:
 10470 00006FAC C9                              leave
 10471 00006FAD C21800                          ret AND_KILL_FRAME(1)
 10472                                  
 10473                                  L_code_ptr_is_fraction:
 10474 00006FB0 C8000000                        enter 0, 0
 10475 00006FB4 48837D1801                      cmp COUNT, 1
 10476 00006FB9 0F853D100000                    jne L_error_arg_count_1
 10477 00006FBF 488B4520                        mov rax, PARAM(0)
 10478 00006FC3 803812                          cmp byte [rax], T_fraction
 10479 00006FC6 750C                            jne .L_false
 10480 00006FC8 48B8-                           mov rax, sob_boolean_true
 10480 00006FCA [0300000000000000] 
 10481 00006FD2 EB0A                            jmp .L_end
 10482                                  .L_false:
 10483 00006FD4 48B8-                           mov rax, sob_boolean_false
 10483 00006FD6 [0200000000000000] 
 10484                                  .L_end:
 10485 00006FDE C9                              leave
 10486 00006FDF C21800                          ret AND_KILL_FRAME(1)
 10487                                  
 10488                                  L_code_ptr_is_boolean:
 10489 00006FE2 C8000000                        enter 0, 0
 10490 00006FE6 48837D1801                      cmp COUNT, 1
 10491 00006FEB 0F850B100000                    jne L_error_arg_count_1
 10492 00006FF1 488B4520                        mov rax, PARAM(0)
 10493 00006FF5 8A18                            mov bl, byte [rax]
 10494 00006FF7 80E308                          and bl, T_boolean
 10495 00006FFA 740C                            je .L_false
 10496 00006FFC 48B8-                           mov rax, sob_boolean_true
 10496 00006FFE [0300000000000000] 
 10497 00007006 EB0A                            jmp .L_end
 10498                                  .L_false:
 10499 00007008 48B8-                           mov rax, sob_boolean_false
 10499 0000700A [0200000000000000] 
 10500                                  .L_end:
 10501 00007012 C9                              leave
 10502 00007013 C21800                          ret AND_KILL_FRAME(1)
 10503                                          
 10504                                  L_code_ptr_is_boolean_false:
 10505 00007016 C8000000                        enter 0, 0
 10506 0000701A 48837D1801                      cmp COUNT, 1
 10507 0000701F 0F85D70F0000                    jne L_error_arg_count_1
 10508 00007025 488B4520                        mov rax, PARAM(0)
 10509 00007029 8A18                            mov bl, byte [rax]
 10510 0000702B 80FB09                          cmp bl, T_boolean_false
 10511 0000702E 750C                            jne .L_false
 10512 00007030 48B8-                           mov rax, sob_boolean_true
 10512 00007032 [0300000000000000] 
 10513 0000703A EB0A                            jmp .L_end
 10514                                  .L_false:
 10515 0000703C 48B8-                           mov rax, sob_boolean_false
 10515 0000703E [0200000000000000] 
 10516                                  .L_end:
 10517 00007046 C9                              leave
 10518 00007047 C21800                          ret AND_KILL_FRAME(1)
 10519                                  
 10520                                  L_code_ptr_is_boolean_true:
 10521 0000704A C8000000                        enter 0, 0
 10522 0000704E 48837D1801                      cmp COUNT, 1
 10523 00007053 0F85A30F0000                    jne L_error_arg_count_1
 10524 00007059 488B4520                        mov rax, PARAM(0)
 10525 0000705D 8A18                            mov bl, byte [rax]
 10526 0000705F 80FB0A                          cmp bl, T_boolean_true
 10527 00007062 750C                            jne .L_false
 10528 00007064 48B8-                           mov rax, sob_boolean_true
 10528 00007066 [0300000000000000] 
 10529 0000706E EB0A                            jmp .L_end
 10530                                  .L_false:
 10531 00007070 48B8-                           mov rax, sob_boolean_false
 10531 00007072 [0200000000000000] 
 10532                                  .L_end:
 10533 0000707A C9                              leave
 10534 0000707B C21800                          ret AND_KILL_FRAME(1)
 10535                                  
 10536                                  L_code_ptr_is_number:
 10537 0000707E C8000000                        enter 0, 0
 10538 00007082 48837D1801                      cmp COUNT, 1
 10539 00007087 0F856F0F0000                    jne L_error_arg_count_1
 10540 0000708D 488B4520                        mov rax, PARAM(0)
 10541 00007091 8A18                            mov bl, byte [rax]
 10542 00007093 80E310                          and bl, T_number
 10543 00007096 740C                            jz .L_false
 10544 00007098 48B8-                           mov rax, sob_boolean_true
 10544 0000709A [0300000000000000] 
 10545 000070A2 EB0A                            jmp .L_end
 10546                                  .L_false:
 10547 000070A4 48B8-                           mov rax, sob_boolean_false
 10547 000070A6 [0200000000000000] 
 10548                                  .L_end:
 10549 000070AE C9                              leave
 10550 000070AF C21800                          ret AND_KILL_FRAME(1)
 10551                                          
 10552                                  L_code_ptr_is_collection:
 10553 000070B2 C8000000                        enter 0, 0
 10554 000070B6 48837D1801                      cmp COUNT, 1
 10555 000070BB 0F853B0F0000                    jne L_error_arg_count_1
 10556 000070C1 488B4520                        mov rax, PARAM(0)
 10557 000070C5 8A18                            mov bl, byte [rax]
 10558 000070C7 80E320                          and bl, T_collection
 10559 000070CA 740C                            je .L_false
 10560 000070CC 48B8-                           mov rax, sob_boolean_true
 10560 000070CE [0300000000000000] 
 10561 000070D6 EB0A                            jmp .L_end
 10562                                  .L_false:
 10563 000070D8 48B8-                           mov rax, sob_boolean_false
 10563 000070DA [0200000000000000] 
 10564                                  .L_end:
 10565 000070E2 C9                              leave
 10566 000070E3 C21800                          ret AND_KILL_FRAME(1)
 10567                                  
 10568                                  L_code_ptr_cons:
 10569 000070E6 C8000000                        enter 0, 0
 10570 000070EA 48837D1802                      cmp COUNT, 2
 10571 000070EF 0F853C0F0000                    jne L_error_arg_count_2
 10572 000070F5 BF11000000                      mov rdi, (1 + 8 + 8)
 10573 000070FA E855F2FFFF                      call malloc
 10574 000070FF C60021                          mov byte [rax], T_pair
 10575 00007102 488B5D20                        mov rbx, PARAM(0)
 10576 00007106 48895801                        mov SOB_PAIR_CAR(rax), rbx
 10577 0000710A 488B5D28                        mov rbx, PARAM(1)
 10578 0000710E 48895809                        mov SOB_PAIR_CDR(rax), rbx
 10579 00007112 C9                              leave
 10580 00007113 C22000                          ret AND_KILL_FRAME(2)
 10581                                  
 10582                                  L_code_ptr_display_sexpr:
 10583 00007116 C8000000                        enter 0, 0
 10584 0000711A 48837D1801                      cmp COUNT, 1
 10585 0000711F 0F85D70E0000                    jne L_error_arg_count_1
 10586 00007125 488B7D20                        mov rdi, PARAM(0)
 10587 00007129 E8A7F4FFFF                      call print_sexpr
 10588 0000712E 48B8-                           mov rax, sob_void
 10588 00007130 [0000000000000000] 
 10589 00007138 C9                              leave
 10590 00007139 C21800                          ret AND_KILL_FRAME(1)
 10591                                  
 10592                                  L_code_ptr_write_char:
 10593 0000713C C8000000                        enter 0, 0
 10594 00007140 48837D1801                      cmp COUNT, 1
 10595 00007145 0F85B10E0000                    jne L_error_arg_count_1
 10596 0000714B 488B4520                        mov rax, PARAM(0)
 10597                                          assert_char(rax)
    53 0000714F 803802              <1>  cmp byte [%1], %2
    54 00007152 0F85780F0000        <1>  jne L_error_incorrect_type
 10598 00007158 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 10599 0000715B 4825FF000000                    and rax, 255
 10600 00007161 48BF-                           mov rdi, fmt_char
 10600 00007163 [1D09000000000000] 
 10601 0000716B 4889C6                          mov rsi, rax
 10602 0000716E B800000000                      mov rax, 0
 10603                                          ENTER
    44 00007173 C8000000            <1>  enter 0, 0
    45 00007177 4883E4F0            <1>  and rsp, ~15
 10604 0000717B E8(00000000)                    call printf
 10605                                          LEAVE
    49 00007180 C9                  <1>  leave
 10606 00007181 48B8-                           mov rax, sob_void
 10606 00007183 [0000000000000000] 
 10607 0000718B C9                              leave
 10608 0000718C C21800                          ret AND_KILL_FRAME(1)
 10609                                  
 10610                                  L_code_ptr_car:
 10611 0000718F C8000000                        enter 0, 0
 10612 00007193 48837D1801                      cmp COUNT, 1
 10613 00007198 0F855E0E0000                    jne L_error_arg_count_1
 10614 0000719E 488B4520                        mov rax, PARAM(0)
 10615                                          assert_pair(rax)
    53 000071A2 803821              <1>  cmp byte [%1], %2
    54 000071A5 0F85250F0000        <1>  jne L_error_incorrect_type
 10616 000071AB 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 10617 000071AF C9                              leave
 10618 000071B0 C21800                          ret AND_KILL_FRAME(1)
 10619                                          
 10620                                  L_code_ptr_cdr:
 10621 000071B3 C8000000                        enter 0, 0
 10622 000071B7 48837D1801                      cmp COUNT, 1
 10623 000071BC 0F853A0E0000                    jne L_error_arg_count_1
 10624 000071C2 488B4520                        mov rax, PARAM(0)
 10625                                          assert_pair(rax)
    53 000071C6 803821              <1>  cmp byte [%1], %2
    54 000071C9 0F85010F0000        <1>  jne L_error_incorrect_type
 10626 000071CF 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 10627 000071D3 C9                              leave
 10628 000071D4 C21800                          ret AND_KILL_FRAME(1)
 10629                                          
 10630                                  L_code_ptr_string_length:
 10631 000071D7 C8000000                        enter 0, 0
 10632 000071DB 48837D1801                      cmp COUNT, 1
 10633 000071E0 0F85160E0000                    jne L_error_arg_count_1
 10634 000071E6 488B4520                        mov rax, PARAM(0)
 10635                                          assert_string(rax)
    53 000071EA 803803              <1>  cmp byte [%1], %2
    54 000071ED 0F85DD0E0000        <1>  jne L_error_incorrect_type
 10636 000071F3 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 10637 000071F7 E84F0D0000                      call make_integer
 10638 000071FC C9                              leave
 10639 000071FD C21800                          ret AND_KILL_FRAME(1)
 10640                                  
 10641                                  L_code_ptr_vector_length:
 10642 00007200 C8000000                        enter 0, 0
 10643 00007204 48837D1801                      cmp COUNT, 1
 10644 00007209 0F85ED0D0000                    jne L_error_arg_count_1
 10645 0000720F 488B4520                        mov rax, PARAM(0)
 10646                                          assert_vector(rax)
    53 00007213 803822              <1>  cmp byte [%1], %2
    54 00007216 0F85B40E0000        <1>  jne L_error_incorrect_type
 10647 0000721C 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 10648 00007220 E8260D0000                      call make_integer
 10649 00007225 C9                              leave
 10650 00007226 C21800                          ret AND_KILL_FRAME(1)
 10651                                  
 10652                                  L_code_ptr_real_to_integer:
 10653 00007229 C8000000                        enter 0, 0
 10654 0000722D 48837D1801                      cmp COUNT, 1
 10655 00007232 0F85C40D0000                    jne L_error_arg_count_1
 10656 00007238 488B5D20                        mov rbx, PARAM(0)
 10657                                          assert_real(rbx)
    53 0000723C 803B13              <1>  cmp byte [%1], %2
    54 0000723F 0F858B0E0000        <1>  jne L_error_incorrect_type
 10658 00007245 F20F104301                      movsd xmm0, qword [rbx + 1]
 10659 0000724A F2480F2CF8                      cvttsd2si rdi, xmm0
 10660 0000724F E8F70C0000                      call make_integer
 10661 00007254 C9                              leave
 10662 00007255 C21800                          ret AND_KILL_FRAME(1)
 10663                                  
 10664                                  L_code_ptr_exit:
 10665 00007258 C8000000                        enter 0, 0
 10666 0000725C 48837D1800                      cmp COUNT, 0
 10667 00007261 0F85600D0000                    jne L_error_arg_count_0
 10668 00007267 B800000000                      mov rax, 0
 10669 0000726C E8(00000000)                    call exit
 10670                                  
 10671                                  L_code_ptr_integer_to_real:
 10672 00007271 C8000000                        enter 0, 0
 10673 00007275 48837D1801                      cmp COUNT, 1
 10674 0000727A 0F857C0D0000                    jne L_error_arg_count_1
 10675 00007280 488B4520                        mov rax, PARAM(0)
 10676                                          assert_integer(rax)
    53 00007284 803811              <1>  cmp byte [%1], %2
    54 00007287 0F85430E0000        <1>  jne L_error_incorrect_type
 10677 0000728D FF7001                          push qword [rax + 1]
 10678 00007290 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 10679 00007296 E8980C0000                      call make_real
 10680 0000729B C9                              leave
 10681 0000729C C21800                          ret AND_KILL_FRAME(1)
 10682                                  
 10683                                  L_code_ptr_fraction_to_real:
 10684 0000729F C8000000                        enter 0, 0
 10685 000072A3 48837D1801                      cmp COUNT, 1
 10686 000072A8 0F854E0D0000                    jne L_error_arg_count_1
 10687 000072AE 488B4520                        mov rax, PARAM(0)
 10688                                          assert_fraction(rax)
    53 000072B2 803812              <1>  cmp byte [%1], %2
    54 000072B5 0F85150E0000        <1>  jne L_error_incorrect_type
 10689 000072BB FF7001                          push qword [rax + 1]
 10690 000072BE F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 10691 000072C4 FF7009                          push qword [rax + 1 + 8]
 10692 000072C7 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 10693 000072CD F20F5EC1                        divsd xmm0, xmm1
 10694 000072D1 E85D0C0000                      call make_real
 10695 000072D6 C9                              leave
 10696 000072D7 C21800                          ret AND_KILL_FRAME(1)
 10697                                  
 10698                                  L_code_ptr_char_to_integer:
 10699 000072DA C8000000                        enter 0, 0
 10700 000072DE 48837D1801                      cmp COUNT, 1
 10701 000072E3 0F85130D0000                    jne L_error_arg_count_1
 10702 000072E9 488B4520                        mov rax, PARAM(0)
 10703                                          assert_char(rax)
    53 000072ED 803802              <1>  cmp byte [%1], %2
    54 000072F0 0F85DA0D0000        <1>  jne L_error_incorrect_type
 10704 000072F6 8A4001                          mov al, byte [rax + 1]
 10705 000072F9 4825FF000000                    and rax, 255
 10706 000072FF 4889C7                          mov rdi, rax
 10707 00007302 E8440C0000                      call make_integer
 10708 00007307 C9                              leave
 10709 00007308 C21800                          ret AND_KILL_FRAME(1)
 10710                                  
 10711                                  L_code_ptr_integer_to_fraction:
 10712 0000730B C8000000                        enter 0, 0
 10713 0000730F 48837D1801                      cmp COUNT, 1
 10714 00007314 0F85E20C0000                    jne L_error_arg_count_1
 10715 0000731A 4C8B4520                        mov r8, PARAM(0)
 10716                                          assert_integer(r8)
    53 0000731E 41803811            <1>  cmp byte [%1], %2
    54 00007322 0F85A80D0000        <1>  jne L_error_incorrect_type
 10717 00007328 BF11000000                      mov rdi, (1 + 8 + 8)
 10718 0000732D E822F0FFFF                      call malloc
 10719 00007332 498B5801                        mov rbx, qword [r8 + 1]
 10720 00007336 C60012                          mov byte [rax], T_fraction
 10721 00007339 48895801                        mov qword [rax + 1], rbx
 10722 0000733D 48C7400901000000                mov qword [rax + 1 + 8], 1
 10723 00007345 C9                              leave
 10724 00007346 C21800                          ret AND_KILL_FRAME(1)
 10725                                  
 10726                                  L_code_ptr_integer_to_char:
 10727 00007349 C8000000                        enter 0, 0
 10728 0000734D 48837D1801                      cmp COUNT, 1
 10729 00007352 0F85A40C0000                    jne L_error_arg_count_1
 10730 00007358 488B4520                        mov rax, PARAM(0)
 10731                                          assert_integer(rax)
    53 0000735C 803811              <1>  cmp byte [%1], %2
    54 0000735F 0F856B0D0000        <1>  jne L_error_incorrect_type
 10732 00007365 488B5801                        mov rbx, qword [rax + 1]
 10733 00007369 4883FB00                        cmp rbx, 0
 10734 0000736D 0F8EF20B0000                    jle L_error_integer_range
 10735 00007373 4881FB00010000                  cmp rbx, 256
 10736 0000737A 0F8DE50B0000                    jge L_error_integer_range
 10737 00007380 BF02000000                      mov rdi, (1 + 1)
 10738 00007385 E8CAEFFFFF                      call malloc
 10739 0000738A C60002                          mov byte [rax], T_char
 10740 0000738D 885801                          mov byte [rax + 1], bl
 10741 00007390 C9                              leave
 10742 00007391 C21800                          ret AND_KILL_FRAME(1)
 10743                                  
 10744                                  L_code_ptr_trng:
 10745 00007394 C8000000                        enter 0, 0
 10746 00007398 48837D1800                      cmp COUNT, 0
 10747 0000739D 0F85240C0000                    jne L_error_arg_count_0
 10748 000073A3 480FC7F7                        rdrand rdi
 10749 000073A7 48D1EF                          shr rdi, 1
 10750 000073AA E89C0B0000                      call make_integer
 10751 000073AF C9                              leave
 10752 000073B0 C21000                          ret AND_KILL_FRAME(0)
 10753                                  
 10754                                  L_code_ptr_is_zero:
 10755 000073B3 C8000000                        enter 0, 0
 10756 000073B7 48837D1801                      cmp COUNT, 1
 10757 000073BC 0F853A0C0000                    jne L_error_arg_count_1
 10758 000073C2 488B4520                        mov rax, PARAM(0)
 10759 000073C6 803811                          cmp byte [rax], T_integer
 10760 000073C9 740F                            je .L_integer
 10761 000073CB 803812                          cmp byte [rax], T_fraction
 10762 000073CE 7413                            je .L_fraction
 10763 000073D0 803813                          cmp byte [rax], T_real
 10764 000073D3 7417                            je .L_real
 10765 000073D5 E9F60C0000                      jmp L_error_incorrect_type
 10766                                  .L_integer:
 10767 000073DA 4883780100                      cmp qword [rax + 1], 0
 10768 000073DF 7429                            je .L_zero
 10769 000073E1 EB1B                            jmp .L_not_zero
 10770                                  .L_fraction:
 10771 000073E3 4883780100                      cmp qword [rax + 1], 0
 10772 000073E8 7420                            je .L_zero
 10773 000073EA EB12                            jmp .L_not_zero
 10774                                  .L_real:
 10775 000073EC 660FEFC0                        pxor xmm0, xmm0
 10776 000073F0 FF7001                          push qword [rax + 1]
 10777 000073F3 F20F100C24                      movsd xmm1, qword [rsp]
 10778 000073F8 660F2EC1                        ucomisd xmm0, xmm1
 10779 000073FC 740C                            je .L_zero
 10780                                  .L_not_zero:
 10781 000073FE 48B8-                           mov rax, sob_boolean_false
 10781 00007400 [0200000000000000] 
 10782 00007408 EB0A                            jmp .L_end
 10783                                  .L_zero:
 10784 0000740A 48B8-                           mov rax, sob_boolean_true
 10784 0000740C [0300000000000000] 
 10785                                  .L_end:
 10786 00007414 C9                              leave
 10787 00007415 C21800                          ret AND_KILL_FRAME(1)
 10788                                  
 10789                                  L_code_ptr_is_integer:
 10790 00007418 C8000000                        enter 0, 0
 10791 0000741C 48837D1801                      cmp COUNT, 1
 10792 00007421 0F85D50B0000                    jne L_error_arg_count_1
 10793 00007427 488B4520                        mov rax, PARAM(0)
 10794 0000742B 803811                          cmp byte [rax], T_integer
 10795 0000742E 750C                            jne .L_false
 10796 00007430 48B8-                           mov rax, sob_boolean_true
 10796 00007432 [0300000000000000] 
 10797 0000743A EB0A                            jmp .L_exit
 10798                                  .L_false:
 10799 0000743C 48B8-                           mov rax, sob_boolean_false
 10799 0000743E [0200000000000000] 
 10800                                  .L_exit:
 10801 00007446 C9                              leave
 10802 00007447 C21800                          ret AND_KILL_FRAME(1)
 10803                                  
 10804                                  L_code_ptr_raw_bin_add_rr:
 10805 0000744A C8000000                        enter 0, 0
 10806 0000744E 48837D1802                      cmp COUNT, 2
 10807 00007453 0F85D80B0000                    jne L_error_arg_count_2
 10808 00007459 488B5D20                        mov rbx, PARAM(0)
 10809                                          assert_real(rbx)
    53 0000745D 803B13              <1>  cmp byte [%1], %2
    54 00007460 0F856A0C0000        <1>  jne L_error_incorrect_type
 10810 00007466 488B4D28                        mov rcx, PARAM(1)
 10811                                          assert_real(rcx)
    53 0000746A 803913              <1>  cmp byte [%1], %2
    54 0000746D 0F855D0C0000        <1>  jne L_error_incorrect_type
 10812 00007473 F20F104301                      movsd xmm0, qword [rbx + 1]
 10813 00007478 F20F104901                      movsd xmm1, qword [rcx + 1]
 10814 0000747D F20F58C1                        addsd xmm0, xmm1
 10815 00007481 E8AD0A0000                      call make_real
 10816 00007486 C9                              leave
 10817 00007487 C22000                          ret AND_KILL_FRAME(2)
 10818                                  
 10819                                  L_code_ptr_raw_bin_sub_rr:
 10820 0000748A C8000000                        enter 0, 0
 10821 0000748E 48837D1802                      cmp COUNT, 2
 10822 00007493 0F85980B0000                    jne L_error_arg_count_2
 10823 00007499 488B5D20                        mov rbx, PARAM(0)
 10824                                          assert_real(rbx)
    53 0000749D 803B13              <1>  cmp byte [%1], %2
    54 000074A0 0F852A0C0000        <1>  jne L_error_incorrect_type
 10825 000074A6 488B4D28                        mov rcx, PARAM(1)
 10826                                          assert_real(rcx)
    53 000074AA 803913              <1>  cmp byte [%1], %2
    54 000074AD 0F851D0C0000        <1>  jne L_error_incorrect_type
 10827 000074B3 F20F104301                      movsd xmm0, qword [rbx + 1]
 10828 000074B8 F20F104901                      movsd xmm1, qword [rcx + 1]
 10829 000074BD F20F5CC1                        subsd xmm0, xmm1
 10830 000074C1 E86D0A0000                      call make_real
 10831 000074C6 C9                              leave
 10832 000074C7 C22000                          ret AND_KILL_FRAME(2)
 10833                                  
 10834                                  L_code_ptr_raw_bin_mul_rr:
 10835 000074CA C8000000                        enter 0, 0
 10836 000074CE 48837D1802                      cmp COUNT, 2
 10837 000074D3 0F85580B0000                    jne L_error_arg_count_2
 10838 000074D9 488B5D20                        mov rbx, PARAM(0)
 10839                                          assert_real(rbx)
    53 000074DD 803B13              <1>  cmp byte [%1], %2
    54 000074E0 0F85EA0B0000        <1>  jne L_error_incorrect_type
 10840 000074E6 488B4D28                        mov rcx, PARAM(1)
 10841                                          assert_real(rcx)
    53 000074EA 803913              <1>  cmp byte [%1], %2
    54 000074ED 0F85DD0B0000        <1>  jne L_error_incorrect_type
 10842 000074F3 F20F104301                      movsd xmm0, qword [rbx + 1]
 10843 000074F8 F20F104901                      movsd xmm1, qword [rcx + 1]
 10844 000074FD F20F59C1                        mulsd xmm0, xmm1
 10845 00007501 E82D0A0000                      call make_real
 10846 00007506 C9                              leave
 10847 00007507 C22000                          ret AND_KILL_FRAME(2)
 10848                                  
 10849                                  L_code_ptr_raw_bin_div_rr:
 10850 0000750A C8000000                        enter 0, 0
 10851 0000750E 48837D1802                      cmp COUNT, 2
 10852 00007513 0F85180B0000                    jne L_error_arg_count_2
 10853 00007519 488B5D20                        mov rbx, PARAM(0)
 10854                                          assert_real(rbx)
    53 0000751D 803B13              <1>  cmp byte [%1], %2
    54 00007520 0F85AA0B0000        <1>  jne L_error_incorrect_type
 10855 00007526 488B4D28                        mov rcx, PARAM(1)
 10856                                          assert_real(rcx)
    53 0000752A 803913              <1>  cmp byte [%1], %2
    54 0000752D 0F859D0B0000        <1>  jne L_error_incorrect_type
 10857 00007533 F20F104301                      movsd xmm0, qword [rbx + 1]
 10858 00007538 F20F104901                      movsd xmm1, qword [rcx + 1]
 10859 0000753D 660FEFD2                        pxor xmm2, xmm2
 10860 00007541 660F2ECA                        ucomisd xmm1, xmm2
 10861 00007545 0F84B60B0000                    je L_error_division_by_zero
 10862 0000754B F20F5EC1                        divsd xmm0, xmm1
 10863 0000754F E8DF090000                      call make_real
 10864 00007554 C9                              leave
 10865 00007555 C22000                          ret AND_KILL_FRAME(2)
 10866                                  
 10867                                  L_code_ptr_raw_bin_add_zz:
 10868 00007558 C8000000                	enter 0, 0
 10869 0000755C 48837D1802              	cmp COUNT, 2
 10870 00007561 0F85CA0A0000            	jne L_error_arg_count_2
 10871 00007567 4C8B4520                	mov r8, PARAM(0)
 10872                                  	assert_integer(r8)
    53 0000756B 41803811            <1>  cmp byte [%1], %2
    54 0000756F 0F855B0B0000        <1>  jne L_error_incorrect_type
 10873 00007575 4C8B4D28                	mov r9, PARAM(1)
 10874                                  	assert_integer(r9)
    53 00007579 41803911            <1>  cmp byte [%1], %2
    54 0000757D 0F854D0B0000        <1>  jne L_error_incorrect_type
 10875 00007583 498B7801                	mov rdi, qword [r8 + 1]
 10876 00007587 49037901                	add rdi, qword [r9 + 1]
 10877 0000758B E8BB090000              	call make_integer
 10878 00007590 C9                      	leave
 10879 00007591 C22000                  	ret AND_KILL_FRAME(2)
 10880                                  
 10881                                  L_code_ptr_raw_bin_add_qq:
 10882 00007594 C8000000                        enter 0, 0
 10883 00007598 48837D1802                      cmp COUNT, 2
 10884 0000759D 0F858E0A0000                    jne L_error_arg_count_2
 10885 000075A3 4C8B4520                        mov r8, PARAM(0)
 10886                                          assert_fraction(r8)
    53 000075A7 41803812            <1>  cmp byte [%1], %2
    54 000075AB 0F851F0B0000        <1>  jne L_error_incorrect_type
 10887 000075B1 4C8B4D28                        mov r9, PARAM(1)
 10888                                          assert_fraction(r9)
    53 000075B5 41803912            <1>  cmp byte [%1], %2
    54 000075B9 0F85110B0000        <1>  jne L_error_incorrect_type
 10889 000075BF 498B4001                        mov rax, qword [r8 + 1] ; num1
 10890 000075C3 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 10891 000075C7 4899                            cqo
 10892 000075C9 48F7EB                          imul rbx
 10893 000075CC 4889C6                          mov rsi, rax
 10894 000075CF 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10895 000075D3 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 10896 000075D7 4899                            cqo
 10897 000075D9 48F7EB                          imul rbx
 10898 000075DC 4801C6                          add rsi, rax
 10899 000075DF 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10900 000075E3 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 10901 000075E7 4899                            cqo
 10902 000075E9 48F7EB                          imul rbx
 10903 000075EC 4889C7                          mov rdi, rax
 10904 000075EF E8DE010000                      call normalize_fraction
 10905 000075F4 C9                              leave
 10906 000075F5 C22000                          ret AND_KILL_FRAME(2)
 10907                                  
 10908                                  L_code_ptr_raw_bin_sub_zz:
 10909 000075F8 C8000000                	enter 0, 0
 10910 000075FC 48837D1802              	cmp COUNT, 2
 10911 00007601 0F852A0A0000            	jne L_error_arg_count_2
 10912 00007607 4C8B4520                	mov r8, PARAM(0)
 10913                                  	assert_integer(r8)
    53 0000760B 41803811            <1>  cmp byte [%1], %2
    54 0000760F 0F85BB0A0000        <1>  jne L_error_incorrect_type
 10914 00007615 4C8B4D28                	mov r9, PARAM(1)
 10915                                  	assert_integer(r9)
    53 00007619 41803911            <1>  cmp byte [%1], %2
    54 0000761D 0F85AD0A0000        <1>  jne L_error_incorrect_type
 10916 00007623 498B7801                	mov rdi, qword [r8 + 1]
 10917 00007627 492B7901                	sub rdi, qword [r9 + 1]
 10918 0000762B E81B090000              	call make_integer
 10919 00007630 C9                      	leave
 10920 00007631 C22000                  	ret AND_KILL_FRAME(2)
 10921                                  
 10922                                  L_code_ptr_raw_bin_sub_qq:
 10923 00007634 C8000000                        enter 0, 0
 10924 00007638 48837D1802                      cmp COUNT, 2
 10925 0000763D 0F85EE090000                    jne L_error_arg_count_2
 10926 00007643 4C8B4520                        mov r8, PARAM(0)
 10927                                          assert_fraction(r8)
    53 00007647 41803812            <1>  cmp byte [%1], %2
    54 0000764B 0F857F0A0000        <1>  jne L_error_incorrect_type
 10928 00007651 4C8B4D28                        mov r9, PARAM(1)
 10929                                          assert_fraction(r9)
    53 00007655 41803912            <1>  cmp byte [%1], %2
    54 00007659 0F85710A0000        <1>  jne L_error_incorrect_type
 10930 0000765F 498B4001                        mov rax, qword [r8 + 1] ; num1
 10931 00007663 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 10932 00007667 4899                            cqo
 10933 00007669 48F7EB                          imul rbx
 10934 0000766C 4889C6                          mov rsi, rax
 10935 0000766F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10936 00007673 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 10937 00007677 4899                            cqo
 10938 00007679 48F7EB                          imul rbx
 10939 0000767C 4829C6                          sub rsi, rax
 10940 0000767F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10941 00007683 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 10942 00007687 4899                            cqo
 10943 00007689 48F7EB                          imul rbx
 10944 0000768C 4889C7                          mov rdi, rax
 10945 0000768F E83E010000                      call normalize_fraction
 10946 00007694 C9                              leave
 10947 00007695 C22000                          ret AND_KILL_FRAME(2)
 10948                                  
 10949                                  L_code_ptr_raw_bin_mul_zz:
 10950 00007698 C8000000                	enter 0, 0
 10951 0000769C 48837D1802              	cmp COUNT, 2
 10952 000076A1 0F858A090000            	jne L_error_arg_count_2
 10953 000076A7 4C8B4520                	mov r8, PARAM(0)
 10954                                  	assert_integer(r8)
    53 000076AB 41803811            <1>  cmp byte [%1], %2
    54 000076AF 0F851B0A0000        <1>  jne L_error_incorrect_type
 10955 000076B5 4C8B4D28                	mov r9, PARAM(1)
 10956                                  	assert_integer(r9)
    53 000076B9 41803911            <1>  cmp byte [%1], %2
    54 000076BD 0F850D0A0000        <1>  jne L_error_incorrect_type
 10957 000076C3 4899                    	cqo
 10958 000076C5 498B4001                	mov rax, qword [r8 + 1]
 10959 000076C9 49F76101                	mul qword [r9 + 1]
 10960 000076CD 4889C7                  	mov rdi, rax
 10961 000076D0 E876080000              	call make_integer
 10962 000076D5 C9                      	leave
 10963 000076D6 C22000                  	ret AND_KILL_FRAME(2)
 10964                                  
 10965                                  L_code_ptr_raw_bin_mul_qq:
 10966 000076D9 C8000000                        enter 0, 0
 10967 000076DD 48837D1802                      cmp COUNT, 2
 10968 000076E2 0F8549090000                    jne L_error_arg_count_2
 10969 000076E8 4C8B4520                        mov r8, PARAM(0)
 10970                                          assert_fraction(r8)
    53 000076EC 41803812            <1>  cmp byte [%1], %2
    54 000076F0 0F85DA090000        <1>  jne L_error_incorrect_type
 10971 000076F6 4C8B4D28                        mov r9, PARAM(1)
 10972                                          assert_fraction(r9)
    53 000076FA 41803912            <1>  cmp byte [%1], %2
    54 000076FE 0F85CC090000        <1>  jne L_error_incorrect_type
 10973 00007704 498B4001                        mov rax, qword [r8 + 1] ; num1
 10974 00007708 498B5901                        mov rbx, qword [r9 + 1] ; num2
 10975 0000770C 4899                            cqo
 10976 0000770E 48F7EB                          imul rbx
 10977 00007711 4889C6                          mov rsi, rax
 10978 00007714 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10979 00007718 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 10980 0000771C 4899                            cqo
 10981 0000771E 48F7EB                          imul rbx
 10982 00007721 4889C7                          mov rdi, rax
 10983 00007724 E8A9000000                      call normalize_fraction
 10984 00007729 C9                              leave
 10985 0000772A C22000                          ret AND_KILL_FRAME(2)
 10986                                          
 10987                                  L_code_ptr_raw_bin_div_zz:
 10988 0000772D C8000000                	enter 0, 0
 10989 00007731 48837D1802              	cmp COUNT, 2
 10990 00007736 0F85F5080000            	jne L_error_arg_count_2
 10991 0000773C 4C8B4520                	mov r8, PARAM(0)
 10992                                  	assert_integer(r8)
    53 00007740 41803811            <1>  cmp byte [%1], %2
    54 00007744 0F8586090000        <1>  jne L_error_incorrect_type
 10993 0000774A 4C8B4D28                	mov r9, PARAM(1)
 10994                                  	assert_integer(r9)
    53 0000774E 41803911            <1>  cmp byte [%1], %2
    54 00007752 0F8578090000        <1>  jne L_error_incorrect_type
 10995 00007758 498B7901                	mov rdi, qword [r9 + 1]
 10996 0000775C 4883FF00                	cmp rdi, 0
 10997 00007760 0F849B090000            	je L_error_division_by_zero
 10998 00007766 498B7001                	mov rsi, qword [r8 + 1]
 10999 0000776A E863000000              	call normalize_fraction
 11000 0000776F C9                      	leave
 11001 00007770 C22000                  	ret AND_KILL_FRAME(2)
 11002                                  
 11003                                  L_code_ptr_raw_bin_div_qq:
 11004 00007773 C8000000                        enter 0, 0
 11005 00007777 48837D1802                      cmp COUNT, 2
 11006 0000777C 0F85AF080000                    jne L_error_arg_count_2
 11007 00007782 4C8B4520                        mov r8, PARAM(0)
 11008                                          assert_fraction(r8)
    53 00007786 41803812            <1>  cmp byte [%1], %2
    54 0000778A 0F8540090000        <1>  jne L_error_incorrect_type
 11009 00007790 4C8B4D28                        mov r9, PARAM(1)
 11010                                          assert_fraction(r9)
    53 00007794 41803912            <1>  cmp byte [%1], %2
    54 00007798 0F8532090000        <1>  jne L_error_incorrect_type
 11011 0000779E 4983790100                      cmp qword [r9 + 1], 0
 11012 000077A3 0F8458090000                    je L_error_division_by_zero
 11013 000077A9 498B4001                        mov rax, qword [r8 + 1] ; num1
 11014 000077AD 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 11015 000077B1 4899                            cqo
 11016 000077B3 48F7EB                          imul rbx
 11017 000077B6 4889C6                          mov rsi, rax
 11018 000077B9 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 11019 000077BD 498B5901                        mov rbx, qword [r9 + 1] ; num2
 11020 000077C1 4899                            cqo
 11021 000077C3 48F7EB                          imul rbx
 11022 000077C6 4889C7                          mov rdi, rax
 11023 000077C9 E804000000                      call normalize_fraction
 11024 000077CE C9                              leave
 11025 000077CF C22000                          ret AND_KILL_FRAME(2)
 11026                                          
 11027                                  normalize_fraction:
 11028 000077D2 56                              push rsi
 11029 000077D3 57                              push rdi
 11030 000077D4 E859000000                      call gcd
 11031 000077D9 4889C3                          mov rbx, rax
 11032 000077DC 58                              pop rax
 11033 000077DD 4899                            cqo
 11034 000077DF 48F7FB                          idiv rbx
 11035 000077E2 4989C0                          mov r8, rax
 11036 000077E5 58                              pop rax
 11037 000077E6 4899                            cqo
 11038 000077E8 48F7FB                          idiv rbx
 11039 000077EB 4989C1                          mov r9, rax
 11040 000077EE 4983F900                        cmp r9, 0
 11041 000077F2 741C                            je .L_zero
 11042 000077F4 4983F801                        cmp r8, 1
 11043 000077F8 7421                            je .L_int
 11044 000077FA BF11000000                      mov rdi, (1 + 8 + 8)
 11045 000077FF E850EBFFFF                      call malloc
 11046 00007804 C60012                          mov byte [rax], T_fraction
 11047 00007807 4C894801                        mov qword [rax + 1], r9
 11048 0000780B 4C894009                        mov qword [rax + 1 + 8], r8
 11049 0000780F C3                              ret
 11050                                  .L_zero:
 11051 00007810 BF00000000                      mov rdi, 0
 11052 00007815 E831070000                      call make_integer
 11053 0000781A C3                              ret
 11054                                  .L_int:
 11055 0000781B 4C89CF                          mov rdi, r9
 11056 0000781E E828070000                      call make_integer
 11057 00007823 C3                              ret
 11058                                  
 11059                                  iabs:
 11060 00007824 4889F8                          mov rax, rdi
 11061 00007827 4883F800                        cmp rax, 0
 11062 0000782B 7C01                            jl .Lneg
 11063 0000782D C3                              ret
 11064                                  .Lneg:
 11065 0000782E 48F7D8                          neg rax
 11066 00007831 C3                              ret
 11067                                  
 11068                                  gcd:
 11069 00007832 E8EDFFFFFF                      call iabs
 11070 00007837 4889C3                          mov rbx, rax
 11071 0000783A 4889F7                          mov rdi, rsi
 11072 0000783D E8E2FFFFFF                      call iabs
 11073 00007842 4883F800                        cmp rax, 0
 11074 00007846 7502                            jne .L0
 11075 00007848 4893                            xchg rax, rbx
 11076                                  .L0:
 11077 0000784A 4883FB00                        cmp rbx, 0
 11078 0000784E 740C                            je .L1
 11079 00007850 4899                            cqo
 11080 00007852 48F7F3                          div rbx
 11081 00007855 4889D0                          mov rax, rdx
 11082 00007858 4893                            xchg rax, rbx
 11083 0000785A EBEE                            jmp .L0
 11084                                  .L1:
 11085 0000785C C3                              ret
 11086                                  
 11087                                  L_code_ptr_error:
 11088 0000785D C8000000                        enter 0, 0
 11089 00007861 48837D1802                      cmp COUNT, 2
 11090 00007866 0F85C5070000                    jne L_error_arg_count_2
 11091 0000786C 488B7520                        mov rsi, PARAM(0)
 11092                                          assert_interned_symbol(rsi)
    53 00007870 803E41              <1>  cmp byte [%1], %2
    54 00007873 0F8557080000        <1>  jne L_error_incorrect_type
 11093 00007879 488B7528                        mov rsi, PARAM(1)
 11094                                          assert_string(rsi)
    53 0000787D 803E03              <1>  cmp byte [%1], %2
    54 00007880 0F854A080000        <1>  jne L_error_incorrect_type
 11095 00007886 48BF-                           mov rdi, fmt_scheme_error_part_1
 11095 00007888 [7B0A000000000000] 
 11096 00007890 B800000000                      mov rax, 0
 11097                                          ENTER
    44 00007895 C8000000            <1>  enter 0, 0
    45 00007899 4883E4F0            <1>  and rsp, ~15
 11098 0000789D E8(00000000)                    call printf
 11099                                          LEAVE
    49 000078A2 C9                  <1>  leave
 11100 000078A3 488B7D20                        mov rdi, PARAM(0)
 11101 000078A7 E829EDFFFF                      call print_sexpr
 11102 000078AC 48BF-                           mov rdi, fmt_scheme_error_part_2
 11102 000078AE [8F0A000000000000] 
 11103 000078B6 B800000000                      mov rax, 0
 11104                                          ENTER
    44 000078BB C8000000            <1>  enter 0, 0
    45 000078BF 4883E4F0            <1>  and rsp, ~15
 11105 000078C3 E8(00000000)                    call printf
 11106                                          LEAVE
    49 000078C8 C9                  <1>  leave
 11107 000078C9 488B4528                        mov rax, PARAM(1)       ; sob_string
 11108 000078CD BE01000000                      mov rsi, 1              ; size = 1 byte
 11109 000078D2 488B5001                        mov rdx, qword [rax + 1] ; length
 11110 000078D6 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 11111 000078DA 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 11112                                  	ENTER
    44 000078E2 C8000000            <1>  enter 0, 0
    45 000078E6 4883E4F0            <1>  and rsp, ~15
 11113 000078EA E8(00000000)                    call fwrite
 11114                                  	LEAVE
    49 000078EF C9                  <1>  leave
 11115 000078F0 48BF-                           mov rdi, fmt_scheme_error_part_3
 11115 000078F2 [D10A000000000000] 
 11116 000078FA B800000000                      mov rax, 0
 11117                                          ENTER
    44 000078FF C8000000            <1>  enter 0, 0
    45 00007903 4883E4F0            <1>  and rsp, ~15
 11118 00007907 E8(00000000)                    call printf
 11119                                          LEAVE
    49 0000790C C9                  <1>  leave
 11120 0000790D 48C7C0F7FFFFFF                  mov rax, -9
 11121 00007914 E8(00000000)                    call exit
 11122                                  
 11123                                  L_code_ptr_raw_less_than_rr:
 11124 00007919 C8000000                        enter 0, 0
 11125 0000791D 48837D1802                      cmp COUNT, 2
 11126 00007922 0F8509070000                    jne L_error_arg_count_2
 11127 00007928 488B7520                        mov rsi, PARAM(0)
 11128                                          assert_real(rsi)
    53 0000792C 803E13              <1>  cmp byte [%1], %2
    54 0000792F 0F859B070000        <1>  jne L_error_incorrect_type
 11129 00007935 488B7D28                        mov rdi, PARAM(1)
 11130                                          assert_real(rdi)
    53 00007939 803F13              <1>  cmp byte [%1], %2
    54 0000793C 0F858E070000        <1>  jne L_error_incorrect_type
 11131 00007942 F20F104601                      movsd xmm0, qword [rsi + 1]
 11132 00007947 F20F104F01                      movsd xmm1, qword [rdi + 1]
 11133 0000794C 660F2FC1                        comisd xmm0, xmm1
 11134 00007950 730C                            jae .L_false
 11135 00007952 48B8-                           mov rax, sob_boolean_true
 11135 00007954 [0300000000000000] 
 11136 0000795C EB0A                            jmp .L_exit
 11137                                  .L_false:
 11138 0000795E 48B8-                           mov rax, sob_boolean_false
 11138 00007960 [0200000000000000] 
 11139                                  .L_exit:
 11140 00007968 C9                              leave
 11141 00007969 C22000                          ret AND_KILL_FRAME(2)
 11142                                          
 11143                                  L_code_ptr_raw_less_than_zz:
 11144 0000796C C8000000                	enter 0, 0
 11145 00007970 48837D1802              	cmp COUNT, 2
 11146 00007975 0F85B6060000            	jne L_error_arg_count_2
 11147 0000797B 4C8B4520                	mov r8, PARAM(0)
 11148                                  	assert_integer(r8)
    53 0000797F 41803811            <1>  cmp byte [%1], %2
    54 00007983 0F8547070000        <1>  jne L_error_incorrect_type
 11149 00007989 4C8B4D28                	mov r9, PARAM(1)
 11150                                  	assert_integer(r9)
    53 0000798D 41803911            <1>  cmp byte [%1], %2
    54 00007991 0F8539070000        <1>  jne L_error_incorrect_type
 11151 00007997 498B7801                	mov rdi, qword [r8 + 1]
 11152 0000799B 493B7901                	cmp rdi, qword [r9 + 1]
 11153 0000799F 7D0C                    	jge .L_false
 11154 000079A1 48B8-                   	mov rax, sob_boolean_true
 11154 000079A3 [0300000000000000] 
 11155 000079AB EB0A                    	jmp .L_exit
 11156                                  .L_false:
 11157 000079AD 48B8-                   	mov rax, sob_boolean_false
 11157 000079AF [0200000000000000] 
 11158                                  .L_exit:
 11159 000079B7 C9                      	leave
 11160 000079B8 C22000                  	ret AND_KILL_FRAME(2)
 11161                                  
 11162                                  L_code_ptr_raw_less_than_qq:
 11163 000079BB C8000000                        enter 0, 0
 11164 000079BF 48837D1802                      cmp COUNT, 2
 11165 000079C4 0F8567060000                    jne L_error_arg_count_2
 11166 000079CA 488B7520                        mov rsi, PARAM(0)
 11167                                          assert_fraction(rsi)
    53 000079CE 803E12              <1>  cmp byte [%1], %2
    54 000079D1 0F85F9060000        <1>  jne L_error_incorrect_type
 11168 000079D7 488B7D28                        mov rdi, PARAM(1)
 11169                                          assert_fraction(rdi)
    53 000079DB 803F12              <1>  cmp byte [%1], %2
    54 000079DE 0F85EC060000        <1>  jne L_error_incorrect_type
 11170 000079E4 488B4601                        mov rax, qword [rsi + 1] ; num1
 11171 000079E8 4899                            cqo
 11172 000079EA 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 11173 000079EE 4889C1                          mov rcx, rax
 11174 000079F1 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 11175 000079F5 4899                            cqo
 11176 000079F7 48F76F01                        imul qword [rdi + 1]          ; num2
 11177 000079FB 4829C1                          sub rcx, rax
 11178 000079FE 7D0C                            jge .L_false
 11179 00007A00 48B8-                           mov rax, sob_boolean_true
 11179 00007A02 [0300000000000000] 
 11180 00007A0A EB0A                            jmp .L_exit
 11181                                  .L_false:
 11182 00007A0C 48B8-                           mov rax, sob_boolean_false
 11182 00007A0E [0200000000000000] 
 11183                                  .L_exit:
 11184 00007A16 C9                              leave
 11185 00007A17 C22000                          ret AND_KILL_FRAME(2)
 11186                                  
 11187                                  L_code_ptr_raw_equal_rr:
 11188 00007A1A C8000000                        enter 0, 0
 11189 00007A1E 48837D1802                      cmp COUNT, 2
 11190 00007A23 0F8508060000                    jne L_error_arg_count_2
 11191 00007A29 488B7520                        mov rsi, PARAM(0)
 11192                                          assert_real(rsi)
    53 00007A2D 803E13              <1>  cmp byte [%1], %2
    54 00007A30 0F859A060000        <1>  jne L_error_incorrect_type
 11193 00007A36 488B7D28                        mov rdi, PARAM(1)
 11194                                          assert_real(rdi)
    53 00007A3A 803F13              <1>  cmp byte [%1], %2
    54 00007A3D 0F858D060000        <1>  jne L_error_incorrect_type
 11195 00007A43 F20F104601                      movsd xmm0, qword [rsi + 1]
 11196 00007A48 F20F104F01                      movsd xmm1, qword [rdi + 1]
 11197 00007A4D 660F2FC1                        comisd xmm0, xmm1
 11198 00007A51 750C                            jne .L_false
 11199 00007A53 48B8-                           mov rax, sob_boolean_true
 11199 00007A55 [0300000000000000] 
 11200 00007A5D EB0A                            jmp .L_exit
 11201                                  .L_false:
 11202 00007A5F 48B8-                           mov rax, sob_boolean_false
 11202 00007A61 [0200000000000000] 
 11203                                  .L_exit:
 11204 00007A69 C9                              leave
 11205 00007A6A C22000                          ret AND_KILL_FRAME(2)
 11206                                          
 11207                                  L_code_ptr_raw_equal_zz:
 11208 00007A6D C8000000                	enter 0, 0
 11209 00007A71 48837D1802              	cmp COUNT, 2
 11210 00007A76 0F85B5050000            	jne L_error_arg_count_2
 11211 00007A7C 4C8B4520                	mov r8, PARAM(0)
 11212                                  	assert_integer(r8)
    53 00007A80 41803811            <1>  cmp byte [%1], %2
    54 00007A84 0F8546060000        <1>  jne L_error_incorrect_type
 11213 00007A8A 4C8B4D28                	mov r9, PARAM(1)
 11214                                  	assert_integer(r9)
    53 00007A8E 41803911            <1>  cmp byte [%1], %2
    54 00007A92 0F8538060000        <1>  jne L_error_incorrect_type
 11215 00007A98 498B7801                	mov rdi, qword [r8 + 1]
 11216 00007A9C 493B7901                	cmp rdi, qword [r9 + 1]
 11217 00007AA0 750C                    	jne .L_false
 11218 00007AA2 48B8-                   	mov rax, sob_boolean_true
 11218 00007AA4 [0300000000000000] 
 11219 00007AAC EB0A                    	jmp .L_exit
 11220                                  .L_false:
 11221 00007AAE 48B8-                   	mov rax, sob_boolean_false
 11221 00007AB0 [0200000000000000] 
 11222                                  .L_exit:
 11223 00007AB8 C9                      	leave
 11224 00007AB9 C22000                  	ret AND_KILL_FRAME(2)
 11225                                  
 11226                                  L_code_ptr_raw_equal_qq:
 11227 00007ABC C8000000                        enter 0, 0
 11228 00007AC0 48837D1802                      cmp COUNT, 2
 11229 00007AC5 0F8566050000                    jne L_error_arg_count_2
 11230 00007ACB 488B7520                        mov rsi, PARAM(0)
 11231                                          assert_fraction(rsi)
    53 00007ACF 803E12              <1>  cmp byte [%1], %2
    54 00007AD2 0F85F8050000        <1>  jne L_error_incorrect_type
 11232 00007AD8 488B7D28                        mov rdi, PARAM(1)
 11233                                          assert_fraction(rdi)
    53 00007ADC 803F12              <1>  cmp byte [%1], %2
    54 00007ADF 0F85EB050000        <1>  jne L_error_incorrect_type
 11234 00007AE5 488B4601                        mov rax, qword [rsi + 1] ; num1
 11235 00007AE9 4899                            cqo
 11236 00007AEB 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 11237 00007AEF 4889C1                          mov rcx, rax
 11238 00007AF2 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 11239 00007AF6 4899                            cqo
 11240 00007AF8 48F76F01                        imul qword [rdi + 1]          ; num2
 11241 00007AFC 4829C1                          sub rcx, rax
 11242 00007AFF 750C                            jne .L_false
 11243 00007B01 48B8-                           mov rax, sob_boolean_true
 11243 00007B03 [0300000000000000] 
 11244 00007B0B EB0A                            jmp .L_exit
 11245                                  .L_false:
 11246 00007B0D 48B8-                           mov rax, sob_boolean_false
 11246 00007B0F [0200000000000000] 
 11247                                  .L_exit:
 11248 00007B17 C9                              leave
 11249 00007B18 C22000                          ret AND_KILL_FRAME(2)
 11250                                  
 11251                                  L_code_ptr_quotient:
 11252 00007B1B C8000000                        enter 0, 0
 11253 00007B1F 48837D1802                      cmp COUNT, 2
 11254 00007B24 0F8507050000                    jne L_error_arg_count_2
 11255 00007B2A 488B7520                        mov rsi, PARAM(0)
 11256                                          assert_integer(rsi)
    53 00007B2E 803E11              <1>  cmp byte [%1], %2
    54 00007B31 0F8599050000        <1>  jne L_error_incorrect_type
 11257 00007B37 488B7D28                        mov rdi, PARAM(1)
 11258                                          assert_integer(rdi)
    53 00007B3B 803F11              <1>  cmp byte [%1], %2
    54 00007B3E 0F858C050000        <1>  jne L_error_incorrect_type
 11259 00007B44 488B4601                        mov rax, qword [rsi + 1]
 11260 00007B48 488B5F01                        mov rbx, qword [rdi + 1]
 11261 00007B4C 4883FB00                        cmp rbx, 0
 11262 00007B50 0F84AB050000                    je L_error_division_by_zero
 11263 00007B56 4899                            cqo
 11264 00007B58 48F7FB                          idiv rbx
 11265 00007B5B 4889C7                          mov rdi, rax
 11266 00007B5E E8E8030000                      call make_integer
 11267 00007B63 C9                              leave
 11268 00007B64 C22000                          ret AND_KILL_FRAME(2)
 11269                                          
 11270                                  L_code_ptr_remainder:
 11271 00007B67 C8000000                        enter 0, 0
 11272 00007B6B 48837D1802                      cmp COUNT, 2
 11273 00007B70 0F85BB040000                    jne L_error_arg_count_2
 11274 00007B76 488B7520                        mov rsi, PARAM(0)
 11275                                          assert_integer(rsi)
    53 00007B7A 803E11              <1>  cmp byte [%1], %2
    54 00007B7D 0F854D050000        <1>  jne L_error_incorrect_type
 11276 00007B83 488B7D28                        mov rdi, PARAM(1)
 11277                                          assert_integer(rdi)
    53 00007B87 803F11              <1>  cmp byte [%1], %2
    54 00007B8A 0F8540050000        <1>  jne L_error_incorrect_type
 11278 00007B90 488B4601                        mov rax, qword [rsi + 1]
 11279 00007B94 488B5F01                        mov rbx, qword [rdi + 1]
 11280 00007B98 4883FB00                        cmp rbx, 0
 11281 00007B9C 0F845F050000                    je L_error_division_by_zero
 11282 00007BA2 4899                            cqo
 11283 00007BA4 48F7FB                          idiv rbx
 11284 00007BA7 4889D7                          mov rdi, rdx
 11285 00007BAA E89C030000                      call make_integer
 11286 00007BAF C9                              leave
 11287 00007BB0 C22000                          ret AND_KILL_FRAME(2)
 11288                                  
 11289                                  L_code_ptr_set_car:
 11290 00007BB3 C8000000                        enter 0, 0
 11291 00007BB7 48837D1802                      cmp COUNT, 2
 11292 00007BBC 0F856F040000                    jne L_error_arg_count_2
 11293 00007BC2 488B4520                        mov rax, PARAM(0)
 11294                                          assert_pair(rax)
    53 00007BC6 803821              <1>  cmp byte [%1], %2
    54 00007BC9 0F8501050000        <1>  jne L_error_incorrect_type
 11295 00007BCF 488B5D28                        mov rbx, PARAM(1)
 11296 00007BD3 48895801                        mov SOB_PAIR_CAR(rax), rbx
 11297 00007BD7 48B8-                           mov rax, sob_void
 11297 00007BD9 [0000000000000000] 
 11298 00007BE1 C9                              leave
 11299 00007BE2 C22000                          ret AND_KILL_FRAME(2)
 11300                                  
 11301                                  L_code_ptr_set_cdr:
 11302 00007BE5 C8000000                        enter 0, 0
 11303 00007BE9 48837D1802                      cmp COUNT, 2
 11304 00007BEE 0F853D040000                    jne L_error_arg_count_2
 11305 00007BF4 488B4520                        mov rax, PARAM(0)
 11306                                          assert_pair(rax)
    53 00007BF8 803821              <1>  cmp byte [%1], %2
    54 00007BFB 0F85CF040000        <1>  jne L_error_incorrect_type
 11307 00007C01 488B5D28                        mov rbx, PARAM(1)
 11308 00007C05 48895809                        mov SOB_PAIR_CDR(rax), rbx
 11309 00007C09 48B8-                           mov rax, sob_void
 11309 00007C0B [0000000000000000] 
 11310 00007C13 C9                              leave
 11311 00007C14 C22000                          ret AND_KILL_FRAME(2)
 11312                                  
 11313                                  L_code_ptr_string_ref:
 11314 00007C17 C8000000                        enter 0, 0
 11315 00007C1B 48837D1802                      cmp COUNT, 2
 11316 00007C20 0F850B040000                    jne L_error_arg_count_2
 11317 00007C26 488B7D20                        mov rdi, PARAM(0)
 11318                                          assert_string(rdi)
    53 00007C2A 803F03              <1>  cmp byte [%1], %2
    54 00007C2D 0F859D040000        <1>  jne L_error_incorrect_type
 11319 00007C33 488B7528                        mov rsi, PARAM(1)
 11320                                          assert_integer(rsi)
    53 00007C37 803E11              <1>  cmp byte [%1], %2
    54 00007C3A 0F8590040000        <1>  jne L_error_incorrect_type
 11321 00007C40 488B5701                        mov rdx, qword [rdi + 1]
 11322 00007C44 488B4E01                        mov rcx, qword [rsi + 1]
 11323 00007C48 4839D1                          cmp rcx, rdx
 11324 00007C4B 0F8D14030000                    jge L_error_integer_range
 11325 00007C51 4883F900                        cmp rcx, 0
 11326 00007C55 0F8C0A030000                    jl L_error_integer_range
 11327 00007C5B 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 11328 00007C5F BF02000000                      mov rdi, 2
 11329 00007C64 E8EBE6FFFF                      call malloc
 11330 00007C69 C60002                          mov byte [rax], T_char
 11331 00007C6C 885801                          mov byte [rax + 1], bl
 11332 00007C6F C9                              leave
 11333 00007C70 C22000                          ret AND_KILL_FRAME(2)
 11334                                  
 11335                                  L_code_ptr_vector_ref:
 11336 00007C73 C8000000                        enter 0, 0
 11337 00007C77 48837D1802                      cmp COUNT, 2
 11338 00007C7C 0F85AF030000                    jne L_error_arg_count_2
 11339 00007C82 488B7D20                        mov rdi, PARAM(0)
 11340                                          assert_vector(rdi)
    53 00007C86 803F22              <1>  cmp byte [%1], %2
    54 00007C89 0F8541040000        <1>  jne L_error_incorrect_type
 11341 00007C8F 488B7528                        mov rsi, PARAM(1)
 11342                                          assert_integer(rsi)
    53 00007C93 803E11              <1>  cmp byte [%1], %2
    54 00007C96 0F8534040000        <1>  jne L_error_incorrect_type
 11343 00007C9C 488B5701                        mov rdx, qword [rdi + 1]
 11344 00007CA0 488B4E01                        mov rcx, qword [rsi + 1]
 11345 00007CA4 4839D1                          cmp rcx, rdx
 11346 00007CA7 0F8DB8020000                    jge L_error_integer_range
 11347 00007CAD 4883F900                        cmp rcx, 0
 11348 00007CB1 0F8CAE020000                    jl L_error_integer_range
 11349 00007CB7 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 11350 00007CBC C9                              leave
 11351 00007CBD C22000                          ret AND_KILL_FRAME(2)
 11352                                  
 11353                                  L_code_ptr_vector_set:
 11354 00007CC0 C8000000                        enter 0, 0
 11355 00007CC4 48837D1803                      cmp COUNT, 3
 11356 00007CC9 0F85CC030000                    jne L_error_arg_count_3
 11357 00007CCF 488B7D20                        mov rdi, PARAM(0)
 11358                                          assert_vector(rdi)
    53 00007CD3 803F22              <1>  cmp byte [%1], %2
    54 00007CD6 0F85F4030000        <1>  jne L_error_incorrect_type
 11359 00007CDC 488B7528                        mov rsi, PARAM(1)
 11360                                          assert_integer(rsi)
    53 00007CE0 803E11              <1>  cmp byte [%1], %2
    54 00007CE3 0F85E7030000        <1>  jne L_error_incorrect_type
 11361 00007CE9 488B5701                        mov rdx, qword [rdi + 1]
 11362 00007CED 488B4E01                        mov rcx, qword [rsi + 1]
 11363 00007CF1 4839D1                          cmp rcx, rdx
 11364 00007CF4 0F8D6B020000                    jge L_error_integer_range
 11365 00007CFA 4883F900                        cmp rcx, 0
 11366 00007CFE 0F8C61020000                    jl L_error_integer_range
 11367 00007D04 488B4530                        mov rax, PARAM(2)
 11368 00007D08 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 11369 00007D0D 48B8-                           mov rax, sob_void
 11369 00007D0F [0000000000000000] 
 11370 00007D17 C9                              leave
 11371 00007D18 C22800                          ret AND_KILL_FRAME(3)
 11372                                  
 11373                                  L_code_ptr_string_set:
 11374 00007D1B C8000000                        enter 0, 0
 11375 00007D1F 48837D1803                      cmp COUNT, 3
 11376 00007D24 0F8571030000                    jne L_error_arg_count_3
 11377 00007D2A 488B7D20                        mov rdi, PARAM(0)
 11378                                          assert_string(rdi)
    53 00007D2E 803F03              <1>  cmp byte [%1], %2
    54 00007D31 0F8599030000        <1>  jne L_error_incorrect_type
 11379 00007D37 488B7528                        mov rsi, PARAM(1)
 11380                                          assert_integer(rsi)
    53 00007D3B 803E11              <1>  cmp byte [%1], %2
    54 00007D3E 0F858C030000        <1>  jne L_error_incorrect_type
 11381 00007D44 488B5701                        mov rdx, qword [rdi + 1]
 11382 00007D48 488B4E01                        mov rcx, qword [rsi + 1]
 11383 00007D4C 4839D1                          cmp rcx, rdx
 11384 00007D4F 0F8D10020000                    jge L_error_integer_range
 11385 00007D55 4883F900                        cmp rcx, 0
 11386 00007D59 0F8C06020000                    jl L_error_integer_range
 11387 00007D5F 488B4530                        mov rax, PARAM(2)
 11388                                          assert_char(rax)
    53 00007D63 803802              <1>  cmp byte [%1], %2
    54 00007D66 0F8564030000        <1>  jne L_error_incorrect_type
 11389 00007D6C 8A4001                          mov al, byte [rax + 1]
 11390 00007D6F 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 11391 00007D73 48B8-                           mov rax, sob_void
 11391 00007D75 [0000000000000000] 
 11392 00007D7D C9                              leave
 11393 00007D7E C22800                          ret AND_KILL_FRAME(3)
 11394                                  
 11395                                  L_code_ptr_make_vector:
 11396 00007D81 C8000000                        enter 0, 0
 11397 00007D85 48837D1802                      cmp COUNT, 2
 11398 00007D8A 0F85A1020000                    jne L_error_arg_count_2
 11399 00007D90 488B4D20                        mov rcx, PARAM(0)
 11400                                          assert_integer(rcx)
    53 00007D94 803911              <1>  cmp byte [%1], %2
    54 00007D97 0F8533030000        <1>  jne L_error_incorrect_type
 11401 00007D9D 488B4901                        mov rcx, qword [rcx + 1]
 11402 00007DA1 4883F900                        cmp rcx, 0
 11403 00007DA5 0F8CBA010000                    jl L_error_integer_range
 11404 00007DAB 488B5528                        mov rdx, PARAM(1)
 11405 00007DAF 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 11406 00007DB7 E898E5FFFF                      call malloc
 11407 00007DBC C60022                          mov byte [rax], T_vector
 11408 00007DBF 48894801                        mov qword [rax + 1], rcx
 11409 00007DC3 41B800000000                    mov r8, 0
 11410                                  .L0:
 11411 00007DC9 4939C8                          cmp r8, rcx
 11412 00007DCC 740A                            je .L1
 11413 00007DCE 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 11414 00007DD3 49FFC0                          inc r8
 11415 00007DD6 EBF1                            jmp .L0
 11416                                  .L1:
 11417 00007DD8 C9                              leave
 11418 00007DD9 C22000                          ret AND_KILL_FRAME(2)
 11419                                          
 11420                                  L_code_ptr_make_string:
 11421 00007DDC C8000000                        enter 0, 0
 11422 00007DE0 48837D1802                      cmp COUNT, 2
 11423 00007DE5 0F8546020000                    jne L_error_arg_count_2
 11424 00007DEB 488B4D20                        mov rcx, PARAM(0)
 11425                                          assert_integer(rcx)
    53 00007DEF 803911              <1>  cmp byte [%1], %2
    54 00007DF2 0F85D8020000        <1>  jne L_error_incorrect_type
 11426 00007DF8 488B4901                        mov rcx, qword [rcx + 1]
 11427 00007DFC 4883F900                        cmp rcx, 0
 11428 00007E00 0F8C5F010000                    jl L_error_integer_range
 11429 00007E06 488B5528                        mov rdx, PARAM(1)
 11430                                          assert_char(rdx)
    53 00007E0A 803A02              <1>  cmp byte [%1], %2
    54 00007E0D 0F85BD020000        <1>  jne L_error_incorrect_type
 11431 00007E13 8A5201                          mov dl, byte [rdx + 1]
 11432 00007E16 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 11433 00007E1A E835E5FFFF                      call malloc
 11434 00007E1F C60003                          mov byte [rax], T_string
 11435 00007E22 48894801                        mov qword [rax + 1], rcx
 11436 00007E26 41B800000000                    mov r8, 0
 11437                                  .L0:
 11438 00007E2C 4939C8                          cmp r8, rcx
 11439 00007E2F 740A                            je .L1
 11440 00007E31 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 11441 00007E36 49FFC0                          inc r8
 11442 00007E39 EBF1                            jmp .L0
 11443                                  .L1:
 11444 00007E3B C9                              leave
 11445 00007E3C C22000                          ret AND_KILL_FRAME(2)
 11446                                  
 11447                                  L_code_ptr_numerator:
 11448 00007E3F C8000000                        enter 0, 0
 11449 00007E43 48837D1801                      cmp COUNT, 1
 11450 00007E48 0F85AE010000                    jne L_error_arg_count_1
 11451 00007E4E 488B4520                        mov rax, PARAM(0)
 11452                                          assert_fraction(rax)
    53 00007E52 803812              <1>  cmp byte [%1], %2
    54 00007E55 0F8575020000        <1>  jne L_error_incorrect_type
 11453 00007E5B 488B7801                        mov rdi, qword [rax + 1]
 11454 00007E5F E8E7000000                      call make_integer
 11455 00007E64 C9                              leave
 11456 00007E65 C21800                          ret AND_KILL_FRAME(1)
 11457                                          
 11458                                  L_code_ptr_denominator:
 11459 00007E68 C8000000                        enter 0, 0
 11460 00007E6C 48837D1801                      cmp COUNT, 1
 11461 00007E71 0F8585010000                    jne L_error_arg_count_1
 11462 00007E77 488B4520                        mov rax, PARAM(0)
 11463                                          assert_fraction(rax)
    53 00007E7B 803812              <1>  cmp byte [%1], %2
    54 00007E7E 0F854C020000        <1>  jne L_error_incorrect_type
 11464 00007E84 488B7809                        mov rdi, qword [rax + 1 + 8]
 11465 00007E88 E8BE000000                      call make_integer
 11466 00007E8D C9                              leave
 11467 00007E8E C21800                          ret AND_KILL_FRAME(1)
 11468                                  
 11469                                  L_code_ptr_is_eq:
 11470 00007E91 C8000000                	enter 0, 0
 11471 00007E95 48837D1802              	cmp COUNT, 2
 11472 00007E9A 0F8591010000            	jne L_error_arg_count_2
 11473 00007EA0 488B7D20                	mov rdi, PARAM(0)
 11474 00007EA4 488B7528                	mov rsi, PARAM(1)
 11475 00007EA8 4839F7                  	cmp rdi, rsi
 11476 00007EAB 746C                    	je .L_eq_true
 11477 00007EAD 8A17                    	mov dl, byte [rdi]
 11478 00007EAF 3A16                    	cmp dl, byte [rsi]
 11479 00007EB1 7572                    	jne .L_eq_false
 11480 00007EB3 80FA02                  	cmp dl, T_char
 11481 00007EB6 7459                    	je .L_char
 11482 00007EB8 80FA41                  	cmp dl, T_interned_symbol
 11483 00007EBB 7440                    	je .L_interned_symbol
 11484 00007EBD 80FA42                          cmp dl, T_uninterned_symbol
 11485 00007EC0 7443                            je .L_uninterned_symbol
 11486 00007EC2 80FA13                  	cmp dl, T_real
 11487 00007EC5 742E                    	je .L_real
 11488 00007EC7 80FA12                  	cmp dl, T_fraction
 11489 00007ECA 7413                    	je .L_fraction
 11490 00007ECC 80FA11                          cmp dl, T_integer
 11491 00007ECF 7402                            je .L_integer
 11492 00007ED1 EB52                    	jmp .L_eq_false
 11493                                  .L_integer:
 11494 00007ED3 488B4601                        mov rax, qword [rsi + 1]
 11495 00007ED7 483B4701                        cmp rax, qword [rdi + 1]
 11496 00007EDB 7548                            jne .L_eq_false
 11497 00007EDD EB3A                            jmp .L_eq_true
 11498                                  .L_fraction:
 11499 00007EDF 488B4601                	mov rax, qword [rsi + 1]
 11500 00007EE3 483B4701                	cmp rax, qword [rdi + 1]
 11501 00007EE7 753C                    	jne .L_eq_false
 11502 00007EE9 488B4609                	mov rax, qword [rsi + 1 + 8]
 11503 00007EED 483B4709                	cmp rax, qword [rdi + 1 + 8]
 11504 00007EF1 7532                    	jne .L_eq_false
 11505 00007EF3 EB24                    	jmp .L_eq_true
 11506                                  .L_real:
 11507 00007EF5 488B4601                	mov rax, qword [rsi + 1]
 11508 00007EF9 483B4701                	cmp rax, qword [rdi + 1]
 11509                                  .L_interned_symbol:
 11510                                  	; never reached, because interned_symbols are static!
 11511                                  	; but I'm keeping it in case, I'll ever change
 11512                                  	; the implementation
 11513 00007EFD 488B4601                	mov rax, qword [rsi + 1]
 11514 00007F01 483B4701                	cmp rax, qword [rdi + 1]
 11515                                  .L_uninterned_symbol:
 11516 00007F05 4C8B4701                        mov r8, qword [rdi + 1]
 11517 00007F09 4C3B4601                        cmp r8, qword [rsi + 1]
 11518 00007F0D 7516                            jne .L_eq_false
 11519 00007F0F EB08                            jmp .L_eq_true
 11520                                  .L_char:
 11521 00007F11 8A5E01                  	mov bl, byte [rsi + 1]
 11522 00007F14 3A5F01                  	cmp bl, byte [rdi + 1]
 11523 00007F17 750C                    	jne .L_eq_false
 11524                                  .L_eq_true:
 11525 00007F19 48B8-                   	mov rax, sob_boolean_true
 11525 00007F1B [0300000000000000] 
 11526 00007F23 EB0A                    	jmp .L_eq_exit
 11527                                  .L_eq_false:
 11528 00007F25 48B8-                   	mov rax, sob_boolean_false
 11528 00007F27 [0200000000000000] 
 11529                                  .L_eq_exit:
 11530 00007F2F C9                      	leave
 11531 00007F30 C22000                  	ret AND_KILL_FRAME(2)
 11532                                  
 11533                                  make_real:
 11534 00007F33 C8000000                        enter 0, 0
 11535 00007F37 BF09000000                      mov rdi, (1 + 8)
 11536 00007F3C E813E4FFFF                      call malloc
 11537 00007F41 C60013                          mov byte [rax], T_real
 11538 00007F44 F20F114001                      movsd qword [rax + 1], xmm0
 11539 00007F49 C9                              leave 
 11540 00007F4A C3                              ret
 11541                                          
 11542                                  make_integer:
 11543 00007F4B C8000000                        enter 0, 0
 11544 00007F4F 4889FE                          mov rsi, rdi
 11545 00007F52 BF09000000                      mov rdi, (1 + 8)
 11546 00007F57 E8F8E3FFFF                      call malloc
 11547 00007F5C C60011                          mov byte [rax], T_integer
 11548 00007F5F 48897001                        mov qword [rax + 1], rsi
 11549 00007F63 C9                              leave
 11550 00007F64 C3                              ret
 11551                                          
 11552                                  L_error_integer_range:
 11553 00007F65 488B3C25[00000000]              mov rdi, qword [stderr]
 11554 00007F6D 48BE-                           mov rsi, fmt_integer_range
 11554 00007F6F [480A000000000000] 
 11555 00007F77 B800000000                      mov rax, 0
 11556                                          ENTER
    44 00007F7C C8000000            <1>  enter 0, 0
    45 00007F80 4883E4F0            <1>  and rsp, ~15
 11557 00007F84 E8(00000000)                    call fprintf
 11558                                          LEAVE
    49 00007F89 C9                  <1>  leave
 11559 00007F8A 48C7C0FBFFFFFF                  mov rax, -5
 11560 00007F91 E8(00000000)                    call exit
 11561                                  
 11562                                  L_error_arg_negative:
 11563 00007F96 488B3C25[00000000]              mov rdi, qword [stderr]
 11564 00007F9E 48BE-                           mov rsi, fmt_arg_negative
 11564 00007FA0 [2009000000000000] 
 11565 00007FA8 B800000000                      mov rax, 0
 11566                                          ENTER
    44 00007FAD C8000000            <1>  enter 0, 0
    45 00007FB1 4883E4F0            <1>  and rsp, ~15
 11567 00007FB5 E8(00000000)                    call fprintf
 11568                                          LEAVE
    49 00007FBA C9                  <1>  leave
 11569 00007FBB 48C7C0FDFFFFFF                  mov rax, -3
 11570 00007FC2 E8(00000000)                    call exit
 11571                                  
 11572                                  L_error_arg_count_0:
 11573 00007FC7 488B3C25[00000000]              mov rdi, qword [stderr]
 11574 00007FCF 48BE-                           mov rsi, fmt_arg_count_0
 11574 00007FD1 [4609000000000000] 
 11575 00007FD9 488B5518                        mov rdx, COUNT
 11576 00007FDD B800000000                      mov rax, 0
 11577                                          ENTER
    44 00007FE2 C8000000            <1>  enter 0, 0
    45 00007FE6 4883E4F0            <1>  and rsp, ~15
 11578 00007FEA E8(00000000)                    call fprintf
 11579                                          LEAVE
    49 00007FEF C9                  <1>  leave
 11580 00007FF0 48C7C0FDFFFFFF                  mov rax, -3
 11581 00007FF7 E8(00000000)                    call exit
 11582                                  
 11583                                  L_error_arg_count_1:
 11584 00007FFC 488B3C25[00000000]              mov rdi, qword [stderr]
 11585 00008004 48BE-                           mov rsi, fmt_arg_count_1
 11585 00008006 [6E09000000000000] 
 11586 0000800E 488B5518                        mov rdx, COUNT
 11587 00008012 B800000000                      mov rax, 0
 11588                                          ENTER
    44 00008017 C8000000            <1>  enter 0, 0
    45 0000801B 4883E4F0            <1>  and rsp, ~15
 11589 0000801F E8(00000000)                    call fprintf
 11590                                          LEAVE
    49 00008024 C9                  <1>  leave
 11591 00008025 48C7C0FDFFFFFF                  mov rax, -3
 11592 0000802C E8(00000000)                    call exit
 11593                                  
 11594                                  L_error_arg_count_2:
 11595 00008031 488B3C25[00000000]              mov rdi, qword [stderr]
 11596 00008039 48BE-                           mov rsi, fmt_arg_count_2
 11596 0000803B [D409000000000000] 
 11597 00008043 488B5518                        mov rdx, COUNT
 11598 00008047 B800000000                      mov rax, 0
 11599                                          ENTER
    44 0000804C C8000000            <1>  enter 0, 0
    45 00008050 4883E4F0            <1>  and rsp, ~15
 11600 00008054 E8(00000000)                    call fprintf
 11601                                          LEAVE
    49 00008059 C9                  <1>  leave
 11602 0000805A 48C7C0FDFFFFFF                  mov rax, -3
 11603 00008061 E8(00000000)                    call exit
 11604                                  
 11605                                  L_error_arg_count_12:
 11606 00008066 488B3C25[00000000]              mov rdi, qword [stderr]
 11607 0000806E 48BE-                           mov rsi, fmt_arg_count_12
 11607 00008070 [9409000000000000] 
 11608 00008078 488B5518                        mov rdx, COUNT
 11609 0000807C B800000000                      mov rax, 0
 11610                                          ENTER
    44 00008081 C8000000            <1>  enter 0, 0
    45 00008085 4883E4F0            <1>  and rsp, ~15
 11611 00008089 E8(00000000)                    call fprintf
 11612                                          LEAVE
    49 0000808E C9                  <1>  leave
 11613 0000808F 48C7C0FDFFFFFF                  mov rax, -3
 11614 00008096 E8(00000000)                    call exit
 11615                                  
 11616                                  L_error_arg_count_3:
 11617 0000809B 488B3C25[00000000]              mov rdi, qword [stderr]
 11618 000080A3 48BE-                           mov rsi, fmt_arg_count_3
 11618 000080A5 [FB09000000000000] 
 11619 000080AD 488B5518                        mov rdx, COUNT
 11620 000080B1 B800000000                      mov rax, 0
 11621                                          ENTER
    44 000080B6 C8000000            <1>  enter 0, 0
    45 000080BA 4883E4F0            <1>  and rsp, ~15
 11622 000080BE E8(00000000)                    call fprintf
 11623                                          LEAVE
    49 000080C3 C9                  <1>  leave
 11624 000080C4 48C7C0FDFFFFFF                  mov rax, -3
 11625 000080CB E8(00000000)                    call exit
 11626                                          
 11627                                  L_error_incorrect_type:
 11628 000080D0 488B3C25[00000000]              mov rdi, qword [stderr]
 11629 000080D8 48BE-                           mov rsi, fmt_type
 11629 000080DA [240A000000000000] 
 11630 000080E2 B800000000                      mov rax, 0
 11631                                          ENTER
    44 000080E7 C8000000            <1>  enter 0, 0
    45 000080EB 4883E4F0            <1>  and rsp, ~15
 11632 000080EF E8(00000000)                    call fprintf
 11633                                          LEAVE
    49 000080F4 C9                  <1>  leave
 11634 000080F5 48C7C0FCFFFFFF                  mov rax, -4
 11635 000080FC E8(00000000)                    call exit
 11636                                  
 11637                                  L_error_division_by_zero:
 11638 00008101 488B3C25[00000000]              mov rdi, qword [stderr]
 11639 00008109 48BE-                           mov rsi, fmt_division_by_zero
 11639 0000810B [650A000000000000] 
 11640 00008113 B800000000                      mov rax, 0
 11641                                          ENTER
    44 00008118 C8000000            <1>  enter 0, 0
    45 0000811C 4883E4F0            <1>  and rsp, ~15
 11642 00008120 E8(00000000)                    call fprintf
 11643                                          LEAVE
    49 00008125 C9                  <1>  leave
 11644 00008126 48C7C0F8FFFFFF                  mov rax, -8
 11645 0000812D E8(00000000)                    call exit
 11646                                  
 11647                                  section .data
 11648                                  gensym_count:
 11649 00000915 0000000000000000                dq 0
 11650                                  fmt_char:
 11651 0000091D 256300                          db `%c\0`
 11652                                  fmt_arg_negative:
 11653 00000920 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
 11653 00000929 7267756D656E742063-
 11653 00000932 616E6E6F7420626520-
 11653 0000093B 6E656761746976652E-
 11653 00000944 0A00               
 11654                                  fmt_arg_count_0:
 11655 00000946 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 11655 0000094F 74696E67207A65726F-
 11655 00000958 20617267756D656E74-
 11655 00000961 732E20466F756E6420-
 11655 0000096A 25640A00           
 11656                                  fmt_arg_count_1:
 11657 0000096E 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 11657 00000977 74696E67206F6E6520-
 11657 00000980 617267756D656E742E-
 11657 00000989 20466F756E64202564-
 11657 00000992 0A00               
 11658                                  fmt_arg_count_12:
 11659 00000994 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 11659 0000099D 74696E67206F6E6520-
 11659 000009A6 726571756972656420-
 11659 000009AF 616E64206F6E65206F-
 11659 000009B8 7074696F6E616C2061-
 11659 000009C1 7267756D656E742E20-
 11659 000009CA 466F756E642025640A-
 11659 000009D3 00                 
 11660                                  fmt_arg_count_2:
 11661 000009D4 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 11661 000009DD 74696E672074776F20-
 11661 000009E6 617267756D656E7473-
 11661 000009EF 2E20466F756E642025-
 11661 000009F8 640A00             
 11662                                  fmt_arg_count_3:
 11663 000009FB 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 11663 00000A04 74696E672074687265-
 11663 00000A0D 6520617267756D656E-
 11663 00000A16 74732E20466F756E64-
 11663 00000A1F 2025640A00         
 11664                                  fmt_type:
 11665 00000A24 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 11665 00000A2D 696F6E207061737365-
 11665 00000A36 6420696E636F727265-
 11665 00000A3F 637420747970650A00 
 11666                                  fmt_integer_range:
 11667 00000A48 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 11667 00000A51 7265637420696E7465-
 11667 00000A5A 6765722072616E6765-
 11667 00000A63 0A00               
 11668                                  fmt_division_by_zero:
 11669 00000A65 212121204469766973-             db `!!! Division by zero\n\0`
 11669 00000A6E 696F6E206279207A65-
 11669 00000A77 726F0A00           
 11670                                  fmt_scheme_error_part_1:
 11671 00000A7B 0A2121212054686520-             db `\n!!! The procedure \0`
 11671 00000A84 70726F636564757265-
 11671 00000A8D 2000               
 11672                                  fmt_scheme_error_part_2:
 11673 00000A8F 2061736B656420746F-             db ` asked to terminate the program\n`
 11673 00000A98 207465726D696E6174-
 11673 00000AA1 65207468652070726F-
 11673 00000AAA 6772616D0A         
 11674 00000AAF 202020207769746820-             db `    with the following message:\n\n\0`
 11674 00000AB8 74686520666F6C6C6F-
 11674 00000AC1 77696E67206D657373-
 11674 00000ACA 6167653A0A0A00     
 11675                                  fmt_scheme_error_part_3:
 11676 00000AD1 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 11676 00000ADA 210A0A00           
