     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "caar"
   469 000005DE 0400000000000000        	dq 4
   470 000005E6 63616172                	db 0x63, 0x61, 0x61, 0x72
   471                                  	; L_constants + 1514:
   472 000005EA 03                      	db T_string	; "cadr"
   473 000005EB 0400000000000000        	dq 4
   474 000005F3 63616472                	db 0x63, 0x61, 0x64, 0x72
   475                                  	; L_constants + 1527:
   476 000005F7 03                      	db T_string	; "cdar"
   477 000005F8 0400000000000000        	dq 4
   478 00000600 63646172                	db 0x63, 0x64, 0x61, 0x72
   479                                  	; L_constants + 1540:
   480 00000604 03                      	db T_string	; "cddr"
   481 00000605 0400000000000000        	dq 4
   482 0000060D 63646472                	db 0x63, 0x64, 0x64, 0x72
   483                                  	; L_constants + 1553:
   484 00000611 03                      	db T_string	; "caaar"
   485 00000612 0500000000000000        	dq 5
   486 0000061A 6361616172              	db 0x63, 0x61, 0x61, 0x61, 0x72
   487                                  	; L_constants + 1567:
   488 0000061F 03                      	db T_string	; "caadr"
   489 00000620 0500000000000000        	dq 5
   490 00000628 6361616472              	db 0x63, 0x61, 0x61, 0x64, 0x72
   491                                  	; L_constants + 1581:
   492 0000062D 03                      	db T_string	; "cadar"
   493 0000062E 0500000000000000        	dq 5
   494 00000636 6361646172              	db 0x63, 0x61, 0x64, 0x61, 0x72
   495                                  	; L_constants + 1595:
   496 0000063B 03                      	db T_string	; "caddr"
   497 0000063C 0500000000000000        	dq 5
   498 00000644 6361646472              	db 0x63, 0x61, 0x64, 0x64, 0x72
   499                                  	; L_constants + 1609:
   500 00000649 03                      	db T_string	; "cdaar"
   501 0000064A 0500000000000000        	dq 5
   502 00000652 6364616172              	db 0x63, 0x64, 0x61, 0x61, 0x72
   503                                  	; L_constants + 1623:
   504 00000657 03                      	db T_string	; "cdadr"
   505 00000658 0500000000000000        	dq 5
   506 00000660 6364616472              	db 0x63, 0x64, 0x61, 0x64, 0x72
   507                                  	; L_constants + 1637:
   508 00000665 03                      	db T_string	; "cddar"
   509 00000666 0500000000000000        	dq 5
   510 0000066E 6364646172              	db 0x63, 0x64, 0x64, 0x61, 0x72
   511                                  	; L_constants + 1651:
   512 00000673 03                      	db T_string	; "cdddr"
   513 00000674 0500000000000000        	dq 5
   514 0000067C 6364646472              	db 0x63, 0x64, 0x64, 0x64, 0x72
   515                                  	; L_constants + 1665:
   516 00000681 03                      	db T_string	; "caaaar"
   517 00000682 0600000000000000        	dq 6
   518 0000068A 636161616172            	db 0x63, 0x61, 0x61, 0x61, 0x61, 0x72
   519                                  	; L_constants + 1680:
   520 00000690 03                      	db T_string	; "caaadr"
   521 00000691 0600000000000000        	dq 6
   522 00000699 636161616472            	db 0x63, 0x61, 0x61, 0x61, 0x64, 0x72
   523                                  	; L_constants + 1695:
   524 0000069F 03                      	db T_string	; "caadar"
   525 000006A0 0600000000000000        	dq 6
   526 000006A8 636161646172            	db 0x63, 0x61, 0x61, 0x64, 0x61, 0x72
   527                                  	; L_constants + 1710:
   528 000006AE 03                      	db T_string	; "caaddr"
   529 000006AF 0600000000000000        	dq 6
   530 000006B7 636161646472            	db 0x63, 0x61, 0x61, 0x64, 0x64, 0x72
   531                                  	; L_constants + 1725:
   532 000006BD 03                      	db T_string	; "cadaar"
   533 000006BE 0600000000000000        	dq 6
   534 000006C6 636164616172            	db 0x63, 0x61, 0x64, 0x61, 0x61, 0x72
   535                                  	; L_constants + 1740:
   536 000006CC 03                      	db T_string	; "cadadr"
   537 000006CD 0600000000000000        	dq 6
   538 000006D5 636164616472            	db 0x63, 0x61, 0x64, 0x61, 0x64, 0x72
   539                                  	; L_constants + 1755:
   540 000006DB 03                      	db T_string	; "caddar"
   541 000006DC 0600000000000000        	dq 6
   542 000006E4 636164646172            	db 0x63, 0x61, 0x64, 0x64, 0x61, 0x72
   543                                  	; L_constants + 1770:
   544 000006EA 03                      	db T_string	; "cadddr"
   545 000006EB 0600000000000000        	dq 6
   546 000006F3 636164646472            	db 0x63, 0x61, 0x64, 0x64, 0x64, 0x72
   547                                  	; L_constants + 1785:
   548 000006F9 03                      	db T_string	; "cdaaar"
   549 000006FA 0600000000000000        	dq 6
   550 00000702 636461616172            	db 0x63, 0x64, 0x61, 0x61, 0x61, 0x72
   551                                  	; L_constants + 1800:
   552 00000708 03                      	db T_string	; "cdaadr"
   553 00000709 0600000000000000        	dq 6
   554 00000711 636461616472            	db 0x63, 0x64, 0x61, 0x61, 0x64, 0x72
   555                                  	; L_constants + 1815:
   556 00000717 03                      	db T_string	; "cdadar"
   557 00000718 0600000000000000        	dq 6
   558 00000720 636461646172            	db 0x63, 0x64, 0x61, 0x64, 0x61, 0x72
   559                                  	; L_constants + 1830:
   560 00000726 03                      	db T_string	; "cdaddr"
   561 00000727 0600000000000000        	dq 6
   562 0000072F 636461646472            	db 0x63, 0x64, 0x61, 0x64, 0x64, 0x72
   563                                  	; L_constants + 1845:
   564 00000735 03                      	db T_string	; "cddaar"
   565 00000736 0600000000000000        	dq 6
   566 0000073E 636464616172            	db 0x63, 0x64, 0x64, 0x61, 0x61, 0x72
   567                                  	; L_constants + 1860:
   568 00000744 03                      	db T_string	; "cddadr"
   569 00000745 0600000000000000        	dq 6
   570 0000074D 636464616472            	db 0x63, 0x64, 0x64, 0x61, 0x64, 0x72
   571                                  	; L_constants + 1875:
   572 00000753 03                      	db T_string	; "cdddar"
   573 00000754 0600000000000000        	dq 6
   574 0000075C 636464646172            	db 0x63, 0x64, 0x64, 0x64, 0x61, 0x72
   575                                  	; L_constants + 1890:
   576 00000762 03                      	db T_string	; "cddddr"
   577 00000763 0600000000000000        	dq 6
   578 0000076B 636464646472            	db 0x63, 0x64, 0x64, 0x64, 0x64, 0x72
   579                                  	; L_constants + 1905:
   580 00000771 03                      	db T_string	; "list?"
   581 00000772 0500000000000000        	dq 5
   582 0000077A 6C6973743F              	db 0x6C, 0x69, 0x73, 0x74, 0x3F
   583                                  	; L_constants + 1919:
   584 0000077F 03                      	db T_string	; "list"
   585 00000780 0400000000000000        	dq 4
   586 00000788 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   587                                  	; L_constants + 1932:
   588 0000078C 03                      	db T_string	; "not"
   589 0000078D 0300000000000000        	dq 3
   590 00000795 6E6F74                  	db 0x6E, 0x6F, 0x74
   591                                  	; L_constants + 1944:
   592 00000798 03                      	db T_string	; "rational?"
   593 00000799 0900000000000000        	dq 9
   594 000007A1 726174696F6E616C        	db 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C
   595 000007A9 3F                      	db 0x3F
   596                                  	; L_constants + 1962:
   597 000007AA 03                      	db T_string	; "list*"
   598 000007AB 0500000000000000        	dq 5
   599 000007B3 6C6973742A              	db 0x6C, 0x69, 0x73, 0x74, 0x2A
   600                                  	; L_constants + 1976:
   601 000007B8 03                      	db T_string	; "whatever"
   602 000007B9 0800000000000000        	dq 8
   603 000007C1 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   604                                  	; L_constants + 1993:
   605 000007C9 41                      	db T_interned_symbol	; whatever
   606 000007CA [B807000000000000]      	dq L_constants + 1976
   607                                  	; L_constants + 2002:
   608 000007D2 03                      	db T_string	; "apply"
   609 000007D3 0500000000000000        	dq 5
   610 000007DB 6170706C79              	db 0x61, 0x70, 0x70, 0x6C, 0x79
   611                                  	; L_constants + 2016:
   612 000007E0 03                      	db T_string	; "ormap"
   613 000007E1 0500000000000000        	dq 5
   614 000007E9 6F726D6170              	db 0x6F, 0x72, 0x6D, 0x61, 0x70
   615                                  	; L_constants + 2030:
   616 000007EE 03                      	db T_string	; "map"
   617 000007EF 0300000000000000        	dq 3
   618 000007F7 6D6170                  	db 0x6D, 0x61, 0x70
   619                                  	; L_constants + 2042:
   620 000007FA 03                      	db T_string	; "andmap"
   621 000007FB 0600000000000000        	dq 6
   622 00000803 616E646D6170            	db 0x61, 0x6E, 0x64, 0x6D, 0x61, 0x70
   623                                  	; L_constants + 2057:
   624 00000809 03                      	db T_string	; "reverse"
   625 0000080A 0700000000000000        	dq 7
   626 00000812 72657665727365          	db 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   627                                  	; L_constants + 2073:
   628 00000819 03                      	db T_string	; "fold-left"
   629 0000081A 0900000000000000        	dq 9
   630 00000822 666F6C642D6C6566        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x6C, 0x65, 0x66
   631 0000082A 74                      	db 0x74
   632                                  	; L_constants + 2091:
   633 0000082B 03                      	db T_string	; "append"
   634 0000082C 0600000000000000        	dq 6
   635 00000834 617070656E64            	db 0x61, 0x70, 0x70, 0x65, 0x6E, 0x64
   636                                  	; L_constants + 2106:
   637 0000083A 03                      	db T_string	; "fold-right"
   638 0000083B 0A00000000000000        	dq 10
   639 00000843 666F6C642D726967        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x72, 0x69, 0x67
   640 0000084B 6874                    	db 0x68, 0x74
   641                                  	; L_constants + 2125:
   642 0000084D 03                      	db T_string	; "+"
   643 0000084E 0100000000000000        	dq 1
   644 00000856 2B                      	db 0x2B
   645                                  	; L_constants + 2135:
   646 00000857 11                      	db T_integer	; 0
   647 00000858 0000000000000000        	dq 0
   648                                  	; L_constants + 2144:
   649 00000860 03                      	db T_string	; "__bin_integer_to_fr...
   650 00000861 1900000000000000        	dq 25
   651 00000869 5F5F62696E5F696E        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x5F, 0x69, 0x6E
   652 00000871 74656765725F746F        	db 0x74, 0x65, 0x67, 0x65, 0x72, 0x5F, 0x74, 0x6F
   653 00000879 5F6672616374696F        	db 0x5F, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F
   654 00000881 6E                      	db 0x6E
   655                                  	; L_constants + 2178:
   656 00000882 41                      	db T_interned_symbol	; +
   657 00000883 [4D08000000000000]      	dq L_constants + 2125
   658                                  	; L_constants + 2187:
   659 0000088B 03                      	db T_string	; "all arguments need ...
   660 0000088C 2000000000000000        	dq 32
   661 00000894 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
   662 0000089C 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
   663 000008A4 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   664 000008AC 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   665                                  	; L_constants + 2228:
   666 000008B4 03                      	db T_string	; "free_var"
   667 000008B5 0800000000000000        	dq 8
   668 000008BD 667265655F766172        	db 0x66, 0x72, 0x65, 0x65, 0x5F, 0x76, 0x61, 0x72
   669                                  	; L_constants + 2245:
   670 000008C5 11                      	db T_integer	; 2
   671 000008C6 0200000000000000        	dq 2
   672                                  	; L_constants + 2254:
   673 000008CE 03                      	db T_string	; "tail_lambda"
   674 000008CF 0B00000000000000        	dq 11
   675 000008D7 7461696C5F6C616D        	db 0x74, 0x61, 0x69, 0x6C, 0x5F, 0x6C, 0x61, 0x6D
   676 000008DF 626461                  	db 0x62, 0x64, 0x61
   677                                  	; L_constants + 2274:
   678 000008E2 03                      	db T_string	; "arg_lambda"
   679 000008E3 0A00000000000000        	dq 10
   680 000008EB 6172675F6C616D62        	db 0x61, 0x72, 0x67, 0x5F, 0x6C, 0x61, 0x6D, 0x62
   681 000008F3 6461                    	db 0x64, 0x61
   682                                  	; L_constants + 2293:
   683 000008F5 03                      	db T_string	; "free_var_lambda"
   684 000008F6 0F00000000000000        	dq 15
   685 000008FE 667265655F766172        	db 0x66, 0x72, 0x65, 0x65, 0x5F, 0x76, 0x61, 0x72
   686 00000906 5F6C616D626461          	db 0x5F, 0x6C, 0x61, 0x6D, 0x62, 0x64, 0x61
   687                                  	; L_constants + 2317:
   688 0000090D 11                      	db T_integer	; 5
   689 0000090E 0500000000000000        	dq 5
   690                                  free_var_0:	; location of +
   691 00000916 [1E09000000000000]      	dq .undefined_object
   692                                  .undefined_object:
   693 0000091E 05                      	db T_undefined
   694 0000091F [4D08000000000000]      	dq L_constants + 2125
   695                                  
   696                                  free_var_1:	; location of __bin-add-qq
   697 00000927 [2F09000000000000]      	dq .undefined_object
   698                                  .undefined_object:
   699 0000092F 05                      	db T_undefined
   700 00000930 [6902000000000000]      	dq L_constants + 617
   701                                  
   702                                  free_var_2:	; location of __bin-add-rr
   703 00000938 [4009000000000000]      	dq .undefined_object
   704                                  .undefined_object:
   705 00000940 05                      	db T_undefined
   706 00000941 [1502000000000000]      	dq L_constants + 533
   707                                  
   708                                  free_var_3:	; location of __bin-add-zz
   709 00000949 [5109000000000000]      	dq .undefined_object
   710                                  .undefined_object:
   711 00000951 05                      	db T_undefined
   712 00000952 [BD02000000000000]      	dq L_constants + 701
   713                                  
   714                                  free_var_4:	; location of __bin-apply
   715 0000095A [6209000000000000]      	dq .undefined_object
   716                                  .undefined_object:
   717 00000962 05                      	db T_undefined
   718 00000963 [0102000000000000]      	dq L_constants + 513
   719                                  
   720                                  free_var_5:	; location of __bin_integer_to_fraction
   721 0000096B [7309000000000000]      	dq .undefined_object
   722                                  .undefined_object:
   723 00000973 05                      	db T_undefined
   724 00000974 [6008000000000000]      	dq L_constants + 2144
   725                                  
   726                                  free_var_6:	; location of __integer-to-fraction
   727 0000097C [8409000000000000]      	dq .undefined_object
   728                                  .undefined_object:
   729 00000984 05                      	db T_undefined
   730 00000985 [A204000000000000]      	dq L_constants + 1186
   731                                  
   732                                  free_var_7:	; location of andmap
   733 0000098D [9509000000000000]      	dq .undefined_object
   734                                  .undefined_object:
   735 00000995 05                      	db T_undefined
   736 00000996 [FA07000000000000]      	dq L_constants + 2042
   737                                  
   738                                  free_var_8:	; location of append
   739 0000099E [A609000000000000]      	dq .undefined_object
   740                                  .undefined_object:
   741 000009A6 05                      	db T_undefined
   742 000009A7 [2B08000000000000]      	dq L_constants + 2091
   743                                  
   744                                  free_var_9:	; location of apply
   745 000009AF [B709000000000000]      	dq .undefined_object
   746                                  .undefined_object:
   747 000009B7 05                      	db T_undefined
   748 000009B8 [D207000000000000]      	dq L_constants + 2002
   749                                  
   750                                  free_var_10:	; location of arg_lambda
   751 000009C0 [C809000000000000]      	dq .undefined_object
   752                                  .undefined_object:
   753 000009C8 05                      	db T_undefined
   754 000009C9 [E208000000000000]      	dq L_constants + 2274
   755                                  
   756                                  free_var_11:	; location of caaaar
   757 000009D1 [D909000000000000]      	dq .undefined_object
   758                                  .undefined_object:
   759 000009D9 05                      	db T_undefined
   760 000009DA [8106000000000000]      	dq L_constants + 1665
   761                                  
   762                                  free_var_12:	; location of caaadr
   763 000009E2 [EA09000000000000]      	dq .undefined_object
   764                                  .undefined_object:
   765 000009EA 05                      	db T_undefined
   766 000009EB [9006000000000000]      	dq L_constants + 1680
   767                                  
   768                                  free_var_13:	; location of caaar
   769 000009F3 [FB09000000000000]      	dq .undefined_object
   770                                  .undefined_object:
   771 000009FB 05                      	db T_undefined
   772 000009FC [1106000000000000]      	dq L_constants + 1553
   773                                  
   774                                  free_var_14:	; location of caadar
   775 00000A04 [0C0A000000000000]      	dq .undefined_object
   776                                  .undefined_object:
   777 00000A0C 05                      	db T_undefined
   778 00000A0D [9F06000000000000]      	dq L_constants + 1695
   779                                  
   780                                  free_var_15:	; location of caaddr
   781 00000A15 [1D0A000000000000]      	dq .undefined_object
   782                                  .undefined_object:
   783 00000A1D 05                      	db T_undefined
   784 00000A1E [AE06000000000000]      	dq L_constants + 1710
   785                                  
   786                                  free_var_16:	; location of caadr
   787 00000A26 [2E0A000000000000]      	dq .undefined_object
   788                                  .undefined_object:
   789 00000A2E 05                      	db T_undefined
   790 00000A2F [1F06000000000000]      	dq L_constants + 1567
   791                                  
   792                                  free_var_17:	; location of caar
   793 00000A37 [3F0A000000000000]      	dq .undefined_object
   794                                  .undefined_object:
   795 00000A3F 05                      	db T_undefined
   796 00000A40 [DD05000000000000]      	dq L_constants + 1501
   797                                  
   798                                  free_var_18:	; location of cadaar
   799 00000A48 [500A000000000000]      	dq .undefined_object
   800                                  .undefined_object:
   801 00000A50 05                      	db T_undefined
   802 00000A51 [BD06000000000000]      	dq L_constants + 1725
   803                                  
   804                                  free_var_19:	; location of cadadr
   805 00000A59 [610A000000000000]      	dq .undefined_object
   806                                  .undefined_object:
   807 00000A61 05                      	db T_undefined
   808 00000A62 [CC06000000000000]      	dq L_constants + 1740
   809                                  
   810                                  free_var_20:	; location of cadar
   811 00000A6A [720A000000000000]      	dq .undefined_object
   812                                  .undefined_object:
   813 00000A72 05                      	db T_undefined
   814 00000A73 [2D06000000000000]      	dq L_constants + 1581
   815                                  
   816                                  free_var_21:	; location of caddar
   817 00000A7B [830A000000000000]      	dq .undefined_object
   818                                  .undefined_object:
   819 00000A83 05                      	db T_undefined
   820 00000A84 [DB06000000000000]      	dq L_constants + 1755
   821                                  
   822                                  free_var_22:	; location of cadddr
   823 00000A8C [940A000000000000]      	dq .undefined_object
   824                                  .undefined_object:
   825 00000A94 05                      	db T_undefined
   826 00000A95 [EA06000000000000]      	dq L_constants + 1770
   827                                  
   828                                  free_var_23:	; location of caddr
   829 00000A9D [A50A000000000000]      	dq .undefined_object
   830                                  .undefined_object:
   831 00000AA5 05                      	db T_undefined
   832 00000AA6 [3B06000000000000]      	dq L_constants + 1595
   833                                  
   834                                  free_var_24:	; location of cadr
   835 00000AAE [B60A000000000000]      	dq .undefined_object
   836                                  .undefined_object:
   837 00000AB6 05                      	db T_undefined
   838 00000AB7 [EA05000000000000]      	dq L_constants + 1514
   839                                  
   840                                  free_var_25:	; location of car
   841 00000ABF [C70A000000000000]      	dq .undefined_object
   842                                  .undefined_object:
   843 00000AC7 05                      	db T_undefined
   844 00000AC8 [1501000000000000]      	dq L_constants + 277
   845                                  
   846                                  free_var_26:	; location of cdaaar
   847 00000AD0 [D80A000000000000]      	dq .undefined_object
   848                                  .undefined_object:
   849 00000AD8 05                      	db T_undefined
   850 00000AD9 [F906000000000000]      	dq L_constants + 1785
   851                                  
   852                                  free_var_27:	; location of cdaadr
   853 00000AE1 [E90A000000000000]      	dq .undefined_object
   854                                  .undefined_object:
   855 00000AE9 05                      	db T_undefined
   856 00000AEA [0807000000000000]      	dq L_constants + 1800
   857                                  
   858                                  free_var_28:	; location of cdaar
   859 00000AF2 [FA0A000000000000]      	dq .undefined_object
   860                                  .undefined_object:
   861 00000AFA 05                      	db T_undefined
   862 00000AFB [4906000000000000]      	dq L_constants + 1609
   863                                  
   864                                  free_var_29:	; location of cdadar
   865 00000B03 [0B0B000000000000]      	dq .undefined_object
   866                                  .undefined_object:
   867 00000B0B 05                      	db T_undefined
   868 00000B0C [1707000000000000]      	dq L_constants + 1815
   869                                  
   870                                  free_var_30:	; location of cdaddr
   871 00000B14 [1C0B000000000000]      	dq .undefined_object
   872                                  .undefined_object:
   873 00000B1C 05                      	db T_undefined
   874 00000B1D [2607000000000000]      	dq L_constants + 1830
   875                                  
   876                                  free_var_31:	; location of cdadr
   877 00000B25 [2D0B000000000000]      	dq .undefined_object
   878                                  .undefined_object:
   879 00000B2D 05                      	db T_undefined
   880 00000B2E [5706000000000000]      	dq L_constants + 1623
   881                                  
   882                                  free_var_32:	; location of cdar
   883 00000B36 [3E0B000000000000]      	dq .undefined_object
   884                                  .undefined_object:
   885 00000B3E 05                      	db T_undefined
   886 00000B3F [F705000000000000]      	dq L_constants + 1527
   887                                  
   888                                  free_var_33:	; location of cddaar
   889 00000B47 [4F0B000000000000]      	dq .undefined_object
   890                                  .undefined_object:
   891 00000B4F 05                      	db T_undefined
   892 00000B50 [3507000000000000]      	dq L_constants + 1845
   893                                  
   894                                  free_var_34:	; location of cddadr
   895 00000B58 [600B000000000000]      	dq .undefined_object
   896                                  .undefined_object:
   897 00000B60 05                      	db T_undefined
   898 00000B61 [4407000000000000]      	dq L_constants + 1860
   899                                  
   900                                  free_var_35:	; location of cddar
   901 00000B69 [710B000000000000]      	dq .undefined_object
   902                                  .undefined_object:
   903 00000B71 05                      	db T_undefined
   904 00000B72 [6506000000000000]      	dq L_constants + 1637
   905                                  
   906                                  free_var_36:	; location of cdddar
   907 00000B7A [820B000000000000]      	dq .undefined_object
   908                                  .undefined_object:
   909 00000B82 05                      	db T_undefined
   910 00000B83 [5307000000000000]      	dq L_constants + 1875
   911                                  
   912                                  free_var_37:	; location of cddddr
   913 00000B8B [930B000000000000]      	dq .undefined_object
   914                                  .undefined_object:
   915 00000B93 05                      	db T_undefined
   916 00000B94 [6207000000000000]      	dq L_constants + 1890
   917                                  
   918                                  free_var_38:	; location of cdddr
   919 00000B9C [A40B000000000000]      	dq .undefined_object
   920                                  .undefined_object:
   921 00000BA4 05                      	db T_undefined
   922 00000BA5 [7306000000000000]      	dq L_constants + 1651
   923                                  
   924                                  free_var_39:	; location of cddr
   925 00000BAD [B50B000000000000]      	dq .undefined_object
   926                                  .undefined_object:
   927 00000BB5 05                      	db T_undefined
   928 00000BB6 [0406000000000000]      	dq L_constants + 1540
   929                                  
   930                                  free_var_40:	; location of cdr
   931 00000BBE [C60B000000000000]      	dq .undefined_object
   932                                  .undefined_object:
   933 00000BC6 05                      	db T_undefined
   934 00000BC7 [2101000000000000]      	dq L_constants + 289
   935                                  
   936                                  free_var_41:	; location of cons
   937 00000BCF [D70B000000000000]      	dq .undefined_object
   938                                  .undefined_object:
   939 00000BD7 05                      	db T_undefined
   940 00000BD8 [DF00000000000000]      	dq L_constants + 223
   941                                  
   942                                  free_var_42:	; location of error
   943 00000BE0 [E80B000000000000]      	dq .undefined_object
   944                                  .undefined_object:
   945 00000BE8 05                      	db T_undefined
   946 00000BE9 [1103000000000000]      	dq L_constants + 785
   947                                  
   948                                  free_var_43:	; location of fold-left
   949 00000BF1 [F90B000000000000]      	dq .undefined_object
   950                                  .undefined_object:
   951 00000BF9 05                      	db T_undefined
   952 00000BFA [1908000000000000]      	dq L_constants + 2073
   953                                  
   954                                  free_var_44:	; location of fold-right
   955 00000C02 [0A0C000000000000]      	dq .undefined_object
   956                                  .undefined_object:
   957 00000C0A 05                      	db T_undefined
   958 00000C0B [3A08000000000000]      	dq L_constants + 2106
   959                                  
   960                                  free_var_45:	; location of fraction->real
   961 00000C13 [1B0C000000000000]      	dq .undefined_object
   962                                  .undefined_object:
   963 00000C1B 05                      	db T_undefined
   964 00000C1C [9201000000000000]      	dq L_constants + 402
   965                                  
   966                                  free_var_46:	; location of fraction?
   967 00000C24 [2C0C000000000000]      	dq .undefined_object
   968                                  .undefined_object:
   969 00000C2C 05                      	db T_undefined
   970 00000C2D [9800000000000000]      	dq L_constants + 152
   971                                  
   972                                  free_var_47:	; location of free_var
   973 00000C35 [3D0C000000000000]      	dq .undefined_object
   974                                  .undefined_object:
   975 00000C3D 05                      	db T_undefined
   976 00000C3E [B408000000000000]      	dq L_constants + 2228
   977                                  
   978                                  free_var_48:	; location of free_var_lambda
   979 00000C46 [4E0C000000000000]      	dq .undefined_object
   980                                  .undefined_object:
   981 00000C4E 05                      	db T_undefined
   982 00000C4F [F508000000000000]      	dq L_constants + 2293
   983                                  
   984                                  free_var_49:	; location of integer->real
   985 00000C57 [5F0C000000000000]      	dq .undefined_object
   986                                  .undefined_object:
   987 00000C5F 05                      	db T_undefined
   988 00000C60 [7C01000000000000]      	dq L_constants + 380
   989                                  
   990                                  free_var_50:	; location of integer?
   991 00000C68 [700C000000000000]      	dq .undefined_object
   992                                  .undefined_object:
   993 00000C70 05                      	db T_undefined
   994 00000C71 [F001000000000000]      	dq L_constants + 496
   995                                  
   996                                  free_var_51:	; location of list
   997 00000C79 [810C000000000000]      	dq .undefined_object
   998                                  .undefined_object:
   999 00000C81 05                      	db T_undefined
  1000 00000C82 [7F07000000000000]      	dq L_constants + 1919
  1001                                  
  1002                                  free_var_52:	; location of list*
  1003 00000C8A [920C000000000000]      	dq .undefined_object
  1004                                  .undefined_object:
  1005 00000C92 05                      	db T_undefined
  1006 00000C93 [AA07000000000000]      	dq L_constants + 1962
  1007                                  
  1008                                  free_var_53:	; location of list?
  1009 00000C9B [A30C000000000000]      	dq .undefined_object
  1010                                  .undefined_object:
  1011 00000CA3 05                      	db T_undefined
  1012 00000CA4 [7107000000000000]      	dq L_constants + 1905
  1013                                  
  1014                                  free_var_54:	; location of map
  1015 00000CAC [B40C000000000000]      	dq .undefined_object
  1016                                  .undefined_object:
  1017 00000CB4 05                      	db T_undefined
  1018 00000CB5 [EE07000000000000]      	dq L_constants + 2030
  1019                                  
  1020                                  free_var_55:	; location of not
  1021 00000CBD [C50C000000000000]      	dq .undefined_object
  1022                                  .undefined_object:
  1023 00000CC5 05                      	db T_undefined
  1024 00000CC6 [8C07000000000000]      	dq L_constants + 1932
  1025                                  
  1026                                  free_var_56:	; location of null?
  1027 00000CCE [D60C000000000000]      	dq .undefined_object
  1028                                  .undefined_object:
  1029 00000CD6 05                      	db T_undefined
  1030 00000CD7 [0600000000000000]      	dq L_constants + 6
  1031                                  
  1032                                  free_var_57:	; location of ormap
  1033 00000CDF [E70C000000000000]      	dq .undefined_object
  1034                                  .undefined_object:
  1035 00000CE7 05                      	db T_undefined
  1036 00000CE8 [E007000000000000]      	dq L_constants + 2016
  1037                                  
  1038                                  free_var_58:	; location of pair?
  1039 00000CF0 [F80C000000000000]      	dq .undefined_object
  1040                                  .undefined_object:
  1041 00000CF8 05                      	db T_undefined
  1042 00000CF9 [1400000000000000]      	dq L_constants + 20
  1043                                  
  1044                                  free_var_59:	; location of rational?
  1045 00000D01 [090D000000000000]      	dq .undefined_object
  1046                                  .undefined_object:
  1047 00000D09 05                      	db T_undefined
  1048 00000D0A [9807000000000000]      	dq L_constants + 1944
  1049                                  
  1050                                  free_var_60:	; location of real?
  1051 00000D12 [1A0D000000000000]      	dq .undefined_object
  1052                                  .undefined_object:
  1053 00000D1A 05                      	db T_undefined
  1054 00000D1B [8A00000000000000]      	dq L_constants + 138
  1055                                  
  1056                                  free_var_61:	; location of reverse
  1057 00000D23 [2B0D000000000000]      	dq .undefined_object
  1058                                  .undefined_object:
  1059 00000D2B 05                      	db T_undefined
  1060 00000D2C [0908000000000000]      	dq L_constants + 2057
  1061                                  
  1062                                  free_var_62:	; location of tail_lambda
  1063 00000D34 [3C0D000000000000]      	dq .undefined_object
  1064                                  .undefined_object:
  1065 00000D3C 05                      	db T_undefined
  1066 00000D3D [CE08000000000000]      	dq L_constants + 2254
  1067                                  
  1068                                  
  1069                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
  1070                                  global main
  1071                                  section .text
  1072                                  main:
  1073 00000000 C8000000                        enter 0, 0
  1074 00000004 6A00                            push 0
  1075 00000006 6A00                            push 0
  1076 00000008 68[80670000]                    push Lend
  1077 0000000D C8000000                        enter 0, 0
  1078                                  	; building closure for null?
  1079 00000011 48BF-                   	mov rdi, free_var_56
  1079 00000013 [CE0C000000000000] 
  1080 0000001B 48BE-                   	mov rsi, L_code_ptr_is_null
  1080 0000001D [1273000000000000] 
  1081 00000025 E8F1700000              	call bind_primitive
  1082                                  
  1083                                  	; building closure for pair?
  1084 0000002A 48BF-                   	mov rdi, free_var_58
  1084 0000002C [F00C000000000000] 
  1085 00000034 48BE-                   	mov rsi, L_code_ptr_is_pair
  1085 00000036 [4473000000000000] 
  1086 0000003E E8D8700000              	call bind_primitive
  1087                                  
  1088                                  	; building closure for real?
  1089 00000043 48BF-                   	mov rdi, free_var_60
  1089 00000045 [120D000000000000] 
  1090 0000004D 48BE-                   	mov rsi, L_code_ptr_is_real
  1090 0000004F [3C75000000000000] 
  1091 00000057 E8BF700000              	call bind_primitive
  1092                                  
  1093                                  	; building closure for fraction?
  1094 0000005C 48BF-                   	mov rdi, free_var_46
  1094 0000005E [240C000000000000] 
  1095 00000066 48BE-                   	mov rsi, L_code_ptr_is_fraction
  1095 00000068 [6E75000000000000] 
  1096 00000070 E8A6700000              	call bind_primitive
  1097                                  
  1098                                  	; building closure for cons
  1099 00000075 48BF-                   	mov rdi, free_var_41
  1099 00000077 [CF0B000000000000] 
  1100 0000007F 48BE-                   	mov rsi, L_code_ptr_cons
  1100 00000081 [A476000000000000] 
  1101 00000089 E88D700000              	call bind_primitive
  1102                                  
  1103                                  	; building closure for car
  1104 0000008E 48BF-                   	mov rdi, free_var_25
  1104 00000090 [BF0A000000000000] 
  1105 00000098 48BE-                   	mov rsi, L_code_ptr_car
  1105 0000009A [4D77000000000000] 
  1106 000000A2 E874700000              	call bind_primitive
  1107                                  
  1108                                  	; building closure for cdr
  1109 000000A7 48BF-                   	mov rdi, free_var_40
  1109 000000A9 [BE0B000000000000] 
  1110 000000B1 48BE-                   	mov rsi, L_code_ptr_cdr
  1110 000000B3 [7177000000000000] 
  1111 000000BB E85B700000              	call bind_primitive
  1112                                  
  1113                                  	; building closure for integer->real
  1114 000000C0 48BF-                   	mov rdi, free_var_49
  1114 000000C2 [570C000000000000] 
  1115 000000CA 48BE-                   	mov rsi, L_code_ptr_integer_to_real
  1115 000000CC [2F78000000000000] 
  1116 000000D4 E842700000              	call bind_primitive
  1117                                  
  1118                                  	; building closure for fraction->real
  1119 000000D9 48BF-                   	mov rdi, free_var_45
  1119 000000DB [130C000000000000] 
  1120 000000E3 48BE-                   	mov rsi, L_code_ptr_fraction_to_real
  1120 000000E5 [5D78000000000000] 
  1121 000000ED E829700000              	call bind_primitive
  1122                                  
  1123                                  	; building closure for integer?
  1124 000000F2 48BF-                   	mov rdi, free_var_50
  1124 000000F4 [680C000000000000] 
  1125 000000FC 48BE-                   	mov rsi, L_code_ptr_is_integer
  1125 000000FE [D679000000000000] 
  1126 00000106 E810700000              	call bind_primitive
  1127                                  
  1128                                  	; building closure for __bin-apply
  1129 0000010B 48BF-                   	mov rdi, free_var_4
  1129 0000010D [5A09000000000000] 
  1130 00000115 48BE-                   	mov rsi, L_code_ptr_bin_apply
  1130 00000117 [8B72000000000000] 
  1131 0000011F E8F76F0000              	call bind_primitive
  1132                                  
  1133                                  	; building closure for __bin-add-rr
  1134 00000124 48BF-                   	mov rdi, free_var_2
  1134 00000126 [3809000000000000] 
  1135 0000012E 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
  1135 00000130 [087A000000000000] 
  1136 00000138 E8DE6F0000              	call bind_primitive
  1137                                  
  1138                                  	; building closure for __bin-add-qq
  1139 0000013D 48BF-                   	mov rdi, free_var_1
  1139 0000013F [2709000000000000] 
  1140 00000147 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
  1140 00000149 [527B000000000000] 
  1141 00000151 E8C56F0000              	call bind_primitive
  1142                                  
  1143                                  	; building closure for __bin-add-zz
  1144 00000156 48BF-                   	mov rdi, free_var_3
  1144 00000158 [4909000000000000] 
  1145 00000160 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_zz
  1145 00000162 [167B000000000000] 
  1146 0000016A E8AC6F0000              	call bind_primitive
  1147                                  
  1148                                  	; building closure for error
  1149 0000016F 48BF-                   	mov rdi, free_var_42
  1149 00000171 [E00B000000000000] 
  1150 00000179 48BE-                   	mov rsi, L_code_ptr_error
  1150 0000017B [1B7E000000000000] 
  1151 00000183 E8936F0000              	call bind_primitive
  1152                                  
  1153                                  	; building closure for __integer-to-fraction
  1154 00000188 48BF-                   	mov rdi, free_var_6
  1154 0000018A [7C09000000000000] 
  1155 00000192 48BE-                   	mov rsi, L_code_ptr_integer_to_fraction
  1155 00000194 [C978000000000000] 
  1156 0000019C E87A6F0000              	call bind_primitive
  1157                                  
  1158 000001A1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1159 000001A6 E840670000              	call malloc
  1160 000001AB 50                      	push rax
  1161 000001AC BF00000000              	mov rdi, 8 * 0	; new rib
  1162 000001B1 E835670000              	call malloc
  1163 000001B6 50                      	push rax
  1164 000001B7 BF08000000              	mov rdi, 8 * 1	; extended env
  1165 000001BC E82A670000              	call malloc
  1166 000001C1 488B7D10                	mov rdi, ENV
  1167 000001C5 BE00000000              	mov rsi, 0
  1168 000001CA BA01000000              	mov rdx, 1
  1169                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
  1170 000001CF 4883FE00                	cmp rsi, 0
  1171 000001D3 7410                    	je .L_lambda_simple_env_end_0001
  1172 000001D5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1173 000001D9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1174 000001DD 48FFC6                  	inc rsi
  1175 000001E0 48FFC2                  	inc rdx
  1176 000001E3 EBEA                    	jmp .L_lambda_simple_env_loop_0001
  1177                                  .L_lambda_simple_env_end_0001:
  1178 000001E5 5B                      	pop rbx
  1179 000001E6 BE00000000              	mov rsi, 0
  1180                                  .L_lambda_simple_params_loop_0001:	; copy params
  1181 000001EB 4883FE00                	cmp rsi, 0
  1182 000001EF 740E                    	je .L_lambda_simple_params_end_0001
  1183 000001F1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1184 000001F6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1185 000001FA 48FFC6                  	inc rsi
  1186 000001FD EBEC                    	jmp .L_lambda_simple_params_loop_0001
  1187                                  .L_lambda_simple_params_end_0001:
  1188 000001FF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1189 00000202 4889C3                  	mov rbx, rax
  1190 00000205 58                      	pop rax
  1191 00000206 C60004                  	mov byte [rax], T_closure
  1192 00000209 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1193 0000020D 48C74009[1A020000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
  1194 00000215 E9A4000000              	jmp .L_lambda_simple_end_0001
  1195                                  .L_lambda_simple_code_0001:	; lambda-simple body
  1196 0000021A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1197 00000220 740B                    	je .L_lambda_simple_arity_check_ok_0001
  1198 00000222 FF742410                	push qword [rsp + 8 * 2]
  1199 00000226 6A01                    	push 1
  1200 00000228 E977660000              	jmp L_error_incorrect_arity_simple
  1201                                  .L_lambda_simple_arity_check_ok_0001:
  1202 0000022D C8000000                	enter 0, 0
  1203                                  	; preparing a tail-call
  1204                                  	; preparing a non-tail-call
  1205 00000231 488B4520                	mov rax, PARAM(0)	; param x
  1206 00000235 50                      	push rax
  1207 00000236 6A01                    	push 1	; arg count
  1208 00000238 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  1209 00000240 803805                  	cmp byte [rax], T_undefined
  1210 00000243 0F8475650000            	je L_error_fvar_undefined
  1211 00000249 803804                  	cmp byte [rax], T_closure
  1212 0000024C 0F85F0650000            	jne L_error_non_closure
  1213 00000252 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1214 00000255 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1215 00000258 50                      	push rax
  1216 00000259 6A01                    	push 1	; arg count
  1217 0000025B 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  1218 00000263 803805                  	cmp byte [rax], T_undefined
  1219 00000266 0F8452650000            	je L_error_fvar_undefined
  1220 0000026C 803804                  	cmp byte [rax], T_closure
  1221 0000026F 0F85CD650000            	jne L_error_non_closure
  1222 00000275 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1223 00000278 FF7508                  	push qword [rbp + 8 * 1]
  1224                                   ; old ret addr
  1225 0000027B FF7500                  	push qword [rbp]
  1226                                   ; restore the old rbp
  1227 0000027E BB01000000              	mov rbx, 1
  1228 00000283 4883C303                	add rbx, 3
  1229 00000287 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1230 0000028B 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1231 00000290 4C8D4DF8                	lea r9, [rbp - 8]
  1232 00000294 B905000000              	mov rcx, 5
  1233                                  .L_tc_recycle_frame_loop_0001:
  1234 00000299 4883F900                	cmp rcx, 0
  1235 0000029D 7413                    	je .L_tc_recycle_frame_done_0001
  1236 0000029F 4D8B11                  	mov r10, qword [r9]
  1237 000002A2 4D8910                  	mov qword [r8], r10
  1238 000002A5 4983E808                	sub r8, 8
  1239 000002A9 4983E908                	sub r9, 8
  1240 000002AD 48FFC9                  	dec rcx
  1241 000002B0 EBE7                    	jmp .L_tc_recycle_frame_loop_0001
  1242                                  .L_tc_recycle_frame_done_0001:
  1243 000002B2 498D6008                	lea rsp, [r8 + 8]
  1244 000002B6 5D                      	pop rbp ; restore the old rbp
  1245 000002B7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1246 000002BA C9                      	leave
  1247 000002BB C21800                  	ret AND_KILL_FRAME(1)
  1248                                  .L_lambda_simple_end_0001:	; new closure is in rax
  1249 000002BE 48890425[370A0000]      	mov qword [free_var_17], rax
  1250 000002C6 48B8-                   	mov rax, sob_void
  1250 000002C8 [0000000000000000] 
  1251                                  
  1252 000002D0 4889C7                  	mov rdi, rax
  1253 000002D3 E868680000              	call print_sexpr_if_not_void
  1254 000002D8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1255 000002DD E809660000              	call malloc
  1256 000002E2 50                      	push rax
  1257 000002E3 BF00000000              	mov rdi, 8 * 0	; new rib
  1258 000002E8 E8FE650000              	call malloc
  1259 000002ED 50                      	push rax
  1260 000002EE BF08000000              	mov rdi, 8 * 1	; extended env
  1261 000002F3 E8F3650000              	call malloc
  1262 000002F8 488B7D10                	mov rdi, ENV
  1263 000002FC BE00000000              	mov rsi, 0
  1264 00000301 BA01000000              	mov rdx, 1
  1265                                  .L_lambda_simple_env_loop_0002:	; ext_env[i + 1] <-- env[i]
  1266 00000306 4883FE00                	cmp rsi, 0
  1267 0000030A 7410                    	je .L_lambda_simple_env_end_0002
  1268 0000030C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1269 00000310 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1270 00000314 48FFC6                  	inc rsi
  1271 00000317 48FFC2                  	inc rdx
  1272 0000031A EBEA                    	jmp .L_lambda_simple_env_loop_0002
  1273                                  .L_lambda_simple_env_end_0002:
  1274 0000031C 5B                      	pop rbx
  1275 0000031D BE00000000              	mov rsi, 0
  1276                                  .L_lambda_simple_params_loop_0002:	; copy params
  1277 00000322 4883FE00                	cmp rsi, 0
  1278 00000326 740E                    	je .L_lambda_simple_params_end_0002
  1279 00000328 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1280 0000032D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1281 00000331 48FFC6                  	inc rsi
  1282 00000334 EBEC                    	jmp .L_lambda_simple_params_loop_0002
  1283                                  .L_lambda_simple_params_end_0002:
  1284 00000336 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1285 00000339 4889C3                  	mov rbx, rax
  1286 0000033C 58                      	pop rax
  1287 0000033D C60004                  	mov byte [rax], T_closure
  1288 00000340 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1289 00000344 48C74009[51030000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0002
  1290 0000034C E9A4000000              	jmp .L_lambda_simple_end_0002
  1291                                  .L_lambda_simple_code_0002:	; lambda-simple body
  1292 00000351 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1293 00000357 740B                    	je .L_lambda_simple_arity_check_ok_0002
  1294 00000359 FF742410                	push qword [rsp + 8 * 2]
  1295 0000035D 6A01                    	push 1
  1296 0000035F E940650000              	jmp L_error_incorrect_arity_simple
  1297                                  .L_lambda_simple_arity_check_ok_0002:
  1298 00000364 C8000000                	enter 0, 0
  1299                                  	; preparing a tail-call
  1300                                  	; preparing a non-tail-call
  1301 00000368 488B4520                	mov rax, PARAM(0)	; param x
  1302 0000036C 50                      	push rax
  1303 0000036D 6A01                    	push 1	; arg count
  1304 0000036F 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  1305 00000377 803805                  	cmp byte [rax], T_undefined
  1306 0000037A 0F843E640000            	je L_error_fvar_undefined
  1307 00000380 803804                  	cmp byte [rax], T_closure
  1308 00000383 0F85B9640000            	jne L_error_non_closure
  1309 00000389 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1310 0000038C FF5009                  	call SOB_CLOSURE_CODE(rax)
  1311 0000038F 50                      	push rax
  1312 00000390 6A01                    	push 1	; arg count
  1313 00000392 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  1314 0000039A 803805                  	cmp byte [rax], T_undefined
  1315 0000039D 0F841B640000            	je L_error_fvar_undefined
  1316 000003A3 803804                  	cmp byte [rax], T_closure
  1317 000003A6 0F8596640000            	jne L_error_non_closure
  1318 000003AC FF7001                  	push SOB_CLOSURE_ENV(rax)
  1319 000003AF FF7508                  	push qword [rbp + 8 * 1]
  1320                                   ; old ret addr
  1321 000003B2 FF7500                  	push qword [rbp]
  1322                                   ; restore the old rbp
  1323 000003B5 BB01000000              	mov rbx, 1
  1324 000003BA 4883C303                	add rbx, 3
  1325 000003BE 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1326 000003C2 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1327 000003C7 4C8D4DF8                	lea r9, [rbp - 8]
  1328 000003CB B905000000              	mov rcx, 5
  1329                                  .L_tc_recycle_frame_loop_0002:
  1330 000003D0 4883F900                	cmp rcx, 0
  1331 000003D4 7413                    	je .L_tc_recycle_frame_done_0002
  1332 000003D6 4D8B11                  	mov r10, qword [r9]
  1333 000003D9 4D8910                  	mov qword [r8], r10
  1334 000003DC 4983E808                	sub r8, 8
  1335 000003E0 4983E908                	sub r9, 8
  1336 000003E4 48FFC9                  	dec rcx
  1337 000003E7 EBE7                    	jmp .L_tc_recycle_frame_loop_0002
  1338                                  .L_tc_recycle_frame_done_0002:
  1339 000003E9 498D6008                	lea rsp, [r8 + 8]
  1340 000003ED 5D                      	pop rbp ; restore the old rbp
  1341 000003EE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1342 000003F1 C9                      	leave
  1343 000003F2 C21800                  	ret AND_KILL_FRAME(1)
  1344                                  .L_lambda_simple_end_0002:	; new closure is in rax
  1345 000003F5 48890425[AE0A0000]      	mov qword [free_var_24], rax
  1346 000003FD 48B8-                   	mov rax, sob_void
  1346 000003FF [0000000000000000] 
  1347                                  
  1348 00000407 4889C7                  	mov rdi, rax
  1349 0000040A E831670000              	call print_sexpr_if_not_void
  1350 0000040F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1351 00000414 E8D2640000              	call malloc
  1352 00000419 50                      	push rax
  1353 0000041A BF00000000              	mov rdi, 8 * 0	; new rib
  1354 0000041F E8C7640000              	call malloc
  1355 00000424 50                      	push rax
  1356 00000425 BF08000000              	mov rdi, 8 * 1	; extended env
  1357 0000042A E8BC640000              	call malloc
  1358 0000042F 488B7D10                	mov rdi, ENV
  1359 00000433 BE00000000              	mov rsi, 0
  1360 00000438 BA01000000              	mov rdx, 1
  1361                                  .L_lambda_simple_env_loop_0003:	; ext_env[i + 1] <-- env[i]
  1362 0000043D 4883FE00                	cmp rsi, 0
  1363 00000441 7410                    	je .L_lambda_simple_env_end_0003
  1364 00000443 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1365 00000447 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1366 0000044B 48FFC6                  	inc rsi
  1367 0000044E 48FFC2                  	inc rdx
  1368 00000451 EBEA                    	jmp .L_lambda_simple_env_loop_0003
  1369                                  .L_lambda_simple_env_end_0003:
  1370 00000453 5B                      	pop rbx
  1371 00000454 BE00000000              	mov rsi, 0
  1372                                  .L_lambda_simple_params_loop_0003:	; copy params
  1373 00000459 4883FE00                	cmp rsi, 0
  1374 0000045D 740E                    	je .L_lambda_simple_params_end_0003
  1375 0000045F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1376 00000464 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1377 00000468 48FFC6                  	inc rsi
  1378 0000046B EBEC                    	jmp .L_lambda_simple_params_loop_0003
  1379                                  .L_lambda_simple_params_end_0003:
  1380 0000046D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1381 00000470 4889C3                  	mov rbx, rax
  1382 00000473 58                      	pop rax
  1383 00000474 C60004                  	mov byte [rax], T_closure
  1384 00000477 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1385 0000047B 48C74009[88040000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0003
  1386 00000483 E9A4000000              	jmp .L_lambda_simple_end_0003
  1387                                  .L_lambda_simple_code_0003:	; lambda-simple body
  1388 00000488 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1389 0000048E 740B                    	je .L_lambda_simple_arity_check_ok_0003
  1390 00000490 FF742410                	push qword [rsp + 8 * 2]
  1391 00000494 6A01                    	push 1
  1392 00000496 E909640000              	jmp L_error_incorrect_arity_simple
  1393                                  .L_lambda_simple_arity_check_ok_0003:
  1394 0000049B C8000000                	enter 0, 0
  1395                                  	; preparing a tail-call
  1396                                  	; preparing a non-tail-call
  1397 0000049F 488B4520                	mov rax, PARAM(0)	; param x
  1398 000004A3 50                      	push rax
  1399 000004A4 6A01                    	push 1	; arg count
  1400 000004A6 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  1401 000004AE 803805                  	cmp byte [rax], T_undefined
  1402 000004B1 0F8407630000            	je L_error_fvar_undefined
  1403 000004B7 803804                  	cmp byte [rax], T_closure
  1404 000004BA 0F8582630000            	jne L_error_non_closure
  1405 000004C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1406 000004C3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1407 000004C6 50                      	push rax
  1408 000004C7 6A01                    	push 1	; arg count
  1409 000004C9 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  1410 000004D1 803805                  	cmp byte [rax], T_undefined
  1411 000004D4 0F84E4620000            	je L_error_fvar_undefined
  1412 000004DA 803804                  	cmp byte [rax], T_closure
  1413 000004DD 0F855F630000            	jne L_error_non_closure
  1414 000004E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1415 000004E6 FF7508                  	push qword [rbp + 8 * 1]
  1416                                   ; old ret addr
  1417 000004E9 FF7500                  	push qword [rbp]
  1418                                   ; restore the old rbp
  1419 000004EC BB01000000              	mov rbx, 1
  1420 000004F1 4883C303                	add rbx, 3
  1421 000004F5 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1422 000004F9 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1423 000004FE 4C8D4DF8                	lea r9, [rbp - 8]
  1424 00000502 B905000000              	mov rcx, 5
  1425                                  .L_tc_recycle_frame_loop_0003:
  1426 00000507 4883F900                	cmp rcx, 0
  1427 0000050B 7413                    	je .L_tc_recycle_frame_done_0003
  1428 0000050D 4D8B11                  	mov r10, qword [r9]
  1429 00000510 4D8910                  	mov qword [r8], r10
  1430 00000513 4983E808                	sub r8, 8
  1431 00000517 4983E908                	sub r9, 8
  1432 0000051B 48FFC9                  	dec rcx
  1433 0000051E EBE7                    	jmp .L_tc_recycle_frame_loop_0003
  1434                                  .L_tc_recycle_frame_done_0003:
  1435 00000520 498D6008                	lea rsp, [r8 + 8]
  1436 00000524 5D                      	pop rbp ; restore the old rbp
  1437 00000525 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1438 00000528 C9                      	leave
  1439 00000529 C21800                  	ret AND_KILL_FRAME(1)
  1440                                  .L_lambda_simple_end_0003:	; new closure is in rax
  1441 0000052C 48890425[360B0000]      	mov qword [free_var_32], rax
  1442 00000534 48B8-                   	mov rax, sob_void
  1442 00000536 [0000000000000000] 
  1443                                  
  1444 0000053E 4889C7                  	mov rdi, rax
  1445 00000541 E8FA650000              	call print_sexpr_if_not_void
  1446 00000546 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1447 0000054B E89B630000              	call malloc
  1448 00000550 50                      	push rax
  1449 00000551 BF00000000              	mov rdi, 8 * 0	; new rib
  1450 00000556 E890630000              	call malloc
  1451 0000055B 50                      	push rax
  1452 0000055C BF08000000              	mov rdi, 8 * 1	; extended env
  1453 00000561 E885630000              	call malloc
  1454 00000566 488B7D10                	mov rdi, ENV
  1455 0000056A BE00000000              	mov rsi, 0
  1456 0000056F BA01000000              	mov rdx, 1
  1457                                  .L_lambda_simple_env_loop_0004:	; ext_env[i + 1] <-- env[i]
  1458 00000574 4883FE00                	cmp rsi, 0
  1459 00000578 7410                    	je .L_lambda_simple_env_end_0004
  1460 0000057A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1461 0000057E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1462 00000582 48FFC6                  	inc rsi
  1463 00000585 48FFC2                  	inc rdx
  1464 00000588 EBEA                    	jmp .L_lambda_simple_env_loop_0004
  1465                                  .L_lambda_simple_env_end_0004:
  1466 0000058A 5B                      	pop rbx
  1467 0000058B BE00000000              	mov rsi, 0
  1468                                  .L_lambda_simple_params_loop_0004:	; copy params
  1469 00000590 4883FE00                	cmp rsi, 0
  1470 00000594 740E                    	je .L_lambda_simple_params_end_0004
  1471 00000596 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1472 0000059B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1473 0000059F 48FFC6                  	inc rsi
  1474 000005A2 EBEC                    	jmp .L_lambda_simple_params_loop_0004
  1475                                  .L_lambda_simple_params_end_0004:
  1476 000005A4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1477 000005A7 4889C3                  	mov rbx, rax
  1478 000005AA 58                      	pop rax
  1479 000005AB C60004                  	mov byte [rax], T_closure
  1480 000005AE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1481 000005B2 48C74009[BF050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0004
  1482 000005BA E9A4000000              	jmp .L_lambda_simple_end_0004
  1483                                  .L_lambda_simple_code_0004:	; lambda-simple body
  1484 000005BF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1485 000005C5 740B                    	je .L_lambda_simple_arity_check_ok_0004
  1486 000005C7 FF742410                	push qword [rsp + 8 * 2]
  1487 000005CB 6A01                    	push 1
  1488 000005CD E9D2620000              	jmp L_error_incorrect_arity_simple
  1489                                  .L_lambda_simple_arity_check_ok_0004:
  1490 000005D2 C8000000                	enter 0, 0
  1491                                  	; preparing a tail-call
  1492                                  	; preparing a non-tail-call
  1493 000005D6 488B4520                	mov rax, PARAM(0)	; param x
  1494 000005DA 50                      	push rax
  1495 000005DB 6A01                    	push 1	; arg count
  1496 000005DD 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  1497 000005E5 803805                  	cmp byte [rax], T_undefined
  1498 000005E8 0F84D0610000            	je L_error_fvar_undefined
  1499 000005EE 803804                  	cmp byte [rax], T_closure
  1500 000005F1 0F854B620000            	jne L_error_non_closure
  1501 000005F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1502 000005FA FF5009                  	call SOB_CLOSURE_CODE(rax)
  1503 000005FD 50                      	push rax
  1504 000005FE 6A01                    	push 1	; arg count
  1505 00000600 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  1506 00000608 803805                  	cmp byte [rax], T_undefined
  1507 0000060B 0F84AD610000            	je L_error_fvar_undefined
  1508 00000611 803804                  	cmp byte [rax], T_closure
  1509 00000614 0F8528620000            	jne L_error_non_closure
  1510 0000061A FF7001                  	push SOB_CLOSURE_ENV(rax)
  1511 0000061D FF7508                  	push qword [rbp + 8 * 1]
  1512                                   ; old ret addr
  1513 00000620 FF7500                  	push qword [rbp]
  1514                                   ; restore the old rbp
  1515 00000623 BB01000000              	mov rbx, 1
  1516 00000628 4883C303                	add rbx, 3
  1517 0000062C 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1518 00000630 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1519 00000635 4C8D4DF8                	lea r9, [rbp - 8]
  1520 00000639 B905000000              	mov rcx, 5
  1521                                  .L_tc_recycle_frame_loop_0004:
  1522 0000063E 4883F900                	cmp rcx, 0
  1523 00000642 7413                    	je .L_tc_recycle_frame_done_0004
  1524 00000644 4D8B11                  	mov r10, qword [r9]
  1525 00000647 4D8910                  	mov qword [r8], r10
  1526 0000064A 4983E808                	sub r8, 8
  1527 0000064E 4983E908                	sub r9, 8
  1528 00000652 48FFC9                  	dec rcx
  1529 00000655 EBE7                    	jmp .L_tc_recycle_frame_loop_0004
  1530                                  .L_tc_recycle_frame_done_0004:
  1531 00000657 498D6008                	lea rsp, [r8 + 8]
  1532 0000065B 5D                      	pop rbp ; restore the old rbp
  1533 0000065C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1534 0000065F C9                      	leave
  1535 00000660 C21800                  	ret AND_KILL_FRAME(1)
  1536                                  .L_lambda_simple_end_0004:	; new closure is in rax
  1537 00000663 48890425[AD0B0000]      	mov qword [free_var_39], rax
  1538 0000066B 48B8-                   	mov rax, sob_void
  1538 0000066D [0000000000000000] 
  1539                                  
  1540 00000675 4889C7                  	mov rdi, rax
  1541 00000678 E8C3640000              	call print_sexpr_if_not_void
  1542 0000067D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1543 00000682 E864620000              	call malloc
  1544 00000687 50                      	push rax
  1545 00000688 BF00000000              	mov rdi, 8 * 0	; new rib
  1546 0000068D E859620000              	call malloc
  1547 00000692 50                      	push rax
  1548 00000693 BF08000000              	mov rdi, 8 * 1	; extended env
  1549 00000698 E84E620000              	call malloc
  1550 0000069D 488B7D10                	mov rdi, ENV
  1551 000006A1 BE00000000              	mov rsi, 0
  1552 000006A6 BA01000000              	mov rdx, 1
  1553                                  .L_lambda_simple_env_loop_0005:	; ext_env[i + 1] <-- env[i]
  1554 000006AB 4883FE00                	cmp rsi, 0
  1555 000006AF 7410                    	je .L_lambda_simple_env_end_0005
  1556 000006B1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1557 000006B5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1558 000006B9 48FFC6                  	inc rsi
  1559 000006BC 48FFC2                  	inc rdx
  1560 000006BF EBEA                    	jmp .L_lambda_simple_env_loop_0005
  1561                                  .L_lambda_simple_env_end_0005:
  1562 000006C1 5B                      	pop rbx
  1563 000006C2 BE00000000              	mov rsi, 0
  1564                                  .L_lambda_simple_params_loop_0005:	; copy params
  1565 000006C7 4883FE00                	cmp rsi, 0
  1566 000006CB 740E                    	je .L_lambda_simple_params_end_0005
  1567 000006CD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1568 000006D2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1569 000006D6 48FFC6                  	inc rsi
  1570 000006D9 EBEC                    	jmp .L_lambda_simple_params_loop_0005
  1571                                  .L_lambda_simple_params_end_0005:
  1572 000006DB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1573 000006DE 4889C3                  	mov rbx, rax
  1574 000006E1 58                      	pop rax
  1575 000006E2 C60004                  	mov byte [rax], T_closure
  1576 000006E5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1577 000006E9 48C74009[F6060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0005
  1578 000006F1 E9A4000000              	jmp .L_lambda_simple_end_0005
  1579                                  .L_lambda_simple_code_0005:	; lambda-simple body
  1580 000006F6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1581 000006FC 740B                    	je .L_lambda_simple_arity_check_ok_0005
  1582 000006FE FF742410                	push qword [rsp + 8 * 2]
  1583 00000702 6A01                    	push 1
  1584 00000704 E99B610000              	jmp L_error_incorrect_arity_simple
  1585                                  .L_lambda_simple_arity_check_ok_0005:
  1586 00000709 C8000000                	enter 0, 0
  1587                                  	; preparing a tail-call
  1588                                  	; preparing a non-tail-call
  1589 0000070D 488B4520                	mov rax, PARAM(0)	; param x
  1590 00000711 50                      	push rax
  1591 00000712 6A01                    	push 1	; arg count
  1592 00000714 488B0425[370A0000]      	mov rax, qword [free_var_17]	; free var caar
  1593 0000071C 803805                  	cmp byte [rax], T_undefined
  1594 0000071F 0F8499600000            	je L_error_fvar_undefined
  1595 00000725 803804                  	cmp byte [rax], T_closure
  1596 00000728 0F8514610000            	jne L_error_non_closure
  1597 0000072E FF7001                  	push SOB_CLOSURE_ENV(rax)
  1598 00000731 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1599 00000734 50                      	push rax
  1600 00000735 6A01                    	push 1	; arg count
  1601 00000737 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  1602 0000073F 803805                  	cmp byte [rax], T_undefined
  1603 00000742 0F8476600000            	je L_error_fvar_undefined
  1604 00000748 803804                  	cmp byte [rax], T_closure
  1605 0000074B 0F85F1600000            	jne L_error_non_closure
  1606 00000751 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1607 00000754 FF7508                  	push qword [rbp + 8 * 1]
  1608                                   ; old ret addr
  1609 00000757 FF7500                  	push qword [rbp]
  1610                                   ; restore the old rbp
  1611 0000075A BB01000000              	mov rbx, 1
  1612 0000075F 4883C303                	add rbx, 3
  1613 00000763 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1614 00000767 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1615 0000076C 4C8D4DF8                	lea r9, [rbp - 8]
  1616 00000770 B905000000              	mov rcx, 5
  1617                                  .L_tc_recycle_frame_loop_0005:
  1618 00000775 4883F900                	cmp rcx, 0
  1619 00000779 7413                    	je .L_tc_recycle_frame_done_0005
  1620 0000077B 4D8B11                  	mov r10, qword [r9]
  1621 0000077E 4D8910                  	mov qword [r8], r10
  1622 00000781 4983E808                	sub r8, 8
  1623 00000785 4983E908                	sub r9, 8
  1624 00000789 48FFC9                  	dec rcx
  1625 0000078C EBE7                    	jmp .L_tc_recycle_frame_loop_0005
  1626                                  .L_tc_recycle_frame_done_0005:
  1627 0000078E 498D6008                	lea rsp, [r8 + 8]
  1628 00000792 5D                      	pop rbp ; restore the old rbp
  1629 00000793 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1630 00000796 C9                      	leave
  1631 00000797 C21800                  	ret AND_KILL_FRAME(1)
  1632                                  .L_lambda_simple_end_0005:	; new closure is in rax
  1633 0000079A 48890425[F3090000]      	mov qword [free_var_13], rax
  1634 000007A2 48B8-                   	mov rax, sob_void
  1634 000007A4 [0000000000000000] 
  1635                                  
  1636 000007AC 4889C7                  	mov rdi, rax
  1637 000007AF E88C630000              	call print_sexpr_if_not_void
  1638 000007B4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1639 000007B9 E82D610000              	call malloc
  1640 000007BE 50                      	push rax
  1641 000007BF BF00000000              	mov rdi, 8 * 0	; new rib
  1642 000007C4 E822610000              	call malloc
  1643 000007C9 50                      	push rax
  1644 000007CA BF08000000              	mov rdi, 8 * 1	; extended env
  1645 000007CF E817610000              	call malloc
  1646 000007D4 488B7D10                	mov rdi, ENV
  1647 000007D8 BE00000000              	mov rsi, 0
  1648 000007DD BA01000000              	mov rdx, 1
  1649                                  .L_lambda_simple_env_loop_0006:	; ext_env[i + 1] <-- env[i]
  1650 000007E2 4883FE00                	cmp rsi, 0
  1651 000007E6 7410                    	je .L_lambda_simple_env_end_0006
  1652 000007E8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1653 000007EC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1654 000007F0 48FFC6                  	inc rsi
  1655 000007F3 48FFC2                  	inc rdx
  1656 000007F6 EBEA                    	jmp .L_lambda_simple_env_loop_0006
  1657                                  .L_lambda_simple_env_end_0006:
  1658 000007F8 5B                      	pop rbx
  1659 000007F9 BE00000000              	mov rsi, 0
  1660                                  .L_lambda_simple_params_loop_0006:	; copy params
  1661 000007FE 4883FE00                	cmp rsi, 0
  1662 00000802 740E                    	je .L_lambda_simple_params_end_0006
  1663 00000804 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1664 00000809 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1665 0000080D 48FFC6                  	inc rsi
  1666 00000810 EBEC                    	jmp .L_lambda_simple_params_loop_0006
  1667                                  .L_lambda_simple_params_end_0006:
  1668 00000812 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1669 00000815 4889C3                  	mov rbx, rax
  1670 00000818 58                      	pop rax
  1671 00000819 C60004                  	mov byte [rax], T_closure
  1672 0000081C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1673 00000820 48C74009[2D080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0006
  1674 00000828 E9A4000000              	jmp .L_lambda_simple_end_0006
  1675                                  .L_lambda_simple_code_0006:	; lambda-simple body
  1676 0000082D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1677 00000833 740B                    	je .L_lambda_simple_arity_check_ok_0006
  1678 00000835 FF742410                	push qword [rsp + 8 * 2]
  1679 00000839 6A01                    	push 1
  1680 0000083B E964600000              	jmp L_error_incorrect_arity_simple
  1681                                  .L_lambda_simple_arity_check_ok_0006:
  1682 00000840 C8000000                	enter 0, 0
  1683                                  	; preparing a tail-call
  1684                                  	; preparing a non-tail-call
  1685 00000844 488B4520                	mov rax, PARAM(0)	; param x
  1686 00000848 50                      	push rax
  1687 00000849 6A01                    	push 1	; arg count
  1688 0000084B 488B0425[AE0A0000]      	mov rax, qword [free_var_24]	; free var cadr
  1689 00000853 803805                  	cmp byte [rax], T_undefined
  1690 00000856 0F84625F0000            	je L_error_fvar_undefined
  1691 0000085C 803804                  	cmp byte [rax], T_closure
  1692 0000085F 0F85DD5F0000            	jne L_error_non_closure
  1693 00000865 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1694 00000868 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1695 0000086B 50                      	push rax
  1696 0000086C 6A01                    	push 1	; arg count
  1697 0000086E 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  1698 00000876 803805                  	cmp byte [rax], T_undefined
  1699 00000879 0F843F5F0000            	je L_error_fvar_undefined
  1700 0000087F 803804                  	cmp byte [rax], T_closure
  1701 00000882 0F85BA5F0000            	jne L_error_non_closure
  1702 00000888 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1703 0000088B FF7508                  	push qword [rbp + 8 * 1]
  1704                                   ; old ret addr
  1705 0000088E FF7500                  	push qword [rbp]
  1706                                   ; restore the old rbp
  1707 00000891 BB01000000              	mov rbx, 1
  1708 00000896 4883C303                	add rbx, 3
  1709 0000089A 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1710 0000089E 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1711 000008A3 4C8D4DF8                	lea r9, [rbp - 8]
  1712 000008A7 B905000000              	mov rcx, 5
  1713                                  .L_tc_recycle_frame_loop_0006:
  1714 000008AC 4883F900                	cmp rcx, 0
  1715 000008B0 7413                    	je .L_tc_recycle_frame_done_0006
  1716 000008B2 4D8B11                  	mov r10, qword [r9]
  1717 000008B5 4D8910                  	mov qword [r8], r10
  1718 000008B8 4983E808                	sub r8, 8
  1719 000008BC 4983E908                	sub r9, 8
  1720 000008C0 48FFC9                  	dec rcx
  1721 000008C3 EBE7                    	jmp .L_tc_recycle_frame_loop_0006
  1722                                  .L_tc_recycle_frame_done_0006:
  1723 000008C5 498D6008                	lea rsp, [r8 + 8]
  1724 000008C9 5D                      	pop rbp ; restore the old rbp
  1725 000008CA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1726 000008CD C9                      	leave
  1727 000008CE C21800                  	ret AND_KILL_FRAME(1)
  1728                                  .L_lambda_simple_end_0006:	; new closure is in rax
  1729 000008D1 48890425[260A0000]      	mov qword [free_var_16], rax
  1730 000008D9 48B8-                   	mov rax, sob_void
  1730 000008DB [0000000000000000] 
  1731                                  
  1732 000008E3 4889C7                  	mov rdi, rax
  1733 000008E6 E855620000              	call print_sexpr_if_not_void
  1734 000008EB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1735 000008F0 E8F65F0000              	call malloc
  1736 000008F5 50                      	push rax
  1737 000008F6 BF00000000              	mov rdi, 8 * 0	; new rib
  1738 000008FB E8EB5F0000              	call malloc
  1739 00000900 50                      	push rax
  1740 00000901 BF08000000              	mov rdi, 8 * 1	; extended env
  1741 00000906 E8E05F0000              	call malloc
  1742 0000090B 488B7D10                	mov rdi, ENV
  1743 0000090F BE00000000              	mov rsi, 0
  1744 00000914 BA01000000              	mov rdx, 1
  1745                                  .L_lambda_simple_env_loop_0007:	; ext_env[i + 1] <-- env[i]
  1746 00000919 4883FE00                	cmp rsi, 0
  1747 0000091D 7410                    	je .L_lambda_simple_env_end_0007
  1748 0000091F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1749 00000923 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1750 00000927 48FFC6                  	inc rsi
  1751 0000092A 48FFC2                  	inc rdx
  1752 0000092D EBEA                    	jmp .L_lambda_simple_env_loop_0007
  1753                                  .L_lambda_simple_env_end_0007:
  1754 0000092F 5B                      	pop rbx
  1755 00000930 BE00000000              	mov rsi, 0
  1756                                  .L_lambda_simple_params_loop_0007:	; copy params
  1757 00000935 4883FE00                	cmp rsi, 0
  1758 00000939 740E                    	je .L_lambda_simple_params_end_0007
  1759 0000093B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1760 00000940 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1761 00000944 48FFC6                  	inc rsi
  1762 00000947 EBEC                    	jmp .L_lambda_simple_params_loop_0007
  1763                                  .L_lambda_simple_params_end_0007:
  1764 00000949 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1765 0000094C 4889C3                  	mov rbx, rax
  1766 0000094F 58                      	pop rax
  1767 00000950 C60004                  	mov byte [rax], T_closure
  1768 00000953 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1769 00000957 48C74009[64090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0007
  1770 0000095F E9A4000000              	jmp .L_lambda_simple_end_0007
  1771                                  .L_lambda_simple_code_0007:	; lambda-simple body
  1772 00000964 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1773 0000096A 740B                    	je .L_lambda_simple_arity_check_ok_0007
  1774 0000096C FF742410                	push qword [rsp + 8 * 2]
  1775 00000970 6A01                    	push 1
  1776 00000972 E92D5F0000              	jmp L_error_incorrect_arity_simple
  1777                                  .L_lambda_simple_arity_check_ok_0007:
  1778 00000977 C8000000                	enter 0, 0
  1779                                  	; preparing a tail-call
  1780                                  	; preparing a non-tail-call
  1781 0000097B 488B4520                	mov rax, PARAM(0)	; param x
  1782 0000097F 50                      	push rax
  1783 00000980 6A01                    	push 1	; arg count
  1784 00000982 488B0425[360B0000]      	mov rax, qword [free_var_32]	; free var cdar
  1785 0000098A 803805                  	cmp byte [rax], T_undefined
  1786 0000098D 0F842B5E0000            	je L_error_fvar_undefined
  1787 00000993 803804                  	cmp byte [rax], T_closure
  1788 00000996 0F85A65E0000            	jne L_error_non_closure
  1789 0000099C FF7001                  	push SOB_CLOSURE_ENV(rax)
  1790 0000099F FF5009                  	call SOB_CLOSURE_CODE(rax)
  1791 000009A2 50                      	push rax
  1792 000009A3 6A01                    	push 1	; arg count
  1793 000009A5 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  1794 000009AD 803805                  	cmp byte [rax], T_undefined
  1795 000009B0 0F84085E0000            	je L_error_fvar_undefined
  1796 000009B6 803804                  	cmp byte [rax], T_closure
  1797 000009B9 0F85835E0000            	jne L_error_non_closure
  1798 000009BF FF7001                  	push SOB_CLOSURE_ENV(rax)
  1799 000009C2 FF7508                  	push qword [rbp + 8 * 1]
  1800                                   ; old ret addr
  1801 000009C5 FF7500                  	push qword [rbp]
  1802                                   ; restore the old rbp
  1803 000009C8 BB01000000              	mov rbx, 1
  1804 000009CD 4883C303                	add rbx, 3
  1805 000009D1 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1806 000009D5 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1807 000009DA 4C8D4DF8                	lea r9, [rbp - 8]
  1808 000009DE B905000000              	mov rcx, 5
  1809                                  .L_tc_recycle_frame_loop_0007:
  1810 000009E3 4883F900                	cmp rcx, 0
  1811 000009E7 7413                    	je .L_tc_recycle_frame_done_0007
  1812 000009E9 4D8B11                  	mov r10, qword [r9]
  1813 000009EC 4D8910                  	mov qword [r8], r10
  1814 000009EF 4983E808                	sub r8, 8
  1815 000009F3 4983E908                	sub r9, 8
  1816 000009F7 48FFC9                  	dec rcx
  1817 000009FA EBE7                    	jmp .L_tc_recycle_frame_loop_0007
  1818                                  .L_tc_recycle_frame_done_0007:
  1819 000009FC 498D6008                	lea rsp, [r8 + 8]
  1820 00000A00 5D                      	pop rbp ; restore the old rbp
  1821 00000A01 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1822 00000A04 C9                      	leave
  1823 00000A05 C21800                  	ret AND_KILL_FRAME(1)
  1824                                  .L_lambda_simple_end_0007:	; new closure is in rax
  1825 00000A08 48890425[6A0A0000]      	mov qword [free_var_20], rax
  1826 00000A10 48B8-                   	mov rax, sob_void
  1826 00000A12 [0000000000000000] 
  1827                                  
  1828 00000A1A 4889C7                  	mov rdi, rax
  1829 00000A1D E81E610000              	call print_sexpr_if_not_void
  1830 00000A22 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1831 00000A27 E8BF5E0000              	call malloc
  1832 00000A2C 50                      	push rax
  1833 00000A2D BF00000000              	mov rdi, 8 * 0	; new rib
  1834 00000A32 E8B45E0000              	call malloc
  1835 00000A37 50                      	push rax
  1836 00000A38 BF08000000              	mov rdi, 8 * 1	; extended env
  1837 00000A3D E8A95E0000              	call malloc
  1838 00000A42 488B7D10                	mov rdi, ENV
  1839 00000A46 BE00000000              	mov rsi, 0
  1840 00000A4B BA01000000              	mov rdx, 1
  1841                                  .L_lambda_simple_env_loop_0008:	; ext_env[i + 1] <-- env[i]
  1842 00000A50 4883FE00                	cmp rsi, 0
  1843 00000A54 7410                    	je .L_lambda_simple_env_end_0008
  1844 00000A56 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1845 00000A5A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1846 00000A5E 48FFC6                  	inc rsi
  1847 00000A61 48FFC2                  	inc rdx
  1848 00000A64 EBEA                    	jmp .L_lambda_simple_env_loop_0008
  1849                                  .L_lambda_simple_env_end_0008:
  1850 00000A66 5B                      	pop rbx
  1851 00000A67 BE00000000              	mov rsi, 0
  1852                                  .L_lambda_simple_params_loop_0008:	; copy params
  1853 00000A6C 4883FE00                	cmp rsi, 0
  1854 00000A70 740E                    	je .L_lambda_simple_params_end_0008
  1855 00000A72 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1856 00000A77 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1857 00000A7B 48FFC6                  	inc rsi
  1858 00000A7E EBEC                    	jmp .L_lambda_simple_params_loop_0008
  1859                                  .L_lambda_simple_params_end_0008:
  1860 00000A80 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1861 00000A83 4889C3                  	mov rbx, rax
  1862 00000A86 58                      	pop rax
  1863 00000A87 C60004                  	mov byte [rax], T_closure
  1864 00000A8A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1865 00000A8E 48C74009[9B0A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0008
  1866 00000A96 E9A4000000              	jmp .L_lambda_simple_end_0008
  1867                                  .L_lambda_simple_code_0008:	; lambda-simple body
  1868 00000A9B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1869 00000AA1 740B                    	je .L_lambda_simple_arity_check_ok_0008
  1870 00000AA3 FF742410                	push qword [rsp + 8 * 2]
  1871 00000AA7 6A01                    	push 1
  1872 00000AA9 E9F65D0000              	jmp L_error_incorrect_arity_simple
  1873                                  .L_lambda_simple_arity_check_ok_0008:
  1874 00000AAE C8000000                	enter 0, 0
  1875                                  	; preparing a tail-call
  1876                                  	; preparing a non-tail-call
  1877 00000AB2 488B4520                	mov rax, PARAM(0)	; param x
  1878 00000AB6 50                      	push rax
  1879 00000AB7 6A01                    	push 1	; arg count
  1880 00000AB9 488B0425[AD0B0000]      	mov rax, qword [free_var_39]	; free var cddr
  1881 00000AC1 803805                  	cmp byte [rax], T_undefined
  1882 00000AC4 0F84F45C0000            	je L_error_fvar_undefined
  1883 00000ACA 803804                  	cmp byte [rax], T_closure
  1884 00000ACD 0F856F5D0000            	jne L_error_non_closure
  1885 00000AD3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1886 00000AD6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1887 00000AD9 50                      	push rax
  1888 00000ADA 6A01                    	push 1	; arg count
  1889 00000ADC 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  1890 00000AE4 803805                  	cmp byte [rax], T_undefined
  1891 00000AE7 0F84D15C0000            	je L_error_fvar_undefined
  1892 00000AED 803804                  	cmp byte [rax], T_closure
  1893 00000AF0 0F854C5D0000            	jne L_error_non_closure
  1894 00000AF6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1895 00000AF9 FF7508                  	push qword [rbp + 8 * 1]
  1896                                   ; old ret addr
  1897 00000AFC FF7500                  	push qword [rbp]
  1898                                   ; restore the old rbp
  1899 00000AFF BB01000000              	mov rbx, 1
  1900 00000B04 4883C303                	add rbx, 3
  1901 00000B08 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1902 00000B0C 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1903 00000B11 4C8D4DF8                	lea r9, [rbp - 8]
  1904 00000B15 B905000000              	mov rcx, 5
  1905                                  .L_tc_recycle_frame_loop_0008:
  1906 00000B1A 4883F900                	cmp rcx, 0
  1907 00000B1E 7413                    	je .L_tc_recycle_frame_done_0008
  1908 00000B20 4D8B11                  	mov r10, qword [r9]
  1909 00000B23 4D8910                  	mov qword [r8], r10
  1910 00000B26 4983E808                	sub r8, 8
  1911 00000B2A 4983E908                	sub r9, 8
  1912 00000B2E 48FFC9                  	dec rcx
  1913 00000B31 EBE7                    	jmp .L_tc_recycle_frame_loop_0008
  1914                                  .L_tc_recycle_frame_done_0008:
  1915 00000B33 498D6008                	lea rsp, [r8 + 8]
  1916 00000B37 5D                      	pop rbp ; restore the old rbp
  1917 00000B38 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1918 00000B3B C9                      	leave
  1919 00000B3C C21800                  	ret AND_KILL_FRAME(1)
  1920                                  .L_lambda_simple_end_0008:	; new closure is in rax
  1921 00000B3F 48890425[9D0A0000]      	mov qword [free_var_23], rax
  1922 00000B47 48B8-                   	mov rax, sob_void
  1922 00000B49 [0000000000000000] 
  1923                                  
  1924 00000B51 4889C7                  	mov rdi, rax
  1925 00000B54 E8E75F0000              	call print_sexpr_if_not_void
  1926 00000B59 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1927 00000B5E E8885D0000              	call malloc
  1928 00000B63 50                      	push rax
  1929 00000B64 BF00000000              	mov rdi, 8 * 0	; new rib
  1930 00000B69 E87D5D0000              	call malloc
  1931 00000B6E 50                      	push rax
  1932 00000B6F BF08000000              	mov rdi, 8 * 1	; extended env
  1933 00000B74 E8725D0000              	call malloc
  1934 00000B79 488B7D10                	mov rdi, ENV
  1935 00000B7D BE00000000              	mov rsi, 0
  1936 00000B82 BA01000000              	mov rdx, 1
  1937                                  .L_lambda_simple_env_loop_0009:	; ext_env[i + 1] <-- env[i]
  1938 00000B87 4883FE00                	cmp rsi, 0
  1939 00000B8B 7410                    	je .L_lambda_simple_env_end_0009
  1940 00000B8D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1941 00000B91 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1942 00000B95 48FFC6                  	inc rsi
  1943 00000B98 48FFC2                  	inc rdx
  1944 00000B9B EBEA                    	jmp .L_lambda_simple_env_loop_0009
  1945                                  .L_lambda_simple_env_end_0009:
  1946 00000B9D 5B                      	pop rbx
  1947 00000B9E BE00000000              	mov rsi, 0
  1948                                  .L_lambda_simple_params_loop_0009:	; copy params
  1949 00000BA3 4883FE00                	cmp rsi, 0
  1950 00000BA7 740E                    	je .L_lambda_simple_params_end_0009
  1951 00000BA9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1952 00000BAE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1953 00000BB2 48FFC6                  	inc rsi
  1954 00000BB5 EBEC                    	jmp .L_lambda_simple_params_loop_0009
  1955                                  .L_lambda_simple_params_end_0009:
  1956 00000BB7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1957 00000BBA 4889C3                  	mov rbx, rax
  1958 00000BBD 58                      	pop rax
  1959 00000BBE C60004                  	mov byte [rax], T_closure
  1960 00000BC1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1961 00000BC5 48C74009[D20B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0009
  1962 00000BCD E9A4000000              	jmp .L_lambda_simple_end_0009
  1963                                  .L_lambda_simple_code_0009:	; lambda-simple body
  1964 00000BD2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1965 00000BD8 740B                    	je .L_lambda_simple_arity_check_ok_0009
  1966 00000BDA FF742410                	push qword [rsp + 8 * 2]
  1967 00000BDE 6A01                    	push 1
  1968 00000BE0 E9BF5C0000              	jmp L_error_incorrect_arity_simple
  1969                                  .L_lambda_simple_arity_check_ok_0009:
  1970 00000BE5 C8000000                	enter 0, 0
  1971                                  	; preparing a tail-call
  1972                                  	; preparing a non-tail-call
  1973 00000BE9 488B4520                	mov rax, PARAM(0)	; param x
  1974 00000BED 50                      	push rax
  1975 00000BEE 6A01                    	push 1	; arg count
  1976 00000BF0 488B0425[370A0000]      	mov rax, qword [free_var_17]	; free var caar
  1977 00000BF8 803805                  	cmp byte [rax], T_undefined
  1978 00000BFB 0F84BD5B0000            	je L_error_fvar_undefined
  1979 00000C01 803804                  	cmp byte [rax], T_closure
  1980 00000C04 0F85385C0000            	jne L_error_non_closure
  1981 00000C0A FF7001                  	push SOB_CLOSURE_ENV(rax)
  1982 00000C0D FF5009                  	call SOB_CLOSURE_CODE(rax)
  1983 00000C10 50                      	push rax
  1984 00000C11 6A01                    	push 1	; arg count
  1985 00000C13 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  1986 00000C1B 803805                  	cmp byte [rax], T_undefined
  1987 00000C1E 0F849A5B0000            	je L_error_fvar_undefined
  1988 00000C24 803804                  	cmp byte [rax], T_closure
  1989 00000C27 0F85155C0000            	jne L_error_non_closure
  1990 00000C2D FF7001                  	push SOB_CLOSURE_ENV(rax)
  1991 00000C30 FF7508                  	push qword [rbp + 8 * 1]
  1992                                   ; old ret addr
  1993 00000C33 FF7500                  	push qword [rbp]
  1994                                   ; restore the old rbp
  1995 00000C36 BB01000000              	mov rbx, 1
  1996 00000C3B 4883C303                	add rbx, 3
  1997 00000C3F 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  1998 00000C43 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  1999 00000C48 4C8D4DF8                	lea r9, [rbp - 8]
  2000 00000C4C B905000000              	mov rcx, 5
  2001                                  .L_tc_recycle_frame_loop_0009:
  2002 00000C51 4883F900                	cmp rcx, 0
  2003 00000C55 7413                    	je .L_tc_recycle_frame_done_0009
  2004 00000C57 4D8B11                  	mov r10, qword [r9]
  2005 00000C5A 4D8910                  	mov qword [r8], r10
  2006 00000C5D 4983E808                	sub r8, 8
  2007 00000C61 4983E908                	sub r9, 8
  2008 00000C65 48FFC9                  	dec rcx
  2009 00000C68 EBE7                    	jmp .L_tc_recycle_frame_loop_0009
  2010                                  .L_tc_recycle_frame_done_0009:
  2011 00000C6A 498D6008                	lea rsp, [r8 + 8]
  2012 00000C6E 5D                      	pop rbp ; restore the old rbp
  2013 00000C6F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2014 00000C72 C9                      	leave
  2015 00000C73 C21800                  	ret AND_KILL_FRAME(1)
  2016                                  .L_lambda_simple_end_0009:	; new closure is in rax
  2017 00000C76 48890425[F20A0000]      	mov qword [free_var_28], rax
  2018 00000C7E 48B8-                   	mov rax, sob_void
  2018 00000C80 [0000000000000000] 
  2019                                  
  2020 00000C88 4889C7                  	mov rdi, rax
  2021 00000C8B E8B05E0000              	call print_sexpr_if_not_void
  2022 00000C90 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2023 00000C95 E8515C0000              	call malloc
  2024 00000C9A 50                      	push rax
  2025 00000C9B BF00000000              	mov rdi, 8 * 0	; new rib
  2026 00000CA0 E8465C0000              	call malloc
  2027 00000CA5 50                      	push rax
  2028 00000CA6 BF08000000              	mov rdi, 8 * 1	; extended env
  2029 00000CAB E83B5C0000              	call malloc
  2030 00000CB0 488B7D10                	mov rdi, ENV
  2031 00000CB4 BE00000000              	mov rsi, 0
  2032 00000CB9 BA01000000              	mov rdx, 1
  2033                                  .L_lambda_simple_env_loop_000a:	; ext_env[i + 1] <-- env[i]
  2034 00000CBE 4883FE00                	cmp rsi, 0
  2035 00000CC2 7410                    	je .L_lambda_simple_env_end_000a
  2036 00000CC4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2037 00000CC8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2038 00000CCC 48FFC6                  	inc rsi
  2039 00000CCF 48FFC2                  	inc rdx
  2040 00000CD2 EBEA                    	jmp .L_lambda_simple_env_loop_000a
  2041                                  .L_lambda_simple_env_end_000a:
  2042 00000CD4 5B                      	pop rbx
  2043 00000CD5 BE00000000              	mov rsi, 0
  2044                                  .L_lambda_simple_params_loop_000a:	; copy params
  2045 00000CDA 4883FE00                	cmp rsi, 0
  2046 00000CDE 740E                    	je .L_lambda_simple_params_end_000a
  2047 00000CE0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2048 00000CE5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2049 00000CE9 48FFC6                  	inc rsi
  2050 00000CEC EBEC                    	jmp .L_lambda_simple_params_loop_000a
  2051                                  .L_lambda_simple_params_end_000a:
  2052 00000CEE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2053 00000CF1 4889C3                  	mov rbx, rax
  2054 00000CF4 58                      	pop rax
  2055 00000CF5 C60004                  	mov byte [rax], T_closure
  2056 00000CF8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2057 00000CFC 48C74009[090D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000a
  2058 00000D04 E9A4000000              	jmp .L_lambda_simple_end_000a
  2059                                  .L_lambda_simple_code_000a:	; lambda-simple body
  2060 00000D09 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2061 00000D0F 740B                    	je .L_lambda_simple_arity_check_ok_000a
  2062 00000D11 FF742410                	push qword [rsp + 8 * 2]
  2063 00000D15 6A01                    	push 1
  2064 00000D17 E9885B0000              	jmp L_error_incorrect_arity_simple
  2065                                  .L_lambda_simple_arity_check_ok_000a:
  2066 00000D1C C8000000                	enter 0, 0
  2067                                  	; preparing a tail-call
  2068                                  	; preparing a non-tail-call
  2069 00000D20 488B4520                	mov rax, PARAM(0)	; param x
  2070 00000D24 50                      	push rax
  2071 00000D25 6A01                    	push 1	; arg count
  2072 00000D27 488B0425[AE0A0000]      	mov rax, qword [free_var_24]	; free var cadr
  2073 00000D2F 803805                  	cmp byte [rax], T_undefined
  2074 00000D32 0F84865A0000            	je L_error_fvar_undefined
  2075 00000D38 803804                  	cmp byte [rax], T_closure
  2076 00000D3B 0F85015B0000            	jne L_error_non_closure
  2077 00000D41 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2078 00000D44 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2079 00000D47 50                      	push rax
  2080 00000D48 6A01                    	push 1	; arg count
  2081 00000D4A 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  2082 00000D52 803805                  	cmp byte [rax], T_undefined
  2083 00000D55 0F84635A0000            	je L_error_fvar_undefined
  2084 00000D5B 803804                  	cmp byte [rax], T_closure
  2085 00000D5E 0F85DE5A0000            	jne L_error_non_closure
  2086 00000D64 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2087 00000D67 FF7508                  	push qword [rbp + 8 * 1]
  2088                                   ; old ret addr
  2089 00000D6A FF7500                  	push qword [rbp]
  2090                                   ; restore the old rbp
  2091 00000D6D BB01000000              	mov rbx, 1
  2092 00000D72 4883C303                	add rbx, 3
  2093 00000D76 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2094 00000D7A 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2095 00000D7F 4C8D4DF8                	lea r9, [rbp - 8]
  2096 00000D83 B905000000              	mov rcx, 5
  2097                                  .L_tc_recycle_frame_loop_000a:
  2098 00000D88 4883F900                	cmp rcx, 0
  2099 00000D8C 7413                    	je .L_tc_recycle_frame_done_000a
  2100 00000D8E 4D8B11                  	mov r10, qword [r9]
  2101 00000D91 4D8910                  	mov qword [r8], r10
  2102 00000D94 4983E808                	sub r8, 8
  2103 00000D98 4983E908                	sub r9, 8
  2104 00000D9C 48FFC9                  	dec rcx
  2105 00000D9F EBE7                    	jmp .L_tc_recycle_frame_loop_000a
  2106                                  .L_tc_recycle_frame_done_000a:
  2107 00000DA1 498D6008                	lea rsp, [r8 + 8]
  2108 00000DA5 5D                      	pop rbp ; restore the old rbp
  2109 00000DA6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2110 00000DA9 C9                      	leave
  2111 00000DAA C21800                  	ret AND_KILL_FRAME(1)
  2112                                  .L_lambda_simple_end_000a:	; new closure is in rax
  2113 00000DAD 48890425[250B0000]      	mov qword [free_var_31], rax
  2114 00000DB5 48B8-                   	mov rax, sob_void
  2114 00000DB7 [0000000000000000] 
  2115                                  
  2116 00000DBF 4889C7                  	mov rdi, rax
  2117 00000DC2 E8795D0000              	call print_sexpr_if_not_void
  2118 00000DC7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2119 00000DCC E81A5B0000              	call malloc
  2120 00000DD1 50                      	push rax
  2121 00000DD2 BF00000000              	mov rdi, 8 * 0	; new rib
  2122 00000DD7 E80F5B0000              	call malloc
  2123 00000DDC 50                      	push rax
  2124 00000DDD BF08000000              	mov rdi, 8 * 1	; extended env
  2125 00000DE2 E8045B0000              	call malloc
  2126 00000DE7 488B7D10                	mov rdi, ENV
  2127 00000DEB BE00000000              	mov rsi, 0
  2128 00000DF0 BA01000000              	mov rdx, 1
  2129                                  .L_lambda_simple_env_loop_000b:	; ext_env[i + 1] <-- env[i]
  2130 00000DF5 4883FE00                	cmp rsi, 0
  2131 00000DF9 7410                    	je .L_lambda_simple_env_end_000b
  2132 00000DFB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2133 00000DFF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2134 00000E03 48FFC6                  	inc rsi
  2135 00000E06 48FFC2                  	inc rdx
  2136 00000E09 EBEA                    	jmp .L_lambda_simple_env_loop_000b
  2137                                  .L_lambda_simple_env_end_000b:
  2138 00000E0B 5B                      	pop rbx
  2139 00000E0C BE00000000              	mov rsi, 0
  2140                                  .L_lambda_simple_params_loop_000b:	; copy params
  2141 00000E11 4883FE00                	cmp rsi, 0
  2142 00000E15 740E                    	je .L_lambda_simple_params_end_000b
  2143 00000E17 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2144 00000E1C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2145 00000E20 48FFC6                  	inc rsi
  2146 00000E23 EBEC                    	jmp .L_lambda_simple_params_loop_000b
  2147                                  .L_lambda_simple_params_end_000b:
  2148 00000E25 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2149 00000E28 4889C3                  	mov rbx, rax
  2150 00000E2B 58                      	pop rax
  2151 00000E2C C60004                  	mov byte [rax], T_closure
  2152 00000E2F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2153 00000E33 48C74009[400E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000b
  2154 00000E3B E9A4000000              	jmp .L_lambda_simple_end_000b
  2155                                  .L_lambda_simple_code_000b:	; lambda-simple body
  2156 00000E40 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2157 00000E46 740B                    	je .L_lambda_simple_arity_check_ok_000b
  2158 00000E48 FF742410                	push qword [rsp + 8 * 2]
  2159 00000E4C 6A01                    	push 1
  2160 00000E4E E9515A0000              	jmp L_error_incorrect_arity_simple
  2161                                  .L_lambda_simple_arity_check_ok_000b:
  2162 00000E53 C8000000                	enter 0, 0
  2163                                  	; preparing a tail-call
  2164                                  	; preparing a non-tail-call
  2165 00000E57 488B4520                	mov rax, PARAM(0)	; param x
  2166 00000E5B 50                      	push rax
  2167 00000E5C 6A01                    	push 1	; arg count
  2168 00000E5E 488B0425[360B0000]      	mov rax, qword [free_var_32]	; free var cdar
  2169 00000E66 803805                  	cmp byte [rax], T_undefined
  2170 00000E69 0F844F590000            	je L_error_fvar_undefined
  2171 00000E6F 803804                  	cmp byte [rax], T_closure
  2172 00000E72 0F85CA590000            	jne L_error_non_closure
  2173 00000E78 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2174 00000E7B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2175 00000E7E 50                      	push rax
  2176 00000E7F 6A01                    	push 1	; arg count
  2177 00000E81 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  2178 00000E89 803805                  	cmp byte [rax], T_undefined
  2179 00000E8C 0F842C590000            	je L_error_fvar_undefined
  2180 00000E92 803804                  	cmp byte [rax], T_closure
  2181 00000E95 0F85A7590000            	jne L_error_non_closure
  2182 00000E9B FF7001                  	push SOB_CLOSURE_ENV(rax)
  2183 00000E9E FF7508                  	push qword [rbp + 8 * 1]
  2184                                   ; old ret addr
  2185 00000EA1 FF7500                  	push qword [rbp]
  2186                                   ; restore the old rbp
  2187 00000EA4 BB01000000              	mov rbx, 1
  2188 00000EA9 4883C303                	add rbx, 3
  2189 00000EAD 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2190 00000EB1 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2191 00000EB6 4C8D4DF8                	lea r9, [rbp - 8]
  2192 00000EBA B905000000              	mov rcx, 5
  2193                                  .L_tc_recycle_frame_loop_000b:
  2194 00000EBF 4883F900                	cmp rcx, 0
  2195 00000EC3 7413                    	je .L_tc_recycle_frame_done_000b
  2196 00000EC5 4D8B11                  	mov r10, qword [r9]
  2197 00000EC8 4D8910                  	mov qword [r8], r10
  2198 00000ECB 4983E808                	sub r8, 8
  2199 00000ECF 4983E908                	sub r9, 8
  2200 00000ED3 48FFC9                  	dec rcx
  2201 00000ED6 EBE7                    	jmp .L_tc_recycle_frame_loop_000b
  2202                                  .L_tc_recycle_frame_done_000b:
  2203 00000ED8 498D6008                	lea rsp, [r8 + 8]
  2204 00000EDC 5D                      	pop rbp ; restore the old rbp
  2205 00000EDD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2206 00000EE0 C9                      	leave
  2207 00000EE1 C21800                  	ret AND_KILL_FRAME(1)
  2208                                  .L_lambda_simple_end_000b:	; new closure is in rax
  2209 00000EE4 48890425[690B0000]      	mov qword [free_var_35], rax
  2210 00000EEC 48B8-                   	mov rax, sob_void
  2210 00000EEE [0000000000000000] 
  2211                                  
  2212 00000EF6 4889C7                  	mov rdi, rax
  2213 00000EF9 E8425C0000              	call print_sexpr_if_not_void
  2214 00000EFE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2215 00000F03 E8E3590000              	call malloc
  2216 00000F08 50                      	push rax
  2217 00000F09 BF00000000              	mov rdi, 8 * 0	; new rib
  2218 00000F0E E8D8590000              	call malloc
  2219 00000F13 50                      	push rax
  2220 00000F14 BF08000000              	mov rdi, 8 * 1	; extended env
  2221 00000F19 E8CD590000              	call malloc
  2222 00000F1E 488B7D10                	mov rdi, ENV
  2223 00000F22 BE00000000              	mov rsi, 0
  2224 00000F27 BA01000000              	mov rdx, 1
  2225                                  .L_lambda_simple_env_loop_000c:	; ext_env[i + 1] <-- env[i]
  2226 00000F2C 4883FE00                	cmp rsi, 0
  2227 00000F30 7410                    	je .L_lambda_simple_env_end_000c
  2228 00000F32 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2229 00000F36 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2230 00000F3A 48FFC6                  	inc rsi
  2231 00000F3D 48FFC2                  	inc rdx
  2232 00000F40 EBEA                    	jmp .L_lambda_simple_env_loop_000c
  2233                                  .L_lambda_simple_env_end_000c:
  2234 00000F42 5B                      	pop rbx
  2235 00000F43 BE00000000              	mov rsi, 0
  2236                                  .L_lambda_simple_params_loop_000c:	; copy params
  2237 00000F48 4883FE00                	cmp rsi, 0
  2238 00000F4C 740E                    	je .L_lambda_simple_params_end_000c
  2239 00000F4E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2240 00000F53 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2241 00000F57 48FFC6                  	inc rsi
  2242 00000F5A EBEC                    	jmp .L_lambda_simple_params_loop_000c
  2243                                  .L_lambda_simple_params_end_000c:
  2244 00000F5C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2245 00000F5F 4889C3                  	mov rbx, rax
  2246 00000F62 58                      	pop rax
  2247 00000F63 C60004                  	mov byte [rax], T_closure
  2248 00000F66 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2249 00000F6A 48C74009[770F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000c
  2250 00000F72 E9A4000000              	jmp .L_lambda_simple_end_000c
  2251                                  .L_lambda_simple_code_000c:	; lambda-simple body
  2252 00000F77 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2253 00000F7D 740B                    	je .L_lambda_simple_arity_check_ok_000c
  2254 00000F7F FF742410                	push qword [rsp + 8 * 2]
  2255 00000F83 6A01                    	push 1
  2256 00000F85 E91A590000              	jmp L_error_incorrect_arity_simple
  2257                                  .L_lambda_simple_arity_check_ok_000c:
  2258 00000F8A C8000000                	enter 0, 0
  2259                                  	; preparing a tail-call
  2260                                  	; preparing a non-tail-call
  2261 00000F8E 488B4520                	mov rax, PARAM(0)	; param x
  2262 00000F92 50                      	push rax
  2263 00000F93 6A01                    	push 1	; arg count
  2264 00000F95 488B0425[AD0B0000]      	mov rax, qword [free_var_39]	; free var cddr
  2265 00000F9D 803805                  	cmp byte [rax], T_undefined
  2266 00000FA0 0F8418580000            	je L_error_fvar_undefined
  2267 00000FA6 803804                  	cmp byte [rax], T_closure
  2268 00000FA9 0F8593580000            	jne L_error_non_closure
  2269 00000FAF FF7001                  	push SOB_CLOSURE_ENV(rax)
  2270 00000FB2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2271 00000FB5 50                      	push rax
  2272 00000FB6 6A01                    	push 1	; arg count
  2273 00000FB8 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  2274 00000FC0 803805                  	cmp byte [rax], T_undefined
  2275 00000FC3 0F84F5570000            	je L_error_fvar_undefined
  2276 00000FC9 803804                  	cmp byte [rax], T_closure
  2277 00000FCC 0F8570580000            	jne L_error_non_closure
  2278 00000FD2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2279 00000FD5 FF7508                  	push qword [rbp + 8 * 1]
  2280                                   ; old ret addr
  2281 00000FD8 FF7500                  	push qword [rbp]
  2282                                   ; restore the old rbp
  2283 00000FDB BB01000000              	mov rbx, 1
  2284 00000FE0 4883C303                	add rbx, 3
  2285 00000FE4 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2286 00000FE8 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2287 00000FED 4C8D4DF8                	lea r9, [rbp - 8]
  2288 00000FF1 B905000000              	mov rcx, 5
  2289                                  .L_tc_recycle_frame_loop_000c:
  2290 00000FF6 4883F900                	cmp rcx, 0
  2291 00000FFA 7413                    	je .L_tc_recycle_frame_done_000c
  2292 00000FFC 4D8B11                  	mov r10, qword [r9]
  2293 00000FFF 4D8910                  	mov qword [r8], r10
  2294 00001002 4983E808                	sub r8, 8
  2295 00001006 4983E908                	sub r9, 8
  2296 0000100A 48FFC9                  	dec rcx
  2297 0000100D EBE7                    	jmp .L_tc_recycle_frame_loop_000c
  2298                                  .L_tc_recycle_frame_done_000c:
  2299 0000100F 498D6008                	lea rsp, [r8 + 8]
  2300 00001013 5D                      	pop rbp ; restore the old rbp
  2301 00001014 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2302 00001017 C9                      	leave
  2303 00001018 C21800                  	ret AND_KILL_FRAME(1)
  2304                                  .L_lambda_simple_end_000c:	; new closure is in rax
  2305 0000101B 48890425[9C0B0000]      	mov qword [free_var_38], rax
  2306 00001023 48B8-                   	mov rax, sob_void
  2306 00001025 [0000000000000000] 
  2307                                  
  2308 0000102D 4889C7                  	mov rdi, rax
  2309 00001030 E80B5B0000              	call print_sexpr_if_not_void
  2310 00001035 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2311 0000103A E8AC580000              	call malloc
  2312 0000103F 50                      	push rax
  2313 00001040 BF00000000              	mov rdi, 8 * 0	; new rib
  2314 00001045 E8A1580000              	call malloc
  2315 0000104A 50                      	push rax
  2316 0000104B BF08000000              	mov rdi, 8 * 1	; extended env
  2317 00001050 E896580000              	call malloc
  2318 00001055 488B7D10                	mov rdi, ENV
  2319 00001059 BE00000000              	mov rsi, 0
  2320 0000105E BA01000000              	mov rdx, 1
  2321                                  .L_lambda_simple_env_loop_000d:	; ext_env[i + 1] <-- env[i]
  2322 00001063 4883FE00                	cmp rsi, 0
  2323 00001067 7410                    	je .L_lambda_simple_env_end_000d
  2324 00001069 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2325 0000106D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2326 00001071 48FFC6                  	inc rsi
  2327 00001074 48FFC2                  	inc rdx
  2328 00001077 EBEA                    	jmp .L_lambda_simple_env_loop_000d
  2329                                  .L_lambda_simple_env_end_000d:
  2330 00001079 5B                      	pop rbx
  2331 0000107A BE00000000              	mov rsi, 0
  2332                                  .L_lambda_simple_params_loop_000d:	; copy params
  2333 0000107F 4883FE00                	cmp rsi, 0
  2334 00001083 740E                    	je .L_lambda_simple_params_end_000d
  2335 00001085 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2336 0000108A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2337 0000108E 48FFC6                  	inc rsi
  2338 00001091 EBEC                    	jmp .L_lambda_simple_params_loop_000d
  2339                                  .L_lambda_simple_params_end_000d:
  2340 00001093 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2341 00001096 4889C3                  	mov rbx, rax
  2342 00001099 58                      	pop rax
  2343 0000109A C60004                  	mov byte [rax], T_closure
  2344 0000109D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2345 000010A1 48C74009[AE100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000d
  2346 000010A9 E9A4000000              	jmp .L_lambda_simple_end_000d
  2347                                  .L_lambda_simple_code_000d:	; lambda-simple body
  2348 000010AE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2349 000010B4 740B                    	je .L_lambda_simple_arity_check_ok_000d
  2350 000010B6 FF742410                	push qword [rsp + 8 * 2]
  2351 000010BA 6A01                    	push 1
  2352 000010BC E9E3570000              	jmp L_error_incorrect_arity_simple
  2353                                  .L_lambda_simple_arity_check_ok_000d:
  2354 000010C1 C8000000                	enter 0, 0
  2355                                  	; preparing a tail-call
  2356                                  	; preparing a non-tail-call
  2357 000010C5 488B4520                	mov rax, PARAM(0)	; param x
  2358 000010C9 50                      	push rax
  2359 000010CA 6A01                    	push 1	; arg count
  2360 000010CC 488B0425[370A0000]      	mov rax, qword [free_var_17]	; free var caar
  2361 000010D4 803805                  	cmp byte [rax], T_undefined
  2362 000010D7 0F84E1560000            	je L_error_fvar_undefined
  2363 000010DD 803804                  	cmp byte [rax], T_closure
  2364 000010E0 0F855C570000            	jne L_error_non_closure
  2365 000010E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2366 000010E9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2367 000010EC 50                      	push rax
  2368 000010ED 6A01                    	push 1	; arg count
  2369 000010EF 488B0425[370A0000]      	mov rax, qword [free_var_17]	; free var caar
  2370 000010F7 803805                  	cmp byte [rax], T_undefined
  2371 000010FA 0F84BE560000            	je L_error_fvar_undefined
  2372 00001100 803804                  	cmp byte [rax], T_closure
  2373 00001103 0F8539570000            	jne L_error_non_closure
  2374 00001109 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2375 0000110C FF7508                  	push qword [rbp + 8 * 1]
  2376                                   ; old ret addr
  2377 0000110F FF7500                  	push qword [rbp]
  2378                                   ; restore the old rbp
  2379 00001112 BB01000000              	mov rbx, 1
  2380 00001117 4883C303                	add rbx, 3
  2381 0000111B 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2382 0000111F 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2383 00001124 4C8D4DF8                	lea r9, [rbp - 8]
  2384 00001128 B905000000              	mov rcx, 5
  2385                                  .L_tc_recycle_frame_loop_000d:
  2386 0000112D 4883F900                	cmp rcx, 0
  2387 00001131 7413                    	je .L_tc_recycle_frame_done_000d
  2388 00001133 4D8B11                  	mov r10, qword [r9]
  2389 00001136 4D8910                  	mov qword [r8], r10
  2390 00001139 4983E808                	sub r8, 8
  2391 0000113D 4983E908                	sub r9, 8
  2392 00001141 48FFC9                  	dec rcx
  2393 00001144 EBE7                    	jmp .L_tc_recycle_frame_loop_000d
  2394                                  .L_tc_recycle_frame_done_000d:
  2395 00001146 498D6008                	lea rsp, [r8 + 8]
  2396 0000114A 5D                      	pop rbp ; restore the old rbp
  2397 0000114B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2398 0000114E C9                      	leave
  2399 0000114F C21800                  	ret AND_KILL_FRAME(1)
  2400                                  .L_lambda_simple_end_000d:	; new closure is in rax
  2401 00001152 48890425[D1090000]      	mov qword [free_var_11], rax
  2402 0000115A 48B8-                   	mov rax, sob_void
  2402 0000115C [0000000000000000] 
  2403                                  
  2404 00001164 4889C7                  	mov rdi, rax
  2405 00001167 E8D4590000              	call print_sexpr_if_not_void
  2406 0000116C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2407 00001171 E875570000              	call malloc
  2408 00001176 50                      	push rax
  2409 00001177 BF00000000              	mov rdi, 8 * 0	; new rib
  2410 0000117C E86A570000              	call malloc
  2411 00001181 50                      	push rax
  2412 00001182 BF08000000              	mov rdi, 8 * 1	; extended env
  2413 00001187 E85F570000              	call malloc
  2414 0000118C 488B7D10                	mov rdi, ENV
  2415 00001190 BE00000000              	mov rsi, 0
  2416 00001195 BA01000000              	mov rdx, 1
  2417                                  .L_lambda_simple_env_loop_000e:	; ext_env[i + 1] <-- env[i]
  2418 0000119A 4883FE00                	cmp rsi, 0
  2419 0000119E 7410                    	je .L_lambda_simple_env_end_000e
  2420 000011A0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2421 000011A4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2422 000011A8 48FFC6                  	inc rsi
  2423 000011AB 48FFC2                  	inc rdx
  2424 000011AE EBEA                    	jmp .L_lambda_simple_env_loop_000e
  2425                                  .L_lambda_simple_env_end_000e:
  2426 000011B0 5B                      	pop rbx
  2427 000011B1 BE00000000              	mov rsi, 0
  2428                                  .L_lambda_simple_params_loop_000e:	; copy params
  2429 000011B6 4883FE00                	cmp rsi, 0
  2430 000011BA 740E                    	je .L_lambda_simple_params_end_000e
  2431 000011BC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2432 000011C1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2433 000011C5 48FFC6                  	inc rsi
  2434 000011C8 EBEC                    	jmp .L_lambda_simple_params_loop_000e
  2435                                  .L_lambda_simple_params_end_000e:
  2436 000011CA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2437 000011CD 4889C3                  	mov rbx, rax
  2438 000011D0 58                      	pop rax
  2439 000011D1 C60004                  	mov byte [rax], T_closure
  2440 000011D4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2441 000011D8 48C74009[E5110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000e
  2442 000011E0 E9A4000000              	jmp .L_lambda_simple_end_000e
  2443                                  .L_lambda_simple_code_000e:	; lambda-simple body
  2444 000011E5 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2445 000011EB 740B                    	je .L_lambda_simple_arity_check_ok_000e
  2446 000011ED FF742410                	push qword [rsp + 8 * 2]
  2447 000011F1 6A01                    	push 1
  2448 000011F3 E9AC560000              	jmp L_error_incorrect_arity_simple
  2449                                  .L_lambda_simple_arity_check_ok_000e:
  2450 000011F8 C8000000                	enter 0, 0
  2451                                  	; preparing a tail-call
  2452                                  	; preparing a non-tail-call
  2453 000011FC 488B4520                	mov rax, PARAM(0)	; param x
  2454 00001200 50                      	push rax
  2455 00001201 6A01                    	push 1	; arg count
  2456 00001203 488B0425[AE0A0000]      	mov rax, qword [free_var_24]	; free var cadr
  2457 0000120B 803805                  	cmp byte [rax], T_undefined
  2458 0000120E 0F84AA550000            	je L_error_fvar_undefined
  2459 00001214 803804                  	cmp byte [rax], T_closure
  2460 00001217 0F8525560000            	jne L_error_non_closure
  2461 0000121D FF7001                  	push SOB_CLOSURE_ENV(rax)
  2462 00001220 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2463 00001223 50                      	push rax
  2464 00001224 6A01                    	push 1	; arg count
  2465 00001226 488B0425[370A0000]      	mov rax, qword [free_var_17]	; free var caar
  2466 0000122E 803805                  	cmp byte [rax], T_undefined
  2467 00001231 0F8487550000            	je L_error_fvar_undefined
  2468 00001237 803804                  	cmp byte [rax], T_closure
  2469 0000123A 0F8502560000            	jne L_error_non_closure
  2470 00001240 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2471 00001243 FF7508                  	push qword [rbp + 8 * 1]
  2472                                   ; old ret addr
  2473 00001246 FF7500                  	push qword [rbp]
  2474                                   ; restore the old rbp
  2475 00001249 BB01000000              	mov rbx, 1
  2476 0000124E 4883C303                	add rbx, 3
  2477 00001252 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2478 00001256 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2479 0000125B 4C8D4DF8                	lea r9, [rbp - 8]
  2480 0000125F B905000000              	mov rcx, 5
  2481                                  .L_tc_recycle_frame_loop_000e:
  2482 00001264 4883F900                	cmp rcx, 0
  2483 00001268 7413                    	je .L_tc_recycle_frame_done_000e
  2484 0000126A 4D8B11                  	mov r10, qword [r9]
  2485 0000126D 4D8910                  	mov qword [r8], r10
  2486 00001270 4983E808                	sub r8, 8
  2487 00001274 4983E908                	sub r9, 8
  2488 00001278 48FFC9                  	dec rcx
  2489 0000127B EBE7                    	jmp .L_tc_recycle_frame_loop_000e
  2490                                  .L_tc_recycle_frame_done_000e:
  2491 0000127D 498D6008                	lea rsp, [r8 + 8]
  2492 00001281 5D                      	pop rbp ; restore the old rbp
  2493 00001282 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2494 00001285 C9                      	leave
  2495 00001286 C21800                  	ret AND_KILL_FRAME(1)
  2496                                  .L_lambda_simple_end_000e:	; new closure is in rax
  2497 00001289 48890425[E2090000]      	mov qword [free_var_12], rax
  2498 00001291 48B8-                   	mov rax, sob_void
  2498 00001293 [0000000000000000] 
  2499                                  
  2500 0000129B 4889C7                  	mov rdi, rax
  2501 0000129E E89D580000              	call print_sexpr_if_not_void
  2502 000012A3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2503 000012A8 E83E560000              	call malloc
  2504 000012AD 50                      	push rax
  2505 000012AE BF00000000              	mov rdi, 8 * 0	; new rib
  2506 000012B3 E833560000              	call malloc
  2507 000012B8 50                      	push rax
  2508 000012B9 BF08000000              	mov rdi, 8 * 1	; extended env
  2509 000012BE E828560000              	call malloc
  2510 000012C3 488B7D10                	mov rdi, ENV
  2511 000012C7 BE00000000              	mov rsi, 0
  2512 000012CC BA01000000              	mov rdx, 1
  2513                                  .L_lambda_simple_env_loop_000f:	; ext_env[i + 1] <-- env[i]
  2514 000012D1 4883FE00                	cmp rsi, 0
  2515 000012D5 7410                    	je .L_lambda_simple_env_end_000f
  2516 000012D7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2517 000012DB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2518 000012DF 48FFC6                  	inc rsi
  2519 000012E2 48FFC2                  	inc rdx
  2520 000012E5 EBEA                    	jmp .L_lambda_simple_env_loop_000f
  2521                                  .L_lambda_simple_env_end_000f:
  2522 000012E7 5B                      	pop rbx
  2523 000012E8 BE00000000              	mov rsi, 0
  2524                                  .L_lambda_simple_params_loop_000f:	; copy params
  2525 000012ED 4883FE00                	cmp rsi, 0
  2526 000012F1 740E                    	je .L_lambda_simple_params_end_000f
  2527 000012F3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2528 000012F8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2529 000012FC 48FFC6                  	inc rsi
  2530 000012FF EBEC                    	jmp .L_lambda_simple_params_loop_000f
  2531                                  .L_lambda_simple_params_end_000f:
  2532 00001301 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2533 00001304 4889C3                  	mov rbx, rax
  2534 00001307 58                      	pop rax
  2535 00001308 C60004                  	mov byte [rax], T_closure
  2536 0000130B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2537 0000130F 48C74009[1C130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000f
  2538 00001317 E9A4000000              	jmp .L_lambda_simple_end_000f
  2539                                  .L_lambda_simple_code_000f:	; lambda-simple body
  2540 0000131C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2541 00001322 740B                    	je .L_lambda_simple_arity_check_ok_000f
  2542 00001324 FF742410                	push qword [rsp + 8 * 2]
  2543 00001328 6A01                    	push 1
  2544 0000132A E975550000              	jmp L_error_incorrect_arity_simple
  2545                                  .L_lambda_simple_arity_check_ok_000f:
  2546 0000132F C8000000                	enter 0, 0
  2547                                  	; preparing a tail-call
  2548                                  	; preparing a non-tail-call
  2549 00001333 488B4520                	mov rax, PARAM(0)	; param x
  2550 00001337 50                      	push rax
  2551 00001338 6A01                    	push 1	; arg count
  2552 0000133A 488B0425[360B0000]      	mov rax, qword [free_var_32]	; free var cdar
  2553 00001342 803805                  	cmp byte [rax], T_undefined
  2554 00001345 0F8473540000            	je L_error_fvar_undefined
  2555 0000134B 803804                  	cmp byte [rax], T_closure
  2556 0000134E 0F85EE540000            	jne L_error_non_closure
  2557 00001354 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2558 00001357 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2559 0000135A 50                      	push rax
  2560 0000135B 6A01                    	push 1	; arg count
  2561 0000135D 488B0425[370A0000]      	mov rax, qword [free_var_17]	; free var caar
  2562 00001365 803805                  	cmp byte [rax], T_undefined
  2563 00001368 0F8450540000            	je L_error_fvar_undefined
  2564 0000136E 803804                  	cmp byte [rax], T_closure
  2565 00001371 0F85CB540000            	jne L_error_non_closure
  2566 00001377 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2567 0000137A FF7508                  	push qword [rbp + 8 * 1]
  2568                                   ; old ret addr
  2569 0000137D FF7500                  	push qword [rbp]
  2570                                   ; restore the old rbp
  2571 00001380 BB01000000              	mov rbx, 1
  2572 00001385 4883C303                	add rbx, 3
  2573 00001389 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2574 0000138D 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2575 00001392 4C8D4DF8                	lea r9, [rbp - 8]
  2576 00001396 B905000000              	mov rcx, 5
  2577                                  .L_tc_recycle_frame_loop_000f:
  2578 0000139B 4883F900                	cmp rcx, 0
  2579 0000139F 7413                    	je .L_tc_recycle_frame_done_000f
  2580 000013A1 4D8B11                  	mov r10, qword [r9]
  2581 000013A4 4D8910                  	mov qword [r8], r10
  2582 000013A7 4983E808                	sub r8, 8
  2583 000013AB 4983E908                	sub r9, 8
  2584 000013AF 48FFC9                  	dec rcx
  2585 000013B2 EBE7                    	jmp .L_tc_recycle_frame_loop_000f
  2586                                  .L_tc_recycle_frame_done_000f:
  2587 000013B4 498D6008                	lea rsp, [r8 + 8]
  2588 000013B8 5D                      	pop rbp ; restore the old rbp
  2589 000013B9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2590 000013BC C9                      	leave
  2591 000013BD C21800                  	ret AND_KILL_FRAME(1)
  2592                                  .L_lambda_simple_end_000f:	; new closure is in rax
  2593 000013C0 48890425[040A0000]      	mov qword [free_var_14], rax
  2594 000013C8 48B8-                   	mov rax, sob_void
  2594 000013CA [0000000000000000] 
  2595                                  
  2596 000013D2 4889C7                  	mov rdi, rax
  2597 000013D5 E866570000              	call print_sexpr_if_not_void
  2598 000013DA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2599 000013DF E807550000              	call malloc
  2600 000013E4 50                      	push rax
  2601 000013E5 BF00000000              	mov rdi, 8 * 0	; new rib
  2602 000013EA E8FC540000              	call malloc
  2603 000013EF 50                      	push rax
  2604 000013F0 BF08000000              	mov rdi, 8 * 1	; extended env
  2605 000013F5 E8F1540000              	call malloc
  2606 000013FA 488B7D10                	mov rdi, ENV
  2607 000013FE BE00000000              	mov rsi, 0
  2608 00001403 BA01000000              	mov rdx, 1
  2609                                  .L_lambda_simple_env_loop_0010:	; ext_env[i + 1] <-- env[i]
  2610 00001408 4883FE00                	cmp rsi, 0
  2611 0000140C 7410                    	je .L_lambda_simple_env_end_0010
  2612 0000140E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2613 00001412 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2614 00001416 48FFC6                  	inc rsi
  2615 00001419 48FFC2                  	inc rdx
  2616 0000141C EBEA                    	jmp .L_lambda_simple_env_loop_0010
  2617                                  .L_lambda_simple_env_end_0010:
  2618 0000141E 5B                      	pop rbx
  2619 0000141F BE00000000              	mov rsi, 0
  2620                                  .L_lambda_simple_params_loop_0010:	; copy params
  2621 00001424 4883FE00                	cmp rsi, 0
  2622 00001428 740E                    	je .L_lambda_simple_params_end_0010
  2623 0000142A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2624 0000142F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2625 00001433 48FFC6                  	inc rsi
  2626 00001436 EBEC                    	jmp .L_lambda_simple_params_loop_0010
  2627                                  .L_lambda_simple_params_end_0010:
  2628 00001438 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2629 0000143B 4889C3                  	mov rbx, rax
  2630 0000143E 58                      	pop rax
  2631 0000143F C60004                  	mov byte [rax], T_closure
  2632 00001442 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2633 00001446 48C74009[53140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0010
  2634 0000144E E9A4000000              	jmp .L_lambda_simple_end_0010
  2635                                  .L_lambda_simple_code_0010:	; lambda-simple body
  2636 00001453 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2637 00001459 740B                    	je .L_lambda_simple_arity_check_ok_0010
  2638 0000145B FF742410                	push qword [rsp + 8 * 2]
  2639 0000145F 6A01                    	push 1
  2640 00001461 E93E540000              	jmp L_error_incorrect_arity_simple
  2641                                  .L_lambda_simple_arity_check_ok_0010:
  2642 00001466 C8000000                	enter 0, 0
  2643                                  	; preparing a tail-call
  2644                                  	; preparing a non-tail-call
  2645 0000146A 488B4520                	mov rax, PARAM(0)	; param x
  2646 0000146E 50                      	push rax
  2647 0000146F 6A01                    	push 1	; arg count
  2648 00001471 488B0425[AD0B0000]      	mov rax, qword [free_var_39]	; free var cddr
  2649 00001479 803805                  	cmp byte [rax], T_undefined
  2650 0000147C 0F843C530000            	je L_error_fvar_undefined
  2651 00001482 803804                  	cmp byte [rax], T_closure
  2652 00001485 0F85B7530000            	jne L_error_non_closure
  2653 0000148B FF7001                  	push SOB_CLOSURE_ENV(rax)
  2654 0000148E FF5009                  	call SOB_CLOSURE_CODE(rax)
  2655 00001491 50                      	push rax
  2656 00001492 6A01                    	push 1	; arg count
  2657 00001494 488B0425[370A0000]      	mov rax, qword [free_var_17]	; free var caar
  2658 0000149C 803805                  	cmp byte [rax], T_undefined
  2659 0000149F 0F8419530000            	je L_error_fvar_undefined
  2660 000014A5 803804                  	cmp byte [rax], T_closure
  2661 000014A8 0F8594530000            	jne L_error_non_closure
  2662 000014AE FF7001                  	push SOB_CLOSURE_ENV(rax)
  2663 000014B1 FF7508                  	push qword [rbp + 8 * 1]
  2664                                   ; old ret addr
  2665 000014B4 FF7500                  	push qword [rbp]
  2666                                   ; restore the old rbp
  2667 000014B7 BB01000000              	mov rbx, 1
  2668 000014BC 4883C303                	add rbx, 3
  2669 000014C0 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2670 000014C4 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2671 000014C9 4C8D4DF8                	lea r9, [rbp - 8]
  2672 000014CD B905000000              	mov rcx, 5
  2673                                  .L_tc_recycle_frame_loop_0010:
  2674 000014D2 4883F900                	cmp rcx, 0
  2675 000014D6 7413                    	je .L_tc_recycle_frame_done_0010
  2676 000014D8 4D8B11                  	mov r10, qword [r9]
  2677 000014DB 4D8910                  	mov qword [r8], r10
  2678 000014DE 4983E808                	sub r8, 8
  2679 000014E2 4983E908                	sub r9, 8
  2680 000014E6 48FFC9                  	dec rcx
  2681 000014E9 EBE7                    	jmp .L_tc_recycle_frame_loop_0010
  2682                                  .L_tc_recycle_frame_done_0010:
  2683 000014EB 498D6008                	lea rsp, [r8 + 8]
  2684 000014EF 5D                      	pop rbp ; restore the old rbp
  2685 000014F0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2686 000014F3 C9                      	leave
  2687 000014F4 C21800                  	ret AND_KILL_FRAME(1)
  2688                                  .L_lambda_simple_end_0010:	; new closure is in rax
  2689 000014F7 48890425[150A0000]      	mov qword [free_var_15], rax
  2690 000014FF 48B8-                   	mov rax, sob_void
  2690 00001501 [0000000000000000] 
  2691                                  
  2692 00001509 4889C7                  	mov rdi, rax
  2693 0000150C E82F560000              	call print_sexpr_if_not_void
  2694 00001511 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2695 00001516 E8D0530000              	call malloc
  2696 0000151B 50                      	push rax
  2697 0000151C BF00000000              	mov rdi, 8 * 0	; new rib
  2698 00001521 E8C5530000              	call malloc
  2699 00001526 50                      	push rax
  2700 00001527 BF08000000              	mov rdi, 8 * 1	; extended env
  2701 0000152C E8BA530000              	call malloc
  2702 00001531 488B7D10                	mov rdi, ENV
  2703 00001535 BE00000000              	mov rsi, 0
  2704 0000153A BA01000000              	mov rdx, 1
  2705                                  .L_lambda_simple_env_loop_0011:	; ext_env[i + 1] <-- env[i]
  2706 0000153F 4883FE00                	cmp rsi, 0
  2707 00001543 7410                    	je .L_lambda_simple_env_end_0011
  2708 00001545 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2709 00001549 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2710 0000154D 48FFC6                  	inc rsi
  2711 00001550 48FFC2                  	inc rdx
  2712 00001553 EBEA                    	jmp .L_lambda_simple_env_loop_0011
  2713                                  .L_lambda_simple_env_end_0011:
  2714 00001555 5B                      	pop rbx
  2715 00001556 BE00000000              	mov rsi, 0
  2716                                  .L_lambda_simple_params_loop_0011:	; copy params
  2717 0000155B 4883FE00                	cmp rsi, 0
  2718 0000155F 740E                    	je .L_lambda_simple_params_end_0011
  2719 00001561 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2720 00001566 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2721 0000156A 48FFC6                  	inc rsi
  2722 0000156D EBEC                    	jmp .L_lambda_simple_params_loop_0011
  2723                                  .L_lambda_simple_params_end_0011:
  2724 0000156F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2725 00001572 4889C3                  	mov rbx, rax
  2726 00001575 58                      	pop rax
  2727 00001576 C60004                  	mov byte [rax], T_closure
  2728 00001579 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2729 0000157D 48C74009[8A150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0011
  2730 00001585 E9A4000000              	jmp .L_lambda_simple_end_0011
  2731                                  .L_lambda_simple_code_0011:	; lambda-simple body
  2732 0000158A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2733 00001590 740B                    	je .L_lambda_simple_arity_check_ok_0011
  2734 00001592 FF742410                	push qword [rsp + 8 * 2]
  2735 00001596 6A01                    	push 1
  2736 00001598 E907530000              	jmp L_error_incorrect_arity_simple
  2737                                  .L_lambda_simple_arity_check_ok_0011:
  2738 0000159D C8000000                	enter 0, 0
  2739                                  	; preparing a tail-call
  2740                                  	; preparing a non-tail-call
  2741 000015A1 488B4520                	mov rax, PARAM(0)	; param x
  2742 000015A5 50                      	push rax
  2743 000015A6 6A01                    	push 1	; arg count
  2744 000015A8 488B0425[370A0000]      	mov rax, qword [free_var_17]	; free var caar
  2745 000015B0 803805                  	cmp byte [rax], T_undefined
  2746 000015B3 0F8405520000            	je L_error_fvar_undefined
  2747 000015B9 803804                  	cmp byte [rax], T_closure
  2748 000015BC 0F8580520000            	jne L_error_non_closure
  2749 000015C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2750 000015C5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2751 000015C8 50                      	push rax
  2752 000015C9 6A01                    	push 1	; arg count
  2753 000015CB 488B0425[AE0A0000]      	mov rax, qword [free_var_24]	; free var cadr
  2754 000015D3 803805                  	cmp byte [rax], T_undefined
  2755 000015D6 0F84E2510000            	je L_error_fvar_undefined
  2756 000015DC 803804                  	cmp byte [rax], T_closure
  2757 000015DF 0F855D520000            	jne L_error_non_closure
  2758 000015E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2759 000015E8 FF7508                  	push qword [rbp + 8 * 1]
  2760                                   ; old ret addr
  2761 000015EB FF7500                  	push qword [rbp]
  2762                                   ; restore the old rbp
  2763 000015EE BB01000000              	mov rbx, 1
  2764 000015F3 4883C303                	add rbx, 3
  2765 000015F7 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2766 000015FB 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2767 00001600 4C8D4DF8                	lea r9, [rbp - 8]
  2768 00001604 B905000000              	mov rcx, 5
  2769                                  .L_tc_recycle_frame_loop_0011:
  2770 00001609 4883F900                	cmp rcx, 0
  2771 0000160D 7413                    	je .L_tc_recycle_frame_done_0011
  2772 0000160F 4D8B11                  	mov r10, qword [r9]
  2773 00001612 4D8910                  	mov qword [r8], r10
  2774 00001615 4983E808                	sub r8, 8
  2775 00001619 4983E908                	sub r9, 8
  2776 0000161D 48FFC9                  	dec rcx
  2777 00001620 EBE7                    	jmp .L_tc_recycle_frame_loop_0011
  2778                                  .L_tc_recycle_frame_done_0011:
  2779 00001622 498D6008                	lea rsp, [r8 + 8]
  2780 00001626 5D                      	pop rbp ; restore the old rbp
  2781 00001627 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2782 0000162A C9                      	leave
  2783 0000162B C21800                  	ret AND_KILL_FRAME(1)
  2784                                  .L_lambda_simple_end_0011:	; new closure is in rax
  2785 0000162E 48890425[480A0000]      	mov qword [free_var_18], rax
  2786 00001636 48B8-                   	mov rax, sob_void
  2786 00001638 [0000000000000000] 
  2787                                  
  2788 00001640 4889C7                  	mov rdi, rax
  2789 00001643 E8F8540000              	call print_sexpr_if_not_void
  2790 00001648 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2791 0000164D E899520000              	call malloc
  2792 00001652 50                      	push rax
  2793 00001653 BF00000000              	mov rdi, 8 * 0	; new rib
  2794 00001658 E88E520000              	call malloc
  2795 0000165D 50                      	push rax
  2796 0000165E BF08000000              	mov rdi, 8 * 1	; extended env
  2797 00001663 E883520000              	call malloc
  2798 00001668 488B7D10                	mov rdi, ENV
  2799 0000166C BE00000000              	mov rsi, 0
  2800 00001671 BA01000000              	mov rdx, 1
  2801                                  .L_lambda_simple_env_loop_0012:	; ext_env[i + 1] <-- env[i]
  2802 00001676 4883FE00                	cmp rsi, 0
  2803 0000167A 7410                    	je .L_lambda_simple_env_end_0012
  2804 0000167C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2805 00001680 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2806 00001684 48FFC6                  	inc rsi
  2807 00001687 48FFC2                  	inc rdx
  2808 0000168A EBEA                    	jmp .L_lambda_simple_env_loop_0012
  2809                                  .L_lambda_simple_env_end_0012:
  2810 0000168C 5B                      	pop rbx
  2811 0000168D BE00000000              	mov rsi, 0
  2812                                  .L_lambda_simple_params_loop_0012:	; copy params
  2813 00001692 4883FE00                	cmp rsi, 0
  2814 00001696 740E                    	je .L_lambda_simple_params_end_0012
  2815 00001698 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2816 0000169D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2817 000016A1 48FFC6                  	inc rsi
  2818 000016A4 EBEC                    	jmp .L_lambda_simple_params_loop_0012
  2819                                  .L_lambda_simple_params_end_0012:
  2820 000016A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2821 000016A9 4889C3                  	mov rbx, rax
  2822 000016AC 58                      	pop rax
  2823 000016AD C60004                  	mov byte [rax], T_closure
  2824 000016B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2825 000016B4 48C74009[C1160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0012
  2826 000016BC E9A4000000              	jmp .L_lambda_simple_end_0012
  2827                                  .L_lambda_simple_code_0012:	; lambda-simple body
  2828 000016C1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2829 000016C7 740B                    	je .L_lambda_simple_arity_check_ok_0012
  2830 000016C9 FF742410                	push qword [rsp + 8 * 2]
  2831 000016CD 6A01                    	push 1
  2832 000016CF E9D0510000              	jmp L_error_incorrect_arity_simple
  2833                                  .L_lambda_simple_arity_check_ok_0012:
  2834 000016D4 C8000000                	enter 0, 0
  2835                                  	; preparing a tail-call
  2836                                  	; preparing a non-tail-call
  2837 000016D8 488B4520                	mov rax, PARAM(0)	; param x
  2838 000016DC 50                      	push rax
  2839 000016DD 6A01                    	push 1	; arg count
  2840 000016DF 488B0425[AE0A0000]      	mov rax, qword [free_var_24]	; free var cadr
  2841 000016E7 803805                  	cmp byte [rax], T_undefined
  2842 000016EA 0F84CE500000            	je L_error_fvar_undefined
  2843 000016F0 803804                  	cmp byte [rax], T_closure
  2844 000016F3 0F8549510000            	jne L_error_non_closure
  2845 000016F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2846 000016FC FF5009                  	call SOB_CLOSURE_CODE(rax)
  2847 000016FF 50                      	push rax
  2848 00001700 6A01                    	push 1	; arg count
  2849 00001702 488B0425[AE0A0000]      	mov rax, qword [free_var_24]	; free var cadr
  2850 0000170A 803805                  	cmp byte [rax], T_undefined
  2851 0000170D 0F84AB500000            	je L_error_fvar_undefined
  2852 00001713 803804                  	cmp byte [rax], T_closure
  2853 00001716 0F8526510000            	jne L_error_non_closure
  2854 0000171C FF7001                  	push SOB_CLOSURE_ENV(rax)
  2855 0000171F FF7508                  	push qword [rbp + 8 * 1]
  2856                                   ; old ret addr
  2857 00001722 FF7500                  	push qword [rbp]
  2858                                   ; restore the old rbp
  2859 00001725 BB01000000              	mov rbx, 1
  2860 0000172A 4883C303                	add rbx, 3
  2861 0000172E 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2862 00001732 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2863 00001737 4C8D4DF8                	lea r9, [rbp - 8]
  2864 0000173B B905000000              	mov rcx, 5
  2865                                  .L_tc_recycle_frame_loop_0012:
  2866 00001740 4883F900                	cmp rcx, 0
  2867 00001744 7413                    	je .L_tc_recycle_frame_done_0012
  2868 00001746 4D8B11                  	mov r10, qword [r9]
  2869 00001749 4D8910                  	mov qword [r8], r10
  2870 0000174C 4983E808                	sub r8, 8
  2871 00001750 4983E908                	sub r9, 8
  2872 00001754 48FFC9                  	dec rcx
  2873 00001757 EBE7                    	jmp .L_tc_recycle_frame_loop_0012
  2874                                  .L_tc_recycle_frame_done_0012:
  2875 00001759 498D6008                	lea rsp, [r8 + 8]
  2876 0000175D 5D                      	pop rbp ; restore the old rbp
  2877 0000175E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2878 00001761 C9                      	leave
  2879 00001762 C21800                  	ret AND_KILL_FRAME(1)
  2880                                  .L_lambda_simple_end_0012:	; new closure is in rax
  2881 00001765 48890425[590A0000]      	mov qword [free_var_19], rax
  2882 0000176D 48B8-                   	mov rax, sob_void
  2882 0000176F [0000000000000000] 
  2883                                  
  2884 00001777 4889C7                  	mov rdi, rax
  2885 0000177A E8C1530000              	call print_sexpr_if_not_void
  2886 0000177F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2887 00001784 E862510000              	call malloc
  2888 00001789 50                      	push rax
  2889 0000178A BF00000000              	mov rdi, 8 * 0	; new rib
  2890 0000178F E857510000              	call malloc
  2891 00001794 50                      	push rax
  2892 00001795 BF08000000              	mov rdi, 8 * 1	; extended env
  2893 0000179A E84C510000              	call malloc
  2894 0000179F 488B7D10                	mov rdi, ENV
  2895 000017A3 BE00000000              	mov rsi, 0
  2896 000017A8 BA01000000              	mov rdx, 1
  2897                                  .L_lambda_simple_env_loop_0013:	; ext_env[i + 1] <-- env[i]
  2898 000017AD 4883FE00                	cmp rsi, 0
  2899 000017B1 7410                    	je .L_lambda_simple_env_end_0013
  2900 000017B3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2901 000017B7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2902 000017BB 48FFC6                  	inc rsi
  2903 000017BE 48FFC2                  	inc rdx
  2904 000017C1 EBEA                    	jmp .L_lambda_simple_env_loop_0013
  2905                                  .L_lambda_simple_env_end_0013:
  2906 000017C3 5B                      	pop rbx
  2907 000017C4 BE00000000              	mov rsi, 0
  2908                                  .L_lambda_simple_params_loop_0013:	; copy params
  2909 000017C9 4883FE00                	cmp rsi, 0
  2910 000017CD 740E                    	je .L_lambda_simple_params_end_0013
  2911 000017CF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2912 000017D4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2913 000017D8 48FFC6                  	inc rsi
  2914 000017DB EBEC                    	jmp .L_lambda_simple_params_loop_0013
  2915                                  .L_lambda_simple_params_end_0013:
  2916 000017DD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2917 000017E0 4889C3                  	mov rbx, rax
  2918 000017E3 58                      	pop rax
  2919 000017E4 C60004                  	mov byte [rax], T_closure
  2920 000017E7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2921 000017EB 48C74009[F8170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0013
  2922 000017F3 E9A4000000              	jmp .L_lambda_simple_end_0013
  2923                                  .L_lambda_simple_code_0013:	; lambda-simple body
  2924 000017F8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2925 000017FE 740B                    	je .L_lambda_simple_arity_check_ok_0013
  2926 00001800 FF742410                	push qword [rsp + 8 * 2]
  2927 00001804 6A01                    	push 1
  2928 00001806 E999500000              	jmp L_error_incorrect_arity_simple
  2929                                  .L_lambda_simple_arity_check_ok_0013:
  2930 0000180B C8000000                	enter 0, 0
  2931                                  	; preparing a tail-call
  2932                                  	; preparing a non-tail-call
  2933 0000180F 488B4520                	mov rax, PARAM(0)	; param x
  2934 00001813 50                      	push rax
  2935 00001814 6A01                    	push 1	; arg count
  2936 00001816 488B0425[360B0000]      	mov rax, qword [free_var_32]	; free var cdar
  2937 0000181E 803805                  	cmp byte [rax], T_undefined
  2938 00001821 0F84974F0000            	je L_error_fvar_undefined
  2939 00001827 803804                  	cmp byte [rax], T_closure
  2940 0000182A 0F8512500000            	jne L_error_non_closure
  2941 00001830 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2942 00001833 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2943 00001836 50                      	push rax
  2944 00001837 6A01                    	push 1	; arg count
  2945 00001839 488B0425[AE0A0000]      	mov rax, qword [free_var_24]	; free var cadr
  2946 00001841 803805                  	cmp byte [rax], T_undefined
  2947 00001844 0F84744F0000            	je L_error_fvar_undefined
  2948 0000184A 803804                  	cmp byte [rax], T_closure
  2949 0000184D 0F85EF4F0000            	jne L_error_non_closure
  2950 00001853 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2951 00001856 FF7508                  	push qword [rbp + 8 * 1]
  2952                                   ; old ret addr
  2953 00001859 FF7500                  	push qword [rbp]
  2954                                   ; restore the old rbp
  2955 0000185C BB01000000              	mov rbx, 1
  2956 00001861 4883C303                	add rbx, 3
  2957 00001865 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  2958 00001869 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  2959 0000186E 4C8D4DF8                	lea r9, [rbp - 8]
  2960 00001872 B905000000              	mov rcx, 5
  2961                                  .L_tc_recycle_frame_loop_0013:
  2962 00001877 4883F900                	cmp rcx, 0
  2963 0000187B 7413                    	je .L_tc_recycle_frame_done_0013
  2964 0000187D 4D8B11                  	mov r10, qword [r9]
  2965 00001880 4D8910                  	mov qword [r8], r10
  2966 00001883 4983E808                	sub r8, 8
  2967 00001887 4983E908                	sub r9, 8
  2968 0000188B 48FFC9                  	dec rcx
  2969 0000188E EBE7                    	jmp .L_tc_recycle_frame_loop_0013
  2970                                  .L_tc_recycle_frame_done_0013:
  2971 00001890 498D6008                	lea rsp, [r8 + 8]
  2972 00001894 5D                      	pop rbp ; restore the old rbp
  2973 00001895 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2974 00001898 C9                      	leave
  2975 00001899 C21800                  	ret AND_KILL_FRAME(1)
  2976                                  .L_lambda_simple_end_0013:	; new closure is in rax
  2977 0000189C 48890425[7B0A0000]      	mov qword [free_var_21], rax
  2978 000018A4 48B8-                   	mov rax, sob_void
  2978 000018A6 [0000000000000000] 
  2979                                  
  2980 000018AE 4889C7                  	mov rdi, rax
  2981 000018B1 E88A520000              	call print_sexpr_if_not_void
  2982 000018B6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2983 000018BB E82B500000              	call malloc
  2984 000018C0 50                      	push rax
  2985 000018C1 BF00000000              	mov rdi, 8 * 0	; new rib
  2986 000018C6 E820500000              	call malloc
  2987 000018CB 50                      	push rax
  2988 000018CC BF08000000              	mov rdi, 8 * 1	; extended env
  2989 000018D1 E815500000              	call malloc
  2990 000018D6 488B7D10                	mov rdi, ENV
  2991 000018DA BE00000000              	mov rsi, 0
  2992 000018DF BA01000000              	mov rdx, 1
  2993                                  .L_lambda_simple_env_loop_0014:	; ext_env[i + 1] <-- env[i]
  2994 000018E4 4883FE00                	cmp rsi, 0
  2995 000018E8 7410                    	je .L_lambda_simple_env_end_0014
  2996 000018EA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2997 000018EE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2998 000018F2 48FFC6                  	inc rsi
  2999 000018F5 48FFC2                  	inc rdx
  3000 000018F8 EBEA                    	jmp .L_lambda_simple_env_loop_0014
  3001                                  .L_lambda_simple_env_end_0014:
  3002 000018FA 5B                      	pop rbx
  3003 000018FB BE00000000              	mov rsi, 0
  3004                                  .L_lambda_simple_params_loop_0014:	; copy params
  3005 00001900 4883FE00                	cmp rsi, 0
  3006 00001904 740E                    	je .L_lambda_simple_params_end_0014
  3007 00001906 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3008 0000190B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3009 0000190F 48FFC6                  	inc rsi
  3010 00001912 EBEC                    	jmp .L_lambda_simple_params_loop_0014
  3011                                  .L_lambda_simple_params_end_0014:
  3012 00001914 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3013 00001917 4889C3                  	mov rbx, rax
  3014 0000191A 58                      	pop rax
  3015 0000191B C60004                  	mov byte [rax], T_closure
  3016 0000191E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3017 00001922 48C74009[2F190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0014
  3018 0000192A E9A4000000              	jmp .L_lambda_simple_end_0014
  3019                                  .L_lambda_simple_code_0014:	; lambda-simple body
  3020 0000192F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3021 00001935 740B                    	je .L_lambda_simple_arity_check_ok_0014
  3022 00001937 FF742410                	push qword [rsp + 8 * 2]
  3023 0000193B 6A01                    	push 1
  3024 0000193D E9624F0000              	jmp L_error_incorrect_arity_simple
  3025                                  .L_lambda_simple_arity_check_ok_0014:
  3026 00001942 C8000000                	enter 0, 0
  3027                                  	; preparing a tail-call
  3028                                  	; preparing a non-tail-call
  3029 00001946 488B4520                	mov rax, PARAM(0)	; param x
  3030 0000194A 50                      	push rax
  3031 0000194B 6A01                    	push 1	; arg count
  3032 0000194D 488B0425[AD0B0000]      	mov rax, qword [free_var_39]	; free var cddr
  3033 00001955 803805                  	cmp byte [rax], T_undefined
  3034 00001958 0F84604E0000            	je L_error_fvar_undefined
  3035 0000195E 803804                  	cmp byte [rax], T_closure
  3036 00001961 0F85DB4E0000            	jne L_error_non_closure
  3037 00001967 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3038 0000196A FF5009                  	call SOB_CLOSURE_CODE(rax)
  3039 0000196D 50                      	push rax
  3040 0000196E 6A01                    	push 1	; arg count
  3041 00001970 488B0425[AE0A0000]      	mov rax, qword [free_var_24]	; free var cadr
  3042 00001978 803805                  	cmp byte [rax], T_undefined
  3043 0000197B 0F843D4E0000            	je L_error_fvar_undefined
  3044 00001981 803804                  	cmp byte [rax], T_closure
  3045 00001984 0F85B84E0000            	jne L_error_non_closure
  3046 0000198A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3047 0000198D FF7508                  	push qword [rbp + 8 * 1]
  3048                                   ; old ret addr
  3049 00001990 FF7500                  	push qword [rbp]
  3050                                   ; restore the old rbp
  3051 00001993 BB01000000              	mov rbx, 1
  3052 00001998 4883C303                	add rbx, 3
  3053 0000199C 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3054 000019A0 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3055 000019A5 4C8D4DF8                	lea r9, [rbp - 8]
  3056 000019A9 B905000000              	mov rcx, 5
  3057                                  .L_tc_recycle_frame_loop_0014:
  3058 000019AE 4883F900                	cmp rcx, 0
  3059 000019B2 7413                    	je .L_tc_recycle_frame_done_0014
  3060 000019B4 4D8B11                  	mov r10, qword [r9]
  3061 000019B7 4D8910                  	mov qword [r8], r10
  3062 000019BA 4983E808                	sub r8, 8
  3063 000019BE 4983E908                	sub r9, 8
  3064 000019C2 48FFC9                  	dec rcx
  3065 000019C5 EBE7                    	jmp .L_tc_recycle_frame_loop_0014
  3066                                  .L_tc_recycle_frame_done_0014:
  3067 000019C7 498D6008                	lea rsp, [r8 + 8]
  3068 000019CB 5D                      	pop rbp ; restore the old rbp
  3069 000019CC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3070 000019CF C9                      	leave
  3071 000019D0 C21800                  	ret AND_KILL_FRAME(1)
  3072                                  .L_lambda_simple_end_0014:	; new closure is in rax
  3073 000019D3 48890425[8C0A0000]      	mov qword [free_var_22], rax
  3074 000019DB 48B8-                   	mov rax, sob_void
  3074 000019DD [0000000000000000] 
  3075                                  
  3076 000019E5 4889C7                  	mov rdi, rax
  3077 000019E8 E853510000              	call print_sexpr_if_not_void
  3078 000019ED BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3079 000019F2 E8F44E0000              	call malloc
  3080 000019F7 50                      	push rax
  3081 000019F8 BF00000000              	mov rdi, 8 * 0	; new rib
  3082 000019FD E8E94E0000              	call malloc
  3083 00001A02 50                      	push rax
  3084 00001A03 BF08000000              	mov rdi, 8 * 1	; extended env
  3085 00001A08 E8DE4E0000              	call malloc
  3086 00001A0D 488B7D10                	mov rdi, ENV
  3087 00001A11 BE00000000              	mov rsi, 0
  3088 00001A16 BA01000000              	mov rdx, 1
  3089                                  .L_lambda_simple_env_loop_0015:	; ext_env[i + 1] <-- env[i]
  3090 00001A1B 4883FE00                	cmp rsi, 0
  3091 00001A1F 7410                    	je .L_lambda_simple_env_end_0015
  3092 00001A21 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3093 00001A25 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3094 00001A29 48FFC6                  	inc rsi
  3095 00001A2C 48FFC2                  	inc rdx
  3096 00001A2F EBEA                    	jmp .L_lambda_simple_env_loop_0015
  3097                                  .L_lambda_simple_env_end_0015:
  3098 00001A31 5B                      	pop rbx
  3099 00001A32 BE00000000              	mov rsi, 0
  3100                                  .L_lambda_simple_params_loop_0015:	; copy params
  3101 00001A37 4883FE00                	cmp rsi, 0
  3102 00001A3B 740E                    	je .L_lambda_simple_params_end_0015
  3103 00001A3D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3104 00001A42 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3105 00001A46 48FFC6                  	inc rsi
  3106 00001A49 EBEC                    	jmp .L_lambda_simple_params_loop_0015
  3107                                  .L_lambda_simple_params_end_0015:
  3108 00001A4B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3109 00001A4E 4889C3                  	mov rbx, rax
  3110 00001A51 58                      	pop rax
  3111 00001A52 C60004                  	mov byte [rax], T_closure
  3112 00001A55 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3113 00001A59 48C74009[661A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0015
  3114 00001A61 E9A4000000              	jmp .L_lambda_simple_end_0015
  3115                                  .L_lambda_simple_code_0015:	; lambda-simple body
  3116 00001A66 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3117 00001A6C 740B                    	je .L_lambda_simple_arity_check_ok_0015
  3118 00001A6E FF742410                	push qword [rsp + 8 * 2]
  3119 00001A72 6A01                    	push 1
  3120 00001A74 E92B4E0000              	jmp L_error_incorrect_arity_simple
  3121                                  .L_lambda_simple_arity_check_ok_0015:
  3122 00001A79 C8000000                	enter 0, 0
  3123                                  	; preparing a tail-call
  3124                                  	; preparing a non-tail-call
  3125 00001A7D 488B4520                	mov rax, PARAM(0)	; param x
  3126 00001A81 50                      	push rax
  3127 00001A82 6A01                    	push 1	; arg count
  3128 00001A84 488B0425[370A0000]      	mov rax, qword [free_var_17]	; free var caar
  3129 00001A8C 803805                  	cmp byte [rax], T_undefined
  3130 00001A8F 0F84294D0000            	je L_error_fvar_undefined
  3131 00001A95 803804                  	cmp byte [rax], T_closure
  3132 00001A98 0F85A44D0000            	jne L_error_non_closure
  3133 00001A9E FF7001                  	push SOB_CLOSURE_ENV(rax)
  3134 00001AA1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3135 00001AA4 50                      	push rax
  3136 00001AA5 6A01                    	push 1	; arg count
  3137 00001AA7 488B0425[360B0000]      	mov rax, qword [free_var_32]	; free var cdar
  3138 00001AAF 803805                  	cmp byte [rax], T_undefined
  3139 00001AB2 0F84064D0000            	je L_error_fvar_undefined
  3140 00001AB8 803804                  	cmp byte [rax], T_closure
  3141 00001ABB 0F85814D0000            	jne L_error_non_closure
  3142 00001AC1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3143 00001AC4 FF7508                  	push qword [rbp + 8 * 1]
  3144                                   ; old ret addr
  3145 00001AC7 FF7500                  	push qword [rbp]
  3146                                   ; restore the old rbp
  3147 00001ACA BB01000000              	mov rbx, 1
  3148 00001ACF 4883C303                	add rbx, 3
  3149 00001AD3 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3150 00001AD7 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3151 00001ADC 4C8D4DF8                	lea r9, [rbp - 8]
  3152 00001AE0 B905000000              	mov rcx, 5
  3153                                  .L_tc_recycle_frame_loop_0015:
  3154 00001AE5 4883F900                	cmp rcx, 0
  3155 00001AE9 7413                    	je .L_tc_recycle_frame_done_0015
  3156 00001AEB 4D8B11                  	mov r10, qword [r9]
  3157 00001AEE 4D8910                  	mov qword [r8], r10
  3158 00001AF1 4983E808                	sub r8, 8
  3159 00001AF5 4983E908                	sub r9, 8
  3160 00001AF9 48FFC9                  	dec rcx
  3161 00001AFC EBE7                    	jmp .L_tc_recycle_frame_loop_0015
  3162                                  .L_tc_recycle_frame_done_0015:
  3163 00001AFE 498D6008                	lea rsp, [r8 + 8]
  3164 00001B02 5D                      	pop rbp ; restore the old rbp
  3165 00001B03 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3166 00001B06 C9                      	leave
  3167 00001B07 C21800                  	ret AND_KILL_FRAME(1)
  3168                                  .L_lambda_simple_end_0015:	; new closure is in rax
  3169 00001B0A 48890425[D00A0000]      	mov qword [free_var_26], rax
  3170 00001B12 48B8-                   	mov rax, sob_void
  3170 00001B14 [0000000000000000] 
  3171                                  
  3172 00001B1C 4889C7                  	mov rdi, rax
  3173 00001B1F E81C500000              	call print_sexpr_if_not_void
  3174 00001B24 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3175 00001B29 E8BD4D0000              	call malloc
  3176 00001B2E 50                      	push rax
  3177 00001B2F BF00000000              	mov rdi, 8 * 0	; new rib
  3178 00001B34 E8B24D0000              	call malloc
  3179 00001B39 50                      	push rax
  3180 00001B3A BF08000000              	mov rdi, 8 * 1	; extended env
  3181 00001B3F E8A74D0000              	call malloc
  3182 00001B44 488B7D10                	mov rdi, ENV
  3183 00001B48 BE00000000              	mov rsi, 0
  3184 00001B4D BA01000000              	mov rdx, 1
  3185                                  .L_lambda_simple_env_loop_0016:	; ext_env[i + 1] <-- env[i]
  3186 00001B52 4883FE00                	cmp rsi, 0
  3187 00001B56 7410                    	je .L_lambda_simple_env_end_0016
  3188 00001B58 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3189 00001B5C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3190 00001B60 48FFC6                  	inc rsi
  3191 00001B63 48FFC2                  	inc rdx
  3192 00001B66 EBEA                    	jmp .L_lambda_simple_env_loop_0016
  3193                                  .L_lambda_simple_env_end_0016:
  3194 00001B68 5B                      	pop rbx
  3195 00001B69 BE00000000              	mov rsi, 0
  3196                                  .L_lambda_simple_params_loop_0016:	; copy params
  3197 00001B6E 4883FE00                	cmp rsi, 0
  3198 00001B72 740E                    	je .L_lambda_simple_params_end_0016
  3199 00001B74 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3200 00001B79 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3201 00001B7D 48FFC6                  	inc rsi
  3202 00001B80 EBEC                    	jmp .L_lambda_simple_params_loop_0016
  3203                                  .L_lambda_simple_params_end_0016:
  3204 00001B82 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3205 00001B85 4889C3                  	mov rbx, rax
  3206 00001B88 58                      	pop rax
  3207 00001B89 C60004                  	mov byte [rax], T_closure
  3208 00001B8C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3209 00001B90 48C74009[9D1B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0016
  3210 00001B98 E9A4000000              	jmp .L_lambda_simple_end_0016
  3211                                  .L_lambda_simple_code_0016:	; lambda-simple body
  3212 00001B9D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3213 00001BA3 740B                    	je .L_lambda_simple_arity_check_ok_0016
  3214 00001BA5 FF742410                	push qword [rsp + 8 * 2]
  3215 00001BA9 6A01                    	push 1
  3216 00001BAB E9F44C0000              	jmp L_error_incorrect_arity_simple
  3217                                  .L_lambda_simple_arity_check_ok_0016:
  3218 00001BB0 C8000000                	enter 0, 0
  3219                                  	; preparing a tail-call
  3220                                  	; preparing a non-tail-call
  3221 00001BB4 488B4520                	mov rax, PARAM(0)	; param x
  3222 00001BB8 50                      	push rax
  3223 00001BB9 6A01                    	push 1	; arg count
  3224 00001BBB 488B0425[AE0A0000]      	mov rax, qword [free_var_24]	; free var cadr
  3225 00001BC3 803805                  	cmp byte [rax], T_undefined
  3226 00001BC6 0F84F24B0000            	je L_error_fvar_undefined
  3227 00001BCC 803804                  	cmp byte [rax], T_closure
  3228 00001BCF 0F856D4C0000            	jne L_error_non_closure
  3229 00001BD5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3230 00001BD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3231 00001BDB 50                      	push rax
  3232 00001BDC 6A01                    	push 1	; arg count
  3233 00001BDE 488B0425[360B0000]      	mov rax, qword [free_var_32]	; free var cdar
  3234 00001BE6 803805                  	cmp byte [rax], T_undefined
  3235 00001BE9 0F84CF4B0000            	je L_error_fvar_undefined
  3236 00001BEF 803804                  	cmp byte [rax], T_closure
  3237 00001BF2 0F854A4C0000            	jne L_error_non_closure
  3238 00001BF8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3239 00001BFB FF7508                  	push qword [rbp + 8 * 1]
  3240                                   ; old ret addr
  3241 00001BFE FF7500                  	push qword [rbp]
  3242                                   ; restore the old rbp
  3243 00001C01 BB01000000              	mov rbx, 1
  3244 00001C06 4883C303                	add rbx, 3
  3245 00001C0A 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3246 00001C0E 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3247 00001C13 4C8D4DF8                	lea r9, [rbp - 8]
  3248 00001C17 B905000000              	mov rcx, 5
  3249                                  .L_tc_recycle_frame_loop_0016:
  3250 00001C1C 4883F900                	cmp rcx, 0
  3251 00001C20 7413                    	je .L_tc_recycle_frame_done_0016
  3252 00001C22 4D8B11                  	mov r10, qword [r9]
  3253 00001C25 4D8910                  	mov qword [r8], r10
  3254 00001C28 4983E808                	sub r8, 8
  3255 00001C2C 4983E908                	sub r9, 8
  3256 00001C30 48FFC9                  	dec rcx
  3257 00001C33 EBE7                    	jmp .L_tc_recycle_frame_loop_0016
  3258                                  .L_tc_recycle_frame_done_0016:
  3259 00001C35 498D6008                	lea rsp, [r8 + 8]
  3260 00001C39 5D                      	pop rbp ; restore the old rbp
  3261 00001C3A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3262 00001C3D C9                      	leave
  3263 00001C3E C21800                  	ret AND_KILL_FRAME(1)
  3264                                  .L_lambda_simple_end_0016:	; new closure is in rax
  3265 00001C41 48890425[E10A0000]      	mov qword [free_var_27], rax
  3266 00001C49 48B8-                   	mov rax, sob_void
  3266 00001C4B [0000000000000000] 
  3267                                  
  3268 00001C53 4889C7                  	mov rdi, rax
  3269 00001C56 E8E54E0000              	call print_sexpr_if_not_void
  3270 00001C5B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3271 00001C60 E8864C0000              	call malloc
  3272 00001C65 50                      	push rax
  3273 00001C66 BF00000000              	mov rdi, 8 * 0	; new rib
  3274 00001C6B E87B4C0000              	call malloc
  3275 00001C70 50                      	push rax
  3276 00001C71 BF08000000              	mov rdi, 8 * 1	; extended env
  3277 00001C76 E8704C0000              	call malloc
  3278 00001C7B 488B7D10                	mov rdi, ENV
  3279 00001C7F BE00000000              	mov rsi, 0
  3280 00001C84 BA01000000              	mov rdx, 1
  3281                                  .L_lambda_simple_env_loop_0017:	; ext_env[i + 1] <-- env[i]
  3282 00001C89 4883FE00                	cmp rsi, 0
  3283 00001C8D 7410                    	je .L_lambda_simple_env_end_0017
  3284 00001C8F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3285 00001C93 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3286 00001C97 48FFC6                  	inc rsi
  3287 00001C9A 48FFC2                  	inc rdx
  3288 00001C9D EBEA                    	jmp .L_lambda_simple_env_loop_0017
  3289                                  .L_lambda_simple_env_end_0017:
  3290 00001C9F 5B                      	pop rbx
  3291 00001CA0 BE00000000              	mov rsi, 0
  3292                                  .L_lambda_simple_params_loop_0017:	; copy params
  3293 00001CA5 4883FE00                	cmp rsi, 0
  3294 00001CA9 740E                    	je .L_lambda_simple_params_end_0017
  3295 00001CAB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3296 00001CB0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3297 00001CB4 48FFC6                  	inc rsi
  3298 00001CB7 EBEC                    	jmp .L_lambda_simple_params_loop_0017
  3299                                  .L_lambda_simple_params_end_0017:
  3300 00001CB9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3301 00001CBC 4889C3                  	mov rbx, rax
  3302 00001CBF 58                      	pop rax
  3303 00001CC0 C60004                  	mov byte [rax], T_closure
  3304 00001CC3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3305 00001CC7 48C74009[D41C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0017
  3306 00001CCF E9A4000000              	jmp .L_lambda_simple_end_0017
  3307                                  .L_lambda_simple_code_0017:	; lambda-simple body
  3308 00001CD4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3309 00001CDA 740B                    	je .L_lambda_simple_arity_check_ok_0017
  3310 00001CDC FF742410                	push qword [rsp + 8 * 2]
  3311 00001CE0 6A01                    	push 1
  3312 00001CE2 E9BD4B0000              	jmp L_error_incorrect_arity_simple
  3313                                  .L_lambda_simple_arity_check_ok_0017:
  3314 00001CE7 C8000000                	enter 0, 0
  3315                                  	; preparing a tail-call
  3316                                  	; preparing a non-tail-call
  3317 00001CEB 488B4520                	mov rax, PARAM(0)	; param x
  3318 00001CEF 50                      	push rax
  3319 00001CF0 6A01                    	push 1	; arg count
  3320 00001CF2 488B0425[360B0000]      	mov rax, qword [free_var_32]	; free var cdar
  3321 00001CFA 803805                  	cmp byte [rax], T_undefined
  3322 00001CFD 0F84BB4A0000            	je L_error_fvar_undefined
  3323 00001D03 803804                  	cmp byte [rax], T_closure
  3324 00001D06 0F85364B0000            	jne L_error_non_closure
  3325 00001D0C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3326 00001D0F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3327 00001D12 50                      	push rax
  3328 00001D13 6A01                    	push 1	; arg count
  3329 00001D15 488B0425[360B0000]      	mov rax, qword [free_var_32]	; free var cdar
  3330 00001D1D 803805                  	cmp byte [rax], T_undefined
  3331 00001D20 0F84984A0000            	je L_error_fvar_undefined
  3332 00001D26 803804                  	cmp byte [rax], T_closure
  3333 00001D29 0F85134B0000            	jne L_error_non_closure
  3334 00001D2F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3335 00001D32 FF7508                  	push qword [rbp + 8 * 1]
  3336                                   ; old ret addr
  3337 00001D35 FF7500                  	push qword [rbp]
  3338                                   ; restore the old rbp
  3339 00001D38 BB01000000              	mov rbx, 1
  3340 00001D3D 4883C303                	add rbx, 3
  3341 00001D41 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3342 00001D45 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3343 00001D4A 4C8D4DF8                	lea r9, [rbp - 8]
  3344 00001D4E B905000000              	mov rcx, 5
  3345                                  .L_tc_recycle_frame_loop_0017:
  3346 00001D53 4883F900                	cmp rcx, 0
  3347 00001D57 7413                    	je .L_tc_recycle_frame_done_0017
  3348 00001D59 4D8B11                  	mov r10, qword [r9]
  3349 00001D5C 4D8910                  	mov qword [r8], r10
  3350 00001D5F 4983E808                	sub r8, 8
  3351 00001D63 4983E908                	sub r9, 8
  3352 00001D67 48FFC9                  	dec rcx
  3353 00001D6A EBE7                    	jmp .L_tc_recycle_frame_loop_0017
  3354                                  .L_tc_recycle_frame_done_0017:
  3355 00001D6C 498D6008                	lea rsp, [r8 + 8]
  3356 00001D70 5D                      	pop rbp ; restore the old rbp
  3357 00001D71 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3358 00001D74 C9                      	leave
  3359 00001D75 C21800                  	ret AND_KILL_FRAME(1)
  3360                                  .L_lambda_simple_end_0017:	; new closure is in rax
  3361 00001D78 48890425[030B0000]      	mov qword [free_var_29], rax
  3362 00001D80 48B8-                   	mov rax, sob_void
  3362 00001D82 [0000000000000000] 
  3363                                  
  3364 00001D8A 4889C7                  	mov rdi, rax
  3365 00001D8D E8AE4D0000              	call print_sexpr_if_not_void
  3366 00001D92 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3367 00001D97 E84F4B0000              	call malloc
  3368 00001D9C 50                      	push rax
  3369 00001D9D BF00000000              	mov rdi, 8 * 0	; new rib
  3370 00001DA2 E8444B0000              	call malloc
  3371 00001DA7 50                      	push rax
  3372 00001DA8 BF08000000              	mov rdi, 8 * 1	; extended env
  3373 00001DAD E8394B0000              	call malloc
  3374 00001DB2 488B7D10                	mov rdi, ENV
  3375 00001DB6 BE00000000              	mov rsi, 0
  3376 00001DBB BA01000000              	mov rdx, 1
  3377                                  .L_lambda_simple_env_loop_0018:	; ext_env[i + 1] <-- env[i]
  3378 00001DC0 4883FE00                	cmp rsi, 0
  3379 00001DC4 7410                    	je .L_lambda_simple_env_end_0018
  3380 00001DC6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3381 00001DCA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3382 00001DCE 48FFC6                  	inc rsi
  3383 00001DD1 48FFC2                  	inc rdx
  3384 00001DD4 EBEA                    	jmp .L_lambda_simple_env_loop_0018
  3385                                  .L_lambda_simple_env_end_0018:
  3386 00001DD6 5B                      	pop rbx
  3387 00001DD7 BE00000000              	mov rsi, 0
  3388                                  .L_lambda_simple_params_loop_0018:	; copy params
  3389 00001DDC 4883FE00                	cmp rsi, 0
  3390 00001DE0 740E                    	je .L_lambda_simple_params_end_0018
  3391 00001DE2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3392 00001DE7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3393 00001DEB 48FFC6                  	inc rsi
  3394 00001DEE EBEC                    	jmp .L_lambda_simple_params_loop_0018
  3395                                  .L_lambda_simple_params_end_0018:
  3396 00001DF0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3397 00001DF3 4889C3                  	mov rbx, rax
  3398 00001DF6 58                      	pop rax
  3399 00001DF7 C60004                  	mov byte [rax], T_closure
  3400 00001DFA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3401 00001DFE 48C74009[0B1E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0018
  3402 00001E06 E9A4000000              	jmp .L_lambda_simple_end_0018
  3403                                  .L_lambda_simple_code_0018:	; lambda-simple body
  3404 00001E0B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3405 00001E11 740B                    	je .L_lambda_simple_arity_check_ok_0018
  3406 00001E13 FF742410                	push qword [rsp + 8 * 2]
  3407 00001E17 6A01                    	push 1
  3408 00001E19 E9864A0000              	jmp L_error_incorrect_arity_simple
  3409                                  .L_lambda_simple_arity_check_ok_0018:
  3410 00001E1E C8000000                	enter 0, 0
  3411                                  	; preparing a tail-call
  3412                                  	; preparing a non-tail-call
  3413 00001E22 488B4520                	mov rax, PARAM(0)	; param x
  3414 00001E26 50                      	push rax
  3415 00001E27 6A01                    	push 1	; arg count
  3416 00001E29 488B0425[AD0B0000]      	mov rax, qword [free_var_39]	; free var cddr
  3417 00001E31 803805                  	cmp byte [rax], T_undefined
  3418 00001E34 0F8484490000            	je L_error_fvar_undefined
  3419 00001E3A 803804                  	cmp byte [rax], T_closure
  3420 00001E3D 0F85FF490000            	jne L_error_non_closure
  3421 00001E43 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3422 00001E46 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3423 00001E49 50                      	push rax
  3424 00001E4A 6A01                    	push 1	; arg count
  3425 00001E4C 488B0425[360B0000]      	mov rax, qword [free_var_32]	; free var cdar
  3426 00001E54 803805                  	cmp byte [rax], T_undefined
  3427 00001E57 0F8461490000            	je L_error_fvar_undefined
  3428 00001E5D 803804                  	cmp byte [rax], T_closure
  3429 00001E60 0F85DC490000            	jne L_error_non_closure
  3430 00001E66 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3431 00001E69 FF7508                  	push qword [rbp + 8 * 1]
  3432                                   ; old ret addr
  3433 00001E6C FF7500                  	push qword [rbp]
  3434                                   ; restore the old rbp
  3435 00001E6F BB01000000              	mov rbx, 1
  3436 00001E74 4883C303                	add rbx, 3
  3437 00001E78 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3438 00001E7C 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3439 00001E81 4C8D4DF8                	lea r9, [rbp - 8]
  3440 00001E85 B905000000              	mov rcx, 5
  3441                                  .L_tc_recycle_frame_loop_0018:
  3442 00001E8A 4883F900                	cmp rcx, 0
  3443 00001E8E 7413                    	je .L_tc_recycle_frame_done_0018
  3444 00001E90 4D8B11                  	mov r10, qword [r9]
  3445 00001E93 4D8910                  	mov qword [r8], r10
  3446 00001E96 4983E808                	sub r8, 8
  3447 00001E9A 4983E908                	sub r9, 8
  3448 00001E9E 48FFC9                  	dec rcx
  3449 00001EA1 EBE7                    	jmp .L_tc_recycle_frame_loop_0018
  3450                                  .L_tc_recycle_frame_done_0018:
  3451 00001EA3 498D6008                	lea rsp, [r8 + 8]
  3452 00001EA7 5D                      	pop rbp ; restore the old rbp
  3453 00001EA8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3454 00001EAB C9                      	leave
  3455 00001EAC C21800                  	ret AND_KILL_FRAME(1)
  3456                                  .L_lambda_simple_end_0018:	; new closure is in rax
  3457 00001EAF 48890425[140B0000]      	mov qword [free_var_30], rax
  3458 00001EB7 48B8-                   	mov rax, sob_void
  3458 00001EB9 [0000000000000000] 
  3459                                  
  3460 00001EC1 4889C7                  	mov rdi, rax
  3461 00001EC4 E8774C0000              	call print_sexpr_if_not_void
  3462 00001EC9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3463 00001ECE E8184A0000              	call malloc
  3464 00001ED3 50                      	push rax
  3465 00001ED4 BF00000000              	mov rdi, 8 * 0	; new rib
  3466 00001ED9 E80D4A0000              	call malloc
  3467 00001EDE 50                      	push rax
  3468 00001EDF BF08000000              	mov rdi, 8 * 1	; extended env
  3469 00001EE4 E8024A0000              	call malloc
  3470 00001EE9 488B7D10                	mov rdi, ENV
  3471 00001EED BE00000000              	mov rsi, 0
  3472 00001EF2 BA01000000              	mov rdx, 1
  3473                                  .L_lambda_simple_env_loop_0019:	; ext_env[i + 1] <-- env[i]
  3474 00001EF7 4883FE00                	cmp rsi, 0
  3475 00001EFB 7410                    	je .L_lambda_simple_env_end_0019
  3476 00001EFD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3477 00001F01 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3478 00001F05 48FFC6                  	inc rsi
  3479 00001F08 48FFC2                  	inc rdx
  3480 00001F0B EBEA                    	jmp .L_lambda_simple_env_loop_0019
  3481                                  .L_lambda_simple_env_end_0019:
  3482 00001F0D 5B                      	pop rbx
  3483 00001F0E BE00000000              	mov rsi, 0
  3484                                  .L_lambda_simple_params_loop_0019:	; copy params
  3485 00001F13 4883FE00                	cmp rsi, 0
  3486 00001F17 740E                    	je .L_lambda_simple_params_end_0019
  3487 00001F19 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3488 00001F1E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3489 00001F22 48FFC6                  	inc rsi
  3490 00001F25 EBEC                    	jmp .L_lambda_simple_params_loop_0019
  3491                                  .L_lambda_simple_params_end_0019:
  3492 00001F27 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3493 00001F2A 4889C3                  	mov rbx, rax
  3494 00001F2D 58                      	pop rax
  3495 00001F2E C60004                  	mov byte [rax], T_closure
  3496 00001F31 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3497 00001F35 48C74009[421F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0019
  3498 00001F3D E9A4000000              	jmp .L_lambda_simple_end_0019
  3499                                  .L_lambda_simple_code_0019:	; lambda-simple body
  3500 00001F42 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3501 00001F48 740B                    	je .L_lambda_simple_arity_check_ok_0019
  3502 00001F4A FF742410                	push qword [rsp + 8 * 2]
  3503 00001F4E 6A01                    	push 1
  3504 00001F50 E94F490000              	jmp L_error_incorrect_arity_simple
  3505                                  .L_lambda_simple_arity_check_ok_0019:
  3506 00001F55 C8000000                	enter 0, 0
  3507                                  	; preparing a tail-call
  3508                                  	; preparing a non-tail-call
  3509 00001F59 488B4520                	mov rax, PARAM(0)	; param x
  3510 00001F5D 50                      	push rax
  3511 00001F5E 6A01                    	push 1	; arg count
  3512 00001F60 488B0425[370A0000]      	mov rax, qword [free_var_17]	; free var caar
  3513 00001F68 803805                  	cmp byte [rax], T_undefined
  3514 00001F6B 0F844D480000            	je L_error_fvar_undefined
  3515 00001F71 803804                  	cmp byte [rax], T_closure
  3516 00001F74 0F85C8480000            	jne L_error_non_closure
  3517 00001F7A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3518 00001F7D FF5009                  	call SOB_CLOSURE_CODE(rax)
  3519 00001F80 50                      	push rax
  3520 00001F81 6A01                    	push 1	; arg count
  3521 00001F83 488B0425[AD0B0000]      	mov rax, qword [free_var_39]	; free var cddr
  3522 00001F8B 803805                  	cmp byte [rax], T_undefined
  3523 00001F8E 0F842A480000            	je L_error_fvar_undefined
  3524 00001F94 803804                  	cmp byte [rax], T_closure
  3525 00001F97 0F85A5480000            	jne L_error_non_closure
  3526 00001F9D FF7001                  	push SOB_CLOSURE_ENV(rax)
  3527 00001FA0 FF7508                  	push qword [rbp + 8 * 1]
  3528                                   ; old ret addr
  3529 00001FA3 FF7500                  	push qword [rbp]
  3530                                   ; restore the old rbp
  3531 00001FA6 BB01000000              	mov rbx, 1
  3532 00001FAB 4883C303                	add rbx, 3
  3533 00001FAF 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3534 00001FB3 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3535 00001FB8 4C8D4DF8                	lea r9, [rbp - 8]
  3536 00001FBC B905000000              	mov rcx, 5
  3537                                  .L_tc_recycle_frame_loop_0019:
  3538 00001FC1 4883F900                	cmp rcx, 0
  3539 00001FC5 7413                    	je .L_tc_recycle_frame_done_0019
  3540 00001FC7 4D8B11                  	mov r10, qword [r9]
  3541 00001FCA 4D8910                  	mov qword [r8], r10
  3542 00001FCD 4983E808                	sub r8, 8
  3543 00001FD1 4983E908                	sub r9, 8
  3544 00001FD5 48FFC9                  	dec rcx
  3545 00001FD8 EBE7                    	jmp .L_tc_recycle_frame_loop_0019
  3546                                  .L_tc_recycle_frame_done_0019:
  3547 00001FDA 498D6008                	lea rsp, [r8 + 8]
  3548 00001FDE 5D                      	pop rbp ; restore the old rbp
  3549 00001FDF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3550 00001FE2 C9                      	leave
  3551 00001FE3 C21800                  	ret AND_KILL_FRAME(1)
  3552                                  .L_lambda_simple_end_0019:	; new closure is in rax
  3553 00001FE6 48890425[470B0000]      	mov qword [free_var_33], rax
  3554 00001FEE 48B8-                   	mov rax, sob_void
  3554 00001FF0 [0000000000000000] 
  3555                                  
  3556 00001FF8 4889C7                  	mov rdi, rax
  3557 00001FFB E8404B0000              	call print_sexpr_if_not_void
  3558 00002000 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3559 00002005 E8E1480000              	call malloc
  3560 0000200A 50                      	push rax
  3561 0000200B BF00000000              	mov rdi, 8 * 0	; new rib
  3562 00002010 E8D6480000              	call malloc
  3563 00002015 50                      	push rax
  3564 00002016 BF08000000              	mov rdi, 8 * 1	; extended env
  3565 0000201B E8CB480000              	call malloc
  3566 00002020 488B7D10                	mov rdi, ENV
  3567 00002024 BE00000000              	mov rsi, 0
  3568 00002029 BA01000000              	mov rdx, 1
  3569                                  .L_lambda_simple_env_loop_001a:	; ext_env[i + 1] <-- env[i]
  3570 0000202E 4883FE00                	cmp rsi, 0
  3571 00002032 7410                    	je .L_lambda_simple_env_end_001a
  3572 00002034 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3573 00002038 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3574 0000203C 48FFC6                  	inc rsi
  3575 0000203F 48FFC2                  	inc rdx
  3576 00002042 EBEA                    	jmp .L_lambda_simple_env_loop_001a
  3577                                  .L_lambda_simple_env_end_001a:
  3578 00002044 5B                      	pop rbx
  3579 00002045 BE00000000              	mov rsi, 0
  3580                                  .L_lambda_simple_params_loop_001a:	; copy params
  3581 0000204A 4883FE00                	cmp rsi, 0
  3582 0000204E 740E                    	je .L_lambda_simple_params_end_001a
  3583 00002050 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3584 00002055 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3585 00002059 48FFC6                  	inc rsi
  3586 0000205C EBEC                    	jmp .L_lambda_simple_params_loop_001a
  3587                                  .L_lambda_simple_params_end_001a:
  3588 0000205E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3589 00002061 4889C3                  	mov rbx, rax
  3590 00002064 58                      	pop rax
  3591 00002065 C60004                  	mov byte [rax], T_closure
  3592 00002068 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3593 0000206C 48C74009[79200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001a
  3594 00002074 E9A4000000              	jmp .L_lambda_simple_end_001a
  3595                                  .L_lambda_simple_code_001a:	; lambda-simple body
  3596 00002079 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3597 0000207F 740B                    	je .L_lambda_simple_arity_check_ok_001a
  3598 00002081 FF742410                	push qword [rsp + 8 * 2]
  3599 00002085 6A01                    	push 1
  3600 00002087 E918480000              	jmp L_error_incorrect_arity_simple
  3601                                  .L_lambda_simple_arity_check_ok_001a:
  3602 0000208C C8000000                	enter 0, 0
  3603                                  	; preparing a tail-call
  3604                                  	; preparing a non-tail-call
  3605 00002090 488B4520                	mov rax, PARAM(0)	; param x
  3606 00002094 50                      	push rax
  3607 00002095 6A01                    	push 1	; arg count
  3608 00002097 488B0425[AE0A0000]      	mov rax, qword [free_var_24]	; free var cadr
  3609 0000209F 803805                  	cmp byte [rax], T_undefined
  3610 000020A2 0F8416470000            	je L_error_fvar_undefined
  3611 000020A8 803804                  	cmp byte [rax], T_closure
  3612 000020AB 0F8591470000            	jne L_error_non_closure
  3613 000020B1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3614 000020B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3615 000020B7 50                      	push rax
  3616 000020B8 6A01                    	push 1	; arg count
  3617 000020BA 488B0425[AD0B0000]      	mov rax, qword [free_var_39]	; free var cddr
  3618 000020C2 803805                  	cmp byte [rax], T_undefined
  3619 000020C5 0F84F3460000            	je L_error_fvar_undefined
  3620 000020CB 803804                  	cmp byte [rax], T_closure
  3621 000020CE 0F856E470000            	jne L_error_non_closure
  3622 000020D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3623 000020D7 FF7508                  	push qword [rbp + 8 * 1]
  3624                                   ; old ret addr
  3625 000020DA FF7500                  	push qword [rbp]
  3626                                   ; restore the old rbp
  3627 000020DD BB01000000              	mov rbx, 1
  3628 000020E2 4883C303                	add rbx, 3
  3629 000020E6 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3630 000020EA 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3631 000020EF 4C8D4DF8                	lea r9, [rbp - 8]
  3632 000020F3 B905000000              	mov rcx, 5
  3633                                  .L_tc_recycle_frame_loop_001a:
  3634 000020F8 4883F900                	cmp rcx, 0
  3635 000020FC 7413                    	je .L_tc_recycle_frame_done_001a
  3636 000020FE 4D8B11                  	mov r10, qword [r9]
  3637 00002101 4D8910                  	mov qword [r8], r10
  3638 00002104 4983E808                	sub r8, 8
  3639 00002108 4983E908                	sub r9, 8
  3640 0000210C 48FFC9                  	dec rcx
  3641 0000210F EBE7                    	jmp .L_tc_recycle_frame_loop_001a
  3642                                  .L_tc_recycle_frame_done_001a:
  3643 00002111 498D6008                	lea rsp, [r8 + 8]
  3644 00002115 5D                      	pop rbp ; restore the old rbp
  3645 00002116 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3646 00002119 C9                      	leave
  3647 0000211A C21800                  	ret AND_KILL_FRAME(1)
  3648                                  .L_lambda_simple_end_001a:	; new closure is in rax
  3649 0000211D 48890425[580B0000]      	mov qword [free_var_34], rax
  3650 00002125 48B8-                   	mov rax, sob_void
  3650 00002127 [0000000000000000] 
  3651                                  
  3652 0000212F 4889C7                  	mov rdi, rax
  3653 00002132 E8094A0000              	call print_sexpr_if_not_void
  3654 00002137 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3655 0000213C E8AA470000              	call malloc
  3656 00002141 50                      	push rax
  3657 00002142 BF00000000              	mov rdi, 8 * 0	; new rib
  3658 00002147 E89F470000              	call malloc
  3659 0000214C 50                      	push rax
  3660 0000214D BF08000000              	mov rdi, 8 * 1	; extended env
  3661 00002152 E894470000              	call malloc
  3662 00002157 488B7D10                	mov rdi, ENV
  3663 0000215B BE00000000              	mov rsi, 0
  3664 00002160 BA01000000              	mov rdx, 1
  3665                                  .L_lambda_simple_env_loop_001b:	; ext_env[i + 1] <-- env[i]
  3666 00002165 4883FE00                	cmp rsi, 0
  3667 00002169 7410                    	je .L_lambda_simple_env_end_001b
  3668 0000216B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3669 0000216F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3670 00002173 48FFC6                  	inc rsi
  3671 00002176 48FFC2                  	inc rdx
  3672 00002179 EBEA                    	jmp .L_lambda_simple_env_loop_001b
  3673                                  .L_lambda_simple_env_end_001b:
  3674 0000217B 5B                      	pop rbx
  3675 0000217C BE00000000              	mov rsi, 0
  3676                                  .L_lambda_simple_params_loop_001b:	; copy params
  3677 00002181 4883FE00                	cmp rsi, 0
  3678 00002185 740E                    	je .L_lambda_simple_params_end_001b
  3679 00002187 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3680 0000218C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3681 00002190 48FFC6                  	inc rsi
  3682 00002193 EBEC                    	jmp .L_lambda_simple_params_loop_001b
  3683                                  .L_lambda_simple_params_end_001b:
  3684 00002195 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3685 00002198 4889C3                  	mov rbx, rax
  3686 0000219B 58                      	pop rax
  3687 0000219C C60004                  	mov byte [rax], T_closure
  3688 0000219F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3689 000021A3 48C74009[B0210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001b
  3690 000021AB E9A4000000              	jmp .L_lambda_simple_end_001b
  3691                                  .L_lambda_simple_code_001b:	; lambda-simple body
  3692 000021B0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3693 000021B6 740B                    	je .L_lambda_simple_arity_check_ok_001b
  3694 000021B8 FF742410                	push qword [rsp + 8 * 2]
  3695 000021BC 6A01                    	push 1
  3696 000021BE E9E1460000              	jmp L_error_incorrect_arity_simple
  3697                                  .L_lambda_simple_arity_check_ok_001b:
  3698 000021C3 C8000000                	enter 0, 0
  3699                                  	; preparing a tail-call
  3700                                  	; preparing a non-tail-call
  3701 000021C7 488B4520                	mov rax, PARAM(0)	; param x
  3702 000021CB 50                      	push rax
  3703 000021CC 6A01                    	push 1	; arg count
  3704 000021CE 488B0425[360B0000]      	mov rax, qword [free_var_32]	; free var cdar
  3705 000021D6 803805                  	cmp byte [rax], T_undefined
  3706 000021D9 0F84DF450000            	je L_error_fvar_undefined
  3707 000021DF 803804                  	cmp byte [rax], T_closure
  3708 000021E2 0F855A460000            	jne L_error_non_closure
  3709 000021E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3710 000021EB FF5009                  	call SOB_CLOSURE_CODE(rax)
  3711 000021EE 50                      	push rax
  3712 000021EF 6A01                    	push 1	; arg count
  3713 000021F1 488B0425[AD0B0000]      	mov rax, qword [free_var_39]	; free var cddr
  3714 000021F9 803805                  	cmp byte [rax], T_undefined
  3715 000021FC 0F84BC450000            	je L_error_fvar_undefined
  3716 00002202 803804                  	cmp byte [rax], T_closure
  3717 00002205 0F8537460000            	jne L_error_non_closure
  3718 0000220B FF7001                  	push SOB_CLOSURE_ENV(rax)
  3719 0000220E FF7508                  	push qword [rbp + 8 * 1]
  3720                                   ; old ret addr
  3721 00002211 FF7500                  	push qword [rbp]
  3722                                   ; restore the old rbp
  3723 00002214 BB01000000              	mov rbx, 1
  3724 00002219 4883C303                	add rbx, 3
  3725 0000221D 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3726 00002221 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3727 00002226 4C8D4DF8                	lea r9, [rbp - 8]
  3728 0000222A B905000000              	mov rcx, 5
  3729                                  .L_tc_recycle_frame_loop_001b:
  3730 0000222F 4883F900                	cmp rcx, 0
  3731 00002233 7413                    	je .L_tc_recycle_frame_done_001b
  3732 00002235 4D8B11                  	mov r10, qword [r9]
  3733 00002238 4D8910                  	mov qword [r8], r10
  3734 0000223B 4983E808                	sub r8, 8
  3735 0000223F 4983E908                	sub r9, 8
  3736 00002243 48FFC9                  	dec rcx
  3737 00002246 EBE7                    	jmp .L_tc_recycle_frame_loop_001b
  3738                                  .L_tc_recycle_frame_done_001b:
  3739 00002248 498D6008                	lea rsp, [r8 + 8]
  3740 0000224C 5D                      	pop rbp ; restore the old rbp
  3741 0000224D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3742 00002250 C9                      	leave
  3743 00002251 C21800                  	ret AND_KILL_FRAME(1)
  3744                                  .L_lambda_simple_end_001b:	; new closure is in rax
  3745 00002254 48890425[7A0B0000]      	mov qword [free_var_36], rax
  3746 0000225C 48B8-                   	mov rax, sob_void
  3746 0000225E [0000000000000000] 
  3747                                  
  3748 00002266 4889C7                  	mov rdi, rax
  3749 00002269 E8D2480000              	call print_sexpr_if_not_void
  3750 0000226E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3751 00002273 E873460000              	call malloc
  3752 00002278 50                      	push rax
  3753 00002279 BF00000000              	mov rdi, 8 * 0	; new rib
  3754 0000227E E868460000              	call malloc
  3755 00002283 50                      	push rax
  3756 00002284 BF08000000              	mov rdi, 8 * 1	; extended env
  3757 00002289 E85D460000              	call malloc
  3758 0000228E 488B7D10                	mov rdi, ENV
  3759 00002292 BE00000000              	mov rsi, 0
  3760 00002297 BA01000000              	mov rdx, 1
  3761                                  .L_lambda_simple_env_loop_001c:	; ext_env[i + 1] <-- env[i]
  3762 0000229C 4883FE00                	cmp rsi, 0
  3763 000022A0 7410                    	je .L_lambda_simple_env_end_001c
  3764 000022A2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3765 000022A6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3766 000022AA 48FFC6                  	inc rsi
  3767 000022AD 48FFC2                  	inc rdx
  3768 000022B0 EBEA                    	jmp .L_lambda_simple_env_loop_001c
  3769                                  .L_lambda_simple_env_end_001c:
  3770 000022B2 5B                      	pop rbx
  3771 000022B3 BE00000000              	mov rsi, 0
  3772                                  .L_lambda_simple_params_loop_001c:	; copy params
  3773 000022B8 4883FE00                	cmp rsi, 0
  3774 000022BC 740E                    	je .L_lambda_simple_params_end_001c
  3775 000022BE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3776 000022C3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3777 000022C7 48FFC6                  	inc rsi
  3778 000022CA EBEC                    	jmp .L_lambda_simple_params_loop_001c
  3779                                  .L_lambda_simple_params_end_001c:
  3780 000022CC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3781 000022CF 4889C3                  	mov rbx, rax
  3782 000022D2 58                      	pop rax
  3783 000022D3 C60004                  	mov byte [rax], T_closure
  3784 000022D6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3785 000022DA 48C74009[E7220000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001c
  3786 000022E2 E9A4000000              	jmp .L_lambda_simple_end_001c
  3787                                  .L_lambda_simple_code_001c:	; lambda-simple body
  3788 000022E7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3789 000022ED 740B                    	je .L_lambda_simple_arity_check_ok_001c
  3790 000022EF FF742410                	push qword [rsp + 8 * 2]
  3791 000022F3 6A01                    	push 1
  3792 000022F5 E9AA450000              	jmp L_error_incorrect_arity_simple
  3793                                  .L_lambda_simple_arity_check_ok_001c:
  3794 000022FA C8000000                	enter 0, 0
  3795                                  	; preparing a tail-call
  3796                                  	; preparing a non-tail-call
  3797 000022FE 488B4520                	mov rax, PARAM(0)	; param x
  3798 00002302 50                      	push rax
  3799 00002303 6A01                    	push 1	; arg count
  3800 00002305 488B0425[AD0B0000]      	mov rax, qword [free_var_39]	; free var cddr
  3801 0000230D 803805                  	cmp byte [rax], T_undefined
  3802 00002310 0F84A8440000            	je L_error_fvar_undefined
  3803 00002316 803804                  	cmp byte [rax], T_closure
  3804 00002319 0F8523450000            	jne L_error_non_closure
  3805 0000231F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3806 00002322 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3807 00002325 50                      	push rax
  3808 00002326 6A01                    	push 1	; arg count
  3809 00002328 488B0425[AD0B0000]      	mov rax, qword [free_var_39]	; free var cddr
  3810 00002330 803805                  	cmp byte [rax], T_undefined
  3811 00002333 0F8485440000            	je L_error_fvar_undefined
  3812 00002339 803804                  	cmp byte [rax], T_closure
  3813 0000233C 0F8500450000            	jne L_error_non_closure
  3814 00002342 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3815 00002345 FF7508                  	push qword [rbp + 8 * 1]
  3816                                   ; old ret addr
  3817 00002348 FF7500                  	push qword [rbp]
  3818                                   ; restore the old rbp
  3819 0000234B BB01000000              	mov rbx, 1
  3820 00002350 4883C303                	add rbx, 3
  3821 00002354 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3822 00002358 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3823 0000235D 4C8D4DF8                	lea r9, [rbp - 8]
  3824 00002361 B905000000              	mov rcx, 5
  3825                                  .L_tc_recycle_frame_loop_001c:
  3826 00002366 4883F900                	cmp rcx, 0
  3827 0000236A 7413                    	je .L_tc_recycle_frame_done_001c
  3828 0000236C 4D8B11                  	mov r10, qword [r9]
  3829 0000236F 4D8910                  	mov qword [r8], r10
  3830 00002372 4983E808                	sub r8, 8
  3831 00002376 4983E908                	sub r9, 8
  3832 0000237A 48FFC9                  	dec rcx
  3833 0000237D EBE7                    	jmp .L_tc_recycle_frame_loop_001c
  3834                                  .L_tc_recycle_frame_done_001c:
  3835 0000237F 498D6008                	lea rsp, [r8 + 8]
  3836 00002383 5D                      	pop rbp ; restore the old rbp
  3837 00002384 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3838 00002387 C9                      	leave
  3839 00002388 C21800                  	ret AND_KILL_FRAME(1)
  3840                                  .L_lambda_simple_end_001c:	; new closure is in rax
  3841 0000238B 48890425[8B0B0000]      	mov qword [free_var_37], rax
  3842 00002393 48B8-                   	mov rax, sob_void
  3842 00002395 [0000000000000000] 
  3843                                  
  3844 0000239D 4889C7                  	mov rdi, rax
  3845 000023A0 E89B470000              	call print_sexpr_if_not_void
  3846 000023A5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3847 000023AA E83C450000              	call malloc
  3848 000023AF 50                      	push rax
  3849 000023B0 BF00000000              	mov rdi, 8 * 0	; new rib
  3850 000023B5 E831450000              	call malloc
  3851 000023BA 50                      	push rax
  3852 000023BB BF08000000              	mov rdi, 8 * 1	; extended env
  3853 000023C0 E826450000              	call malloc
  3854 000023C5 488B7D10                	mov rdi, ENV
  3855 000023C9 BE00000000              	mov rsi, 0
  3856 000023CE BA01000000              	mov rdx, 1
  3857                                  .L_lambda_simple_env_loop_001d:	; ext_env[i + 1] <-- env[i]
  3858 000023D3 4883FE00                	cmp rsi, 0
  3859 000023D7 7410                    	je .L_lambda_simple_env_end_001d
  3860 000023D9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3861 000023DD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3862 000023E1 48FFC6                  	inc rsi
  3863 000023E4 48FFC2                  	inc rdx
  3864 000023E7 EBEA                    	jmp .L_lambda_simple_env_loop_001d
  3865                                  .L_lambda_simple_env_end_001d:
  3866 000023E9 5B                      	pop rbx
  3867 000023EA BE00000000              	mov rsi, 0
  3868                                  .L_lambda_simple_params_loop_001d:	; copy params
  3869 000023EF 4883FE00                	cmp rsi, 0
  3870 000023F3 740E                    	je .L_lambda_simple_params_end_001d
  3871 000023F5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3872 000023FA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3873 000023FE 48FFC6                  	inc rsi
  3874 00002401 EBEC                    	jmp .L_lambda_simple_params_loop_001d
  3875                                  .L_lambda_simple_params_end_001d:
  3876 00002403 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3877 00002406 4889C3                  	mov rbx, rax
  3878 00002409 58                      	pop rax
  3879 0000240A C60004                  	mov byte [rax], T_closure
  3880 0000240D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3881 00002411 48C74009[1E240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001d
  3882 00002419 E91E010000              	jmp .L_lambda_simple_end_001d
  3883                                  .L_lambda_simple_code_001d:	; lambda-simple body
  3884 0000241E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3885 00002424 740B                    	je .L_lambda_simple_arity_check_ok_001d
  3886 00002426 FF742410                	push qword [rsp + 8 * 2]
  3887 0000242A 6A01                    	push 1
  3888 0000242C E973440000              	jmp L_error_incorrect_arity_simple
  3889                                  .L_lambda_simple_arity_check_ok_001d:
  3890 00002431 C8000000                	enter 0, 0
  3891                                  	; preparing a non-tail-call
  3892 00002435 488B4520                	mov rax, PARAM(0)	; param e
  3893 00002439 50                      	push rax
  3894 0000243A 6A01                    	push 1	; arg count
  3895 0000243C 488B0425[CE0C0000]      	mov rax, qword [free_var_56]	; free var null?
  3896 00002444 803805                  	cmp byte [rax], T_undefined
  3897 00002447 0F8471430000            	je L_error_fvar_undefined
  3898 0000244D 803804                  	cmp byte [rax], T_closure
  3899 00002450 0F85EC430000            	jne L_error_non_closure
  3900 00002456 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3901 00002459 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3902 0000245C 483D[02000000]          	cmp rax, sob_boolean_false
  3903 00002462 0F84D0000000            	je .L_or_end_0001
  3904                                  
  3905                                  	; preparing a non-tail-call
  3906 00002468 488B4520                	mov rax, PARAM(0)	; param e
  3907 0000246C 50                      	push rax
  3908 0000246D 6A01                    	push 1	; arg count
  3909 0000246F 488B0425[F00C0000]      	mov rax, qword [free_var_58]	; free var pair?
  3910 00002477 803805                  	cmp byte [rax], T_undefined
  3911 0000247A 0F843E430000            	je L_error_fvar_undefined
  3912 00002480 803804                  	cmp byte [rax], T_closure
  3913 00002483 0F85B9430000            	jne L_error_non_closure
  3914 00002489 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3915 0000248C FF5009                  	call SOB_CLOSURE_CODE(rax)
  3916 0000248F 483D[02000000]          	cmp rax, sob_boolean_false
  3917 00002495 0F848B000000            	je .L_if_else_0001
  3918                                  	; preparing a tail-call
  3919                                  	; preparing a non-tail-call
  3920 0000249B 488B4520                	mov rax, PARAM(0)	; param e
  3921 0000249F 50                      	push rax
  3922 000024A0 6A01                    	push 1	; arg count
  3923 000024A2 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  3924 000024AA 803805                  	cmp byte [rax], T_undefined
  3925 000024AD 0F840B430000            	je L_error_fvar_undefined
  3926 000024B3 803804                  	cmp byte [rax], T_closure
  3927 000024B6 0F8586430000            	jne L_error_non_closure
  3928 000024BC FF7001                  	push SOB_CLOSURE_ENV(rax)
  3929 000024BF FF5009                  	call SOB_CLOSURE_CODE(rax)
  3930 000024C2 50                      	push rax
  3931 000024C3 6A01                    	push 1	; arg count
  3932 000024C5 488B0425[9B0C0000]      	mov rax, qword [free_var_53]	; free var list?
  3933 000024CD 803805                  	cmp byte [rax], T_undefined
  3934 000024D0 0F84E8420000            	je L_error_fvar_undefined
  3935 000024D6 803804                  	cmp byte [rax], T_closure
  3936 000024D9 0F8563430000            	jne L_error_non_closure
  3937 000024DF FF7001                  	push SOB_CLOSURE_ENV(rax)
  3938 000024E2 FF7508                  	push qword [rbp + 8 * 1]
  3939                                   ; old ret addr
  3940 000024E5 FF7500                  	push qword [rbp]
  3941                                   ; restore the old rbp
  3942 000024E8 BB01000000              	mov rbx, 1
  3943 000024ED 4883C303                	add rbx, 3
  3944 000024F1 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  3945 000024F5 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  3946 000024FA 4C8D4DF8                	lea r9, [rbp - 8]
  3947 000024FE B905000000              	mov rcx, 5
  3948                                  .L_tc_recycle_frame_loop_001d:
  3949 00002503 4883F900                	cmp rcx, 0
  3950 00002507 7413                    	je .L_tc_recycle_frame_done_001d
  3951 00002509 4D8B11                  	mov r10, qword [r9]
  3952 0000250C 4D8910                  	mov qword [r8], r10
  3953 0000250F 4983E808                	sub r8, 8
  3954 00002513 4983E908                	sub r9, 8
  3955 00002517 48FFC9                  	dec rcx
  3956 0000251A EBE7                    	jmp .L_tc_recycle_frame_loop_001d
  3957                                  .L_tc_recycle_frame_done_001d:
  3958 0000251C 498D6008                	lea rsp, [r8 + 8]
  3959 00002520 5D                      	pop rbp ; restore the old rbp
  3960 00002521 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3961 00002524 EB0A                    	jmp .L_if_end_0001
  3962                                  .L_if_else_0001:
  3963 00002526 48B8-                   	mov rax, L_constants + 2
  3963 00002528 [0200000000000000] 
  3964                                  .L_if_end_0001:
  3965 00002530 483D[02000000]          	cmp rax, sob_boolean_false
  3966 00002536 7400                    	je .L_or_end_0001
  3967                                  .L_or_end_0001:
  3968 00002538 C9                      	leave
  3969 00002539 C21800                  	ret AND_KILL_FRAME(1)
  3970                                  .L_lambda_simple_end_001d:	; new closure is in rax
  3971 0000253C 48890425[9B0C0000]      	mov qword [free_var_53], rax
  3972 00002544 48B8-                   	mov rax, sob_void
  3972 00002546 [0000000000000000] 
  3973                                  
  3974 0000254E 4889C7                  	mov rdi, rax
  3975 00002551 E8EA450000              	call print_sexpr_if_not_void
  3976 00002556 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3977 0000255B E88B430000              	call malloc
  3978 00002560 50                      	push rax
  3979 00002561 BF00000000              	mov rdi, 8 * 0	; new rib
  3980 00002566 E880430000              	call malloc
  3981 0000256B 50                      	push rax
  3982 0000256C BF08000000              	mov rdi, 8 * 1	; extended env
  3983 00002571 E875430000              	call malloc
  3984 00002576 488B7D10                	mov rdi, ENV
  3985 0000257A 4831F6                  	 xor rsi, rsi
  3986 0000257D 4831D2                  	 xor rdx, rdx
  3987 00002580 48FFC2                  	inc rdx
  3988                                  .L_lambda_opt_env_loop_0001:	; 
  3989 00002583 4883FE00                	cmp rsi, 0
  3990 00002587 7410                    	je .L_lambda_opt_env_end_0001
  3991 00002589 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3992 0000258D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3993 00002591 48FFC6                  	inc rsi
  3994 00002594 48FFC2                  	inc rdx
  3995 00002597 EBEA                    	jmp .L_lambda_opt_env_loop_0001
  3996                                  .L_lambda_opt_env_end_0001:
  3997 00002599 5B                      	pop rbx
  3998 0000259A 4831F6                  	xor rsi, rsi
  3999                                  .L_lambda_opt_params_loop_0001:	; copy params
  4000 0000259D 4883FE00                	cmp rsi, 0
  4001 000025A1 740E                    	je .L_lambda_opt_params_end_0001
  4002 000025A3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4003 000025A8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4004 000025AC 48FFC6                  	inc rsi
  4005 000025AF EBEC                    	jmp .L_lambda_opt_params_loop_0001
  4006                                  .L_lambda_opt_params_end_0001:
  4007 000025B1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4008 000025B4 4889C3                  	mov rbx, rax
  4009 000025B7 58                      	pop rax
  4010 000025B8 C60004                  	mov byte [rax], T_closure
  4011 000025BB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4012 000025BF 48C74009[CC250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
  4013 000025C7 E9FE000000              	jmp .L_lambda_opt_end_0001
  4014                                  .L_lambda_opt_code_0001:
  4015 000025CC 4C8B7C2410              	mov r15, qword [rsp + 8 * 2]
  4016 000025D1 4983FF00                	cmp r15, 0
  4017 000025D5 7409                    	je .L_lambda_opt_arity_check_exact_0001
  4018 000025D7 7F57                    	jg .L_lambda_opt_arity_check_more_0001
  4019 000025D9 6A00                    	push 0
  4020 000025DB E9D8420000              	jmp L_error_incorrect_arity_opt
  4021                                  .L_lambda_opt_arity_check_exact_0001: ;Exact case
  4022 000025E0 4C8B0424                	mov r8, qword [rsp -8 * 0]
  4023 000025E4 4C894424F8              	mov qword [rsp -8], r8
  4024 000025E9 4C8B442408              	mov r8, qword [rsp +8]
  4025 000025EE 4C890424                	mov qword [rsp +8 * 0], r8
  4026 000025F2 4C8B442410              	mov r8, qword [rsp +8 * 2]
  4027 000025F7 4C89C1                  	mov rcx, r8
  4028 000025FA 49FFC0                  	inc r8
  4029 000025FD 4C89442408              	mov qword [rsp +8], r8
  4030 00002602 4889E2                  	mov rdx, rsp
  4031 00002605 4883C218                	add rdx, 24
  4032                                  .L_lambda_opt_loop_copy_to_new_frame_exact_0001:
  4033 00002609 4883F900                	cmp rcx, 0
  4034 0000260D 7410                    	je .L_lambda_opt_loop_copy_to_new_frame_exact_end_0001
  4035 0000260F 4C8B02                  	mov r8, qword [rdx]
  4036 00002612 4C8942F8                	mov qword [rdx - 8], r8
  4037 00002616 4883C208                	add rdx, 8
  4038 0000261A 48FFC9                  	dec rcx
  4039 0000261D EBEA                    	jmp .L_lambda_opt_loop_copy_to_new_frame_exact_0001
  4040                                  .L_lambda_opt_loop_copy_to_new_frame_exact_end_0001:
  4041 0000261F 48C742F8[01000000]      	mov qword [rdx - 8], sob_nil
  4042 00002627 4883EC08                	sub rsp, 8
  4043 0000262B E985000000              	jmp .L_lambda_opt_stack_adjusted_0001
  4044                                  .L_lambda_opt_arity_check_more_0001:
  4045 00002630 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  4046 00002635 4D89C4                  	mov r12, r8
  4047 00002638 4C89C1                  	mov rcx, r8
  4048 0000263B 4D8D6802                	lea r13, [r8 + 2] 
  4049 0000263F 4883E900                	sub rcx, 0
  4050 00002643 4E8D5CC410              	lea r11, qword [rsp + r8 * 8 + 16]
  4051 00002648 49BE-                   	mov r14, sob_nil
  4051 0000264A [0100000000000000] 
  4052                                  .L_lambda_opt_create_list_of_opt_params_0001:
  4053 00002652 4883F900                	cmp rcx, 0
  4054 00002656 7424                    	je .L_lambda_opt_create_list_of_opt_params_end_0001
  4055 00002658 BF11000000              	mov rdi, 17
  4056 0000265D E889420000              	call malloc
  4057 00002662 C60021                  	mov byte [rax], T_pair
  4058 00002665 498B1B                  	mov rbx, qword [r11]
  4059 00002668 48895801                	mov qword [rax +1], rbx
  4060 0000266C 4C897009                	mov qword [rax + 1 + 8], r14
  4061 00002670 4989C6                  	mov r14, rax
  4062 00002673 48FFC9                  	dec rcx
  4063 00002676 4983EB08                	sub r11, 8
  4064 0000267A EBD6                    	jmp .L_lambda_opt_create_list_of_opt_params_0001
  4065                                  .L_lambda_opt_create_list_of_opt_params_end_0001:
  4066 0000267C 4C8D542418              	lea r10, [rsp + 0*8 + 8*3]
  4067 00002681 4D8932                  	mov qword [r10], r14
  4068 00002684 4E8D2CED00000000        	lea r13, [8 * r13]
  4069 0000268C 4901E5                  	add r13, rsp
  4070 0000268F B904000000              	mov rcx, 4 + 0
  4071                                  .L_lambda_opt_stack_shrink_loop_0001:
  4072 00002694 4883F900                	cmp rcx, 0
  4073 00002698 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0001
  4074 0000269A 4D8B1A                  	mov r11, qword [r10]
  4075 0000269D 4D895D00                	mov qword [r13], r11
  4076 000026A1 4983EA08                	sub r10, 8
  4077 000026A5 4983ED08                	sub r13, 8
  4078 000026A9 48FFC9                  	dec rcx
  4079 000026AC EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0001
  4080                                  .L_lambda_opt_stack_shrink_loop_exit_0001:
  4081 000026AE 4983C508                	add r13, 8
  4082 000026B2 4C89EC                  	mov rsp, r13
  4083                                  .L_lambda_opt_stack_adjusted_0001:
  4084 000026B5 48C744241001000000      	mov qword [rsp + 8*2], 1
  4085 000026BE C8000000                	enter 0, 0
  4086 000026C2 488B4520                	mov rax, PARAM(0)	; param args
  4087 000026C6 C9                      	leave
  4088 000026C7 C21800                  	ret 8 * (2 + 1)
  4089                                  .L_lambda_opt_end_0001:	; new closure is in rax
  4090 000026CA 48890425[790C0000]      	mov qword [free_var_51], rax
  4091 000026D2 48B8-                   	mov rax, sob_void
  4091 000026D4 [0000000000000000] 
  4092                                  
  4093 000026DC 4889C7                  	mov rdi, rax
  4094 000026DF E85C440000              	call print_sexpr_if_not_void
  4095 000026E4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4096 000026E9 E8FD410000              	call malloc
  4097 000026EE 50                      	push rax
  4098 000026EF BF00000000              	mov rdi, 8 * 0	; new rib
  4099 000026F4 E8F2410000              	call malloc
  4100 000026F9 50                      	push rax
  4101 000026FA BF08000000              	mov rdi, 8 * 1	; extended env
  4102 000026FF E8E7410000              	call malloc
  4103 00002704 488B7D10                	mov rdi, ENV
  4104 00002708 BE00000000              	mov rsi, 0
  4105 0000270D BA01000000              	mov rdx, 1
  4106                                  .L_lambda_simple_env_loop_001e:	; ext_env[i + 1] <-- env[i]
  4107 00002712 4883FE00                	cmp rsi, 0
  4108 00002716 7410                    	je .L_lambda_simple_env_end_001e
  4109 00002718 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4110 0000271C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4111 00002720 48FFC6                  	inc rsi
  4112 00002723 48FFC2                  	inc rdx
  4113 00002726 EBEA                    	jmp .L_lambda_simple_env_loop_001e
  4114                                  .L_lambda_simple_env_end_001e:
  4115 00002728 5B                      	pop rbx
  4116 00002729 BE00000000              	mov rsi, 0
  4117                                  .L_lambda_simple_params_loop_001e:	; copy params
  4118 0000272E 4883FE00                	cmp rsi, 0
  4119 00002732 740E                    	je .L_lambda_simple_params_end_001e
  4120 00002734 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4121 00002739 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4122 0000273D 48FFC6                  	inc rsi
  4123 00002740 EBEC                    	jmp .L_lambda_simple_params_loop_001e
  4124                                  .L_lambda_simple_params_end_001e:
  4125 00002742 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4126 00002745 4889C3                  	mov rbx, rax
  4127 00002748 58                      	pop rax
  4128 00002749 C60004                  	mov byte [rax], T_closure
  4129 0000274C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4130 00002750 48C74009[5A270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001e
  4131 00002758 EB3D                    	jmp .L_lambda_simple_end_001e
  4132                                  .L_lambda_simple_code_001e:	; lambda-simple body
  4133 0000275A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4134 00002760 740B                    	je .L_lambda_simple_arity_check_ok_001e
  4135 00002762 FF742410                	push qword [rsp + 8 * 2]
  4136 00002766 6A01                    	push 1
  4137 00002768 E937410000              	jmp L_error_incorrect_arity_simple
  4138                                  .L_lambda_simple_arity_check_ok_001e:
  4139 0000276D C8000000                	enter 0, 0
  4140 00002771 488B4520                	mov rax, PARAM(0)	; param x
  4141 00002775 483D[02000000]          	cmp rax, sob_boolean_false
  4142 0000277B 740C                    	je .L_if_else_0002
  4143 0000277D 48B8-                   	mov rax, L_constants + 2
  4143 0000277F [0200000000000000] 
  4144 00002787 EB0A                    	jmp .L_if_end_0002
  4145                                  .L_if_else_0002:
  4146 00002789 48B8-                   	mov rax, L_constants + 3
  4146 0000278B [0300000000000000] 
  4147                                  .L_if_end_0002:
  4148 00002793 C9                      	leave
  4149 00002794 C21800                  	ret AND_KILL_FRAME(1)
  4150                                  .L_lambda_simple_end_001e:	; new closure is in rax
  4151 00002797 48890425[BD0C0000]      	mov qword [free_var_55], rax
  4152 0000279F 48B8-                   	mov rax, sob_void
  4152 000027A1 [0000000000000000] 
  4153                                  
  4154 000027A9 4889C7                  	mov rdi, rax
  4155 000027AC E88F430000              	call print_sexpr_if_not_void
  4156 000027B1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4157 000027B6 E830410000              	call malloc
  4158 000027BB 50                      	push rax
  4159 000027BC BF00000000              	mov rdi, 8 * 0	; new rib
  4160 000027C1 E825410000              	call malloc
  4161 000027C6 50                      	push rax
  4162 000027C7 BF08000000              	mov rdi, 8 * 1	; extended env
  4163 000027CC E81A410000              	call malloc
  4164 000027D1 488B7D10                	mov rdi, ENV
  4165 000027D5 BE00000000              	mov rsi, 0
  4166 000027DA BA01000000              	mov rdx, 1
  4167                                  .L_lambda_simple_env_loop_001f:	; ext_env[i + 1] <-- env[i]
  4168 000027DF 4883FE00                	cmp rsi, 0
  4169 000027E3 7410                    	je .L_lambda_simple_env_end_001f
  4170 000027E5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4171 000027E9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4172 000027ED 48FFC6                  	inc rsi
  4173 000027F0 48FFC2                  	inc rdx
  4174 000027F3 EBEA                    	jmp .L_lambda_simple_env_loop_001f
  4175                                  .L_lambda_simple_env_end_001f:
  4176 000027F5 5B                      	pop rbx
  4177 000027F6 BE00000000              	mov rsi, 0
  4178                                  .L_lambda_simple_params_loop_001f:	; copy params
  4179 000027FB 4883FE00                	cmp rsi, 0
  4180 000027FF 740E                    	je .L_lambda_simple_params_end_001f
  4181 00002801 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4182 00002806 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4183 0000280A 48FFC6                  	inc rsi
  4184 0000280D EBEC                    	jmp .L_lambda_simple_params_loop_001f
  4185                                  .L_lambda_simple_params_end_001f:
  4186 0000280F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4187 00002812 4889C3                  	mov rbx, rax
  4188 00002815 58                      	pop rax
  4189 00002816 C60004                  	mov byte [rax], T_closure
  4190 00002819 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4191 0000281D 48C74009[2A280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001f
  4192 00002825 E9B8000000              	jmp .L_lambda_simple_end_001f
  4193                                  .L_lambda_simple_code_001f:	; lambda-simple body
  4194 0000282A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4195 00002830 740B                    	je .L_lambda_simple_arity_check_ok_001f
  4196 00002832 FF742410                	push qword [rsp + 8 * 2]
  4197 00002836 6A01                    	push 1
  4198 00002838 E967400000              	jmp L_error_incorrect_arity_simple
  4199                                  .L_lambda_simple_arity_check_ok_001f:
  4200 0000283D C8000000                	enter 0, 0
  4201                                  	; preparing a non-tail-call
  4202 00002841 488B4520                	mov rax, PARAM(0)	; param q
  4203 00002845 50                      	push rax
  4204 00002846 6A01                    	push 1	; arg count
  4205 00002848 488B0425[680C0000]      	mov rax, qword [free_var_50]	; free var integer?
  4206 00002850 803805                  	cmp byte [rax], T_undefined
  4207 00002853 0F84653F0000            	je L_error_fvar_undefined
  4208 00002859 803804                  	cmp byte [rax], T_closure
  4209 0000285C 0F85E03F0000            	jne L_error_non_closure
  4210 00002862 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4211 00002865 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4212 00002868 483D[02000000]          	cmp rax, sob_boolean_false
  4213 0000286E 746E                    	je .L_or_end_0002
  4214                                  
  4215                                  	; preparing a tail-call
  4216 00002870 488B4520                	mov rax, PARAM(0)	; param q
  4217 00002874 50                      	push rax
  4218 00002875 6A01                    	push 1	; arg count
  4219 00002877 488B0425[240C0000]      	mov rax, qword [free_var_46]	; free var fraction?
  4220 0000287F 803805                  	cmp byte [rax], T_undefined
  4221 00002882 0F84363F0000            	je L_error_fvar_undefined
  4222 00002888 803804                  	cmp byte [rax], T_closure
  4223 0000288B 0F85B13F0000            	jne L_error_non_closure
  4224 00002891 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4225 00002894 FF7508                  	push qword [rbp + 8 * 1]
  4226                                   ; old ret addr
  4227 00002897 FF7500                  	push qword [rbp]
  4228                                   ; restore the old rbp
  4229 0000289A BB01000000              	mov rbx, 1
  4230 0000289F 4883C303                	add rbx, 3
  4231 000028A3 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  4232 000028A7 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  4233 000028AC 4C8D4DF8                	lea r9, [rbp - 8]
  4234 000028B0 B905000000              	mov rcx, 5
  4235                                  .L_tc_recycle_frame_loop_001e:
  4236 000028B5 4883F900                	cmp rcx, 0
  4237 000028B9 7413                    	je .L_tc_recycle_frame_done_001e
  4238 000028BB 4D8B11                  	mov r10, qword [r9]
  4239 000028BE 4D8910                  	mov qword [r8], r10
  4240 000028C1 4983E808                	sub r8, 8
  4241 000028C5 4983E908                	sub r9, 8
  4242 000028C9 48FFC9                  	dec rcx
  4243 000028CC EBE7                    	jmp .L_tc_recycle_frame_loop_001e
  4244                                  .L_tc_recycle_frame_done_001e:
  4245 000028CE 498D6008                	lea rsp, [r8 + 8]
  4246 000028D2 5D                      	pop rbp ; restore the old rbp
  4247 000028D3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4248 000028D6 483D[02000000]          	cmp rax, sob_boolean_false
  4249 000028DC 7400                    	je .L_or_end_0002
  4250                                  .L_or_end_0002:
  4251 000028DE C9                      	leave
  4252 000028DF C21800                  	ret AND_KILL_FRAME(1)
  4253                                  .L_lambda_simple_end_001f:	; new closure is in rax
  4254 000028E2 48890425[010D0000]      	mov qword [free_var_59], rax
  4255 000028EA 48B8-                   	mov rax, sob_void
  4255 000028EC [0000000000000000] 
  4256                                  
  4257 000028F4 4889C7                  	mov rdi, rax
  4258 000028F7 E844420000              	call print_sexpr_if_not_void
  4259                                  	; preparing a non-tail-call
  4260 000028FC 48B8-                   	mov rax, L_constants + 1993
  4260 000028FE [C907000000000000] 
  4261 00002906 50                      	push rax
  4262 00002907 6A01                    	push 1	; arg count
  4263 00002909 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4264 0000290E E8D83F0000              	call malloc
  4265 00002913 50                      	push rax
  4266 00002914 BF00000000              	mov rdi, 8 * 0	; new rib
  4267 00002919 E8CD3F0000              	call malloc
  4268 0000291E 50                      	push rax
  4269 0000291F BF08000000              	mov rdi, 8 * 1	; extended env
  4270 00002924 E8C23F0000              	call malloc
  4271 00002929 488B7D10                	mov rdi, ENV
  4272 0000292D BE00000000              	mov rsi, 0
  4273 00002932 BA01000000              	mov rdx, 1
  4274                                  .L_lambda_simple_env_loop_0020:	; ext_env[i + 1] <-- env[i]
  4275 00002937 4883FE00                	cmp rsi, 0
  4276 0000293B 7410                    	je .L_lambda_simple_env_end_0020
  4277 0000293D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4278 00002941 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4279 00002945 48FFC6                  	inc rsi
  4280 00002948 48FFC2                  	inc rdx
  4281 0000294B EBEA                    	jmp .L_lambda_simple_env_loop_0020
  4282                                  .L_lambda_simple_env_end_0020:
  4283 0000294D 5B                      	pop rbx
  4284 0000294E BE00000000              	mov rsi, 0
  4285                                  .L_lambda_simple_params_loop_0020:	; copy params
  4286 00002953 4883FE00                	cmp rsi, 0
  4287 00002957 740E                    	je .L_lambda_simple_params_end_0020
  4288 00002959 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4289 0000295E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4290 00002962 48FFC6                  	inc rsi
  4291 00002965 EBEC                    	jmp .L_lambda_simple_params_loop_0020
  4292                                  .L_lambda_simple_params_end_0020:
  4293 00002967 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4294 0000296A 4889C3                  	mov rbx, rax
  4295 0000296D 58                      	pop rax
  4296 0000296E C60004                  	mov byte [rax], T_closure
  4297 00002971 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4298 00002975 48C74009[82290000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0020
  4299 0000297D E9C3030000              	jmp .L_lambda_simple_end_0020
  4300                                  .L_lambda_simple_code_0020:	; lambda-simple body
  4301 00002982 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4302 00002988 740B                    	je .L_lambda_simple_arity_check_ok_0020
  4303 0000298A FF742410                	push qword [rsp + 8 * 2]
  4304 0000298E 6A01                    	push 1
  4305 00002990 E90F3F0000              	jmp L_error_incorrect_arity_simple
  4306                                  .L_lambda_simple_arity_check_ok_0020:
  4307 00002995 C8000000                	enter 0, 0
  4308 00002999 BF08000000              	mov rdi, 8*1
  4309 0000299E E8483F0000              	call malloc
  4310 000029A3 488B5D20                	mov rbx, PARAM(0)
  4311 000029A7 488918                  	mov qword [rax], rbx
  4312 000029AA 48894520                	mov PARAM(0), rax
  4313 000029AE 48B8-                   	mov rax, sob_void
  4313 000029B0 [0000000000000000] 
  4314                                  
  4315 000029B8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4316 000029BD E8293F0000              	call malloc
  4317 000029C2 50                      	push rax
  4318 000029C3 BF08000000              	mov rdi, 8 * 1	; new rib
  4319 000029C8 E81E3F0000              	call malloc
  4320 000029CD 50                      	push rax
  4321 000029CE BF10000000              	mov rdi, 8 * 2	; extended env
  4322 000029D3 E8133F0000              	call malloc
  4323 000029D8 488B7D10                	mov rdi, ENV
  4324 000029DC BE00000000              	mov rsi, 0
  4325 000029E1 BA01000000              	mov rdx, 1
  4326                                  .L_lambda_simple_env_loop_0021:	; ext_env[i + 1] <-- env[i]
  4327 000029E6 4883FE01                	cmp rsi, 1
  4328 000029EA 7410                    	je .L_lambda_simple_env_end_0021
  4329 000029EC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4330 000029F0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4331 000029F4 48FFC6                  	inc rsi
  4332 000029F7 48FFC2                  	inc rdx
  4333 000029FA EBEA                    	jmp .L_lambda_simple_env_loop_0021
  4334                                  .L_lambda_simple_env_end_0021:
  4335 000029FC 5B                      	pop rbx
  4336 000029FD BE00000000              	mov rsi, 0
  4337                                  .L_lambda_simple_params_loop_0021:	; copy params
  4338 00002A02 4883FE01                	cmp rsi, 1
  4339 00002A06 740E                    	je .L_lambda_simple_params_end_0021
  4340 00002A08 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4341 00002A0D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4342 00002A11 48FFC6                  	inc rsi
  4343 00002A14 EBEC                    	jmp .L_lambda_simple_params_loop_0021
  4344                                  .L_lambda_simple_params_end_0021:
  4345 00002A16 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4346 00002A19 4889C3                  	mov rbx, rax
  4347 00002A1C 58                      	pop rax
  4348 00002A1D C60004                  	mov byte [rax], T_closure
  4349 00002A20 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4350 00002A24 48C74009[312A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0021
  4351 00002A2C E928010000              	jmp .L_lambda_simple_end_0021
  4352                                  .L_lambda_simple_code_0021:	; lambda-simple body
  4353 00002A31 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4354 00002A37 740B                    	je .L_lambda_simple_arity_check_ok_0021
  4355 00002A39 FF742410                	push qword [rsp + 8 * 2]
  4356 00002A3D 6A02                    	push 2
  4357 00002A3F E9603E0000              	jmp L_error_incorrect_arity_simple
  4358                                  .L_lambda_simple_arity_check_ok_0021:
  4359 00002A44 C8000000                	enter 0, 0
  4360                                  	; preparing a non-tail-call
  4361 00002A48 488B4528                	mov rax, PARAM(1)	; param s
  4362 00002A4C 50                      	push rax
  4363 00002A4D 6A01                    	push 1	; arg count
  4364 00002A4F 488B0425[CE0C0000]      	mov rax, qword [free_var_56]	; free var null?
  4365 00002A57 803805                  	cmp byte [rax], T_undefined
  4366 00002A5A 0F845E3D0000            	je L_error_fvar_undefined
  4367 00002A60 803804                  	cmp byte [rax], T_closure
  4368 00002A63 0F85D93D0000            	jne L_error_non_closure
  4369 00002A69 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4370 00002A6C FF5009                  	call SOB_CLOSURE_CODE(rax)
  4371 00002A6F 483D[02000000]          	cmp rax, sob_boolean_false
  4372 00002A75 7409                    	je .L_if_else_0003
  4373 00002A77 488B4520                	mov rax, PARAM(0)	; param a
  4374 00002A7B E9D5000000              	jmp .L_if_end_0003
  4375                                  .L_if_else_0003:
  4376                                  	; preparing a tail-call
  4377                                  	; preparing a non-tail-call
  4378                                  	; preparing a non-tail-call
  4379 00002A80 488B4528                	mov rax, PARAM(1)	; param s
  4380 00002A84 50                      	push rax
  4381 00002A85 6A01                    	push 1	; arg count
  4382 00002A87 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  4383 00002A8F 803805                  	cmp byte [rax], T_undefined
  4384 00002A92 0F84263D0000            	je L_error_fvar_undefined
  4385 00002A98 803804                  	cmp byte [rax], T_closure
  4386 00002A9B 0F85A13D0000            	jne L_error_non_closure
  4387 00002AA1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4388 00002AA4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4389 00002AA7 50                      	push rax
  4390                                  	; preparing a non-tail-call
  4391 00002AA8 488B4528                	mov rax, PARAM(1)	; param s
  4392 00002AAC 50                      	push rax
  4393 00002AAD 6A01                    	push 1	; arg count
  4394 00002AAF 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  4395 00002AB7 803805                  	cmp byte [rax], T_undefined
  4396 00002ABA 0F84FE3C0000            	je L_error_fvar_undefined
  4397 00002AC0 803804                  	cmp byte [rax], T_closure
  4398 00002AC3 0F85793D0000            	jne L_error_non_closure
  4399 00002AC9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4400 00002ACC FF5009                  	call SOB_CLOSURE_CODE(rax)
  4401 00002ACF 50                      	push rax
  4402 00002AD0 6A02                    	push 2	; arg count
  4403 00002AD2 488B4510                	mov rax, ENV
  4404 00002AD6 488B00                  	mov rax, qword [rax + 8 * 0]
  4405 00002AD9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4406 00002ADC 488B00                  	mov rax, qword [rax]
  4407 00002ADF 803804                  	cmp byte [rax], T_closure
  4408 00002AE2 0F855A3D0000            	jne L_error_non_closure
  4409 00002AE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4410 00002AEB FF5009                  	call SOB_CLOSURE_CODE(rax)
  4411 00002AEE 50                      	push rax
  4412 00002AEF 488B4520                	mov rax, PARAM(0)	; param a
  4413 00002AF3 50                      	push rax
  4414 00002AF4 6A02                    	push 2	; arg count
  4415 00002AF6 488B0425[CF0B0000]      	mov rax, qword [free_var_41]	; free var cons
  4416 00002AFE 803805                  	cmp byte [rax], T_undefined
  4417 00002B01 0F84B73C0000            	je L_error_fvar_undefined
  4418 00002B07 803804                  	cmp byte [rax], T_closure
  4419 00002B0A 0F85323D0000            	jne L_error_non_closure
  4420 00002B10 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4421 00002B13 FF7508                  	push qword [rbp + 8 * 1]
  4422                                   ; old ret addr
  4423 00002B16 FF7500                  	push qword [rbp]
  4424                                   ; restore the old rbp
  4425 00002B19 BB02000000              	mov rbx, 2
  4426 00002B1E 4883C303                	add rbx, 3
  4427 00002B22 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  4428 00002B26 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  4429 00002B2B 4C8D4DF8                	lea r9, [rbp - 8]
  4430 00002B2F B906000000              	mov rcx, 6
  4431                                  .L_tc_recycle_frame_loop_001f:
  4432 00002B34 4883F900                	cmp rcx, 0
  4433 00002B38 7413                    	je .L_tc_recycle_frame_done_001f
  4434 00002B3A 4D8B11                  	mov r10, qword [r9]
  4435 00002B3D 4D8910                  	mov qword [r8], r10
  4436 00002B40 4983E808                	sub r8, 8
  4437 00002B44 4983E908                	sub r9, 8
  4438 00002B48 48FFC9                  	dec rcx
  4439 00002B4B EBE7                    	jmp .L_tc_recycle_frame_loop_001f
  4440                                  .L_tc_recycle_frame_done_001f:
  4441 00002B4D 498D6008                	lea rsp, [r8 + 8]
  4442 00002B51 5D                      	pop rbp ; restore the old rbp
  4443 00002B52 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4444                                  .L_if_end_0003:
  4445 00002B55 C9                      	leave
  4446 00002B56 C22000                  	ret AND_KILL_FRAME(2)
  4447                                  .L_lambda_simple_end_0021:	; new closure is in rax
  4448 00002B59 50                      	push rax
  4449 00002B5A 488B4520                	mov rax, PARAM(0)	; param run
  4450 00002B5E 8F00                    	pop qword [rax]
  4451 00002B60 48B8-                   	mov rax, sob_void
  4451 00002B62 [0000000000000000] 
  4452                                  
  4453 00002B6A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4454 00002B6F E8773D0000              	call malloc
  4455 00002B74 50                      	push rax
  4456 00002B75 BF08000000              	mov rdi, 8 * 1	; new rib
  4457 00002B7A E86C3D0000              	call malloc
  4458 00002B7F 50                      	push rax
  4459 00002B80 BF10000000              	mov rdi, 8 * 2	; extended env
  4460 00002B85 E8613D0000              	call malloc
  4461 00002B8A 488B7D10                	mov rdi, ENV
  4462 00002B8E 4831F6                  	 xor rsi, rsi
  4463 00002B91 4831D2                  	 xor rdx, rdx
  4464 00002B94 48FFC2                  	inc rdx
  4465                                  .L_lambda_opt_env_loop_0002:	; 
  4466 00002B97 4883FE01                	cmp rsi, 1
  4467 00002B9B 7410                    	je .L_lambda_opt_env_end_0002
  4468 00002B9D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4469 00002BA1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4470 00002BA5 48FFC6                  	inc rsi
  4471 00002BA8 48FFC2                  	inc rdx
  4472 00002BAB EBEA                    	jmp .L_lambda_opt_env_loop_0002
  4473                                  .L_lambda_opt_env_end_0002:
  4474 00002BAD 5B                      	pop rbx
  4475 00002BAE 4831F6                  	xor rsi, rsi
  4476                                  .L_lambda_opt_params_loop_0002:	; copy params
  4477 00002BB1 4883FE01                	cmp rsi, 1
  4478 00002BB5 740E                    	je .L_lambda_opt_params_end_0002
  4479 00002BB7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4480 00002BBC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4481 00002BC0 48FFC6                  	inc rsi
  4482 00002BC3 EBEC                    	jmp .L_lambda_opt_params_loop_0002
  4483                                  .L_lambda_opt_params_end_0002:
  4484 00002BC5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4485 00002BC8 4889C3                  	mov rbx, rax
  4486 00002BCB 58                      	pop rax
  4487 00002BCC C60004                  	mov byte [rax], T_closure
  4488 00002BCF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4489 00002BD3 48C74009[E02B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0002
  4490 00002BDB E961010000              	jmp .L_lambda_opt_end_0002
  4491                                  .L_lambda_opt_code_0002:
  4492 00002BE0 4C8B7C2410              	mov r15, qword [rsp + 8 * 2]
  4493 00002BE5 4983FF01                	cmp r15, 1
  4494 00002BE9 7409                    	je .L_lambda_opt_arity_check_exact_0002
  4495 00002BEB 7F57                    	jg .L_lambda_opt_arity_check_more_0002
  4496 00002BED 6A01                    	push 1
  4497 00002BEF E9C43C0000              	jmp L_error_incorrect_arity_opt
  4498                                  .L_lambda_opt_arity_check_exact_0002: ;Exact case
  4499 00002BF4 4C8B0424                	mov r8, qword [rsp -8 * 0]
  4500 00002BF8 4C894424F8              	mov qword [rsp -8], r8
  4501 00002BFD 4C8B442408              	mov r8, qword [rsp +8]
  4502 00002C02 4C890424                	mov qword [rsp +8 * 0], r8
  4503 00002C06 4C8B442410              	mov r8, qword [rsp +8 * 2]
  4504 00002C0B 4C89C1                  	mov rcx, r8
  4505 00002C0E 49FFC0                  	inc r8
  4506 00002C11 4C89442408              	mov qword [rsp +8], r8
  4507 00002C16 4889E2                  	mov rdx, rsp
  4508 00002C19 4883C218                	add rdx, 24
  4509                                  .L_lambda_opt_loop_copy_to_new_frame_exact_0002:
  4510 00002C1D 4883F900                	cmp rcx, 0
  4511 00002C21 7410                    	je .L_lambda_opt_loop_copy_to_new_frame_exact_end_0002
  4512 00002C23 4C8B02                  	mov r8, qword [rdx]
  4513 00002C26 4C8942F8                	mov qword [rdx - 8], r8
  4514 00002C2A 4883C208                	add rdx, 8
  4515 00002C2E 48FFC9                  	dec rcx
  4516 00002C31 EBEA                    	jmp .L_lambda_opt_loop_copy_to_new_frame_exact_0002
  4517                                  .L_lambda_opt_loop_copy_to_new_frame_exact_end_0002:
  4518 00002C33 48C742F8[01000000]      	mov qword [rdx - 8], sob_nil
  4519 00002C3B 4883EC08                	sub rsp, 8
  4520 00002C3F E985000000              	jmp .L_lambda_opt_stack_adjusted_0002
  4521                                  .L_lambda_opt_arity_check_more_0002:
  4522 00002C44 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  4523 00002C49 4D89C4                  	mov r12, r8
  4524 00002C4C 4C89C1                  	mov rcx, r8
  4525 00002C4F 4D8D6802                	lea r13, [r8 + 2] 
  4526 00002C53 4883E901                	sub rcx, 1
  4527 00002C57 4E8D5CC410              	lea r11, qword [rsp + r8 * 8 + 16]
  4528 00002C5C 49BE-                   	mov r14, sob_nil
  4528 00002C5E [0100000000000000] 
  4529                                  .L_lambda_opt_create_list_of_opt_params_0002:
  4530 00002C66 4883F900                	cmp rcx, 0
  4531 00002C6A 7424                    	je .L_lambda_opt_create_list_of_opt_params_end_0002
  4532 00002C6C BF11000000              	mov rdi, 17
  4533 00002C71 E8753C0000              	call malloc
  4534 00002C76 C60021                  	mov byte [rax], T_pair
  4535 00002C79 498B1B                  	mov rbx, qword [r11]
  4536 00002C7C 48895801                	mov qword [rax +1], rbx
  4537 00002C80 4C897009                	mov qword [rax + 1 + 8], r14
  4538 00002C84 4989C6                  	mov r14, rax
  4539 00002C87 48FFC9                  	dec rcx
  4540 00002C8A 4983EB08                	sub r11, 8
  4541 00002C8E EBD6                    	jmp .L_lambda_opt_create_list_of_opt_params_0002
  4542                                  .L_lambda_opt_create_list_of_opt_params_end_0002:
  4543 00002C90 4C8D542420              	lea r10, [rsp + 1*8 + 8*3]
  4544 00002C95 4D8932                  	mov qword [r10], r14
  4545 00002C98 4E8D2CED00000000        	lea r13, [8 * r13]
  4546 00002CA0 4901E5                  	add r13, rsp
  4547 00002CA3 B905000000              	mov rcx, 4 + 1
  4548                                  .L_lambda_opt_stack_shrink_loop_0002:
  4549 00002CA8 4883F900                	cmp rcx, 0
  4550 00002CAC 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0002
  4551 00002CAE 4D8B1A                  	mov r11, qword [r10]
  4552 00002CB1 4D895D00                	mov qword [r13], r11
  4553 00002CB5 4983EA08                	sub r10, 8
  4554 00002CB9 4983ED08                	sub r13, 8
  4555 00002CBD 48FFC9                  	dec rcx
  4556 00002CC0 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0002
  4557                                  .L_lambda_opt_stack_shrink_loop_exit_0002:
  4558 00002CC2 4983C508                	add r13, 8
  4559 00002CC6 4C89EC                  	mov rsp, r13
  4560                                  .L_lambda_opt_stack_adjusted_0002:
  4561 00002CC9 48C744241002000000      	mov qword [rsp + 8*2], 2
  4562 00002CD2 C8000000                	enter 0, 0
  4563                                  	; preparing a tail-call
  4564 00002CD6 488B4528                	mov rax, PARAM(1)	; param s
  4565 00002CDA 50                      	push rax
  4566 00002CDB 488B4520                	mov rax, PARAM(0)	; param a
  4567 00002CDF 50                      	push rax
  4568 00002CE0 6A02                    	push 2	; arg count
  4569 00002CE2 488B4510                	mov rax, ENV
  4570 00002CE6 488B00                  	mov rax, qword [rax + 8 * 0]
  4571 00002CE9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4572 00002CEC 488B00                  	mov rax, qword [rax]
  4573 00002CEF 803804                  	cmp byte [rax], T_closure
  4574 00002CF2 0F854A3B0000            	jne L_error_non_closure
  4575 00002CF8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4576 00002CFB FF7508                  	push qword [rbp + 8 * 1]
  4577                                   ; old ret addr
  4578 00002CFE FF7500                  	push qword [rbp]
  4579                                   ; restore the old rbp
  4580 00002D01 BB02000000              	mov rbx, 2
  4581 00002D06 4883C303                	add rbx, 3
  4582 00002D0A 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  4583 00002D0E 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  4584 00002D13 4C8D4DF8                	lea r9, [rbp - 8]
  4585 00002D17 B906000000              	mov rcx, 6
  4586                                  .L_tc_recycle_frame_loop_0020:
  4587 00002D1C 4883F900                	cmp rcx, 0
  4588 00002D20 7413                    	je .L_tc_recycle_frame_done_0020
  4589 00002D22 4D8B11                  	mov r10, qword [r9]
  4590 00002D25 4D8910                  	mov qword [r8], r10
  4591 00002D28 4983E808                	sub r8, 8
  4592 00002D2C 4983E908                	sub r9, 8
  4593 00002D30 48FFC9                  	dec rcx
  4594 00002D33 EBE7                    	jmp .L_tc_recycle_frame_loop_0020
  4595                                  .L_tc_recycle_frame_done_0020:
  4596 00002D35 498D6008                	lea rsp, [r8 + 8]
  4597 00002D39 5D                      	pop rbp ; restore the old rbp
  4598 00002D3A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4599 00002D3D C9                      	leave
  4600 00002D3E C22000                  	ret 8 * (2 + 2)
  4601                                  .L_lambda_opt_end_0002:	; new closure is in rax
  4602 00002D41 C9                      	leave
  4603 00002D42 C21800                  	ret AND_KILL_FRAME(1)
  4604                                  .L_lambda_simple_end_0020:	; new closure is in rax
  4605 00002D45 803804                  	cmp byte [rax], T_closure
  4606 00002D48 0F85F43A0000            	jne L_error_non_closure
  4607 00002D4E FF7001                  	push SOB_CLOSURE_ENV(rax)
  4608 00002D51 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4609 00002D54 48890425[8A0C0000]      	mov qword [free_var_52], rax
  4610 00002D5C 48B8-                   	mov rax, sob_void
  4610 00002D5E [0000000000000000] 
  4611                                  
  4612 00002D66 4889C7                  	mov rdi, rax
  4613 00002D69 E8D23D0000              	call print_sexpr_if_not_void
  4614                                  	; preparing a non-tail-call
  4615 00002D6E 48B8-                   	mov rax, L_constants + 1993
  4615 00002D70 [C907000000000000] 
  4616 00002D78 50                      	push rax
  4617 00002D79 6A01                    	push 1	; arg count
  4618 00002D7B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4619 00002D80 E8663B0000              	call malloc
  4620 00002D85 50                      	push rax
  4621 00002D86 BF00000000              	mov rdi, 8 * 0	; new rib
  4622 00002D8B E85B3B0000              	call malloc
  4623 00002D90 50                      	push rax
  4624 00002D91 BF08000000              	mov rdi, 8 * 1	; extended env
  4625 00002D96 E8503B0000              	call malloc
  4626 00002D9B 488B7D10                	mov rdi, ENV
  4627 00002D9F BE00000000              	mov rsi, 0
  4628 00002DA4 BA01000000              	mov rdx, 1
  4629                                  .L_lambda_simple_env_loop_0022:	; ext_env[i + 1] <-- env[i]
  4630 00002DA9 4883FE00                	cmp rsi, 0
  4631 00002DAD 7410                    	je .L_lambda_simple_env_end_0022
  4632 00002DAF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4633 00002DB3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4634 00002DB7 48FFC6                  	inc rsi
  4635 00002DBA 48FFC2                  	inc rdx
  4636 00002DBD EBEA                    	jmp .L_lambda_simple_env_loop_0022
  4637                                  .L_lambda_simple_env_end_0022:
  4638 00002DBF 5B                      	pop rbx
  4639 00002DC0 BE00000000              	mov rsi, 0
  4640                                  .L_lambda_simple_params_loop_0022:	; copy params
  4641 00002DC5 4883FE00                	cmp rsi, 0
  4642 00002DC9 740E                    	je .L_lambda_simple_params_end_0022
  4643 00002DCB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4644 00002DD0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4645 00002DD4 48FFC6                  	inc rsi
  4646 00002DD7 EBEC                    	jmp .L_lambda_simple_params_loop_0022
  4647                                  .L_lambda_simple_params_end_0022:
  4648 00002DD9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4649 00002DDC 4889C3                  	mov rbx, rax
  4650 00002DDF 58                      	pop rax
  4651 00002DE0 C60004                  	mov byte [rax], T_closure
  4652 00002DE3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4653 00002DE7 48C74009[F42D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0022
  4654 00002DEF E932040000              	jmp .L_lambda_simple_end_0022
  4655                                  .L_lambda_simple_code_0022:	; lambda-simple body
  4656 00002DF4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4657 00002DFA 740B                    	je .L_lambda_simple_arity_check_ok_0022
  4658 00002DFC FF742410                	push qword [rsp + 8 * 2]
  4659 00002E00 6A01                    	push 1
  4660 00002E02 E99D3A0000              	jmp L_error_incorrect_arity_simple
  4661                                  .L_lambda_simple_arity_check_ok_0022:
  4662 00002E07 C8000000                	enter 0, 0
  4663 00002E0B BF08000000              	mov rdi, 8*1
  4664 00002E10 E8D63A0000              	call malloc
  4665 00002E15 488B5D20                	mov rbx, PARAM(0)
  4666 00002E19 488918                  	mov qword [rax], rbx
  4667 00002E1C 48894520                	mov PARAM(0), rax
  4668 00002E20 48B8-                   	mov rax, sob_void
  4668 00002E22 [0000000000000000] 
  4669                                  
  4670 00002E2A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4671 00002E2F E8B73A0000              	call malloc
  4672 00002E34 50                      	push rax
  4673 00002E35 BF08000000              	mov rdi, 8 * 1	; new rib
  4674 00002E3A E8AC3A0000              	call malloc
  4675 00002E3F 50                      	push rax
  4676 00002E40 BF10000000              	mov rdi, 8 * 2	; extended env
  4677 00002E45 E8A13A0000              	call malloc
  4678 00002E4A 488B7D10                	mov rdi, ENV
  4679 00002E4E BE00000000              	mov rsi, 0
  4680 00002E53 BA01000000              	mov rdx, 1
  4681                                  .L_lambda_simple_env_loop_0023:	; ext_env[i + 1] <-- env[i]
  4682 00002E58 4883FE01                	cmp rsi, 1
  4683 00002E5C 7410                    	je .L_lambda_simple_env_end_0023
  4684 00002E5E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4685 00002E62 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4686 00002E66 48FFC6                  	inc rsi
  4687 00002E69 48FFC2                  	inc rdx
  4688 00002E6C EBEA                    	jmp .L_lambda_simple_env_loop_0023
  4689                                  .L_lambda_simple_env_end_0023:
  4690 00002E6E 5B                      	pop rbx
  4691 00002E6F BE00000000              	mov rsi, 0
  4692                                  .L_lambda_simple_params_loop_0023:	; copy params
  4693 00002E74 4883FE01                	cmp rsi, 1
  4694 00002E78 740E                    	je .L_lambda_simple_params_end_0023
  4695 00002E7A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4696 00002E7F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4697 00002E83 48FFC6                  	inc rsi
  4698 00002E86 EBEC                    	jmp .L_lambda_simple_params_loop_0023
  4699                                  .L_lambda_simple_params_end_0023:
  4700 00002E88 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4701 00002E8B 4889C3                  	mov rbx, rax
  4702 00002E8E 58                      	pop rax
  4703 00002E8F C60004                  	mov byte [rax], T_closure
  4704 00002E92 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4705 00002E96 48C74009[A32E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0023
  4706 00002E9E E929010000              	jmp .L_lambda_simple_end_0023
  4707                                  .L_lambda_simple_code_0023:	; lambda-simple body
  4708 00002EA3 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4709 00002EA9 740B                    	je .L_lambda_simple_arity_check_ok_0023
  4710 00002EAB FF742410                	push qword [rsp + 8 * 2]
  4711 00002EAF 6A02                    	push 2
  4712 00002EB1 E9EE390000              	jmp L_error_incorrect_arity_simple
  4713                                  .L_lambda_simple_arity_check_ok_0023:
  4714 00002EB6 C8000000                	enter 0, 0
  4715                                  	; preparing a non-tail-call
  4716 00002EBA 488B4528                	mov rax, PARAM(1)	; param s
  4717 00002EBE 50                      	push rax
  4718 00002EBF 6A01                    	push 1	; arg count
  4719 00002EC1 488B0425[F00C0000]      	mov rax, qword [free_var_58]	; free var pair?
  4720 00002EC9 803805                  	cmp byte [rax], T_undefined
  4721 00002ECC 0F84EC380000            	je L_error_fvar_undefined
  4722 00002ED2 803804                  	cmp byte [rax], T_closure
  4723 00002ED5 0F8567390000            	jne L_error_non_closure
  4724 00002EDB FF7001                  	push SOB_CLOSURE_ENV(rax)
  4725 00002EDE FF5009                  	call SOB_CLOSURE_CODE(rax)
  4726 00002EE1 483D[02000000]          	cmp rax, sob_boolean_false
  4727 00002EE7 0F84D7000000            	je .L_if_else_0004
  4728                                  	; preparing a tail-call
  4729                                  	; preparing a non-tail-call
  4730                                  	; preparing a non-tail-call
  4731 00002EED 488B4528                	mov rax, PARAM(1)	; param s
  4732 00002EF1 50                      	push rax
  4733 00002EF2 6A01                    	push 1	; arg count
  4734 00002EF4 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  4735 00002EFC 803805                  	cmp byte [rax], T_undefined
  4736 00002EFF 0F84B9380000            	je L_error_fvar_undefined
  4737 00002F05 803804                  	cmp byte [rax], T_closure
  4738 00002F08 0F8534390000            	jne L_error_non_closure
  4739 00002F0E FF7001                  	push SOB_CLOSURE_ENV(rax)
  4740 00002F11 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4741 00002F14 50                      	push rax
  4742                                  	; preparing a non-tail-call
  4743 00002F15 488B4528                	mov rax, PARAM(1)	; param s
  4744 00002F19 50                      	push rax
  4745 00002F1A 6A01                    	push 1	; arg count
  4746 00002F1C 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  4747 00002F24 803805                  	cmp byte [rax], T_undefined
  4748 00002F27 0F8491380000            	je L_error_fvar_undefined
  4749 00002F2D 803804                  	cmp byte [rax], T_closure
  4750 00002F30 0F850C390000            	jne L_error_non_closure
  4751 00002F36 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4752 00002F39 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4753 00002F3C 50                      	push rax
  4754 00002F3D 6A02                    	push 2	; arg count
  4755 00002F3F 488B4510                	mov rax, ENV
  4756 00002F43 488B00                  	mov rax, qword [rax + 8 * 0]
  4757 00002F46 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4758 00002F49 488B00                  	mov rax, qword [rax]
  4759 00002F4C 803804                  	cmp byte [rax], T_closure
  4760 00002F4F 0F85ED380000            	jne L_error_non_closure
  4761 00002F55 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4762 00002F58 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4763 00002F5B 50                      	push rax
  4764 00002F5C 488B4520                	mov rax, PARAM(0)	; param a
  4765 00002F60 50                      	push rax
  4766 00002F61 6A02                    	push 2	; arg count
  4767 00002F63 488B0425[CF0B0000]      	mov rax, qword [free_var_41]	; free var cons
  4768 00002F6B 803805                  	cmp byte [rax], T_undefined
  4769 00002F6E 0F844A380000            	je L_error_fvar_undefined
  4770 00002F74 803804                  	cmp byte [rax], T_closure
  4771 00002F77 0F85C5380000            	jne L_error_non_closure
  4772 00002F7D FF7001                  	push SOB_CLOSURE_ENV(rax)
  4773 00002F80 FF7508                  	push qword [rbp + 8 * 1]
  4774                                   ; old ret addr
  4775 00002F83 FF7500                  	push qword [rbp]
  4776                                   ; restore the old rbp
  4777 00002F86 BB02000000              	mov rbx, 2
  4778 00002F8B 4883C303                	add rbx, 3
  4779 00002F8F 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  4780 00002F93 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  4781 00002F98 4C8D4DF8                	lea r9, [rbp - 8]
  4782 00002F9C B906000000              	mov rcx, 6
  4783                                  .L_tc_recycle_frame_loop_0021:
  4784 00002FA1 4883F900                	cmp rcx, 0
  4785 00002FA5 7413                    	je .L_tc_recycle_frame_done_0021
  4786 00002FA7 4D8B11                  	mov r10, qword [r9]
  4787 00002FAA 4D8910                  	mov qword [r8], r10
  4788 00002FAD 4983E808                	sub r8, 8
  4789 00002FB1 4983E908                	sub r9, 8
  4790 00002FB5 48FFC9                  	dec rcx
  4791 00002FB8 EBE7                    	jmp .L_tc_recycle_frame_loop_0021
  4792                                  .L_tc_recycle_frame_done_0021:
  4793 00002FBA 498D6008                	lea rsp, [r8 + 8]
  4794 00002FBE 5D                      	pop rbp ; restore the old rbp
  4795 00002FBF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4796 00002FC2 EB04                    	jmp .L_if_end_0004
  4797                                  .L_if_else_0004:
  4798 00002FC4 488B4520                	mov rax, PARAM(0)	; param a
  4799                                  .L_if_end_0004:
  4800 00002FC8 C9                      	leave
  4801 00002FC9 C22000                  	ret AND_KILL_FRAME(2)
  4802                                  .L_lambda_simple_end_0023:	; new closure is in rax
  4803 00002FCC 50                      	push rax
  4804 00002FCD 488B4520                	mov rax, PARAM(0)	; param run
  4805 00002FD1 8F00                    	pop qword [rax]
  4806 00002FD3 48B8-                   	mov rax, sob_void
  4806 00002FD5 [0000000000000000] 
  4807                                  
  4808 00002FDD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4809 00002FE2 E804390000              	call malloc
  4810 00002FE7 50                      	push rax
  4811 00002FE8 BF08000000              	mov rdi, 8 * 1	; new rib
  4812 00002FED E8F9380000              	call malloc
  4813 00002FF2 50                      	push rax
  4814 00002FF3 BF10000000              	mov rdi, 8 * 2	; extended env
  4815 00002FF8 E8EE380000              	call malloc
  4816 00002FFD 488B7D10                	mov rdi, ENV
  4817 00003001 4831F6                  	 xor rsi, rsi
  4818 00003004 4831D2                  	 xor rdx, rdx
  4819 00003007 48FFC2                  	inc rdx
  4820                                  .L_lambda_opt_env_loop_0003:	; 
  4821 0000300A 4883FE01                	cmp rsi, 1
  4822 0000300E 7410                    	je .L_lambda_opt_env_end_0003
  4823 00003010 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4824 00003014 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4825 00003018 48FFC6                  	inc rsi
  4826 0000301B 48FFC2                  	inc rdx
  4827 0000301E EBEA                    	jmp .L_lambda_opt_env_loop_0003
  4828                                  .L_lambda_opt_env_end_0003:
  4829 00003020 5B                      	pop rbx
  4830 00003021 4831F6                  	xor rsi, rsi
  4831                                  .L_lambda_opt_params_loop_0003:	; copy params
  4832 00003024 4883FE01                	cmp rsi, 1
  4833 00003028 740E                    	je .L_lambda_opt_params_end_0003
  4834 0000302A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4835 0000302F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4836 00003033 48FFC6                  	inc rsi
  4837 00003036 EBEC                    	jmp .L_lambda_opt_params_loop_0003
  4838                                  .L_lambda_opt_params_end_0003:
  4839 00003038 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4840 0000303B 4889C3                  	mov rbx, rax
  4841 0000303E 58                      	pop rax
  4842 0000303F C60004                  	mov byte [rax], T_closure
  4843 00003042 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4844 00003046 48C74009[53300000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0003
  4845 0000304E E9CF010000              	jmp .L_lambda_opt_end_0003
  4846                                  .L_lambda_opt_code_0003:
  4847 00003053 4C8B7C2410              	mov r15, qword [rsp + 8 * 2]
  4848 00003058 4983FF01                	cmp r15, 1
  4849 0000305C 7409                    	je .L_lambda_opt_arity_check_exact_0003
  4850 0000305E 7F57                    	jg .L_lambda_opt_arity_check_more_0003
  4851 00003060 6A01                    	push 1
  4852 00003062 E951380000              	jmp L_error_incorrect_arity_opt
  4853                                  .L_lambda_opt_arity_check_exact_0003: ;Exact case
  4854 00003067 4C8B0424                	mov r8, qword [rsp -8 * 0]
  4855 0000306B 4C894424F8              	mov qword [rsp -8], r8
  4856 00003070 4C8B442408              	mov r8, qword [rsp +8]
  4857 00003075 4C890424                	mov qword [rsp +8 * 0], r8
  4858 00003079 4C8B442410              	mov r8, qword [rsp +8 * 2]
  4859 0000307E 4C89C1                  	mov rcx, r8
  4860 00003081 49FFC0                  	inc r8
  4861 00003084 4C89442408              	mov qword [rsp +8], r8
  4862 00003089 4889E2                  	mov rdx, rsp
  4863 0000308C 4883C218                	add rdx, 24
  4864                                  .L_lambda_opt_loop_copy_to_new_frame_exact_0003:
  4865 00003090 4883F900                	cmp rcx, 0
  4866 00003094 7410                    	je .L_lambda_opt_loop_copy_to_new_frame_exact_end_0003
  4867 00003096 4C8B02                  	mov r8, qword [rdx]
  4868 00003099 4C8942F8                	mov qword [rdx - 8], r8
  4869 0000309D 4883C208                	add rdx, 8
  4870 000030A1 48FFC9                  	dec rcx
  4871 000030A4 EBEA                    	jmp .L_lambda_opt_loop_copy_to_new_frame_exact_0003
  4872                                  .L_lambda_opt_loop_copy_to_new_frame_exact_end_0003:
  4873 000030A6 48C742F8[01000000]      	mov qword [rdx - 8], sob_nil
  4874 000030AE 4883EC08                	sub rsp, 8
  4875 000030B2 E985000000              	jmp .L_lambda_opt_stack_adjusted_0003
  4876                                  .L_lambda_opt_arity_check_more_0003:
  4877 000030B7 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  4878 000030BC 4D89C4                  	mov r12, r8
  4879 000030BF 4C89C1                  	mov rcx, r8
  4880 000030C2 4D8D6802                	lea r13, [r8 + 2] 
  4881 000030C6 4883E901                	sub rcx, 1
  4882 000030CA 4E8D5CC410              	lea r11, qword [rsp + r8 * 8 + 16]
  4883 000030CF 49BE-                   	mov r14, sob_nil
  4883 000030D1 [0100000000000000] 
  4884                                  .L_lambda_opt_create_list_of_opt_params_0003:
  4885 000030D9 4883F900                	cmp rcx, 0
  4886 000030DD 7424                    	je .L_lambda_opt_create_list_of_opt_params_end_0003
  4887 000030DF BF11000000              	mov rdi, 17
  4888 000030E4 E802380000              	call malloc
  4889 000030E9 C60021                  	mov byte [rax], T_pair
  4890 000030EC 498B1B                  	mov rbx, qword [r11]
  4891 000030EF 48895801                	mov qword [rax +1], rbx
  4892 000030F3 4C897009                	mov qword [rax + 1 + 8], r14
  4893 000030F7 4989C6                  	mov r14, rax
  4894 000030FA 48FFC9                  	dec rcx
  4895 000030FD 4983EB08                	sub r11, 8
  4896 00003101 EBD6                    	jmp .L_lambda_opt_create_list_of_opt_params_0003
  4897                                  .L_lambda_opt_create_list_of_opt_params_end_0003:
  4898 00003103 4C8D542420              	lea r10, [rsp + 1*8 + 8*3]
  4899 00003108 4D8932                  	mov qword [r10], r14
  4900 0000310B 4E8D2CED00000000        	lea r13, [8 * r13]
  4901 00003113 4901E5                  	add r13, rsp
  4902 00003116 B905000000              	mov rcx, 4 + 1
  4903                                  .L_lambda_opt_stack_shrink_loop_0003:
  4904 0000311B 4883F900                	cmp rcx, 0
  4905 0000311F 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0003
  4906 00003121 4D8B1A                  	mov r11, qword [r10]
  4907 00003124 4D895D00                	mov qword [r13], r11
  4908 00003128 4983EA08                	sub r10, 8
  4909 0000312C 4983ED08                	sub r13, 8
  4910 00003130 48FFC9                  	dec rcx
  4911 00003133 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0003
  4912                                  .L_lambda_opt_stack_shrink_loop_exit_0003:
  4913 00003135 4983C508                	add r13, 8
  4914 00003139 4C89EC                  	mov rsp, r13
  4915                                  .L_lambda_opt_stack_adjusted_0003:
  4916 0000313C 48C744241002000000      	mov qword [rsp + 8*2], 2
  4917 00003145 C8000000                	enter 0, 0
  4918                                  	; preparing a tail-call
  4919                                  	; preparing a non-tail-call
  4920                                  	; preparing a non-tail-call
  4921 00003149 488B4528                	mov rax, PARAM(1)	; param s
  4922 0000314D 50                      	push rax
  4923 0000314E 6A01                    	push 1	; arg count
  4924 00003150 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  4925 00003158 803805                  	cmp byte [rax], T_undefined
  4926 0000315B 0F845D360000            	je L_error_fvar_undefined
  4927 00003161 803804                  	cmp byte [rax], T_closure
  4928 00003164 0F85D8360000            	jne L_error_non_closure
  4929 0000316A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4930 0000316D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4931 00003170 50                      	push rax
  4932                                  	; preparing a non-tail-call
  4933 00003171 488B4528                	mov rax, PARAM(1)	; param s
  4934 00003175 50                      	push rax
  4935 00003176 6A01                    	push 1	; arg count
  4936 00003178 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  4937 00003180 803805                  	cmp byte [rax], T_undefined
  4938 00003183 0F8435360000            	je L_error_fvar_undefined
  4939 00003189 803804                  	cmp byte [rax], T_closure
  4940 0000318C 0F85B0360000            	jne L_error_non_closure
  4941 00003192 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4942 00003195 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4943 00003198 50                      	push rax
  4944 00003199 6A02                    	push 2	; arg count
  4945 0000319B 488B4510                	mov rax, ENV
  4946 0000319F 488B00                  	mov rax, qword [rax + 8 * 0]
  4947 000031A2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4948 000031A5 488B00                  	mov rax, qword [rax]
  4949 000031A8 803804                  	cmp byte [rax], T_closure
  4950 000031AB 0F8591360000            	jne L_error_non_closure
  4951 000031B1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4952 000031B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4953 000031B7 50                      	push rax
  4954 000031B8 488B4520                	mov rax, PARAM(0)	; param f
  4955 000031BC 50                      	push rax
  4956 000031BD 6A02                    	push 2	; arg count
  4957 000031BF 488B0425[5A090000]      	mov rax, qword [free_var_4]	; free var __bin-apply
  4958 000031C7 803805                  	cmp byte [rax], T_undefined
  4959 000031CA 0F84EE350000            	je L_error_fvar_undefined
  4960 000031D0 803804                  	cmp byte [rax], T_closure
  4961 000031D3 0F8569360000            	jne L_error_non_closure
  4962 000031D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4963 000031DC FF7508                  	push qword [rbp + 8 * 1]
  4964                                   ; old ret addr
  4965 000031DF FF7500                  	push qword [rbp]
  4966                                   ; restore the old rbp
  4967 000031E2 BB02000000              	mov rbx, 2
  4968 000031E7 4883C303                	add rbx, 3
  4969 000031EB 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  4970 000031EF 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  4971 000031F4 4C8D4DF8                	lea r9, [rbp - 8]
  4972 000031F8 B906000000              	mov rcx, 6
  4973                                  .L_tc_recycle_frame_loop_0022:
  4974 000031FD 4883F900                	cmp rcx, 0
  4975 00003201 7413                    	je .L_tc_recycle_frame_done_0022
  4976 00003203 4D8B11                  	mov r10, qword [r9]
  4977 00003206 4D8910                  	mov qword [r8], r10
  4978 00003209 4983E808                	sub r8, 8
  4979 0000320D 4983E908                	sub r9, 8
  4980 00003211 48FFC9                  	dec rcx
  4981 00003214 EBE7                    	jmp .L_tc_recycle_frame_loop_0022
  4982                                  .L_tc_recycle_frame_done_0022:
  4983 00003216 498D6008                	lea rsp, [r8 + 8]
  4984 0000321A 5D                      	pop rbp ; restore the old rbp
  4985 0000321B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4986 0000321E C9                      	leave
  4987 0000321F C22000                  	ret 8 * (2 + 2)
  4988                                  .L_lambda_opt_end_0003:	; new closure is in rax
  4989 00003222 C9                      	leave
  4990 00003223 C21800                  	ret AND_KILL_FRAME(1)
  4991                                  .L_lambda_simple_end_0022:	; new closure is in rax
  4992 00003226 803804                  	cmp byte [rax], T_closure
  4993 00003229 0F8513360000            	jne L_error_non_closure
  4994 0000322F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4995 00003232 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4996 00003235 48890425[AF090000]      	mov qword [free_var_9], rax
  4997 0000323D 48B8-                   	mov rax, sob_void
  4997 0000323F [0000000000000000] 
  4998                                  
  4999 00003247 4889C7                  	mov rdi, rax
  5000 0000324A E8F1380000              	call print_sexpr_if_not_void
  5001 0000324F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5002 00003254 E892360000              	call malloc
  5003 00003259 50                      	push rax
  5004 0000325A BF00000000              	mov rdi, 8 * 0	; new rib
  5005 0000325F E887360000              	call malloc
  5006 00003264 50                      	push rax
  5007 00003265 BF08000000              	mov rdi, 8 * 1	; extended env
  5008 0000326A E87C360000              	call malloc
  5009 0000326F 488B7D10                	mov rdi, ENV
  5010 00003273 4831F6                  	 xor rsi, rsi
  5011 00003276 4831D2                  	 xor rdx, rdx
  5012 00003279 48FFC2                  	inc rdx
  5013                                  .L_lambda_opt_env_loop_0004:	; 
  5014 0000327C 4883FE00                	cmp rsi, 0
  5015 00003280 7410                    	je .L_lambda_opt_env_end_0004
  5016 00003282 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5017 00003286 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5018 0000328A 48FFC6                  	inc rsi
  5019 0000328D 48FFC2                  	inc rdx
  5020 00003290 EBEA                    	jmp .L_lambda_opt_env_loop_0004
  5021                                  .L_lambda_opt_env_end_0004:
  5022 00003292 5B                      	pop rbx
  5023 00003293 4831F6                  	xor rsi, rsi
  5024                                  .L_lambda_opt_params_loop_0004:	; copy params
  5025 00003296 4883FE00                	cmp rsi, 0
  5026 0000329A 740E                    	je .L_lambda_opt_params_end_0004
  5027 0000329C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5028 000032A1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5029 000032A5 48FFC6                  	inc rsi
  5030 000032A8 EBEC                    	jmp .L_lambda_opt_params_loop_0004
  5031                                  .L_lambda_opt_params_end_0004:
  5032 000032AA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5033 000032AD 4889C3                  	mov rbx, rax
  5034 000032B0 58                      	pop rax
  5035 000032B1 C60004                  	mov byte [rax], T_closure
  5036 000032B4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5037 000032B8 48C74009[C5320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0004
  5038 000032C0 E9C7040000              	jmp .L_lambda_opt_end_0004
  5039                                  .L_lambda_opt_code_0004:
  5040 000032C5 4C8B7C2410              	mov r15, qword [rsp + 8 * 2]
  5041 000032CA 4983FF01                	cmp r15, 1
  5042 000032CE 7409                    	je .L_lambda_opt_arity_check_exact_0004
  5043 000032D0 7F57                    	jg .L_lambda_opt_arity_check_more_0004
  5044 000032D2 6A01                    	push 1
  5045 000032D4 E9DF350000              	jmp L_error_incorrect_arity_opt
  5046                                  .L_lambda_opt_arity_check_exact_0004: ;Exact case
  5047 000032D9 4C8B0424                	mov r8, qword [rsp -8 * 0]
  5048 000032DD 4C894424F8              	mov qword [rsp -8], r8
  5049 000032E2 4C8B442408              	mov r8, qword [rsp +8]
  5050 000032E7 4C890424                	mov qword [rsp +8 * 0], r8
  5051 000032EB 4C8B442410              	mov r8, qword [rsp +8 * 2]
  5052 000032F0 4C89C1                  	mov rcx, r8
  5053 000032F3 49FFC0                  	inc r8
  5054 000032F6 4C89442408              	mov qword [rsp +8], r8
  5055 000032FB 4889E2                  	mov rdx, rsp
  5056 000032FE 4883C218                	add rdx, 24
  5057                                  .L_lambda_opt_loop_copy_to_new_frame_exact_0004:
  5058 00003302 4883F900                	cmp rcx, 0
  5059 00003306 7410                    	je .L_lambda_opt_loop_copy_to_new_frame_exact_end_0004
  5060 00003308 4C8B02                  	mov r8, qword [rdx]
  5061 0000330B 4C8942F8                	mov qword [rdx - 8], r8
  5062 0000330F 4883C208                	add rdx, 8
  5063 00003313 48FFC9                  	dec rcx
  5064 00003316 EBEA                    	jmp .L_lambda_opt_loop_copy_to_new_frame_exact_0004
  5065                                  .L_lambda_opt_loop_copy_to_new_frame_exact_end_0004:
  5066 00003318 48C742F8[01000000]      	mov qword [rdx - 8], sob_nil
  5067 00003320 4883EC08                	sub rsp, 8
  5068 00003324 E985000000              	jmp .L_lambda_opt_stack_adjusted_0004
  5069                                  .L_lambda_opt_arity_check_more_0004:
  5070 00003329 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  5071 0000332E 4D89C4                  	mov r12, r8
  5072 00003331 4C89C1                  	mov rcx, r8
  5073 00003334 4D8D6802                	lea r13, [r8 + 2] 
  5074 00003338 4883E901                	sub rcx, 1
  5075 0000333C 4E8D5CC410              	lea r11, qword [rsp + r8 * 8 + 16]
  5076 00003341 49BE-                   	mov r14, sob_nil
  5076 00003343 [0100000000000000] 
  5077                                  .L_lambda_opt_create_list_of_opt_params_0004:
  5078 0000334B 4883F900                	cmp rcx, 0
  5079 0000334F 7424                    	je .L_lambda_opt_create_list_of_opt_params_end_0004
  5080 00003351 BF11000000              	mov rdi, 17
  5081 00003356 E890350000              	call malloc
  5082 0000335B C60021                  	mov byte [rax], T_pair
  5083 0000335E 498B1B                  	mov rbx, qword [r11]
  5084 00003361 48895801                	mov qword [rax +1], rbx
  5085 00003365 4C897009                	mov qword [rax + 1 + 8], r14
  5086 00003369 4989C6                  	mov r14, rax
  5087 0000336C 48FFC9                  	dec rcx
  5088 0000336F 4983EB08                	sub r11, 8
  5089 00003373 EBD6                    	jmp .L_lambda_opt_create_list_of_opt_params_0004
  5090                                  .L_lambda_opt_create_list_of_opt_params_end_0004:
  5091 00003375 4C8D542420              	lea r10, [rsp + 1*8 + 8*3]
  5092 0000337A 4D8932                  	mov qword [r10], r14
  5093 0000337D 4E8D2CED00000000        	lea r13, [8 * r13]
  5094 00003385 4901E5                  	add r13, rsp
  5095 00003388 B905000000              	mov rcx, 4 + 1
  5096                                  .L_lambda_opt_stack_shrink_loop_0004:
  5097 0000338D 4883F900                	cmp rcx, 0
  5098 00003391 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0004
  5099 00003393 4D8B1A                  	mov r11, qword [r10]
  5100 00003396 4D895D00                	mov qword [r13], r11
  5101 0000339A 4983EA08                	sub r10, 8
  5102 0000339E 4983ED08                	sub r13, 8
  5103 000033A2 48FFC9                  	dec rcx
  5104 000033A5 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0004
  5105                                  .L_lambda_opt_stack_shrink_loop_exit_0004:
  5106 000033A7 4983C508                	add r13, 8
  5107 000033AB 4C89EC                  	mov rsp, r13
  5108                                  .L_lambda_opt_stack_adjusted_0004:
  5109 000033AE 48C744241002000000      	mov qword [rsp + 8*2], 2
  5110 000033B7 C8000000                	enter 0, 0
  5111                                  	; preparing a tail-call
  5112 000033BB 48B8-                   	mov rax, L_constants + 1993
  5112 000033BD [C907000000000000] 
  5113 000033C5 50                      	push rax
  5114 000033C6 6A01                    	push 1	; arg count
  5115 000033C8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5116 000033CD E819350000              	call malloc
  5117 000033D2 50                      	push rax
  5118 000033D3 BF10000000              	mov rdi, 8 * 2	; new rib
  5119 000033D8 E80E350000              	call malloc
  5120 000033DD 50                      	push rax
  5121 000033DE BF10000000              	mov rdi, 8 * 2	; extended env
  5122 000033E3 E803350000              	call malloc
  5123 000033E8 488B7D10                	mov rdi, ENV
  5124 000033EC BE00000000              	mov rsi, 0
  5125 000033F1 BA01000000              	mov rdx, 1
  5126                                  .L_lambda_simple_env_loop_0024:	; ext_env[i + 1] <-- env[i]
  5127 000033F6 4883FE01                	cmp rsi, 1
  5128 000033FA 7410                    	je .L_lambda_simple_env_end_0024
  5129 000033FC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5130 00003400 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5131 00003404 48FFC6                  	inc rsi
  5132 00003407 48FFC2                  	inc rdx
  5133 0000340A EBEA                    	jmp .L_lambda_simple_env_loop_0024
  5134                                  .L_lambda_simple_env_end_0024:
  5135 0000340C 5B                      	pop rbx
  5136 0000340D BE00000000              	mov rsi, 0
  5137                                  .L_lambda_simple_params_loop_0024:	; copy params
  5138 00003412 4883FE02                	cmp rsi, 2
  5139 00003416 740E                    	je .L_lambda_simple_params_end_0024
  5140 00003418 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5141 0000341D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5142 00003421 48FFC6                  	inc rsi
  5143 00003424 EBEC                    	jmp .L_lambda_simple_params_loop_0024
  5144                                  .L_lambda_simple_params_end_0024:
  5145 00003426 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5146 00003429 4889C3                  	mov rbx, rax
  5147 0000342C 58                      	pop rax
  5148 0000342D C60004                  	mov byte [rax], T_closure
  5149 00003430 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5150 00003434 48C74009[41340000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0024
  5151 0000343C E9F9020000              	jmp .L_lambda_simple_end_0024
  5152                                  .L_lambda_simple_code_0024:	; lambda-simple body
  5153 00003441 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5154 00003447 740B                    	je .L_lambda_simple_arity_check_ok_0024
  5155 00003449 FF742410                	push qword [rsp + 8 * 2]
  5156 0000344D 6A01                    	push 1
  5157 0000344F E950340000              	jmp L_error_incorrect_arity_simple
  5158                                  .L_lambda_simple_arity_check_ok_0024:
  5159 00003454 C8000000                	enter 0, 0
  5160 00003458 BF08000000              	mov rdi, 8*1
  5161 0000345D E889340000              	call malloc
  5162 00003462 488B5D20                	mov rbx, PARAM(0)
  5163 00003466 488918                  	mov qword [rax], rbx
  5164 00003469 48894520                	mov PARAM(0), rax
  5165 0000346D 48B8-                   	mov rax, sob_void
  5165 0000346F [0000000000000000] 
  5166                                  
  5167 00003477 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5168 0000347C E86A340000              	call malloc
  5169 00003481 50                      	push rax
  5170 00003482 BF08000000              	mov rdi, 8 * 1	; new rib
  5171 00003487 E85F340000              	call malloc
  5172 0000348C 50                      	push rax
  5173 0000348D BF18000000              	mov rdi, 8 * 3	; extended env
  5174 00003492 E854340000              	call malloc
  5175 00003497 488B7D10                	mov rdi, ENV
  5176 0000349B BE00000000              	mov rsi, 0
  5177 000034A0 BA01000000              	mov rdx, 1
  5178                                  .L_lambda_simple_env_loop_0025:	; ext_env[i + 1] <-- env[i]
  5179 000034A5 4883FE02                	cmp rsi, 2
  5180 000034A9 7410                    	je .L_lambda_simple_env_end_0025
  5181 000034AB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5182 000034AF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5183 000034B3 48FFC6                  	inc rsi
  5184 000034B6 48FFC2                  	inc rdx
  5185 000034B9 EBEA                    	jmp .L_lambda_simple_env_loop_0025
  5186                                  .L_lambda_simple_env_end_0025:
  5187 000034BB 5B                      	pop rbx
  5188 000034BC BE00000000              	mov rsi, 0
  5189                                  .L_lambda_simple_params_loop_0025:	; copy params
  5190 000034C1 4883FE01                	cmp rsi, 1
  5191 000034C5 740E                    	je .L_lambda_simple_params_end_0025
  5192 000034C7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5193 000034CC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5194 000034D0 48FFC6                  	inc rsi
  5195 000034D3 EBEC                    	jmp .L_lambda_simple_params_loop_0025
  5196                                  .L_lambda_simple_params_end_0025:
  5197 000034D5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5198 000034D8 4889C3                  	mov rbx, rax
  5199 000034DB 58                      	pop rax
  5200 000034DC C60004                  	mov byte [rax], T_closure
  5201 000034DF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5202 000034E3 48C74009[F0340000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0025
  5203 000034EB E990010000              	jmp .L_lambda_simple_end_0025
  5204                                  .L_lambda_simple_code_0025:	; lambda-simple body
  5205 000034F0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5206 000034F6 740B                    	je .L_lambda_simple_arity_check_ok_0025
  5207 000034F8 FF742410                	push qword [rsp + 8 * 2]
  5208 000034FC 6A01                    	push 1
  5209 000034FE E9A1330000              	jmp L_error_incorrect_arity_simple
  5210                                  .L_lambda_simple_arity_check_ok_0025:
  5211 00003503 C8000000                	enter 0, 0
  5212                                  	; preparing a non-tail-call
  5213                                  	; preparing a non-tail-call
  5214 00003507 488B4520                	mov rax, PARAM(0)	; param s
  5215 0000350B 50                      	push rax
  5216 0000350C 6A01                    	push 1	; arg count
  5217 0000350E 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  5218 00003516 803805                  	cmp byte [rax], T_undefined
  5219 00003519 0F849F320000            	je L_error_fvar_undefined
  5220 0000351F 803804                  	cmp byte [rax], T_closure
  5221 00003522 0F851A330000            	jne L_error_non_closure
  5222 00003528 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5223 0000352B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5224 0000352E 50                      	push rax
  5225 0000352F 6A01                    	push 1	; arg count
  5226 00003531 488B0425[F00C0000]      	mov rax, qword [free_var_58]	; free var pair?
  5227 00003539 803805                  	cmp byte [rax], T_undefined
  5228 0000353C 0F847C320000            	je L_error_fvar_undefined
  5229 00003542 803804                  	cmp byte [rax], T_closure
  5230 00003545 0F85F7320000            	jne L_error_non_closure
  5231 0000354B FF7001                  	push SOB_CLOSURE_ENV(rax)
  5232 0000354E FF5009                  	call SOB_CLOSURE_CODE(rax)
  5233 00003551 483D[02000000]          	cmp rax, sob_boolean_false
  5234 00003557 0F8415010000            	je .L_if_else_0005
  5235                                  	; preparing a non-tail-call
  5236                                  	; preparing a non-tail-call
  5237 0000355D 488B4520                	mov rax, PARAM(0)	; param s
  5238 00003561 50                      	push rax
  5239 00003562 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  5240 0000356A 803805                  	cmp byte [rax], T_undefined
  5241 0000356D 0F844B320000            	je L_error_fvar_undefined
  5242 00003573 50                      	push rax
  5243 00003574 6A02                    	push 2	; arg count
  5244 00003576 488B0425[AC0C0000]      	mov rax, qword [free_var_54]	; free var map
  5245 0000357E 803805                  	cmp byte [rax], T_undefined
  5246 00003581 0F8437320000            	je L_error_fvar_undefined
  5247 00003587 803804                  	cmp byte [rax], T_closure
  5248 0000358A 0F85B2320000            	jne L_error_non_closure
  5249 00003590 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5250 00003593 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5251 00003596 50                      	push rax
  5252 00003597 488B4510                	mov rax, ENV
  5253 0000359B 488B4008                	mov rax, qword [rax + 8 * 1]
  5254 0000359F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  5255 000035A2 50                      	push rax
  5256 000035A3 6A02                    	push 2	; arg count
  5257 000035A5 488B0425[AF090000]      	mov rax, qword [free_var_9]	; free var apply
  5258 000035AD 803805                  	cmp byte [rax], T_undefined
  5259 000035B0 0F8408320000            	je L_error_fvar_undefined
  5260 000035B6 803804                  	cmp byte [rax], T_closure
  5261 000035B9 0F8583320000            	jne L_error_non_closure
  5262 000035BF FF7001                  	push SOB_CLOSURE_ENV(rax)
  5263 000035C2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5264 000035C5 483D[02000000]          	cmp rax, sob_boolean_false
  5265 000035CB 0F849F000000            	je .L_or_end_0003
  5266                                  
  5267                                  	; preparing a tail-call
  5268                                  	; preparing a non-tail-call
  5269 000035D1 488B4520                	mov rax, PARAM(0)	; param s
  5270 000035D5 50                      	push rax
  5271 000035D6 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  5272 000035DE 803805                  	cmp byte [rax], T_undefined
  5273 000035E1 0F84D7310000            	je L_error_fvar_undefined
  5274 000035E7 50                      	push rax
  5275 000035E8 6A02                    	push 2	; arg count
  5276 000035EA 488B0425[AC0C0000]      	mov rax, qword [free_var_54]	; free var map
  5277 000035F2 803805                  	cmp byte [rax], T_undefined
  5278 000035F5 0F84C3310000            	je L_error_fvar_undefined
  5279 000035FB 803804                  	cmp byte [rax], T_closure
  5280 000035FE 0F853E320000            	jne L_error_non_closure
  5281 00003604 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5282 00003607 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5283 0000360A 50                      	push rax
  5284 0000360B 6A01                    	push 1	; arg count
  5285 0000360D 488B4510                	mov rax, ENV
  5286 00003611 488B00                  	mov rax, qword [rax + 8 * 0]
  5287 00003614 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  5288 00003617 488B00                  	mov rax, qword [rax]
  5289 0000361A 803804                  	cmp byte [rax], T_closure
  5290 0000361D 0F851F320000            	jne L_error_non_closure
  5291 00003623 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5292 00003626 FF7508                  	push qword [rbp + 8 * 1]
  5293                                   ; old ret addr
  5294 00003629 FF7500                  	push qword [rbp]
  5295                                   ; restore the old rbp
  5296 0000362C BB01000000              	mov rbx, 1
  5297 00003631 4883C303                	add rbx, 3
  5298 00003635 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  5299 00003639 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  5300 0000363E 4C8D4DF8                	lea r9, [rbp - 8]
  5301 00003642 B905000000              	mov rcx, 5
  5302                                  .L_tc_recycle_frame_loop_0024:
  5303 00003647 4883F900                	cmp rcx, 0
  5304 0000364B 7413                    	je .L_tc_recycle_frame_done_0024
  5305 0000364D 4D8B11                  	mov r10, qword [r9]
  5306 00003650 4D8910                  	mov qword [r8], r10
  5307 00003653 4983E808                	sub r8, 8
  5308 00003657 4983E908                	sub r9, 8
  5309 0000365B 48FFC9                  	dec rcx
  5310 0000365E EBE7                    	jmp .L_tc_recycle_frame_loop_0024
  5311                                  .L_tc_recycle_frame_done_0024:
  5312 00003660 498D6008                	lea rsp, [r8 + 8]
  5313 00003664 5D                      	pop rbp ; restore the old rbp
  5314 00003665 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5315 00003668 483D[02000000]          	cmp rax, sob_boolean_false
  5316 0000366E 7400                    	je .L_or_end_0003
  5317                                  .L_or_end_0003:
  5318 00003670 EB0A                    	jmp .L_if_end_0005
  5319                                  .L_if_else_0005:
  5320 00003672 48B8-                   	mov rax, L_constants + 2
  5320 00003674 [0200000000000000] 
  5321                                  .L_if_end_0005:
  5322 0000367C C9                      	leave
  5323 0000367D C21800                  	ret AND_KILL_FRAME(1)
  5324                                  .L_lambda_simple_end_0025:	; new closure is in rax
  5325 00003680 50                      	push rax
  5326 00003681 488B4520                	mov rax, PARAM(0)	; param loop
  5327 00003685 8F00                    	pop qword [rax]
  5328 00003687 48B8-                   	mov rax, sob_void
  5328 00003689 [0000000000000000] 
  5329                                  
  5330                                  	; preparing a non-tail-call
  5331 00003691 488B4510                	mov rax, ENV
  5332 00003695 488B00                  	mov rax, qword [rax + 8 * 0]
  5333 00003698 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5334 0000369C 50                      	push rax
  5335 0000369D 6A01                    	push 1	; arg count
  5336 0000369F 488B0425[F00C0000]      	mov rax, qword [free_var_58]	; free var pair?
  5337 000036A7 803805                  	cmp byte [rax], T_undefined
  5338 000036AA 0F840E310000            	je L_error_fvar_undefined
  5339 000036B0 803804                  	cmp byte [rax], T_closure
  5340 000036B3 0F8589310000            	jne L_error_non_closure
  5341 000036B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5342 000036BC FF5009                  	call SOB_CLOSURE_CODE(rax)
  5343 000036BF 483D[02000000]          	cmp rax, sob_boolean_false
  5344 000036C5 7465                    	je .L_if_else_0006
  5345                                  	; preparing a tail-call
  5346 000036C7 488B4510                	mov rax, ENV
  5347 000036CB 488B00                  	mov rax, qword [rax + 8 * 0]
  5348 000036CE 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5349 000036D2 50                      	push rax
  5350 000036D3 6A01                    	push 1	; arg count
  5351 000036D5 488B4520                	mov rax, PARAM(0)	; param loop
  5352 000036D9 488B00                  	mov rax, qword [rax]
  5353 000036DC 803804                  	cmp byte [rax], T_closure
  5354 000036DF 0F855D310000            	jne L_error_non_closure
  5355 000036E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5356 000036E8 FF7508                  	push qword [rbp + 8 * 1]
  5357                                   ; old ret addr
  5358 000036EB FF7500                  	push qword [rbp]
  5359                                   ; restore the old rbp
  5360 000036EE BB01000000              	mov rbx, 1
  5361 000036F3 4883C303                	add rbx, 3
  5362 000036F7 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  5363 000036FB 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  5364 00003700 4C8D4DF8                	lea r9, [rbp - 8]
  5365 00003704 B905000000              	mov rcx, 5
  5366                                  .L_tc_recycle_frame_loop_0025:
  5367 00003709 4883F900                	cmp rcx, 0
  5368 0000370D 7413                    	je .L_tc_recycle_frame_done_0025
  5369 0000370F 4D8B11                  	mov r10, qword [r9]
  5370 00003712 4D8910                  	mov qword [r8], r10
  5371 00003715 4983E808                	sub r8, 8
  5372 00003719 4983E908                	sub r9, 8
  5373 0000371D 48FFC9                  	dec rcx
  5374 00003720 EBE7                    	jmp .L_tc_recycle_frame_loop_0025
  5375                                  .L_tc_recycle_frame_done_0025:
  5376 00003722 498D6008                	lea rsp, [r8 + 8]
  5377 00003726 5D                      	pop rbp ; restore the old rbp
  5378 00003727 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5379 0000372A EB0A                    	jmp .L_if_end_0006
  5380                                  .L_if_else_0006:
  5381 0000372C 48B8-                   	mov rax, L_constants + 2
  5381 0000372E [0200000000000000] 
  5382                                  .L_if_end_0006:
  5383 00003736 C9                      	leave
  5384 00003737 C21800                  	ret AND_KILL_FRAME(1)
  5385                                  .L_lambda_simple_end_0024:	; new closure is in rax
  5386 0000373A 803804                  	cmp byte [rax], T_closure
  5387 0000373D 0F85FF300000            	jne L_error_non_closure
  5388 00003743 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5389 00003746 FF7508                  	push qword [rbp + 8 * 1]
  5390                                   ; old ret addr
  5391 00003749 FF7500                  	push qword [rbp]
  5392                                   ; restore the old rbp
  5393 0000374C BB01000000              	mov rbx, 1
  5394 00003751 4883C303                	add rbx, 3
  5395 00003755 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  5396 00003759 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  5397 0000375E 4C8D4DF8                	lea r9, [rbp - 8]
  5398 00003762 B905000000              	mov rcx, 5
  5399                                  .L_tc_recycle_frame_loop_0023:
  5400 00003767 4883F900                	cmp rcx, 0
  5401 0000376B 7413                    	je .L_tc_recycle_frame_done_0023
  5402 0000376D 4D8B11                  	mov r10, qword [r9]
  5403 00003770 4D8910                  	mov qword [r8], r10
  5404 00003773 4983E808                	sub r8, 8
  5405 00003777 4983E908                	sub r9, 8
  5406 0000377B 48FFC9                  	dec rcx
  5407 0000377E EBE7                    	jmp .L_tc_recycle_frame_loop_0023
  5408                                  .L_tc_recycle_frame_done_0023:
  5409 00003780 498D6008                	lea rsp, [r8 + 8]
  5410 00003784 5D                      	pop rbp ; restore the old rbp
  5411 00003785 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5412 00003788 C9                      	leave
  5413 00003789 C22000                  	ret 8 * (2 + 2)
  5414                                  .L_lambda_opt_end_0004:	; new closure is in rax
  5415 0000378C 48890425[DF0C0000]      	mov qword [free_var_57], rax
  5416 00003794 48B8-                   	mov rax, sob_void
  5416 00003796 [0000000000000000] 
  5417                                  
  5418 0000379E 4889C7                  	mov rdi, rax
  5419 000037A1 E89A330000              	call print_sexpr_if_not_void
  5420 000037A6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5421 000037AB E83B310000              	call malloc
  5422 000037B0 50                      	push rax
  5423 000037B1 BF00000000              	mov rdi, 8 * 0	; new rib
  5424 000037B6 E830310000              	call malloc
  5425 000037BB 50                      	push rax
  5426 000037BC BF08000000              	mov rdi, 8 * 1	; extended env
  5427 000037C1 E825310000              	call malloc
  5428 000037C6 488B7D10                	mov rdi, ENV
  5429 000037CA 4831F6                  	 xor rsi, rsi
  5430 000037CD 4831D2                  	 xor rdx, rdx
  5431 000037D0 48FFC2                  	inc rdx
  5432                                  .L_lambda_opt_env_loop_0005:	; 
  5433 000037D3 4883FE00                	cmp rsi, 0
  5434 000037D7 7410                    	je .L_lambda_opt_env_end_0005
  5435 000037D9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5436 000037DD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5437 000037E1 48FFC6                  	inc rsi
  5438 000037E4 48FFC2                  	inc rdx
  5439 000037E7 EBEA                    	jmp .L_lambda_opt_env_loop_0005
  5440                                  .L_lambda_opt_env_end_0005:
  5441 000037E9 5B                      	pop rbx
  5442 000037EA 4831F6                  	xor rsi, rsi
  5443                                  .L_lambda_opt_params_loop_0005:	; copy params
  5444 000037ED 4883FE00                	cmp rsi, 0
  5445 000037F1 740E                    	je .L_lambda_opt_params_end_0005
  5446 000037F3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5447 000037F8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5448 000037FC 48FFC6                  	inc rsi
  5449 000037FF EBEC                    	jmp .L_lambda_opt_params_loop_0005
  5450                                  .L_lambda_opt_params_end_0005:
  5451 00003801 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5452 00003804 4889C3                  	mov rbx, rax
  5453 00003807 58                      	pop rax
  5454 00003808 C60004                  	mov byte [rax], T_closure
  5455 0000380B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5456 0000380F 48C74009[1C380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0005
  5457 00003817 E909050000              	jmp .L_lambda_opt_end_0005
  5458                                  .L_lambda_opt_code_0005:
  5459 0000381C 4C8B7C2410              	mov r15, qword [rsp + 8 * 2]
  5460 00003821 4983FF01                	cmp r15, 1
  5461 00003825 7409                    	je .L_lambda_opt_arity_check_exact_0005
  5462 00003827 7F57                    	jg .L_lambda_opt_arity_check_more_0005
  5463 00003829 6A01                    	push 1
  5464 0000382B E988300000              	jmp L_error_incorrect_arity_opt
  5465                                  .L_lambda_opt_arity_check_exact_0005: ;Exact case
  5466 00003830 4C8B0424                	mov r8, qword [rsp -8 * 0]
  5467 00003834 4C894424F8              	mov qword [rsp -8], r8
  5468 00003839 4C8B442408              	mov r8, qword [rsp +8]
  5469 0000383E 4C890424                	mov qword [rsp +8 * 0], r8
  5470 00003842 4C8B442410              	mov r8, qword [rsp +8 * 2]
  5471 00003847 4C89C1                  	mov rcx, r8
  5472 0000384A 49FFC0                  	inc r8
  5473 0000384D 4C89442408              	mov qword [rsp +8], r8
  5474 00003852 4889E2                  	mov rdx, rsp
  5475 00003855 4883C218                	add rdx, 24
  5476                                  .L_lambda_opt_loop_copy_to_new_frame_exact_0005:
  5477 00003859 4883F900                	cmp rcx, 0
  5478 0000385D 7410                    	je .L_lambda_opt_loop_copy_to_new_frame_exact_end_0005
  5479 0000385F 4C8B02                  	mov r8, qword [rdx]
  5480 00003862 4C8942F8                	mov qword [rdx - 8], r8
  5481 00003866 4883C208                	add rdx, 8
  5482 0000386A 48FFC9                  	dec rcx
  5483 0000386D EBEA                    	jmp .L_lambda_opt_loop_copy_to_new_frame_exact_0005
  5484                                  .L_lambda_opt_loop_copy_to_new_frame_exact_end_0005:
  5485 0000386F 48C742F8[01000000]      	mov qword [rdx - 8], sob_nil
  5486 00003877 4883EC08                	sub rsp, 8
  5487 0000387B E985000000              	jmp .L_lambda_opt_stack_adjusted_0005
  5488                                  .L_lambda_opt_arity_check_more_0005:
  5489 00003880 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  5490 00003885 4D89C4                  	mov r12, r8
  5491 00003888 4C89C1                  	mov rcx, r8
  5492 0000388B 4D8D6802                	lea r13, [r8 + 2] 
  5493 0000388F 4883E901                	sub rcx, 1
  5494 00003893 4E8D5CC410              	lea r11, qword [rsp + r8 * 8 + 16]
  5495 00003898 49BE-                   	mov r14, sob_nil
  5495 0000389A [0100000000000000] 
  5496                                  .L_lambda_opt_create_list_of_opt_params_0005:
  5497 000038A2 4883F900                	cmp rcx, 0
  5498 000038A6 7424                    	je .L_lambda_opt_create_list_of_opt_params_end_0005
  5499 000038A8 BF11000000              	mov rdi, 17
  5500 000038AD E839300000              	call malloc
  5501 000038B2 C60021                  	mov byte [rax], T_pair
  5502 000038B5 498B1B                  	mov rbx, qword [r11]
  5503 000038B8 48895801                	mov qword [rax +1], rbx
  5504 000038BC 4C897009                	mov qword [rax + 1 + 8], r14
  5505 000038C0 4989C6                  	mov r14, rax
  5506 000038C3 48FFC9                  	dec rcx
  5507 000038C6 4983EB08                	sub r11, 8
  5508 000038CA EBD6                    	jmp .L_lambda_opt_create_list_of_opt_params_0005
  5509                                  .L_lambda_opt_create_list_of_opt_params_end_0005:
  5510 000038CC 4C8D542420              	lea r10, [rsp + 1*8 + 8*3]
  5511 000038D1 4D8932                  	mov qword [r10], r14
  5512 000038D4 4E8D2CED00000000        	lea r13, [8 * r13]
  5513 000038DC 4901E5                  	add r13, rsp
  5514 000038DF B905000000              	mov rcx, 4 + 1
  5515                                  .L_lambda_opt_stack_shrink_loop_0005:
  5516 000038E4 4883F900                	cmp rcx, 0
  5517 000038E8 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0005
  5518 000038EA 4D8B1A                  	mov r11, qword [r10]
  5519 000038ED 4D895D00                	mov qword [r13], r11
  5520 000038F1 4983EA08                	sub r10, 8
  5521 000038F5 4983ED08                	sub r13, 8
  5522 000038F9 48FFC9                  	dec rcx
  5523 000038FC EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0005
  5524                                  .L_lambda_opt_stack_shrink_loop_exit_0005:
  5525 000038FE 4983C508                	add r13, 8
  5526 00003902 4C89EC                  	mov rsp, r13
  5527                                  .L_lambda_opt_stack_adjusted_0005:
  5528 00003905 48C744241002000000      	mov qword [rsp + 8*2], 2
  5529 0000390E C8000000                	enter 0, 0
  5530                                  	; preparing a tail-call
  5531 00003912 48B8-                   	mov rax, L_constants + 1993
  5531 00003914 [C907000000000000] 
  5532 0000391C 50                      	push rax
  5533 0000391D 6A01                    	push 1	; arg count
  5534 0000391F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5535 00003924 E8C22F0000              	call malloc
  5536 00003929 50                      	push rax
  5537 0000392A BF10000000              	mov rdi, 8 * 2	; new rib
  5538 0000392F E8B72F0000              	call malloc
  5539 00003934 50                      	push rax
  5540 00003935 BF10000000              	mov rdi, 8 * 2	; extended env
  5541 0000393A E8AC2F0000              	call malloc
  5542 0000393F 488B7D10                	mov rdi, ENV
  5543 00003943 BE00000000              	mov rsi, 0
  5544 00003948 BA01000000              	mov rdx, 1
  5545                                  .L_lambda_simple_env_loop_0026:	; ext_env[i + 1] <-- env[i]
  5546 0000394D 4883FE01                	cmp rsi, 1
  5547 00003951 7410                    	je .L_lambda_simple_env_end_0026
  5548 00003953 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5549 00003957 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5550 0000395B 48FFC6                  	inc rsi
  5551 0000395E 48FFC2                  	inc rdx
  5552 00003961 EBEA                    	jmp .L_lambda_simple_env_loop_0026
  5553                                  .L_lambda_simple_env_end_0026:
  5554 00003963 5B                      	pop rbx
  5555 00003964 BE00000000              	mov rsi, 0
  5556                                  .L_lambda_simple_params_loop_0026:	; copy params
  5557 00003969 4883FE02                	cmp rsi, 2
  5558 0000396D 740E                    	je .L_lambda_simple_params_end_0026
  5559 0000396F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5560 00003974 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5561 00003978 48FFC6                  	inc rsi
  5562 0000397B EBEC                    	jmp .L_lambda_simple_params_loop_0026
  5563                                  .L_lambda_simple_params_end_0026:
  5564 0000397D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5565 00003980 4889C3                  	mov rbx, rax
  5566 00003983 58                      	pop rax
  5567 00003984 C60004                  	mov byte [rax], T_closure
  5568 00003987 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5569 0000398B 48C74009[98390000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0026
  5570 00003993 E93B030000              	jmp .L_lambda_simple_end_0026
  5571                                  .L_lambda_simple_code_0026:	; lambda-simple body
  5572 00003998 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5573 0000399E 740B                    	je .L_lambda_simple_arity_check_ok_0026
  5574 000039A0 FF742410                	push qword [rsp + 8 * 2]
  5575 000039A4 6A01                    	push 1
  5576 000039A6 E9F92E0000              	jmp L_error_incorrect_arity_simple
  5577                                  .L_lambda_simple_arity_check_ok_0026:
  5578 000039AB C8000000                	enter 0, 0
  5579 000039AF BF08000000              	mov rdi, 8*1
  5580 000039B4 E8322F0000              	call malloc
  5581 000039B9 488B5D20                	mov rbx, PARAM(0)
  5582 000039BD 488918                  	mov qword [rax], rbx
  5583 000039C0 48894520                	mov PARAM(0), rax
  5584 000039C4 48B8-                   	mov rax, sob_void
  5584 000039C6 [0000000000000000] 
  5585                                  
  5586 000039CE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5587 000039D3 E8132F0000              	call malloc
  5588 000039D8 50                      	push rax
  5589 000039D9 BF08000000              	mov rdi, 8 * 1	; new rib
  5590 000039DE E8082F0000              	call malloc
  5591 000039E3 50                      	push rax
  5592 000039E4 BF18000000              	mov rdi, 8 * 3	; extended env
  5593 000039E9 E8FD2E0000              	call malloc
  5594 000039EE 488B7D10                	mov rdi, ENV
  5595 000039F2 BE00000000              	mov rsi, 0
  5596 000039F7 BA01000000              	mov rdx, 1
  5597                                  .L_lambda_simple_env_loop_0027:	; ext_env[i + 1] <-- env[i]
  5598 000039FC 4883FE02                	cmp rsi, 2
  5599 00003A00 7410                    	je .L_lambda_simple_env_end_0027
  5600 00003A02 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5601 00003A06 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5602 00003A0A 48FFC6                  	inc rsi
  5603 00003A0D 48FFC2                  	inc rdx
  5604 00003A10 EBEA                    	jmp .L_lambda_simple_env_loop_0027
  5605                                  .L_lambda_simple_env_end_0027:
  5606 00003A12 5B                      	pop rbx
  5607 00003A13 BE00000000              	mov rsi, 0
  5608                                  .L_lambda_simple_params_loop_0027:	; copy params
  5609 00003A18 4883FE01                	cmp rsi, 1
  5610 00003A1C 740E                    	je .L_lambda_simple_params_end_0027
  5611 00003A1E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5612 00003A23 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5613 00003A27 48FFC6                  	inc rsi
  5614 00003A2A EBEC                    	jmp .L_lambda_simple_params_loop_0027
  5615                                  .L_lambda_simple_params_end_0027:
  5616 00003A2C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5617 00003A2F 4889C3                  	mov rbx, rax
  5618 00003A32 58                      	pop rax
  5619 00003A33 C60004                  	mov byte [rax], T_closure
  5620 00003A36 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5621 00003A3A 48C74009[473A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0027
  5622 00003A42 E990010000              	jmp .L_lambda_simple_end_0027
  5623                                  .L_lambda_simple_code_0027:	; lambda-simple body
  5624 00003A47 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5625 00003A4D 740B                    	je .L_lambda_simple_arity_check_ok_0027
  5626 00003A4F FF742410                	push qword [rsp + 8 * 2]
  5627 00003A53 6A01                    	push 1
  5628 00003A55 E94A2E0000              	jmp L_error_incorrect_arity_simple
  5629                                  .L_lambda_simple_arity_check_ok_0027:
  5630 00003A5A C8000000                	enter 0, 0
  5631                                  	; preparing a non-tail-call
  5632                                  	; preparing a non-tail-call
  5633 00003A5E 488B4520                	mov rax, PARAM(0)	; param s
  5634 00003A62 50                      	push rax
  5635 00003A63 6A01                    	push 1	; arg count
  5636 00003A65 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  5637 00003A6D 803805                  	cmp byte [rax], T_undefined
  5638 00003A70 0F84482D0000            	je L_error_fvar_undefined
  5639 00003A76 803804                  	cmp byte [rax], T_closure
  5640 00003A79 0F85C32D0000            	jne L_error_non_closure
  5641 00003A7F FF7001                  	push SOB_CLOSURE_ENV(rax)
  5642 00003A82 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5643 00003A85 50                      	push rax
  5644 00003A86 6A01                    	push 1	; arg count
  5645 00003A88 488B0425[CE0C0000]      	mov rax, qword [free_var_56]	; free var null?
  5646 00003A90 803805                  	cmp byte [rax], T_undefined
  5647 00003A93 0F84252D0000            	je L_error_fvar_undefined
  5648 00003A99 803804                  	cmp byte [rax], T_closure
  5649 00003A9C 0F85A02D0000            	jne L_error_non_closure
  5650 00003AA2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5651 00003AA5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5652 00003AA8 483D[02000000]          	cmp rax, sob_boolean_false
  5653 00003AAE 0F841F010000            	je .L_or_end_0004
  5654                                  
  5655                                  	; preparing a non-tail-call
  5656                                  	; preparing a non-tail-call
  5657 00003AB4 488B4520                	mov rax, PARAM(0)	; param s
  5658 00003AB8 50                      	push rax
  5659 00003AB9 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  5660 00003AC1 803805                  	cmp byte [rax], T_undefined
  5661 00003AC4 0F84F42C0000            	je L_error_fvar_undefined
  5662 00003ACA 50                      	push rax
  5663 00003ACB 6A02                    	push 2	; arg count
  5664 00003ACD 488B0425[AC0C0000]      	mov rax, qword [free_var_54]	; free var map
  5665 00003AD5 803805                  	cmp byte [rax], T_undefined
  5666 00003AD8 0F84E02C0000            	je L_error_fvar_undefined
  5667 00003ADE 803804                  	cmp byte [rax], T_closure
  5668 00003AE1 0F855B2D0000            	jne L_error_non_closure
  5669 00003AE7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5670 00003AEA FF5009                  	call SOB_CLOSURE_CODE(rax)
  5671 00003AED 50                      	push rax
  5672 00003AEE 488B4510                	mov rax, ENV
  5673 00003AF2 488B4008                	mov rax, qword [rax + 8 * 1]
  5674 00003AF6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  5675 00003AF9 50                      	push rax
  5676 00003AFA 6A02                    	push 2	; arg count
  5677 00003AFC 488B0425[AF090000]      	mov rax, qword [free_var_9]	; free var apply
  5678 00003B04 803805                  	cmp byte [rax], T_undefined
  5679 00003B07 0F84B12C0000            	je L_error_fvar_undefined
  5680 00003B0D 803804                  	cmp byte [rax], T_closure
  5681 00003B10 0F852C2D0000            	jne L_error_non_closure
  5682 00003B16 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5683 00003B19 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5684 00003B1C 483D[02000000]          	cmp rax, sob_boolean_false
  5685 00003B22 0F8499000000            	je .L_if_else_0007
  5686                                  	; preparing a tail-call
  5687                                  	; preparing a non-tail-call
  5688 00003B28 488B4520                	mov rax, PARAM(0)	; param s
  5689 00003B2C 50                      	push rax
  5690 00003B2D 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  5691 00003B35 803805                  	cmp byte [rax], T_undefined
  5692 00003B38 0F84802C0000            	je L_error_fvar_undefined
  5693 00003B3E 50                      	push rax
  5694 00003B3F 6A02                    	push 2	; arg count
  5695 00003B41 488B0425[AC0C0000]      	mov rax, qword [free_var_54]	; free var map
  5696 00003B49 803805                  	cmp byte [rax], T_undefined
  5697 00003B4C 0F846C2C0000            	je L_error_fvar_undefined
  5698 00003B52 803804                  	cmp byte [rax], T_closure
  5699 00003B55 0F85E72C0000            	jne L_error_non_closure
  5700 00003B5B FF7001                  	push SOB_CLOSURE_ENV(rax)
  5701 00003B5E FF5009                  	call SOB_CLOSURE_CODE(rax)
  5702 00003B61 50                      	push rax
  5703 00003B62 6A01                    	push 1	; arg count
  5704 00003B64 488B4510                	mov rax, ENV
  5705 00003B68 488B00                  	mov rax, qword [rax + 8 * 0]
  5706 00003B6B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  5707 00003B6E 488B00                  	mov rax, qword [rax]
  5708 00003B71 803804                  	cmp byte [rax], T_closure
  5709 00003B74 0F85C82C0000            	jne L_error_non_closure
  5710 00003B7A FF7001                  	push SOB_CLOSURE_ENV(rax)
  5711 00003B7D FF7508                  	push qword [rbp + 8 * 1]
  5712                                   ; old ret addr
  5713 00003B80 FF7500                  	push qword [rbp]
  5714                                   ; restore the old rbp
  5715 00003B83 BB01000000              	mov rbx, 1
  5716 00003B88 4883C303                	add rbx, 3
  5717 00003B8C 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  5718 00003B90 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  5719 00003B95 4C8D4DF8                	lea r9, [rbp - 8]
  5720 00003B99 B905000000              	mov rcx, 5
  5721                                  .L_tc_recycle_frame_loop_0027:
  5722 00003B9E 4883F900                	cmp rcx, 0
  5723 00003BA2 7413                    	je .L_tc_recycle_frame_done_0027
  5724 00003BA4 4D8B11                  	mov r10, qword [r9]
  5725 00003BA7 4D8910                  	mov qword [r8], r10
  5726 00003BAA 4983E808                	sub r8, 8
  5727 00003BAE 4983E908                	sub r9, 8
  5728 00003BB2 48FFC9                  	dec rcx
  5729 00003BB5 EBE7                    	jmp .L_tc_recycle_frame_loop_0027
  5730                                  .L_tc_recycle_frame_done_0027:
  5731 00003BB7 498D6008                	lea rsp, [r8 + 8]
  5732 00003BBB 5D                      	pop rbp ; restore the old rbp
  5733 00003BBC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5734 00003BBF EB0A                    	jmp .L_if_end_0007
  5735                                  .L_if_else_0007:
  5736 00003BC1 48B8-                   	mov rax, L_constants + 2
  5736 00003BC3 [0200000000000000] 
  5737                                  .L_if_end_0007:
  5738 00003BCB 483D[02000000]          	cmp rax, sob_boolean_false
  5739 00003BD1 7400                    	je .L_or_end_0004
  5740                                  .L_or_end_0004:
  5741 00003BD3 C9                      	leave
  5742 00003BD4 C21800                  	ret AND_KILL_FRAME(1)
  5743                                  .L_lambda_simple_end_0027:	; new closure is in rax
  5744 00003BD7 50                      	push rax
  5745 00003BD8 488B4520                	mov rax, PARAM(0)	; param loop
  5746 00003BDC 8F00                    	pop qword [rax]
  5747 00003BDE 48B8-                   	mov rax, sob_void
  5747 00003BE0 [0000000000000000] 
  5748                                  
  5749                                  	; preparing a non-tail-call
  5750 00003BE8 488B4510                	mov rax, ENV
  5751 00003BEC 488B00                  	mov rax, qword [rax + 8 * 0]
  5752 00003BEF 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5753 00003BF3 50                      	push rax
  5754 00003BF4 6A01                    	push 1	; arg count
  5755 00003BF6 488B0425[CE0C0000]      	mov rax, qword [free_var_56]	; free var null?
  5756 00003BFE 803805                  	cmp byte [rax], T_undefined
  5757 00003C01 0F84B72B0000            	je L_error_fvar_undefined
  5758 00003C07 803804                  	cmp byte [rax], T_closure
  5759 00003C0A 0F85322C0000            	jne L_error_non_closure
  5760 00003C10 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5761 00003C13 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5762 00003C16 483D[02000000]          	cmp rax, sob_boolean_false
  5763 00003C1C 0F84AD000000            	je .L_or_end_0005
  5764                                  
  5765                                  	; preparing a non-tail-call
  5766 00003C22 488B4510                	mov rax, ENV
  5767 00003C26 488B00                  	mov rax, qword [rax + 8 * 0]
  5768 00003C29 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5769 00003C2D 50                      	push rax
  5770 00003C2E 6A01                    	push 1	; arg count
  5771 00003C30 488B0425[F00C0000]      	mov rax, qword [free_var_58]	; free var pair?
  5772 00003C38 803805                  	cmp byte [rax], T_undefined
  5773 00003C3B 0F847D2B0000            	je L_error_fvar_undefined
  5774 00003C41 803804                  	cmp byte [rax], T_closure
  5775 00003C44 0F85F82B0000            	jne L_error_non_closure
  5776 00003C4A FF7001                  	push SOB_CLOSURE_ENV(rax)
  5777 00003C4D FF5009                  	call SOB_CLOSURE_CODE(rax)
  5778 00003C50 483D[02000000]          	cmp rax, sob_boolean_false
  5779 00003C56 7465                    	je .L_if_else_0008
  5780                                  	; preparing a tail-call
  5781 00003C58 488B4510                	mov rax, ENV
  5782 00003C5C 488B00                  	mov rax, qword [rax + 8 * 0]
  5783 00003C5F 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5784 00003C63 50                      	push rax
  5785 00003C64 6A01                    	push 1	; arg count
  5786 00003C66 488B4520                	mov rax, PARAM(0)	; param loop
  5787 00003C6A 488B00                  	mov rax, qword [rax]
  5788 00003C6D 803804                  	cmp byte [rax], T_closure
  5789 00003C70 0F85CC2B0000            	jne L_error_non_closure
  5790 00003C76 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5791 00003C79 FF7508                  	push qword [rbp + 8 * 1]
  5792                                   ; old ret addr
  5793 00003C7C FF7500                  	push qword [rbp]
  5794                                   ; restore the old rbp
  5795 00003C7F BB01000000              	mov rbx, 1
  5796 00003C84 4883C303                	add rbx, 3
  5797 00003C88 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  5798 00003C8C 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  5799 00003C91 4C8D4DF8                	lea r9, [rbp - 8]
  5800 00003C95 B905000000              	mov rcx, 5
  5801                                  .L_tc_recycle_frame_loop_0028:
  5802 00003C9A 4883F900                	cmp rcx, 0
  5803 00003C9E 7413                    	je .L_tc_recycle_frame_done_0028
  5804 00003CA0 4D8B11                  	mov r10, qword [r9]
  5805 00003CA3 4D8910                  	mov qword [r8], r10
  5806 00003CA6 4983E808                	sub r8, 8
  5807 00003CAA 4983E908                	sub r9, 8
  5808 00003CAE 48FFC9                  	dec rcx
  5809 00003CB1 EBE7                    	jmp .L_tc_recycle_frame_loop_0028
  5810                                  .L_tc_recycle_frame_done_0028:
  5811 00003CB3 498D6008                	lea rsp, [r8 + 8]
  5812 00003CB7 5D                      	pop rbp ; restore the old rbp
  5813 00003CB8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5814 00003CBB EB0A                    	jmp .L_if_end_0008
  5815                                  .L_if_else_0008:
  5816 00003CBD 48B8-                   	mov rax, L_constants + 2
  5816 00003CBF [0200000000000000] 
  5817                                  .L_if_end_0008:
  5818 00003CC7 483D[02000000]          	cmp rax, sob_boolean_false
  5819 00003CCD 7400                    	je .L_or_end_0005
  5820                                  .L_or_end_0005:
  5821 00003CCF C9                      	leave
  5822 00003CD0 C21800                  	ret AND_KILL_FRAME(1)
  5823                                  .L_lambda_simple_end_0026:	; new closure is in rax
  5824 00003CD3 803804                  	cmp byte [rax], T_closure
  5825 00003CD6 0F85662B0000            	jne L_error_non_closure
  5826 00003CDC FF7001                  	push SOB_CLOSURE_ENV(rax)
  5827 00003CDF FF7508                  	push qword [rbp + 8 * 1]
  5828                                   ; old ret addr
  5829 00003CE2 FF7500                  	push qword [rbp]
  5830                                   ; restore the old rbp
  5831 00003CE5 BB01000000              	mov rbx, 1
  5832 00003CEA 4883C303                	add rbx, 3
  5833 00003CEE 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  5834 00003CF2 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  5835 00003CF7 4C8D4DF8                	lea r9, [rbp - 8]
  5836 00003CFB B905000000              	mov rcx, 5
  5837                                  .L_tc_recycle_frame_loop_0026:
  5838 00003D00 4883F900                	cmp rcx, 0
  5839 00003D04 7413                    	je .L_tc_recycle_frame_done_0026
  5840 00003D06 4D8B11                  	mov r10, qword [r9]
  5841 00003D09 4D8910                  	mov qword [r8], r10
  5842 00003D0C 4983E808                	sub r8, 8
  5843 00003D10 4983E908                	sub r9, 8
  5844 00003D14 48FFC9                  	dec rcx
  5845 00003D17 EBE7                    	jmp .L_tc_recycle_frame_loop_0026
  5846                                  .L_tc_recycle_frame_done_0026:
  5847 00003D19 498D6008                	lea rsp, [r8 + 8]
  5848 00003D1D 5D                      	pop rbp ; restore the old rbp
  5849 00003D1E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5850 00003D21 C9                      	leave
  5851 00003D22 C22000                  	ret 8 * (2 + 2)
  5852                                  .L_lambda_opt_end_0005:	; new closure is in rax
  5853 00003D25 48890425[8D090000]      	mov qword [free_var_7], rax
  5854 00003D2D 48B8-                   	mov rax, sob_void
  5854 00003D2F [0000000000000000] 
  5855                                  
  5856 00003D37 4889C7                  	mov rdi, rax
  5857 00003D3A E8012E0000              	call print_sexpr_if_not_void
  5858                                  	; preparing a non-tail-call
  5859 00003D3F 48B8-                   	mov rax, L_constants + 1993
  5859 00003D41 [C907000000000000] 
  5860 00003D49 50                      	push rax
  5861 00003D4A 48B8-                   	mov rax, L_constants + 1993
  5861 00003D4C [C907000000000000] 
  5862 00003D54 50                      	push rax
  5863 00003D55 6A02                    	push 2	; arg count
  5864 00003D57 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5865 00003D5C E88A2B0000              	call malloc
  5866 00003D61 50                      	push rax
  5867 00003D62 BF00000000              	mov rdi, 8 * 0	; new rib
  5868 00003D67 E87F2B0000              	call malloc
  5869 00003D6C 50                      	push rax
  5870 00003D6D BF08000000              	mov rdi, 8 * 1	; extended env
  5871 00003D72 E8742B0000              	call malloc
  5872 00003D77 488B7D10                	mov rdi, ENV
  5873 00003D7B BE00000000              	mov rsi, 0
  5874 00003D80 BA01000000              	mov rdx, 1
  5875                                  .L_lambda_simple_env_loop_0028:	; ext_env[i + 1] <-- env[i]
  5876 00003D85 4883FE00                	cmp rsi, 0
  5877 00003D89 7410                    	je .L_lambda_simple_env_end_0028
  5878 00003D8B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5879 00003D8F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5880 00003D93 48FFC6                  	inc rsi
  5881 00003D96 48FFC2                  	inc rdx
  5882 00003D99 EBEA                    	jmp .L_lambda_simple_env_loop_0028
  5883                                  .L_lambda_simple_env_end_0028:
  5884 00003D9B 5B                      	pop rbx
  5885 00003D9C BE00000000              	mov rsi, 0
  5886                                  .L_lambda_simple_params_loop_0028:	; copy params
  5887 00003DA1 4883FE00                	cmp rsi, 0
  5888 00003DA5 740E                    	je .L_lambda_simple_params_end_0028
  5889 00003DA7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5890 00003DAC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5891 00003DB0 48FFC6                  	inc rsi
  5892 00003DB3 EBEC                    	jmp .L_lambda_simple_params_loop_0028
  5893                                  .L_lambda_simple_params_end_0028:
  5894 00003DB5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5895 00003DB8 4889C3                  	mov rbx, rax
  5896 00003DBB 58                      	pop rax
  5897 00003DBC C60004                  	mov byte [rax], T_closure
  5898 00003DBF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5899 00003DC3 48C74009[D03D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0028
  5900 00003DCB E95A060000              	jmp .L_lambda_simple_end_0028
  5901                                  .L_lambda_simple_code_0028:	; lambda-simple body
  5902 00003DD0 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5903 00003DD6 740B                    	je .L_lambda_simple_arity_check_ok_0028
  5904 00003DD8 FF742410                	push qword [rsp + 8 * 2]
  5905 00003DDC 6A02                    	push 2
  5906 00003DDE E9C12A0000              	jmp L_error_incorrect_arity_simple
  5907                                  .L_lambda_simple_arity_check_ok_0028:
  5908 00003DE3 C8000000                	enter 0, 0
  5909 00003DE7 BF08000000              	mov rdi, 8*1
  5910 00003DEC E8FA2A0000              	call malloc
  5911 00003DF1 488B5D20                	mov rbx, PARAM(0)
  5912 00003DF5 488918                  	mov qword [rax], rbx
  5913 00003DF8 48894520                	mov PARAM(0), rax
  5914 00003DFC 48B8-                   	mov rax, sob_void
  5914 00003DFE [0000000000000000] 
  5915                                  
  5916 00003E06 BF08000000              	mov rdi, 8*1
  5917 00003E0B E8DB2A0000              	call malloc
  5918 00003E10 488B5D28                	mov rbx, PARAM(1)
  5919 00003E14 488918                  	mov qword [rax], rbx
  5920 00003E17 48894528                	mov PARAM(1), rax
  5921 00003E1B 48B8-                   	mov rax, sob_void
  5921 00003E1D [0000000000000000] 
  5922                                  
  5923 00003E25 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5924 00003E2A E8BC2A0000              	call malloc
  5925 00003E2F 50                      	push rax
  5926 00003E30 BF10000000              	mov rdi, 8 * 2	; new rib
  5927 00003E35 E8B12A0000              	call malloc
  5928 00003E3A 50                      	push rax
  5929 00003E3B BF10000000              	mov rdi, 8 * 2	; extended env
  5930 00003E40 E8A62A0000              	call malloc
  5931 00003E45 488B7D10                	mov rdi, ENV
  5932 00003E49 BE00000000              	mov rsi, 0
  5933 00003E4E BA01000000              	mov rdx, 1
  5934                                  .L_lambda_simple_env_loop_0029:	; ext_env[i + 1] <-- env[i]
  5935 00003E53 4883FE01                	cmp rsi, 1
  5936 00003E57 7410                    	je .L_lambda_simple_env_end_0029
  5937 00003E59 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5938 00003E5D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5939 00003E61 48FFC6                  	inc rsi
  5940 00003E64 48FFC2                  	inc rdx
  5941 00003E67 EBEA                    	jmp .L_lambda_simple_env_loop_0029
  5942                                  .L_lambda_simple_env_end_0029:
  5943 00003E69 5B                      	pop rbx
  5944 00003E6A BE00000000              	mov rsi, 0
  5945                                  .L_lambda_simple_params_loop_0029:	; copy params
  5946 00003E6F 4883FE02                	cmp rsi, 2
  5947 00003E73 740E                    	je .L_lambda_simple_params_end_0029
  5948 00003E75 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5949 00003E7A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5950 00003E7E 48FFC6                  	inc rsi
  5951 00003E81 EBEC                    	jmp .L_lambda_simple_params_loop_0029
  5952                                  .L_lambda_simple_params_end_0029:
  5953 00003E83 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5954 00003E86 4889C3                  	mov rbx, rax
  5955 00003E89 58                      	pop rax
  5956 00003E8A C60004                  	mov byte [rax], T_closure
  5957 00003E8D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5958 00003E91 48C74009[9E3E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0029
  5959 00003E99 E944010000              	jmp .L_lambda_simple_end_0029
  5960                                  .L_lambda_simple_code_0029:	; lambda-simple body
  5961 00003E9E 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5962 00003EA4 740B                    	je .L_lambda_simple_arity_check_ok_0029
  5963 00003EA6 FF742410                	push qword [rsp + 8 * 2]
  5964 00003EAA 6A02                    	push 2
  5965 00003EAC E9F3290000              	jmp L_error_incorrect_arity_simple
  5966                                  .L_lambda_simple_arity_check_ok_0029:
  5967 00003EB1 C8000000                	enter 0, 0
  5968                                  	; preparing a non-tail-call
  5969 00003EB5 488B4528                	mov rax, PARAM(1)	; param s
  5970 00003EB9 50                      	push rax
  5971 00003EBA 6A01                    	push 1	; arg count
  5972 00003EBC 488B0425[CE0C0000]      	mov rax, qword [free_var_56]	; free var null?
  5973 00003EC4 803805                  	cmp byte [rax], T_undefined
  5974 00003EC7 0F84F1280000            	je L_error_fvar_undefined
  5975 00003ECD 803804                  	cmp byte [rax], T_closure
  5976 00003ED0 0F856C290000            	jne L_error_non_closure
  5977 00003ED6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5978 00003ED9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5979 00003EDC 483D[02000000]          	cmp rax, sob_boolean_false
  5980 00003EE2 740F                    	je .L_if_else_0009
  5981 00003EE4 48B8-                   	mov rax, L_constants + 1
  5981 00003EE6 [0100000000000000] 
  5982 00003EEE E9EB000000              	jmp .L_if_end_0009
  5983                                  .L_if_else_0009:
  5984                                  	; preparing a tail-call
  5985                                  	; preparing a non-tail-call
  5986                                  	; preparing a non-tail-call
  5987 00003EF3 488B4528                	mov rax, PARAM(1)	; param s
  5988 00003EF7 50                      	push rax
  5989 00003EF8 6A01                    	push 1	; arg count
  5990 00003EFA 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  5991 00003F02 803805                  	cmp byte [rax], T_undefined
  5992 00003F05 0F84B3280000            	je L_error_fvar_undefined
  5993 00003F0B 803804                  	cmp byte [rax], T_closure
  5994 00003F0E 0F852E290000            	jne L_error_non_closure
  5995 00003F14 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5996 00003F17 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5997 00003F1A 50                      	push rax
  5998 00003F1B 488B4520                	mov rax, PARAM(0)	; param f
  5999 00003F1F 50                      	push rax
  6000 00003F20 6A02                    	push 2	; arg count
  6001 00003F22 488B4510                	mov rax, ENV
  6002 00003F26 488B00                  	mov rax, qword [rax + 8 * 0]
  6003 00003F29 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  6004 00003F2C 488B00                  	mov rax, qword [rax]
  6005 00003F2F 803804                  	cmp byte [rax], T_closure
  6006 00003F32 0F850A290000            	jne L_error_non_closure
  6007 00003F38 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6008 00003F3B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6009 00003F3E 50                      	push rax
  6010                                  	; preparing a non-tail-call
  6011                                  	; preparing a non-tail-call
  6012 00003F3F 488B4528                	mov rax, PARAM(1)	; param s
  6013 00003F43 50                      	push rax
  6014 00003F44 6A01                    	push 1	; arg count
  6015 00003F46 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  6016 00003F4E 803805                  	cmp byte [rax], T_undefined
  6017 00003F51 0F8467280000            	je L_error_fvar_undefined
  6018 00003F57 803804                  	cmp byte [rax], T_closure
  6019 00003F5A 0F85E2280000            	jne L_error_non_closure
  6020 00003F60 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6021 00003F63 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6022 00003F66 50                      	push rax
  6023 00003F67 6A01                    	push 1	; arg count
  6024 00003F69 488B4520                	mov rax, PARAM(0)	; param f
  6025 00003F6D 803804                  	cmp byte [rax], T_closure
  6026 00003F70 0F85CC280000            	jne L_error_non_closure
  6027 00003F76 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6028 00003F79 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6029 00003F7C 50                      	push rax
  6030 00003F7D 6A02                    	push 2	; arg count
  6031 00003F7F 488B0425[CF0B0000]      	mov rax, qword [free_var_41]	; free var cons
  6032 00003F87 803805                  	cmp byte [rax], T_undefined
  6033 00003F8A 0F842E280000            	je L_error_fvar_undefined
  6034 00003F90 803804                  	cmp byte [rax], T_closure
  6035 00003F93 0F85A9280000            	jne L_error_non_closure
  6036 00003F99 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6037 00003F9C FF7508                  	push qword [rbp + 8 * 1]
  6038                                   ; old ret addr
  6039 00003F9F FF7500                  	push qword [rbp]
  6040                                   ; restore the old rbp
  6041 00003FA2 BB02000000              	mov rbx, 2
  6042 00003FA7 4883C303                	add rbx, 3
  6043 00003FAB 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  6044 00003FAF 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  6045 00003FB4 4C8D4DF8                	lea r9, [rbp - 8]
  6046 00003FB8 B906000000              	mov rcx, 6
  6047                                  .L_tc_recycle_frame_loop_0029:
  6048 00003FBD 4883F900                	cmp rcx, 0
  6049 00003FC1 7413                    	je .L_tc_recycle_frame_done_0029
  6050 00003FC3 4D8B11                  	mov r10, qword [r9]
  6051 00003FC6 4D8910                  	mov qword [r8], r10
  6052 00003FC9 4983E808                	sub r8, 8
  6053 00003FCD 4983E908                	sub r9, 8
  6054 00003FD1 48FFC9                  	dec rcx
  6055 00003FD4 EBE7                    	jmp .L_tc_recycle_frame_loop_0029
  6056                                  .L_tc_recycle_frame_done_0029:
  6057 00003FD6 498D6008                	lea rsp, [r8 + 8]
  6058 00003FDA 5D                      	pop rbp ; restore the old rbp
  6059 00003FDB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6060                                  .L_if_end_0009:
  6061 00003FDE C9                      	leave
  6062 00003FDF C22000                  	ret AND_KILL_FRAME(2)
  6063                                  .L_lambda_simple_end_0029:	; new closure is in rax
  6064 00003FE2 50                      	push rax
  6065 00003FE3 488B4520                	mov rax, PARAM(0)	; param map1
  6066 00003FE7 8F00                    	pop qword [rax]
  6067 00003FE9 48B8-                   	mov rax, sob_void
  6067 00003FEB [0000000000000000] 
  6068                                  
  6069 00003FF3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6070 00003FF8 E8EE280000              	call malloc
  6071 00003FFD 50                      	push rax
  6072 00003FFE BF10000000              	mov rdi, 8 * 2	; new rib
  6073 00004003 E8E3280000              	call malloc
  6074 00004008 50                      	push rax
  6075 00004009 BF10000000              	mov rdi, 8 * 2	; extended env
  6076 0000400E E8D8280000              	call malloc
  6077 00004013 488B7D10                	mov rdi, ENV
  6078 00004017 BE00000000              	mov rsi, 0
  6079 0000401C BA01000000              	mov rdx, 1
  6080                                  .L_lambda_simple_env_loop_002a:	; ext_env[i + 1] <-- env[i]
  6081 00004021 4883FE01                	cmp rsi, 1
  6082 00004025 7410                    	je .L_lambda_simple_env_end_002a
  6083 00004027 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6084 0000402B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6085 0000402F 48FFC6                  	inc rsi
  6086 00004032 48FFC2                  	inc rdx
  6087 00004035 EBEA                    	jmp .L_lambda_simple_env_loop_002a
  6088                                  .L_lambda_simple_env_end_002a:
  6089 00004037 5B                      	pop rbx
  6090 00004038 BE00000000              	mov rsi, 0
  6091                                  .L_lambda_simple_params_loop_002a:	; copy params
  6092 0000403D 4883FE02                	cmp rsi, 2
  6093 00004041 740E                    	je .L_lambda_simple_params_end_002a
  6094 00004043 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6095 00004048 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6096 0000404C 48FFC6                  	inc rsi
  6097 0000404F EBEC                    	jmp .L_lambda_simple_params_loop_002a
  6098                                  .L_lambda_simple_params_end_002a:
  6099 00004051 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6100 00004054 4889C3                  	mov rbx, rax
  6101 00004057 58                      	pop rax
  6102 00004058 C60004                  	mov byte [rax], T_closure
  6103 0000405B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6104 0000405F 48C74009[6C400000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002a
  6105 00004067 E996010000              	jmp .L_lambda_simple_end_002a
  6106                                  .L_lambda_simple_code_002a:	; lambda-simple body
  6107 0000406C 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6108 00004072 740B                    	je .L_lambda_simple_arity_check_ok_002a
  6109 00004074 FF742410                	push qword [rsp + 8 * 2]
  6110 00004078 6A02                    	push 2
  6111 0000407A E925280000              	jmp L_error_incorrect_arity_simple
  6112                                  .L_lambda_simple_arity_check_ok_002a:
  6113 0000407F C8000000                	enter 0, 0
  6114                                  	; preparing a non-tail-call
  6115                                  	; preparing a non-tail-call
  6116 00004083 488B4528                	mov rax, PARAM(1)	; param s
  6117 00004087 50                      	push rax
  6118 00004088 6A01                    	push 1	; arg count
  6119 0000408A 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  6120 00004092 803805                  	cmp byte [rax], T_undefined
  6121 00004095 0F8423270000            	je L_error_fvar_undefined
  6122 0000409B 803804                  	cmp byte [rax], T_closure
  6123 0000409E 0F859E270000            	jne L_error_non_closure
  6124 000040A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6125 000040A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6126 000040AA 50                      	push rax
  6127 000040AB 6A01                    	push 1	; arg count
  6128 000040AD 488B0425[CE0C0000]      	mov rax, qword [free_var_56]	; free var null?
  6129 000040B5 803805                  	cmp byte [rax], T_undefined
  6130 000040B8 0F8400270000            	je L_error_fvar_undefined
  6131 000040BE 803804                  	cmp byte [rax], T_closure
  6132 000040C1 0F857B270000            	jne L_error_non_closure
  6133 000040C7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6134 000040CA FF5009                  	call SOB_CLOSURE_CODE(rax)
  6135 000040CD 483D[02000000]          	cmp rax, sob_boolean_false
  6136 000040D3 740F                    	je .L_if_else_000a
  6137 000040D5 48B8-                   	mov rax, L_constants + 1
  6137 000040D7 [0100000000000000] 
  6138 000040DF E91A010000              	jmp .L_if_end_000a
  6139                                  .L_if_else_000a:
  6140                                  	; preparing a tail-call
  6141                                  	; preparing a non-tail-call
  6142                                  	; preparing a non-tail-call
  6143 000040E4 488B4528                	mov rax, PARAM(1)	; param s
  6144 000040E8 50                      	push rax
  6145 000040E9 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  6146 000040F1 803805                  	cmp byte [rax], T_undefined
  6147 000040F4 0F84C4260000            	je L_error_fvar_undefined
  6148 000040FA 50                      	push rax
  6149 000040FB 6A02                    	push 2	; arg count
  6150 000040FD 488B4510                	mov rax, ENV
  6151 00004101 488B00                  	mov rax, qword [rax + 8 * 0]
  6152 00004104 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  6153 00004107 488B00                  	mov rax, qword [rax]
  6154 0000410A 803804                  	cmp byte [rax], T_closure
  6155 0000410D 0F852F270000            	jne L_error_non_closure
  6156 00004113 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6157 00004116 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6158 00004119 50                      	push rax
  6159 0000411A 488B4520                	mov rax, PARAM(0)	; param f
  6160 0000411E 50                      	push rax
  6161 0000411F 6A02                    	push 2	; arg count
  6162 00004121 488B4510                	mov rax, ENV
  6163 00004125 488B00                  	mov rax, qword [rax + 8 * 0]
  6164 00004128 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  6165 0000412C 488B00                  	mov rax, qword [rax]
  6166 0000412F 803804                  	cmp byte [rax], T_closure
  6167 00004132 0F850A270000            	jne L_error_non_closure
  6168 00004138 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6169 0000413B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6170 0000413E 50                      	push rax
  6171                                  	; preparing a non-tail-call
  6172                                  	; preparing a non-tail-call
  6173 0000413F 488B4528                	mov rax, PARAM(1)	; param s
  6174 00004143 50                      	push rax
  6175 00004144 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  6176 0000414C 803805                  	cmp byte [rax], T_undefined
  6177 0000414F 0F8469260000            	je L_error_fvar_undefined
  6178 00004155 50                      	push rax
  6179 00004156 6A02                    	push 2	; arg count
  6180 00004158 488B4510                	mov rax, ENV
  6181 0000415C 488B00                  	mov rax, qword [rax + 8 * 0]
  6182 0000415F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  6183 00004162 488B00                  	mov rax, qword [rax]
  6184 00004165 803804                  	cmp byte [rax], T_closure
  6185 00004168 0F85D4260000            	jne L_error_non_closure
  6186 0000416E FF7001                  	push SOB_CLOSURE_ENV(rax)
  6187 00004171 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6188 00004174 50                      	push rax
  6189 00004175 488B4520                	mov rax, PARAM(0)	; param f
  6190 00004179 50                      	push rax
  6191 0000417A 6A02                    	push 2	; arg count
  6192 0000417C 488B0425[AF090000]      	mov rax, qword [free_var_9]	; free var apply
  6193 00004184 803805                  	cmp byte [rax], T_undefined
  6194 00004187 0F8431260000            	je L_error_fvar_undefined
  6195 0000418D 803804                  	cmp byte [rax], T_closure
  6196 00004190 0F85AC260000            	jne L_error_non_closure
  6197 00004196 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6198 00004199 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6199 0000419C 50                      	push rax
  6200 0000419D 6A02                    	push 2	; arg count
  6201 0000419F 488B0425[CF0B0000]      	mov rax, qword [free_var_41]	; free var cons
  6202 000041A7 803805                  	cmp byte [rax], T_undefined
  6203 000041AA 0F840E260000            	je L_error_fvar_undefined
  6204 000041B0 803804                  	cmp byte [rax], T_closure
  6205 000041B3 0F8589260000            	jne L_error_non_closure
  6206 000041B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6207 000041BC FF7508                  	push qword [rbp + 8 * 1]
  6208                                   ; old ret addr
  6209 000041BF FF7500                  	push qword [rbp]
  6210                                   ; restore the old rbp
  6211 000041C2 BB02000000              	mov rbx, 2
  6212 000041C7 4883C303                	add rbx, 3
  6213 000041CB 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  6214 000041CF 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  6215 000041D4 4C8D4DF8                	lea r9, [rbp - 8]
  6216 000041D8 B906000000              	mov rcx, 6
  6217                                  .L_tc_recycle_frame_loop_002a:
  6218 000041DD 4883F900                	cmp rcx, 0
  6219 000041E1 7413                    	je .L_tc_recycle_frame_done_002a
  6220 000041E3 4D8B11                  	mov r10, qword [r9]
  6221 000041E6 4D8910                  	mov qword [r8], r10
  6222 000041E9 4983E808                	sub r8, 8
  6223 000041ED 4983E908                	sub r9, 8
  6224 000041F1 48FFC9                  	dec rcx
  6225 000041F4 EBE7                    	jmp .L_tc_recycle_frame_loop_002a
  6226                                  .L_tc_recycle_frame_done_002a:
  6227 000041F6 498D6008                	lea rsp, [r8 + 8]
  6228 000041FA 5D                      	pop rbp ; restore the old rbp
  6229 000041FB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6230                                  .L_if_end_000a:
  6231 000041FE C9                      	leave
  6232 000041FF C22000                  	ret AND_KILL_FRAME(2)
  6233                                  .L_lambda_simple_end_002a:	; new closure is in rax
  6234 00004202 50                      	push rax
  6235 00004203 488B4528                	mov rax, PARAM(1)	; param map-list
  6236 00004207 8F00                    	pop qword [rax]
  6237 00004209 48B8-                   	mov rax, sob_void
  6237 0000420B [0000000000000000] 
  6238                                  
  6239 00004213 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6240 00004218 E8CE260000              	call malloc
  6241 0000421D 50                      	push rax
  6242 0000421E BF10000000              	mov rdi, 8 * 2	; new rib
  6243 00004223 E8C3260000              	call malloc
  6244 00004228 50                      	push rax
  6245 00004229 BF10000000              	mov rdi, 8 * 2	; extended env
  6246 0000422E E8B8260000              	call malloc
  6247 00004233 488B7D10                	mov rdi, ENV
  6248 00004237 4831F6                  	 xor rsi, rsi
  6249 0000423A 4831D2                  	 xor rdx, rdx
  6250 0000423D 48FFC2                  	inc rdx
  6251                                  .L_lambda_opt_env_loop_0006:	; 
  6252 00004240 4883FE01                	cmp rsi, 1
  6253 00004244 7410                    	je .L_lambda_opt_env_end_0006
  6254 00004246 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6255 0000424A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6256 0000424E 48FFC6                  	inc rsi
  6257 00004251 48FFC2                  	inc rdx
  6258 00004254 EBEA                    	jmp .L_lambda_opt_env_loop_0006
  6259                                  .L_lambda_opt_env_end_0006:
  6260 00004256 5B                      	pop rbx
  6261 00004257 4831F6                  	xor rsi, rsi
  6262                                  .L_lambda_opt_params_loop_0006:	; copy params
  6263 0000425A 4883FE02                	cmp rsi, 2
  6264 0000425E 740E                    	je .L_lambda_opt_params_end_0006
  6265 00004260 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6266 00004265 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6267 00004269 48FFC6                  	inc rsi
  6268 0000426C EBEC                    	jmp .L_lambda_opt_params_loop_0006
  6269                                  .L_lambda_opt_params_end_0006:
  6270 0000426E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6271 00004271 4889C3                  	mov rbx, rax
  6272 00004274 58                      	pop rax
  6273 00004275 C60004                  	mov byte [rax], T_closure
  6274 00004278 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6275 0000427C 48C74009[89420000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0006
  6276 00004284 E99D010000              	jmp .L_lambda_opt_end_0006
  6277                                  .L_lambda_opt_code_0006:
  6278 00004289 4C8B7C2410              	mov r15, qword [rsp + 8 * 2]
  6279 0000428E 4983FF01                	cmp r15, 1
  6280 00004292 7409                    	je .L_lambda_opt_arity_check_exact_0006
  6281 00004294 7F57                    	jg .L_lambda_opt_arity_check_more_0006
  6282 00004296 6A01                    	push 1
  6283 00004298 E91B260000              	jmp L_error_incorrect_arity_opt
  6284                                  .L_lambda_opt_arity_check_exact_0006: ;Exact case
  6285 0000429D 4C8B0424                	mov r8, qword [rsp -8 * 0]
  6286 000042A1 4C894424F8              	mov qword [rsp -8], r8
  6287 000042A6 4C8B442408              	mov r8, qword [rsp +8]
  6288 000042AB 4C890424                	mov qword [rsp +8 * 0], r8
  6289 000042AF 4C8B442410              	mov r8, qword [rsp +8 * 2]
  6290 000042B4 4C89C1                  	mov rcx, r8
  6291 000042B7 49FFC0                  	inc r8
  6292 000042BA 4C89442408              	mov qword [rsp +8], r8
  6293 000042BF 4889E2                  	mov rdx, rsp
  6294 000042C2 4883C218                	add rdx, 24
  6295                                  .L_lambda_opt_loop_copy_to_new_frame_exact_0006:
  6296 000042C6 4883F900                	cmp rcx, 0
  6297 000042CA 7410                    	je .L_lambda_opt_loop_copy_to_new_frame_exact_end_0006
  6298 000042CC 4C8B02                  	mov r8, qword [rdx]
  6299 000042CF 4C8942F8                	mov qword [rdx - 8], r8
  6300 000042D3 4883C208                	add rdx, 8
  6301 000042D7 48FFC9                  	dec rcx
  6302 000042DA EBEA                    	jmp .L_lambda_opt_loop_copy_to_new_frame_exact_0006
  6303                                  .L_lambda_opt_loop_copy_to_new_frame_exact_end_0006:
  6304 000042DC 48C742F8[01000000]      	mov qword [rdx - 8], sob_nil
  6305 000042E4 4883EC08                	sub rsp, 8
  6306 000042E8 E985000000              	jmp .L_lambda_opt_stack_adjusted_0006
  6307                                  .L_lambda_opt_arity_check_more_0006:
  6308 000042ED 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  6309 000042F2 4D89C4                  	mov r12, r8
  6310 000042F5 4C89C1                  	mov rcx, r8
  6311 000042F8 4D8D6802                	lea r13, [r8 + 2] 
  6312 000042FC 4883E901                	sub rcx, 1
  6313 00004300 4E8D5CC410              	lea r11, qword [rsp + r8 * 8 + 16]
  6314 00004305 49BE-                   	mov r14, sob_nil
  6314 00004307 [0100000000000000] 
  6315                                  .L_lambda_opt_create_list_of_opt_params_0006:
  6316 0000430F 4883F900                	cmp rcx, 0
  6317 00004313 7424                    	je .L_lambda_opt_create_list_of_opt_params_end_0006
  6318 00004315 BF11000000              	mov rdi, 17
  6319 0000431A E8CC250000              	call malloc
  6320 0000431F C60021                  	mov byte [rax], T_pair
  6321 00004322 498B1B                  	mov rbx, qword [r11]
  6322 00004325 48895801                	mov qword [rax +1], rbx
  6323 00004329 4C897009                	mov qword [rax + 1 + 8], r14
  6324 0000432D 4989C6                  	mov r14, rax
  6325 00004330 48FFC9                  	dec rcx
  6326 00004333 4983EB08                	sub r11, 8
  6327 00004337 EBD6                    	jmp .L_lambda_opt_create_list_of_opt_params_0006
  6328                                  .L_lambda_opt_create_list_of_opt_params_end_0006:
  6329 00004339 4C8D542420              	lea r10, [rsp + 1*8 + 8*3]
  6330 0000433E 4D8932                  	mov qword [r10], r14
  6331 00004341 4E8D2CED00000000        	lea r13, [8 * r13]
  6332 00004349 4901E5                  	add r13, rsp
  6333 0000434C B905000000              	mov rcx, 4 + 1
  6334                                  .L_lambda_opt_stack_shrink_loop_0006:
  6335 00004351 4883F900                	cmp rcx, 0
  6336 00004355 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0006
  6337 00004357 4D8B1A                  	mov r11, qword [r10]
  6338 0000435A 4D895D00                	mov qword [r13], r11
  6339 0000435E 4983EA08                	sub r10, 8
  6340 00004362 4983ED08                	sub r13, 8
  6341 00004366 48FFC9                  	dec rcx
  6342 00004369 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0006
  6343                                  .L_lambda_opt_stack_shrink_loop_exit_0006:
  6344 0000436B 4983C508                	add r13, 8
  6345 0000436F 4C89EC                  	mov rsp, r13
  6346                                  .L_lambda_opt_stack_adjusted_0006:
  6347 00004372 48C744241002000000      	mov qword [rsp + 8*2], 2
  6348 0000437B C8000000                	enter 0, 0
  6349                                  	; preparing a non-tail-call
  6350 0000437F 488B4528                	mov rax, PARAM(1)	; param s
  6351 00004383 50                      	push rax
  6352 00004384 6A01                    	push 1	; arg count
  6353 00004386 488B0425[CE0C0000]      	mov rax, qword [free_var_56]	; free var null?
  6354 0000438E 803805                  	cmp byte [rax], T_undefined
  6355 00004391 0F8427240000            	je L_error_fvar_undefined
  6356 00004397 803804                  	cmp byte [rax], T_closure
  6357 0000439A 0F85A2240000            	jne L_error_non_closure
  6358 000043A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6359 000043A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6360 000043A6 483D[02000000]          	cmp rax, sob_boolean_false
  6361 000043AC 740C                    	je .L_if_else_000b
  6362 000043AE 48B8-                   	mov rax, L_constants + 1
  6362 000043B0 [0100000000000000] 
  6363 000043B8 EB68                    	jmp .L_if_end_000b
  6364                                  .L_if_else_000b:
  6365                                  	; preparing a tail-call
  6366 000043BA 488B4528                	mov rax, PARAM(1)	; param s
  6367 000043BE 50                      	push rax
  6368 000043BF 488B4520                	mov rax, PARAM(0)	; param f
  6369 000043C3 50                      	push rax
  6370 000043C4 6A02                    	push 2	; arg count
  6371 000043C6 488B4510                	mov rax, ENV
  6372 000043CA 488B00                  	mov rax, qword [rax + 8 * 0]
  6373 000043CD 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  6374 000043D1 488B00                  	mov rax, qword [rax]
  6375 000043D4 803804                  	cmp byte [rax], T_closure
  6376 000043D7 0F8565240000            	jne L_error_non_closure
  6377 000043DD FF7001                  	push SOB_CLOSURE_ENV(rax)
  6378 000043E0 FF7508                  	push qword [rbp + 8 * 1]
  6379                                   ; old ret addr
  6380 000043E3 FF7500                  	push qword [rbp]
  6381                                   ; restore the old rbp
  6382 000043E6 BB02000000              	mov rbx, 2
  6383 000043EB 4883C303                	add rbx, 3
  6384 000043EF 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  6385 000043F3 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  6386 000043F8 4C8D4DF8                	lea r9, [rbp - 8]
  6387 000043FC B906000000              	mov rcx, 6
  6388                                  .L_tc_recycle_frame_loop_002b:
  6389 00004401 4883F900                	cmp rcx, 0
  6390 00004405 7413                    	je .L_tc_recycle_frame_done_002b
  6391 00004407 4D8B11                  	mov r10, qword [r9]
  6392 0000440A 4D8910                  	mov qword [r8], r10
  6393 0000440D 4983E808                	sub r8, 8
  6394 00004411 4983E908                	sub r9, 8
  6395 00004415 48FFC9                  	dec rcx
  6396 00004418 EBE7                    	jmp .L_tc_recycle_frame_loop_002b
  6397                                  .L_tc_recycle_frame_done_002b:
  6398 0000441A 498D6008                	lea rsp, [r8 + 8]
  6399 0000441E 5D                      	pop rbp ; restore the old rbp
  6400 0000441F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6401                                  .L_if_end_000b:
  6402 00004422 C9                      	leave
  6403 00004423 C22000                  	ret 8 * (2 + 2)
  6404                                  .L_lambda_opt_end_0006:	; new closure is in rax
  6405 00004426 C9                      	leave
  6406 00004427 C22000                  	ret AND_KILL_FRAME(2)
  6407                                  .L_lambda_simple_end_0028:	; new closure is in rax
  6408 0000442A 803804                  	cmp byte [rax], T_closure
  6409 0000442D 0F850F240000            	jne L_error_non_closure
  6410 00004433 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6411 00004436 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6412 00004439 48890425[AC0C0000]      	mov qword [free_var_54], rax
  6413 00004441 48B8-                   	mov rax, sob_void
  6413 00004443 [0000000000000000] 
  6414                                  
  6415 0000444B 4889C7                  	mov rdi, rax
  6416 0000444E E8ED260000              	call print_sexpr_if_not_void
  6417 00004453 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6418 00004458 E88E240000              	call malloc
  6419 0000445D 50                      	push rax
  6420 0000445E BF00000000              	mov rdi, 8 * 0	; new rib
  6421 00004463 E883240000              	call malloc
  6422 00004468 50                      	push rax
  6423 00004469 BF08000000              	mov rdi, 8 * 1	; extended env
  6424 0000446E E878240000              	call malloc
  6425 00004473 488B7D10                	mov rdi, ENV
  6426 00004477 BE00000000              	mov rsi, 0
  6427 0000447C BA01000000              	mov rdx, 1
  6428                                  .L_lambda_simple_env_loop_002b:	; ext_env[i + 1] <-- env[i]
  6429 00004481 4883FE00                	cmp rsi, 0
  6430 00004485 7410                    	je .L_lambda_simple_env_end_002b
  6431 00004487 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6432 0000448B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6433 0000448F 48FFC6                  	inc rsi
  6434 00004492 48FFC2                  	inc rdx
  6435 00004495 EBEA                    	jmp .L_lambda_simple_env_loop_002b
  6436                                  .L_lambda_simple_env_end_002b:
  6437 00004497 5B                      	pop rbx
  6438 00004498 BE00000000              	mov rsi, 0
  6439                                  .L_lambda_simple_params_loop_002b:	; copy params
  6440 0000449D 4883FE00                	cmp rsi, 0
  6441 000044A1 740E                    	je .L_lambda_simple_params_end_002b
  6442 000044A3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6443 000044A8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6444 000044AC 48FFC6                  	inc rsi
  6445 000044AF EBEC                    	jmp .L_lambda_simple_params_loop_002b
  6446                                  .L_lambda_simple_params_end_002b:
  6447 000044B1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6448 000044B4 4889C3                  	mov rbx, rax
  6449 000044B7 58                      	pop rax
  6450 000044B8 C60004                  	mov byte [rax], T_closure
  6451 000044BB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6452 000044BF 48C74009[CC440000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002b
  6453 000044C7 E98C010000              	jmp .L_lambda_simple_end_002b
  6454                                  .L_lambda_simple_code_002b:	; lambda-simple body
  6455 000044CC 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6456 000044D2 740B                    	je .L_lambda_simple_arity_check_ok_002b
  6457 000044D4 FF742410                	push qword [rsp + 8 * 2]
  6458 000044D8 6A01                    	push 1
  6459 000044DA E9C5230000              	jmp L_error_incorrect_arity_simple
  6460                                  .L_lambda_simple_arity_check_ok_002b:
  6461 000044DF C8000000                	enter 0, 0
  6462                                  	; preparing a tail-call
  6463 000044E3 488B4520                	mov rax, PARAM(0)	; param s
  6464 000044E7 50                      	push rax
  6465 000044E8 48B8-                   	mov rax, L_constants + 1
  6465 000044EA [0100000000000000] 
  6466 000044F2 50                      	push rax
  6467 000044F3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6468 000044F8 E8EE230000              	call malloc
  6469 000044FD 50                      	push rax
  6470 000044FE BF08000000              	mov rdi, 8 * 1	; new rib
  6471 00004503 E8E3230000              	call malloc
  6472 00004508 50                      	push rax
  6473 00004509 BF10000000              	mov rdi, 8 * 2	; extended env
  6474 0000450E E8D8230000              	call malloc
  6475 00004513 488B7D10                	mov rdi, ENV
  6476 00004517 BE00000000              	mov rsi, 0
  6477 0000451C BA01000000              	mov rdx, 1
  6478                                  .L_lambda_simple_env_loop_002c:	; ext_env[i + 1] <-- env[i]
  6479 00004521 4883FE01                	cmp rsi, 1
  6480 00004525 7410                    	je .L_lambda_simple_env_end_002c
  6481 00004527 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6482 0000452B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6483 0000452F 48FFC6                  	inc rsi
  6484 00004532 48FFC2                  	inc rdx
  6485 00004535 EBEA                    	jmp .L_lambda_simple_env_loop_002c
  6486                                  .L_lambda_simple_env_end_002c:
  6487 00004537 5B                      	pop rbx
  6488 00004538 BE00000000              	mov rsi, 0
  6489                                  .L_lambda_simple_params_loop_002c:	; copy params
  6490 0000453D 4883FE01                	cmp rsi, 1
  6491 00004541 740E                    	je .L_lambda_simple_params_end_002c
  6492 00004543 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6493 00004548 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6494 0000454C 48FFC6                  	inc rsi
  6495 0000454F EBEC                    	jmp .L_lambda_simple_params_loop_002c
  6496                                  .L_lambda_simple_params_end_002c:
  6497 00004551 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6498 00004554 4889C3                  	mov rbx, rax
  6499 00004557 58                      	pop rax
  6500 00004558 C60004                  	mov byte [rax], T_closure
  6501 0000455B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6502 0000455F 48C74009[6C450000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002c
  6503 00004567 E986000000              	jmp .L_lambda_simple_end_002c
  6504                                  .L_lambda_simple_code_002c:	; lambda-simple body
  6505 0000456C 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6506 00004572 740B                    	je .L_lambda_simple_arity_check_ok_002c
  6507 00004574 FF742410                	push qword [rsp + 8 * 2]
  6508 00004578 6A02                    	push 2
  6509 0000457A E925230000              	jmp L_error_incorrect_arity_simple
  6510                                  .L_lambda_simple_arity_check_ok_002c:
  6511 0000457F C8000000                	enter 0, 0
  6512                                  	; preparing a tail-call
  6513 00004583 488B4520                	mov rax, PARAM(0)	; param r
  6514 00004587 50                      	push rax
  6515 00004588 488B4528                	mov rax, PARAM(1)	; param a
  6516 0000458C 50                      	push rax
  6517 0000458D 6A02                    	push 2	; arg count
  6518 0000458F 488B0425[CF0B0000]      	mov rax, qword [free_var_41]	; free var cons
  6519 00004597 803805                  	cmp byte [rax], T_undefined
  6520 0000459A 0F841E220000            	je L_error_fvar_undefined
  6521 000045A0 803804                  	cmp byte [rax], T_closure
  6522 000045A3 0F8599220000            	jne L_error_non_closure
  6523 000045A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6524 000045AC FF7508                  	push qword [rbp + 8 * 1]
  6525                                   ; old ret addr
  6526 000045AF FF7500                  	push qword [rbp]
  6527                                   ; restore the old rbp
  6528 000045B2 BB02000000              	mov rbx, 2
  6529 000045B7 4883C303                	add rbx, 3
  6530 000045BB 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  6531 000045BF 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  6532 000045C4 4C8D4DF8                	lea r9, [rbp - 8]
  6533 000045C8 B906000000              	mov rcx, 6
  6534                                  .L_tc_recycle_frame_loop_002d:
  6535 000045CD 4883F900                	cmp rcx, 0
  6536 000045D1 7413                    	je .L_tc_recycle_frame_done_002d
  6537 000045D3 4D8B11                  	mov r10, qword [r9]
  6538 000045D6 4D8910                  	mov qword [r8], r10
  6539 000045D9 4983E808                	sub r8, 8
  6540 000045DD 4983E908                	sub r9, 8
  6541 000045E1 48FFC9                  	dec rcx
  6542 000045E4 EBE7                    	jmp .L_tc_recycle_frame_loop_002d
  6543                                  .L_tc_recycle_frame_done_002d:
  6544 000045E6 498D6008                	lea rsp, [r8 + 8]
  6545 000045EA 5D                      	pop rbp ; restore the old rbp
  6546 000045EB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6547 000045EE C9                      	leave
  6548 000045EF C22000                  	ret AND_KILL_FRAME(2)
  6549                                  .L_lambda_simple_end_002c:	; new closure is in rax
  6550 000045F2 50                      	push rax
  6551 000045F3 6A03                    	push 3	; arg count
  6552 000045F5 488B0425[F10B0000]      	mov rax, qword [free_var_43]	; free var fold-left
  6553 000045FD 803805                  	cmp byte [rax], T_undefined
  6554 00004600 0F84B8210000            	je L_error_fvar_undefined
  6555 00004606 803804                  	cmp byte [rax], T_closure
  6556 00004609 0F8533220000            	jne L_error_non_closure
  6557 0000460F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6558 00004612 FF7508                  	push qword [rbp + 8 * 1]
  6559                                   ; old ret addr
  6560 00004615 FF7500                  	push qword [rbp]
  6561                                   ; restore the old rbp
  6562 00004618 BB03000000              	mov rbx, 3
  6563 0000461D 4883C303                	add rbx, 3
  6564 00004621 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  6565 00004625 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  6566 0000462A 4C8D4DF8                	lea r9, [rbp - 8]
  6567 0000462E B907000000              	mov rcx, 7
  6568                                  .L_tc_recycle_frame_loop_002c:
  6569 00004633 4883F900                	cmp rcx, 0
  6570 00004637 7413                    	je .L_tc_recycle_frame_done_002c
  6571 00004639 4D8B11                  	mov r10, qword [r9]
  6572 0000463C 4D8910                  	mov qword [r8], r10
  6573 0000463F 4983E808                	sub r8, 8
  6574 00004643 4983E908                	sub r9, 8
  6575 00004647 48FFC9                  	dec rcx
  6576 0000464A EBE7                    	jmp .L_tc_recycle_frame_loop_002c
  6577                                  .L_tc_recycle_frame_done_002c:
  6578 0000464C 498D6008                	lea rsp, [r8 + 8]
  6579 00004650 5D                      	pop rbp ; restore the old rbp
  6580 00004651 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6581 00004654 C9                      	leave
  6582 00004655 C21800                  	ret AND_KILL_FRAME(1)
  6583                                  .L_lambda_simple_end_002b:	; new closure is in rax
  6584 00004658 48890425[230D0000]      	mov qword [free_var_61], rax
  6585 00004660 48B8-                   	mov rax, sob_void
  6585 00004662 [0000000000000000] 
  6586                                  
  6587 0000466A 4889C7                  	mov rdi, rax
  6588 0000466D E8CE240000              	call print_sexpr_if_not_void
  6589                                  	; preparing a non-tail-call
  6590 00004672 48B8-                   	mov rax, L_constants + 1993
  6590 00004674 [C907000000000000] 
  6591 0000467C 50                      	push rax
  6592 0000467D 48B8-                   	mov rax, L_constants + 1993
  6592 0000467F [C907000000000000] 
  6593 00004687 50                      	push rax
  6594 00004688 6A02                    	push 2	; arg count
  6595 0000468A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6596 0000468F E857220000              	call malloc
  6597 00004694 50                      	push rax
  6598 00004695 BF00000000              	mov rdi, 8 * 0	; new rib
  6599 0000469A E84C220000              	call malloc
  6600 0000469F 50                      	push rax
  6601 000046A0 BF08000000              	mov rdi, 8 * 1	; extended env
  6602 000046A5 E841220000              	call malloc
  6603 000046AA 488B7D10                	mov rdi, ENV
  6604 000046AE BE00000000              	mov rsi, 0
  6605 000046B3 BA01000000              	mov rdx, 1
  6606                                  .L_lambda_simple_env_loop_002d:	; ext_env[i + 1] <-- env[i]
  6607 000046B8 4883FE00                	cmp rsi, 0
  6608 000046BC 7410                    	je .L_lambda_simple_env_end_002d
  6609 000046BE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6610 000046C2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6611 000046C6 48FFC6                  	inc rsi
  6612 000046C9 48FFC2                  	inc rdx
  6613 000046CC EBEA                    	jmp .L_lambda_simple_env_loop_002d
  6614                                  .L_lambda_simple_env_end_002d:
  6615 000046CE 5B                      	pop rbx
  6616 000046CF BE00000000              	mov rsi, 0
  6617                                  .L_lambda_simple_params_loop_002d:	; copy params
  6618 000046D4 4883FE00                	cmp rsi, 0
  6619 000046D8 740E                    	je .L_lambda_simple_params_end_002d
  6620 000046DA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6621 000046DF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6622 000046E3 48FFC6                  	inc rsi
  6623 000046E6 EBEC                    	jmp .L_lambda_simple_params_loop_002d
  6624                                  .L_lambda_simple_params_end_002d:
  6625 000046E8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6626 000046EB 4889C3                  	mov rbx, rax
  6627 000046EE 58                      	pop rax
  6628 000046EF C60004                  	mov byte [rax], T_closure
  6629 000046F2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6630 000046F6 48C74009[03470000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002d
  6631 000046FE E916060000              	jmp .L_lambda_simple_end_002d
  6632                                  .L_lambda_simple_code_002d:	; lambda-simple body
  6633 00004703 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6634 00004709 740B                    	je .L_lambda_simple_arity_check_ok_002d
  6635 0000470B FF742410                	push qword [rsp + 8 * 2]
  6636 0000470F 6A02                    	push 2
  6637 00004711 E98E210000              	jmp L_error_incorrect_arity_simple
  6638                                  .L_lambda_simple_arity_check_ok_002d:
  6639 00004716 C8000000                	enter 0, 0
  6640 0000471A BF08000000              	mov rdi, 8*1
  6641 0000471F E8C7210000              	call malloc
  6642 00004724 488B5D20                	mov rbx, PARAM(0)
  6643 00004728 488918                  	mov qword [rax], rbx
  6644 0000472B 48894520                	mov PARAM(0), rax
  6645 0000472F 48B8-                   	mov rax, sob_void
  6645 00004731 [0000000000000000] 
  6646                                  
  6647 00004739 BF08000000              	mov rdi, 8*1
  6648 0000473E E8A8210000              	call malloc
  6649 00004743 488B5D28                	mov rbx, PARAM(1)
  6650 00004747 488918                  	mov qword [rax], rbx
  6651 0000474A 48894528                	mov PARAM(1), rax
  6652 0000474E 48B8-                   	mov rax, sob_void
  6652 00004750 [0000000000000000] 
  6653                                  
  6654 00004758 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6655 0000475D E889210000              	call malloc
  6656 00004762 50                      	push rax
  6657 00004763 BF10000000              	mov rdi, 8 * 2	; new rib
  6658 00004768 E87E210000              	call malloc
  6659 0000476D 50                      	push rax
  6660 0000476E BF10000000              	mov rdi, 8 * 2	; extended env
  6661 00004773 E873210000              	call malloc
  6662 00004778 488B7D10                	mov rdi, ENV
  6663 0000477C BE00000000              	mov rsi, 0
  6664 00004781 BA01000000              	mov rdx, 1
  6665                                  .L_lambda_simple_env_loop_002e:	; ext_env[i + 1] <-- env[i]
  6666 00004786 4883FE01                	cmp rsi, 1
  6667 0000478A 7410                    	je .L_lambda_simple_env_end_002e
  6668 0000478C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6669 00004790 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6670 00004794 48FFC6                  	inc rsi
  6671 00004797 48FFC2                  	inc rdx
  6672 0000479A EBEA                    	jmp .L_lambda_simple_env_loop_002e
  6673                                  .L_lambda_simple_env_end_002e:
  6674 0000479C 5B                      	pop rbx
  6675 0000479D BE00000000              	mov rsi, 0
  6676                                  .L_lambda_simple_params_loop_002e:	; copy params
  6677 000047A2 4883FE02                	cmp rsi, 2
  6678 000047A6 740E                    	je .L_lambda_simple_params_end_002e
  6679 000047A8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6680 000047AD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6681 000047B1 48FFC6                  	inc rsi
  6682 000047B4 EBEC                    	jmp .L_lambda_simple_params_loop_002e
  6683                                  .L_lambda_simple_params_end_002e:
  6684 000047B6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6685 000047B9 4889C3                  	mov rbx, rax
  6686 000047BC 58                      	pop rax
  6687 000047BD C60004                  	mov byte [rax], T_closure
  6688 000047C0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6689 000047C4 48C74009[D1470000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002e
  6690 000047CC E925010000              	jmp .L_lambda_simple_end_002e
  6691                                  .L_lambda_simple_code_002e:	; lambda-simple body
  6692 000047D1 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6693 000047D7 740B                    	je .L_lambda_simple_arity_check_ok_002e
  6694 000047D9 FF742410                	push qword [rsp + 8 * 2]
  6695 000047DD 6A02                    	push 2
  6696 000047DF E9C0200000              	jmp L_error_incorrect_arity_simple
  6697                                  .L_lambda_simple_arity_check_ok_002e:
  6698 000047E4 C8000000                	enter 0, 0
  6699                                  	; preparing a non-tail-call
  6700 000047E8 488B4528                	mov rax, PARAM(1)	; param sr
  6701 000047EC 50                      	push rax
  6702 000047ED 6A01                    	push 1	; arg count
  6703 000047EF 488B0425[CE0C0000]      	mov rax, qword [free_var_56]	; free var null?
  6704 000047F7 803805                  	cmp byte [rax], T_undefined
  6705 000047FA 0F84BE1F0000            	je L_error_fvar_undefined
  6706 00004800 803804                  	cmp byte [rax], T_closure
  6707 00004803 0F8539200000            	jne L_error_non_closure
  6708 00004809 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6709 0000480C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6710 0000480F 483D[02000000]          	cmp rax, sob_boolean_false
  6711 00004815 7409                    	je .L_if_else_000c
  6712 00004817 488B4520                	mov rax, PARAM(0)	; param s1
  6713 0000481B E9D2000000              	jmp .L_if_end_000c
  6714                                  .L_if_else_000c:
  6715                                  	; preparing a tail-call
  6716                                  	; preparing a non-tail-call
  6717                                  	; preparing a non-tail-call
  6718 00004820 488B4528                	mov rax, PARAM(1)	; param sr
  6719 00004824 50                      	push rax
  6720 00004825 6A01                    	push 1	; arg count
  6721 00004827 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  6722 0000482F 803805                  	cmp byte [rax], T_undefined
  6723 00004832 0F84861F0000            	je L_error_fvar_undefined
  6724 00004838 803804                  	cmp byte [rax], T_closure
  6725 0000483B 0F8501200000            	jne L_error_non_closure
  6726 00004841 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6727 00004844 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6728 00004847 50                      	push rax
  6729                                  	; preparing a non-tail-call
  6730 00004848 488B4528                	mov rax, PARAM(1)	; param sr
  6731 0000484C 50                      	push rax
  6732 0000484D 6A01                    	push 1	; arg count
  6733 0000484F 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  6734 00004857 803805                  	cmp byte [rax], T_undefined
  6735 0000485A 0F845E1F0000            	je L_error_fvar_undefined
  6736 00004860 803804                  	cmp byte [rax], T_closure
  6737 00004863 0F85D91F0000            	jne L_error_non_closure
  6738 00004869 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6739 0000486C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6740 0000486F 50                      	push rax
  6741 00004870 6A02                    	push 2	; arg count
  6742 00004872 488B4510                	mov rax, ENV
  6743 00004876 488B00                  	mov rax, qword [rax + 8 * 0]
  6744 00004879 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  6745 0000487C 488B00                  	mov rax, qword [rax]
  6746 0000487F 803804                  	cmp byte [rax], T_closure
  6747 00004882 0F85BA1F0000            	jne L_error_non_closure
  6748 00004888 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6749 0000488B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6750 0000488E 50                      	push rax
  6751 0000488F 488B4520                	mov rax, PARAM(0)	; param s1
  6752 00004893 50                      	push rax
  6753 00004894 6A02                    	push 2	; arg count
  6754 00004896 488B4510                	mov rax, ENV
  6755 0000489A 488B00                  	mov rax, qword [rax + 8 * 0]
  6756 0000489D 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  6757 000048A1 488B00                  	mov rax, qword [rax]
  6758 000048A4 803804                  	cmp byte [rax], T_closure
  6759 000048A7 0F85951F0000            	jne L_error_non_closure
  6760 000048AD FF7001                  	push SOB_CLOSURE_ENV(rax)
  6761 000048B0 FF7508                  	push qword [rbp + 8 * 1]
  6762                                   ; old ret addr
  6763 000048B3 FF7500                  	push qword [rbp]
  6764                                   ; restore the old rbp
  6765 000048B6 BB02000000              	mov rbx, 2
  6766 000048BB 4883C303                	add rbx, 3
  6767 000048BF 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  6768 000048C3 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  6769 000048C8 4C8D4DF8                	lea r9, [rbp - 8]
  6770 000048CC B906000000              	mov rcx, 6
  6771                                  .L_tc_recycle_frame_loop_002e:
  6772 000048D1 4883F900                	cmp rcx, 0
  6773 000048D5 7413                    	je .L_tc_recycle_frame_done_002e
  6774 000048D7 4D8B11                  	mov r10, qword [r9]
  6775 000048DA 4D8910                  	mov qword [r8], r10
  6776 000048DD 4983E808                	sub r8, 8
  6777 000048E1 4983E908                	sub r9, 8
  6778 000048E5 48FFC9                  	dec rcx
  6779 000048E8 EBE7                    	jmp .L_tc_recycle_frame_loop_002e
  6780                                  .L_tc_recycle_frame_done_002e:
  6781 000048EA 498D6008                	lea rsp, [r8 + 8]
  6782 000048EE 5D                      	pop rbp ; restore the old rbp
  6783 000048EF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6784                                  .L_if_end_000c:
  6785 000048F2 C9                      	leave
  6786 000048F3 C22000                  	ret AND_KILL_FRAME(2)
  6787                                  .L_lambda_simple_end_002e:	; new closure is in rax
  6788 000048F6 50                      	push rax
  6789 000048F7 488B4520                	mov rax, PARAM(0)	; param run-1
  6790 000048FB 8F00                    	pop qword [rax]
  6791 000048FD 48B8-                   	mov rax, sob_void
  6791 000048FF [0000000000000000] 
  6792                                  
  6793 00004907 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6794 0000490C E8DA1F0000              	call malloc
  6795 00004911 50                      	push rax
  6796 00004912 BF10000000              	mov rdi, 8 * 2	; new rib
  6797 00004917 E8CF1F0000              	call malloc
  6798 0000491C 50                      	push rax
  6799 0000491D BF10000000              	mov rdi, 8 * 2	; extended env
  6800 00004922 E8C41F0000              	call malloc
  6801 00004927 488B7D10                	mov rdi, ENV
  6802 0000492B BE00000000              	mov rsi, 0
  6803 00004930 BA01000000              	mov rdx, 1
  6804                                  .L_lambda_simple_env_loop_002f:	; ext_env[i + 1] <-- env[i]
  6805 00004935 4883FE01                	cmp rsi, 1
  6806 00004939 7410                    	je .L_lambda_simple_env_end_002f
  6807 0000493B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6808 0000493F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6809 00004943 48FFC6                  	inc rsi
  6810 00004946 48FFC2                  	inc rdx
  6811 00004949 EBEA                    	jmp .L_lambda_simple_env_loop_002f
  6812                                  .L_lambda_simple_env_end_002f:
  6813 0000494B 5B                      	pop rbx
  6814 0000494C BE00000000              	mov rsi, 0
  6815                                  .L_lambda_simple_params_loop_002f:	; copy params
  6816 00004951 4883FE02                	cmp rsi, 2
  6817 00004955 740E                    	je .L_lambda_simple_params_end_002f
  6818 00004957 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6819 0000495C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6820 00004960 48FFC6                  	inc rsi
  6821 00004963 EBEC                    	jmp .L_lambda_simple_params_loop_002f
  6822                                  .L_lambda_simple_params_end_002f:
  6823 00004965 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6824 00004968 4889C3                  	mov rbx, rax
  6825 0000496B 58                      	pop rax
  6826 0000496C C60004                  	mov byte [rax], T_closure
  6827 0000496F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6828 00004973 48C74009[80490000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002f
  6829 0000497B E929010000              	jmp .L_lambda_simple_end_002f
  6830                                  .L_lambda_simple_code_002f:	; lambda-simple body
  6831 00004980 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6832 00004986 740B                    	je .L_lambda_simple_arity_check_ok_002f
  6833 00004988 FF742410                	push qword [rsp + 8 * 2]
  6834 0000498C 6A02                    	push 2
  6835 0000498E E9111F0000              	jmp L_error_incorrect_arity_simple
  6836                                  .L_lambda_simple_arity_check_ok_002f:
  6837 00004993 C8000000                	enter 0, 0
  6838                                  	; preparing a non-tail-call
  6839 00004997 488B4520                	mov rax, PARAM(0)	; param s1
  6840 0000499B 50                      	push rax
  6841 0000499C 6A01                    	push 1	; arg count
  6842 0000499E 488B0425[CE0C0000]      	mov rax, qword [free_var_56]	; free var null?
  6843 000049A6 803805                  	cmp byte [rax], T_undefined
  6844 000049A9 0F840F1E0000            	je L_error_fvar_undefined
  6845 000049AF 803804                  	cmp byte [rax], T_closure
  6846 000049B2 0F858A1E0000            	jne L_error_non_closure
  6847 000049B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6848 000049BB FF5009                  	call SOB_CLOSURE_CODE(rax)
  6849 000049BE 483D[02000000]          	cmp rax, sob_boolean_false
  6850 000049C4 7409                    	je .L_if_else_000d
  6851 000049C6 488B4528                	mov rax, PARAM(1)	; param s2
  6852 000049CA E9D6000000              	jmp .L_if_end_000d
  6853                                  .L_if_else_000d:
  6854                                  	; preparing a tail-call
  6855                                  	; preparing a non-tail-call
  6856 000049CF 488B4528                	mov rax, PARAM(1)	; param s2
  6857 000049D3 50                      	push rax
  6858                                  	; preparing a non-tail-call
  6859 000049D4 488B4520                	mov rax, PARAM(0)	; param s1
  6860 000049D8 50                      	push rax
  6861 000049D9 6A01                    	push 1	; arg count
  6862 000049DB 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  6863 000049E3 803805                  	cmp byte [rax], T_undefined
  6864 000049E6 0F84D21D0000            	je L_error_fvar_undefined
  6865 000049EC 803804                  	cmp byte [rax], T_closure
  6866 000049EF 0F854D1E0000            	jne L_error_non_closure
  6867 000049F5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6868 000049F8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6869 000049FB 50                      	push rax
  6870 000049FC 6A02                    	push 2	; arg count
  6871 000049FE 488B4510                	mov rax, ENV
  6872 00004A02 488B00                  	mov rax, qword [rax + 8 * 0]
  6873 00004A05 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  6874 00004A09 488B00                  	mov rax, qword [rax]
  6875 00004A0C 803804                  	cmp byte [rax], T_closure
  6876 00004A0F 0F852D1E0000            	jne L_error_non_closure
  6877 00004A15 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6878 00004A18 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6879 00004A1B 50                      	push rax
  6880                                  	; preparing a non-tail-call
  6881 00004A1C 488B4520                	mov rax, PARAM(0)	; param s1
  6882 00004A20 50                      	push rax
  6883 00004A21 6A01                    	push 1	; arg count
  6884 00004A23 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  6885 00004A2B 803805                  	cmp byte [rax], T_undefined
  6886 00004A2E 0F848A1D0000            	je L_error_fvar_undefined
  6887 00004A34 803804                  	cmp byte [rax], T_closure
  6888 00004A37 0F85051E0000            	jne L_error_non_closure
  6889 00004A3D FF7001                  	push SOB_CLOSURE_ENV(rax)
  6890 00004A40 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6891 00004A43 50                      	push rax
  6892 00004A44 6A02                    	push 2	; arg count
  6893 00004A46 488B0425[CF0B0000]      	mov rax, qword [free_var_41]	; free var cons
  6894 00004A4E 803805                  	cmp byte [rax], T_undefined
  6895 00004A51 0F84671D0000            	je L_error_fvar_undefined
  6896 00004A57 803804                  	cmp byte [rax], T_closure
  6897 00004A5A 0F85E21D0000            	jne L_error_non_closure
  6898 00004A60 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6899 00004A63 FF7508                  	push qword [rbp + 8 * 1]
  6900                                   ; old ret addr
  6901 00004A66 FF7500                  	push qword [rbp]
  6902                                   ; restore the old rbp
  6903 00004A69 BB02000000              	mov rbx, 2
  6904 00004A6E 4883C303                	add rbx, 3
  6905 00004A72 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  6906 00004A76 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  6907 00004A7B 4C8D4DF8                	lea r9, [rbp - 8]
  6908 00004A7F B906000000              	mov rcx, 6
  6909                                  .L_tc_recycle_frame_loop_002f:
  6910 00004A84 4883F900                	cmp rcx, 0
  6911 00004A88 7413                    	je .L_tc_recycle_frame_done_002f
  6912 00004A8A 4D8B11                  	mov r10, qword [r9]
  6913 00004A8D 4D8910                  	mov qword [r8], r10
  6914 00004A90 4983E808                	sub r8, 8
  6915 00004A94 4983E908                	sub r9, 8
  6916 00004A98 48FFC9                  	dec rcx
  6917 00004A9B EBE7                    	jmp .L_tc_recycle_frame_loop_002f
  6918                                  .L_tc_recycle_frame_done_002f:
  6919 00004A9D 498D6008                	lea rsp, [r8 + 8]
  6920 00004AA1 5D                      	pop rbp ; restore the old rbp
  6921 00004AA2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6922                                  .L_if_end_000d:
  6923 00004AA5 C9                      	leave
  6924 00004AA6 C22000                  	ret AND_KILL_FRAME(2)
  6925                                  .L_lambda_simple_end_002f:	; new closure is in rax
  6926 00004AA9 50                      	push rax
  6927 00004AAA 488B4528                	mov rax, PARAM(1)	; param run-2
  6928 00004AAE 8F00                    	pop qword [rax]
  6929 00004AB0 48B8-                   	mov rax, sob_void
  6929 00004AB2 [0000000000000000] 
  6930                                  
  6931 00004ABA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6932 00004ABF E8271E0000              	call malloc
  6933 00004AC4 50                      	push rax
  6934 00004AC5 BF10000000              	mov rdi, 8 * 2	; new rib
  6935 00004ACA E81C1E0000              	call malloc
  6936 00004ACF 50                      	push rax
  6937 00004AD0 BF10000000              	mov rdi, 8 * 2	; extended env
  6938 00004AD5 E8111E0000              	call malloc
  6939 00004ADA 488B7D10                	mov rdi, ENV
  6940 00004ADE 4831F6                  	 xor rsi, rsi
  6941 00004AE1 4831D2                  	 xor rdx, rdx
  6942 00004AE4 48FFC2                  	inc rdx
  6943                                  .L_lambda_opt_env_loop_0007:	; 
  6944 00004AE7 4883FE01                	cmp rsi, 1
  6945 00004AEB 7410                    	je .L_lambda_opt_env_end_0007
  6946 00004AED 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6947 00004AF1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6948 00004AF5 48FFC6                  	inc rsi
  6949 00004AF8 48FFC2                  	inc rdx
  6950 00004AFB EBEA                    	jmp .L_lambda_opt_env_loop_0007
  6951                                  .L_lambda_opt_env_end_0007:
  6952 00004AFD 5B                      	pop rbx
  6953 00004AFE 4831F6                  	xor rsi, rsi
  6954                                  .L_lambda_opt_params_loop_0007:	; copy params
  6955 00004B01 4883FE02                	cmp rsi, 2
  6956 00004B05 740E                    	je .L_lambda_opt_params_end_0007
  6957 00004B07 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6958 00004B0C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6959 00004B10 48FFC6                  	inc rsi
  6960 00004B13 EBEC                    	jmp .L_lambda_opt_params_loop_0007
  6961                                  .L_lambda_opt_params_end_0007:
  6962 00004B15 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6963 00004B18 4889C3                  	mov rbx, rax
  6964 00004B1B 58                      	pop rax
  6965 00004B1C C60004                  	mov byte [rax], T_closure
  6966 00004B1F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6967 00004B23 48C74009[304B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0007
  6968 00004B2B E9E5010000              	jmp .L_lambda_opt_end_0007
  6969                                  .L_lambda_opt_code_0007:
  6970 00004B30 4C8B7C2410              	mov r15, qword [rsp + 8 * 2]
  6971 00004B35 4983FF00                	cmp r15, 0
  6972 00004B39 7409                    	je .L_lambda_opt_arity_check_exact_0007
  6973 00004B3B 7F57                    	jg .L_lambda_opt_arity_check_more_0007
  6974 00004B3D 6A00                    	push 0
  6975 00004B3F E9741D0000              	jmp L_error_incorrect_arity_opt
  6976                                  .L_lambda_opt_arity_check_exact_0007: ;Exact case
  6977 00004B44 4C8B0424                	mov r8, qword [rsp -8 * 0]
  6978 00004B48 4C894424F8              	mov qword [rsp -8], r8
  6979 00004B4D 4C8B442408              	mov r8, qword [rsp +8]
  6980 00004B52 4C890424                	mov qword [rsp +8 * 0], r8
  6981 00004B56 4C8B442410              	mov r8, qword [rsp +8 * 2]
  6982 00004B5B 4C89C1                  	mov rcx, r8
  6983 00004B5E 49FFC0                  	inc r8
  6984 00004B61 4C89442408              	mov qword [rsp +8], r8
  6985 00004B66 4889E2                  	mov rdx, rsp
  6986 00004B69 4883C218                	add rdx, 24
  6987                                  .L_lambda_opt_loop_copy_to_new_frame_exact_0007:
  6988 00004B6D 4883F900                	cmp rcx, 0
  6989 00004B71 7410                    	je .L_lambda_opt_loop_copy_to_new_frame_exact_end_0007
  6990 00004B73 4C8B02                  	mov r8, qword [rdx]
  6991 00004B76 4C8942F8                	mov qword [rdx - 8], r8
  6992 00004B7A 4883C208                	add rdx, 8
  6993 00004B7E 48FFC9                  	dec rcx
  6994 00004B81 EBEA                    	jmp .L_lambda_opt_loop_copy_to_new_frame_exact_0007
  6995                                  .L_lambda_opt_loop_copy_to_new_frame_exact_end_0007:
  6996 00004B83 48C742F8[01000000]      	mov qword [rdx - 8], sob_nil
  6997 00004B8B 4883EC08                	sub rsp, 8
  6998 00004B8F E985000000              	jmp .L_lambda_opt_stack_adjusted_0007
  6999                                  .L_lambda_opt_arity_check_more_0007:
  7000 00004B94 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  7001 00004B99 4D89C4                  	mov r12, r8
  7002 00004B9C 4C89C1                  	mov rcx, r8
  7003 00004B9F 4D8D6802                	lea r13, [r8 + 2] 
  7004 00004BA3 4883E900                	sub rcx, 0
  7005 00004BA7 4E8D5CC410              	lea r11, qword [rsp + r8 * 8 + 16]
  7006 00004BAC 49BE-                   	mov r14, sob_nil
  7006 00004BAE [0100000000000000] 
  7007                                  .L_lambda_opt_create_list_of_opt_params_0007:
  7008 00004BB6 4883F900                	cmp rcx, 0
  7009 00004BBA 7424                    	je .L_lambda_opt_create_list_of_opt_params_end_0007
  7010 00004BBC BF11000000              	mov rdi, 17
  7011 00004BC1 E8251D0000              	call malloc
  7012 00004BC6 C60021                  	mov byte [rax], T_pair
  7013 00004BC9 498B1B                  	mov rbx, qword [r11]
  7014 00004BCC 48895801                	mov qword [rax +1], rbx
  7015 00004BD0 4C897009                	mov qword [rax + 1 + 8], r14
  7016 00004BD4 4989C6                  	mov r14, rax
  7017 00004BD7 48FFC9                  	dec rcx
  7018 00004BDA 4983EB08                	sub r11, 8
  7019 00004BDE EBD6                    	jmp .L_lambda_opt_create_list_of_opt_params_0007
  7020                                  .L_lambda_opt_create_list_of_opt_params_end_0007:
  7021 00004BE0 4C8D542418              	lea r10, [rsp + 0*8 + 8*3]
  7022 00004BE5 4D8932                  	mov qword [r10], r14
  7023 00004BE8 4E8D2CED00000000        	lea r13, [8 * r13]
  7024 00004BF0 4901E5                  	add r13, rsp
  7025 00004BF3 B904000000              	mov rcx, 4 + 0
  7026                                  .L_lambda_opt_stack_shrink_loop_0007:
  7027 00004BF8 4883F900                	cmp rcx, 0
  7028 00004BFC 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0007
  7029 00004BFE 4D8B1A                  	mov r11, qword [r10]
  7030 00004C01 4D895D00                	mov qword [r13], r11
  7031 00004C05 4983EA08                	sub r10, 8
  7032 00004C09 4983ED08                	sub r13, 8
  7033 00004C0D 48FFC9                  	dec rcx
  7034 00004C10 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0007
  7035                                  .L_lambda_opt_stack_shrink_loop_exit_0007:
  7036 00004C12 4983C508                	add r13, 8
  7037 00004C16 4C89EC                  	mov rsp, r13
  7038                                  .L_lambda_opt_stack_adjusted_0007:
  7039 00004C19 48C744241001000000      	mov qword [rsp + 8*2], 1
  7040 00004C22 C8000000                	enter 0, 0
  7041                                  	; preparing a non-tail-call
  7042 00004C26 488B4520                	mov rax, PARAM(0)	; param s
  7043 00004C2A 50                      	push rax
  7044 00004C2B 6A01                    	push 1	; arg count
  7045 00004C2D 488B0425[CE0C0000]      	mov rax, qword [free_var_56]	; free var null?
  7046 00004C35 803805                  	cmp byte [rax], T_undefined
  7047 00004C38 0F84801B0000            	je L_error_fvar_undefined
  7048 00004C3E 803804                  	cmp byte [rax], T_closure
  7049 00004C41 0F85FB1B0000            	jne L_error_non_closure
  7050 00004C47 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7051 00004C4A FF5009                  	call SOB_CLOSURE_CODE(rax)
  7052 00004C4D 483D[02000000]          	cmp rax, sob_boolean_false
  7053 00004C53 740F                    	je .L_if_else_000e
  7054 00004C55 48B8-                   	mov rax, L_constants + 1
  7054 00004C57 [0100000000000000] 
  7055 00004C5F E9AD000000              	jmp .L_if_end_000e
  7056                                  .L_if_else_000e:
  7057                                  	; preparing a tail-call
  7058                                  	; preparing a non-tail-call
  7059 00004C64 488B4520                	mov rax, PARAM(0)	; param s
  7060 00004C68 50                      	push rax
  7061 00004C69 6A01                    	push 1	; arg count
  7062 00004C6B 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  7063 00004C73 803805                  	cmp byte [rax], T_undefined
  7064 00004C76 0F84421B0000            	je L_error_fvar_undefined
  7065 00004C7C 803804                  	cmp byte [rax], T_closure
  7066 00004C7F 0F85BD1B0000            	jne L_error_non_closure
  7067 00004C85 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7068 00004C88 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7069 00004C8B 50                      	push rax
  7070                                  	; preparing a non-tail-call
  7071 00004C8C 488B4520                	mov rax, PARAM(0)	; param s
  7072 00004C90 50                      	push rax
  7073 00004C91 6A01                    	push 1	; arg count
  7074 00004C93 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  7075 00004C9B 803805                  	cmp byte [rax], T_undefined
  7076 00004C9E 0F841A1B0000            	je L_error_fvar_undefined
  7077 00004CA4 803804                  	cmp byte [rax], T_closure
  7078 00004CA7 0F85951B0000            	jne L_error_non_closure
  7079 00004CAD FF7001                  	push SOB_CLOSURE_ENV(rax)
  7080 00004CB0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7081 00004CB3 50                      	push rax
  7082 00004CB4 6A02                    	push 2	; arg count
  7083 00004CB6 488B4510                	mov rax, ENV
  7084 00004CBA 488B00                  	mov rax, qword [rax + 8 * 0]
  7085 00004CBD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  7086 00004CC0 488B00                  	mov rax, qword [rax]
  7087 00004CC3 803804                  	cmp byte [rax], T_closure
  7088 00004CC6 0F85761B0000            	jne L_error_non_closure
  7089 00004CCC FF7001                  	push SOB_CLOSURE_ENV(rax)
  7090 00004CCF FF7508                  	push qword [rbp + 8 * 1]
  7091                                   ; old ret addr
  7092 00004CD2 FF7500                  	push qword [rbp]
  7093                                   ; restore the old rbp
  7094 00004CD5 BB02000000              	mov rbx, 2
  7095 00004CDA 4883C303                	add rbx, 3
  7096 00004CDE 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  7097 00004CE2 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  7098 00004CE7 4C8D4DF8                	lea r9, [rbp - 8]
  7099 00004CEB B906000000              	mov rcx, 6
  7100                                  .L_tc_recycle_frame_loop_0030:
  7101 00004CF0 4883F900                	cmp rcx, 0
  7102 00004CF4 7413                    	je .L_tc_recycle_frame_done_0030
  7103 00004CF6 4D8B11                  	mov r10, qword [r9]
  7104 00004CF9 4D8910                  	mov qword [r8], r10
  7105 00004CFC 4983E808                	sub r8, 8
  7106 00004D00 4983E908                	sub r9, 8
  7107 00004D04 48FFC9                  	dec rcx
  7108 00004D07 EBE7                    	jmp .L_tc_recycle_frame_loop_0030
  7109                                  .L_tc_recycle_frame_done_0030:
  7110 00004D09 498D6008                	lea rsp, [r8 + 8]
  7111 00004D0D 5D                      	pop rbp ; restore the old rbp
  7112 00004D0E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7113                                  .L_if_end_000e:
  7114 00004D11 C9                      	leave
  7115 00004D12 C21800                  	ret 8 * (2 + 1)
  7116                                  .L_lambda_opt_end_0007:	; new closure is in rax
  7117 00004D15 C9                      	leave
  7118 00004D16 C22000                  	ret AND_KILL_FRAME(2)
  7119                                  .L_lambda_simple_end_002d:	; new closure is in rax
  7120 00004D19 803804                  	cmp byte [rax], T_closure
  7121 00004D1C 0F85201B0000            	jne L_error_non_closure
  7122 00004D22 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7123 00004D25 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7124 00004D28 48890425[9E090000]      	mov qword [free_var_8], rax
  7125 00004D30 48B8-                   	mov rax, sob_void
  7125 00004D32 [0000000000000000] 
  7126                                  
  7127 00004D3A 4889C7                  	mov rdi, rax
  7128 00004D3D E8FE1D0000              	call print_sexpr_if_not_void
  7129                                  	; preparing a non-tail-call
  7130 00004D42 48B8-                   	mov rax, L_constants + 1993
  7130 00004D44 [C907000000000000] 
  7131 00004D4C 50                      	push rax
  7132 00004D4D 6A01                    	push 1	; arg count
  7133 00004D4F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7134 00004D54 E8921B0000              	call malloc
  7135 00004D59 50                      	push rax
  7136 00004D5A BF00000000              	mov rdi, 8 * 0	; new rib
  7137 00004D5F E8871B0000              	call malloc
  7138 00004D64 50                      	push rax
  7139 00004D65 BF08000000              	mov rdi, 8 * 1	; extended env
  7140 00004D6A E87C1B0000              	call malloc
  7141 00004D6F 488B7D10                	mov rdi, ENV
  7142 00004D73 BE00000000              	mov rsi, 0
  7143 00004D78 BA01000000              	mov rdx, 1
  7144                                  .L_lambda_simple_env_loop_0030:	; ext_env[i + 1] <-- env[i]
  7145 00004D7D 4883FE00                	cmp rsi, 0
  7146 00004D81 7410                    	je .L_lambda_simple_env_end_0030
  7147 00004D83 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7148 00004D87 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7149 00004D8B 48FFC6                  	inc rsi
  7150 00004D8E 48FFC2                  	inc rdx
  7151 00004D91 EBEA                    	jmp .L_lambda_simple_env_loop_0030
  7152                                  .L_lambda_simple_env_end_0030:
  7153 00004D93 5B                      	pop rbx
  7154 00004D94 BE00000000              	mov rsi, 0
  7155                                  .L_lambda_simple_params_loop_0030:	; copy params
  7156 00004D99 4883FE00                	cmp rsi, 0
  7157 00004D9D 740E                    	je .L_lambda_simple_params_end_0030
  7158 00004D9F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7159 00004DA4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7160 00004DA8 48FFC6                  	inc rsi
  7161 00004DAB EBEC                    	jmp .L_lambda_simple_params_loop_0030
  7162                                  .L_lambda_simple_params_end_0030:
  7163 00004DAD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7164 00004DB0 4889C3                  	mov rbx, rax
  7165 00004DB3 58                      	pop rax
  7166 00004DB4 C60004                  	mov byte [rax], T_closure
  7167 00004DB7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7168 00004DBB 48C74009[C84D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0030
  7169 00004DC3 E908040000              	jmp .L_lambda_simple_end_0030
  7170                                  .L_lambda_simple_code_0030:	; lambda-simple body
  7171 00004DC8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7172 00004DCE 740B                    	je .L_lambda_simple_arity_check_ok_0030
  7173 00004DD0 FF742410                	push qword [rsp + 8 * 2]
  7174 00004DD4 6A01                    	push 1
  7175 00004DD6 E9C91A0000              	jmp L_error_incorrect_arity_simple
  7176                                  .L_lambda_simple_arity_check_ok_0030:
  7177 00004DDB C8000000                	enter 0, 0
  7178 00004DDF BF08000000              	mov rdi, 8*1
  7179 00004DE4 E8021B0000              	call malloc
  7180 00004DE9 488B5D20                	mov rbx, PARAM(0)
  7181 00004DED 488918                  	mov qword [rax], rbx
  7182 00004DF0 48894520                	mov PARAM(0), rax
  7183 00004DF4 48B8-                   	mov rax, sob_void
  7183 00004DF6 [0000000000000000] 
  7184                                  
  7185 00004DFE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7186 00004E03 E8E31A0000              	call malloc
  7187 00004E08 50                      	push rax
  7188 00004E09 BF08000000              	mov rdi, 8 * 1	; new rib
  7189 00004E0E E8D81A0000              	call malloc
  7190 00004E13 50                      	push rax
  7191 00004E14 BF10000000              	mov rdi, 8 * 2	; extended env
  7192 00004E19 E8CD1A0000              	call malloc
  7193 00004E1E 488B7D10                	mov rdi, ENV
  7194 00004E22 BE00000000              	mov rsi, 0
  7195 00004E27 BA01000000              	mov rdx, 1
  7196                                  .L_lambda_simple_env_loop_0031:	; ext_env[i + 1] <-- env[i]
  7197 00004E2C 4883FE01                	cmp rsi, 1
  7198 00004E30 7410                    	je .L_lambda_simple_env_end_0031
  7199 00004E32 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7200 00004E36 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7201 00004E3A 48FFC6                  	inc rsi
  7202 00004E3D 48FFC2                  	inc rdx
  7203 00004E40 EBEA                    	jmp .L_lambda_simple_env_loop_0031
  7204                                  .L_lambda_simple_env_end_0031:
  7205 00004E42 5B                      	pop rbx
  7206 00004E43 BE00000000              	mov rsi, 0
  7207                                  .L_lambda_simple_params_loop_0031:	; copy params
  7208 00004E48 4883FE01                	cmp rsi, 1
  7209 00004E4C 740E                    	je .L_lambda_simple_params_end_0031
  7210 00004E4E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7211 00004E53 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7212 00004E57 48FFC6                  	inc rsi
  7213 00004E5A EBEC                    	jmp .L_lambda_simple_params_loop_0031
  7214                                  .L_lambda_simple_params_end_0031:
  7215 00004E5C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7216 00004E5F 4889C3                  	mov rbx, rax
  7217 00004E62 58                      	pop rax
  7218 00004E63 C60004                  	mov byte [rax], T_closure
  7219 00004E66 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7220 00004E6A 48C74009[774E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0031
  7221 00004E72 E968010000              	jmp .L_lambda_simple_end_0031
  7222                                  .L_lambda_simple_code_0031:	; lambda-simple body
  7223 00004E77 48837C241003            	cmp qword [rsp + 8 * 2], 3
  7224 00004E7D 740B                    	je .L_lambda_simple_arity_check_ok_0031
  7225 00004E7F FF742410                	push qword [rsp + 8 * 2]
  7226 00004E83 6A03                    	push 3
  7227 00004E85 E91A1A0000              	jmp L_error_incorrect_arity_simple
  7228                                  .L_lambda_simple_arity_check_ok_0031:
  7229 00004E8A C8000000                	enter 0, 0
  7230                                  	; preparing a non-tail-call
  7231 00004E8E 488B4530                	mov rax, PARAM(2)	; param ss
  7232 00004E92 50                      	push rax
  7233 00004E93 488B0425[CE0C0000]      	mov rax, qword [free_var_56]	; free var null?
  7234 00004E9B 803805                  	cmp byte [rax], T_undefined
  7235 00004E9E 0F841A190000            	je L_error_fvar_undefined
  7236 00004EA4 50                      	push rax
  7237 00004EA5 6A02                    	push 2	; arg count
  7238 00004EA7 488B0425[DF0C0000]      	mov rax, qword [free_var_57]	; free var ormap
  7239 00004EAF 803805                  	cmp byte [rax], T_undefined
  7240 00004EB2 0F8406190000            	je L_error_fvar_undefined
  7241 00004EB8 803804                  	cmp byte [rax], T_closure
  7242 00004EBB 0F8581190000            	jne L_error_non_closure
  7243 00004EC1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7244 00004EC4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7245 00004EC7 483D[02000000]          	cmp rax, sob_boolean_false
  7246 00004ECD 7409                    	je .L_if_else_000f
  7247 00004ECF 488B4528                	mov rax, PARAM(1)	; param unit
  7248 00004ED3 E903010000              	jmp .L_if_end_000f
  7249                                  .L_if_else_000f:
  7250                                  	; preparing a tail-call
  7251                                  	; preparing a non-tail-call
  7252 00004ED8 488B4530                	mov rax, PARAM(2)	; param ss
  7253 00004EDC 50                      	push rax
  7254 00004EDD 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  7255 00004EE5 803805                  	cmp byte [rax], T_undefined
  7256 00004EE8 0F84D0180000            	je L_error_fvar_undefined
  7257 00004EEE 50                      	push rax
  7258 00004EEF 6A02                    	push 2	; arg count
  7259 00004EF1 488B0425[AC0C0000]      	mov rax, qword [free_var_54]	; free var map
  7260 00004EF9 803805                  	cmp byte [rax], T_undefined
  7261 00004EFC 0F84BC180000            	je L_error_fvar_undefined
  7262 00004F02 803804                  	cmp byte [rax], T_closure
  7263 00004F05 0F8537190000            	jne L_error_non_closure
  7264 00004F0B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7265 00004F0E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7266 00004F11 50                      	push rax
  7267                                  	; preparing a non-tail-call
  7268                                  	; preparing a non-tail-call
  7269 00004F12 488B4530                	mov rax, PARAM(2)	; param ss
  7270 00004F16 50                      	push rax
  7271 00004F17 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  7272 00004F1F 803805                  	cmp byte [rax], T_undefined
  7273 00004F22 0F8496180000            	je L_error_fvar_undefined
  7274 00004F28 50                      	push rax
  7275 00004F29 6A02                    	push 2	; arg count
  7276 00004F2B 488B0425[AC0C0000]      	mov rax, qword [free_var_54]	; free var map
  7277 00004F33 803805                  	cmp byte [rax], T_undefined
  7278 00004F36 0F8482180000            	je L_error_fvar_undefined
  7279 00004F3C 803804                  	cmp byte [rax], T_closure
  7280 00004F3F 0F85FD180000            	jne L_error_non_closure
  7281 00004F45 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7282 00004F48 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7283 00004F4B 50                      	push rax
  7284 00004F4C 488B4528                	mov rax, PARAM(1)	; param unit
  7285 00004F50 50                      	push rax
  7286 00004F51 488B4520                	mov rax, PARAM(0)	; param f
  7287 00004F55 50                      	push rax
  7288 00004F56 6A03                    	push 3	; arg count
  7289 00004F58 488B0425[AF090000]      	mov rax, qword [free_var_9]	; free var apply
  7290 00004F60 803805                  	cmp byte [rax], T_undefined
  7291 00004F63 0F8455180000            	je L_error_fvar_undefined
  7292 00004F69 803804                  	cmp byte [rax], T_closure
  7293 00004F6C 0F85D0180000            	jne L_error_non_closure
  7294 00004F72 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7295 00004F75 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7296 00004F78 50                      	push rax
  7297 00004F79 488B4520                	mov rax, PARAM(0)	; param f
  7298 00004F7D 50                      	push rax
  7299 00004F7E 6A03                    	push 3	; arg count
  7300 00004F80 488B4510                	mov rax, ENV
  7301 00004F84 488B00                  	mov rax, qword [rax + 8 * 0]
  7302 00004F87 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  7303 00004F8A 488B00                  	mov rax, qword [rax]
  7304 00004F8D 803804                  	cmp byte [rax], T_closure
  7305 00004F90 0F85AC180000            	jne L_error_non_closure
  7306 00004F96 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7307 00004F99 FF7508                  	push qword [rbp + 8 * 1]
  7308                                   ; old ret addr
  7309 00004F9C FF7500                  	push qword [rbp]
  7310                                   ; restore the old rbp
  7311 00004F9F BB03000000              	mov rbx, 3
  7312 00004FA4 4883C303                	add rbx, 3
  7313 00004FA8 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  7314 00004FAC 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  7315 00004FB1 4C8D4DF8                	lea r9, [rbp - 8]
  7316 00004FB5 B907000000              	mov rcx, 7
  7317                                  .L_tc_recycle_frame_loop_0031:
  7318 00004FBA 4883F900                	cmp rcx, 0
  7319 00004FBE 7413                    	je .L_tc_recycle_frame_done_0031
  7320 00004FC0 4D8B11                  	mov r10, qword [r9]
  7321 00004FC3 4D8910                  	mov qword [r8], r10
  7322 00004FC6 4983E808                	sub r8, 8
  7323 00004FCA 4983E908                	sub r9, 8
  7324 00004FCE 48FFC9                  	dec rcx
  7325 00004FD1 EBE7                    	jmp .L_tc_recycle_frame_loop_0031
  7326                                  .L_tc_recycle_frame_done_0031:
  7327 00004FD3 498D6008                	lea rsp, [r8 + 8]
  7328 00004FD7 5D                      	pop rbp ; restore the old rbp
  7329 00004FD8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7330                                  .L_if_end_000f:
  7331 00004FDB C9                      	leave
  7332 00004FDC C22800                  	ret AND_KILL_FRAME(3)
  7333                                  .L_lambda_simple_end_0031:	; new closure is in rax
  7334 00004FDF 50                      	push rax
  7335 00004FE0 488B4520                	mov rax, PARAM(0)	; param run
  7336 00004FE4 8F00                    	pop qword [rax]
  7337 00004FE6 48B8-                   	mov rax, sob_void
  7337 00004FE8 [0000000000000000] 
  7338                                  
  7339 00004FF0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7340 00004FF5 E8F1180000              	call malloc
  7341 00004FFA 50                      	push rax
  7342 00004FFB BF08000000              	mov rdi, 8 * 1	; new rib
  7343 00005000 E8E6180000              	call malloc
  7344 00005005 50                      	push rax
  7345 00005006 BF10000000              	mov rdi, 8 * 2	; extended env
  7346 0000500B E8DB180000              	call malloc
  7347 00005010 488B7D10                	mov rdi, ENV
  7348 00005014 4831F6                  	 xor rsi, rsi
  7349 00005017 4831D2                  	 xor rdx, rdx
  7350 0000501A 48FFC2                  	inc rdx
  7351                                  .L_lambda_opt_env_loop_0008:	; 
  7352 0000501D 4883FE01                	cmp rsi, 1
  7353 00005021 7410                    	je .L_lambda_opt_env_end_0008
  7354 00005023 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7355 00005027 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7356 0000502B 48FFC6                  	inc rsi
  7357 0000502E 48FFC2                  	inc rdx
  7358 00005031 EBEA                    	jmp .L_lambda_opt_env_loop_0008
  7359                                  .L_lambda_opt_env_end_0008:
  7360 00005033 5B                      	pop rbx
  7361 00005034 4831F6                  	xor rsi, rsi
  7362                                  .L_lambda_opt_params_loop_0008:	; copy params
  7363 00005037 4883FE01                	cmp rsi, 1
  7364 0000503B 740E                    	je .L_lambda_opt_params_end_0008
  7365 0000503D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7366 00005042 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7367 00005046 48FFC6                  	inc rsi
  7368 00005049 EBEC                    	jmp .L_lambda_opt_params_loop_0008
  7369                                  .L_lambda_opt_params_end_0008:
  7370 0000504B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7371 0000504E 4889C3                  	mov rbx, rax
  7372 00005051 58                      	pop rax
  7373 00005052 C60004                  	mov byte [rax], T_closure
  7374 00005055 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7375 00005059 48C74009[66500000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0008
  7376 00005061 E966010000              	jmp .L_lambda_opt_end_0008
  7377                                  .L_lambda_opt_code_0008:
  7378 00005066 4C8B7C2410              	mov r15, qword [rsp + 8 * 2]
  7379 0000506B 4983FF02                	cmp r15, 2
  7380 0000506F 7409                    	je .L_lambda_opt_arity_check_exact_0008
  7381 00005071 7F57                    	jg .L_lambda_opt_arity_check_more_0008
  7382 00005073 6A02                    	push 2
  7383 00005075 E93E180000              	jmp L_error_incorrect_arity_opt
  7384                                  .L_lambda_opt_arity_check_exact_0008: ;Exact case
  7385 0000507A 4C8B0424                	mov r8, qword [rsp -8 * 0]
  7386 0000507E 4C894424F8              	mov qword [rsp -8], r8
  7387 00005083 4C8B442408              	mov r8, qword [rsp +8]
  7388 00005088 4C890424                	mov qword [rsp +8 * 0], r8
  7389 0000508C 4C8B442410              	mov r8, qword [rsp +8 * 2]
  7390 00005091 4C89C1                  	mov rcx, r8
  7391 00005094 49FFC0                  	inc r8
  7392 00005097 4C89442408              	mov qword [rsp +8], r8
  7393 0000509C 4889E2                  	mov rdx, rsp
  7394 0000509F 4883C218                	add rdx, 24
  7395                                  .L_lambda_opt_loop_copy_to_new_frame_exact_0008:
  7396 000050A3 4883F900                	cmp rcx, 0
  7397 000050A7 7410                    	je .L_lambda_opt_loop_copy_to_new_frame_exact_end_0008
  7398 000050A9 4C8B02                  	mov r8, qword [rdx]
  7399 000050AC 4C8942F8                	mov qword [rdx - 8], r8
  7400 000050B0 4883C208                	add rdx, 8
  7401 000050B4 48FFC9                  	dec rcx
  7402 000050B7 EBEA                    	jmp .L_lambda_opt_loop_copy_to_new_frame_exact_0008
  7403                                  .L_lambda_opt_loop_copy_to_new_frame_exact_end_0008:
  7404 000050B9 48C742F8[01000000]      	mov qword [rdx - 8], sob_nil
  7405 000050C1 4883EC08                	sub rsp, 8
  7406 000050C5 E985000000              	jmp .L_lambda_opt_stack_adjusted_0008
  7407                                  .L_lambda_opt_arity_check_more_0008:
  7408 000050CA 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  7409 000050CF 4D89C4                  	mov r12, r8
  7410 000050D2 4C89C1                  	mov rcx, r8
  7411 000050D5 4D8D6802                	lea r13, [r8 + 2] 
  7412 000050D9 4883E902                	sub rcx, 2
  7413 000050DD 4E8D5CC410              	lea r11, qword [rsp + r8 * 8 + 16]
  7414 000050E2 49BE-                   	mov r14, sob_nil
  7414 000050E4 [0100000000000000] 
  7415                                  .L_lambda_opt_create_list_of_opt_params_0008:
  7416 000050EC 4883F900                	cmp rcx, 0
  7417 000050F0 7424                    	je .L_lambda_opt_create_list_of_opt_params_end_0008
  7418 000050F2 BF11000000              	mov rdi, 17
  7419 000050F7 E8EF170000              	call malloc
  7420 000050FC C60021                  	mov byte [rax], T_pair
  7421 000050FF 498B1B                  	mov rbx, qword [r11]
  7422 00005102 48895801                	mov qword [rax +1], rbx
  7423 00005106 4C897009                	mov qword [rax + 1 + 8], r14
  7424 0000510A 4989C6                  	mov r14, rax
  7425 0000510D 48FFC9                  	dec rcx
  7426 00005110 4983EB08                	sub r11, 8
  7427 00005114 EBD6                    	jmp .L_lambda_opt_create_list_of_opt_params_0008
  7428                                  .L_lambda_opt_create_list_of_opt_params_end_0008:
  7429 00005116 4C8D542428              	lea r10, [rsp + 2*8 + 8*3]
  7430 0000511B 4D8932                  	mov qword [r10], r14
  7431 0000511E 4E8D2CED00000000        	lea r13, [8 * r13]
  7432 00005126 4901E5                  	add r13, rsp
  7433 00005129 B906000000              	mov rcx, 4 + 2
  7434                                  .L_lambda_opt_stack_shrink_loop_0008:
  7435 0000512E 4883F900                	cmp rcx, 0
  7436 00005132 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0008
  7437 00005134 4D8B1A                  	mov r11, qword [r10]
  7438 00005137 4D895D00                	mov qword [r13], r11
  7439 0000513B 4983EA08                	sub r10, 8
  7440 0000513F 4983ED08                	sub r13, 8
  7441 00005143 48FFC9                  	dec rcx
  7442 00005146 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0008
  7443                                  .L_lambda_opt_stack_shrink_loop_exit_0008:
  7444 00005148 4983C508                	add r13, 8
  7445 0000514C 4C89EC                  	mov rsp, r13
  7446                                  .L_lambda_opt_stack_adjusted_0008:
  7447 0000514F 48C744241003000000      	mov qword [rsp + 8*2], 3
  7448 00005158 C8000000                	enter 0, 0
  7449                                  	; preparing a tail-call
  7450 0000515C 488B4530                	mov rax, PARAM(2)	; param ss
  7451 00005160 50                      	push rax
  7452 00005161 488B4528                	mov rax, PARAM(1)	; param unit
  7453 00005165 50                      	push rax
  7454 00005166 488B4520                	mov rax, PARAM(0)	; param f
  7455 0000516A 50                      	push rax
  7456 0000516B 6A03                    	push 3	; arg count
  7457 0000516D 488B4510                	mov rax, ENV
  7458 00005171 488B00                  	mov rax, qword [rax + 8 * 0]
  7459 00005174 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  7460 00005177 488B00                  	mov rax, qword [rax]
  7461 0000517A 803804                  	cmp byte [rax], T_closure
  7462 0000517D 0F85BF160000            	jne L_error_non_closure
  7463 00005183 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7464 00005186 FF7508                  	push qword [rbp + 8 * 1]
  7465                                   ; old ret addr
  7466 00005189 FF7500                  	push qword [rbp]
  7467                                   ; restore the old rbp
  7468 0000518C BB03000000              	mov rbx, 3
  7469 00005191 4883C303                	add rbx, 3
  7470 00005195 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  7471 00005199 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  7472 0000519E 4C8D4DF8                	lea r9, [rbp - 8]
  7473 000051A2 B907000000              	mov rcx, 7
  7474                                  .L_tc_recycle_frame_loop_0032:
  7475 000051A7 4883F900                	cmp rcx, 0
  7476 000051AB 7413                    	je .L_tc_recycle_frame_done_0032
  7477 000051AD 4D8B11                  	mov r10, qword [r9]
  7478 000051B0 4D8910                  	mov qword [r8], r10
  7479 000051B3 4983E808                	sub r8, 8
  7480 000051B7 4983E908                	sub r9, 8
  7481 000051BB 48FFC9                  	dec rcx
  7482 000051BE EBE7                    	jmp .L_tc_recycle_frame_loop_0032
  7483                                  .L_tc_recycle_frame_done_0032:
  7484 000051C0 498D6008                	lea rsp, [r8 + 8]
  7485 000051C4 5D                      	pop rbp ; restore the old rbp
  7486 000051C5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7487 000051C8 C9                      	leave
  7488 000051C9 C22800                  	ret 8 * (2 + 3)
  7489                                  .L_lambda_opt_end_0008:	; new closure is in rax
  7490 000051CC C9                      	leave
  7491 000051CD C21800                  	ret AND_KILL_FRAME(1)
  7492                                  .L_lambda_simple_end_0030:	; new closure is in rax
  7493 000051D0 803804                  	cmp byte [rax], T_closure
  7494 000051D3 0F8569160000            	jne L_error_non_closure
  7495 000051D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7496 000051DC FF5009                  	call SOB_CLOSURE_CODE(rax)
  7497 000051DF 48890425[F10B0000]      	mov qword [free_var_43], rax
  7498 000051E7 48B8-                   	mov rax, sob_void
  7498 000051E9 [0000000000000000] 
  7499                                  
  7500 000051F1 4889C7                  	mov rdi, rax
  7501 000051F4 E847190000              	call print_sexpr_if_not_void
  7502                                  	; preparing a non-tail-call
  7503 000051F9 48B8-                   	mov rax, L_constants + 1993
  7503 000051FB [C907000000000000] 
  7504 00005203 50                      	push rax
  7505 00005204 6A01                    	push 1	; arg count
  7506 00005206 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7507 0000520B E8DB160000              	call malloc
  7508 00005210 50                      	push rax
  7509 00005211 BF00000000              	mov rdi, 8 * 0	; new rib
  7510 00005216 E8D0160000              	call malloc
  7511 0000521B 50                      	push rax
  7512 0000521C BF08000000              	mov rdi, 8 * 1	; extended env
  7513 00005221 E8C5160000              	call malloc
  7514 00005226 488B7D10                	mov rdi, ENV
  7515 0000522A BE00000000              	mov rsi, 0
  7516 0000522F BA01000000              	mov rdx, 1
  7517                                  .L_lambda_simple_env_loop_0032:	; ext_env[i + 1] <-- env[i]
  7518 00005234 4883FE00                	cmp rsi, 0
  7519 00005238 7410                    	je .L_lambda_simple_env_end_0032
  7520 0000523A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7521 0000523E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7522 00005242 48FFC6                  	inc rsi
  7523 00005245 48FFC2                  	inc rdx
  7524 00005248 EBEA                    	jmp .L_lambda_simple_env_loop_0032
  7525                                  .L_lambda_simple_env_end_0032:
  7526 0000524A 5B                      	pop rbx
  7527 0000524B BE00000000              	mov rsi, 0
  7528                                  .L_lambda_simple_params_loop_0032:	; copy params
  7529 00005250 4883FE00                	cmp rsi, 0
  7530 00005254 740E                    	je .L_lambda_simple_params_end_0032
  7531 00005256 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7532 0000525B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7533 0000525F 48FFC6                  	inc rsi
  7534 00005262 EBEC                    	jmp .L_lambda_simple_params_loop_0032
  7535                                  .L_lambda_simple_params_end_0032:
  7536 00005264 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7537 00005267 4889C3                  	mov rbx, rax
  7538 0000526A 58                      	pop rax
  7539 0000526B C60004                  	mov byte [rax], T_closure
  7540 0000526E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7541 00005272 48C74009[7F520000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0032
  7542 0000527A E959040000              	jmp .L_lambda_simple_end_0032
  7543                                  .L_lambda_simple_code_0032:	; lambda-simple body
  7544 0000527F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7545 00005285 740B                    	je .L_lambda_simple_arity_check_ok_0032
  7546 00005287 FF742410                	push qword [rsp + 8 * 2]
  7547 0000528B 6A01                    	push 1
  7548 0000528D E912160000              	jmp L_error_incorrect_arity_simple
  7549                                  .L_lambda_simple_arity_check_ok_0032:
  7550 00005292 C8000000                	enter 0, 0
  7551 00005296 BF08000000              	mov rdi, 8*1
  7552 0000529B E84B160000              	call malloc
  7553 000052A0 488B5D20                	mov rbx, PARAM(0)
  7554 000052A4 488918                  	mov qword [rax], rbx
  7555 000052A7 48894520                	mov PARAM(0), rax
  7556 000052AB 48B8-                   	mov rax, sob_void
  7556 000052AD [0000000000000000] 
  7557                                  
  7558 000052B5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7559 000052BA E82C160000              	call malloc
  7560 000052BF 50                      	push rax
  7561 000052C0 BF08000000              	mov rdi, 8 * 1	; new rib
  7562 000052C5 E821160000              	call malloc
  7563 000052CA 50                      	push rax
  7564 000052CB BF10000000              	mov rdi, 8 * 2	; extended env
  7565 000052D0 E816160000              	call malloc
  7566 000052D5 488B7D10                	mov rdi, ENV
  7567 000052D9 BE00000000              	mov rsi, 0
  7568 000052DE BA01000000              	mov rdx, 1
  7569                                  .L_lambda_simple_env_loop_0033:	; ext_env[i + 1] <-- env[i]
  7570 000052E3 4883FE01                	cmp rsi, 1
  7571 000052E7 7410                    	je .L_lambda_simple_env_end_0033
  7572 000052E9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7573 000052ED 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7574 000052F1 48FFC6                  	inc rsi
  7575 000052F4 48FFC2                  	inc rdx
  7576 000052F7 EBEA                    	jmp .L_lambda_simple_env_loop_0033
  7577                                  .L_lambda_simple_env_end_0033:
  7578 000052F9 5B                      	pop rbx
  7579 000052FA BE00000000              	mov rsi, 0
  7580                                  .L_lambda_simple_params_loop_0033:	; copy params
  7581 000052FF 4883FE01                	cmp rsi, 1
  7582 00005303 740E                    	je .L_lambda_simple_params_end_0033
  7583 00005305 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7584 0000530A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7585 0000530E 48FFC6                  	inc rsi
  7586 00005311 EBEC                    	jmp .L_lambda_simple_params_loop_0033
  7587                                  .L_lambda_simple_params_end_0033:
  7588 00005313 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7589 00005316 4889C3                  	mov rbx, rax
  7590 00005319 58                      	pop rax
  7591 0000531A C60004                  	mov byte [rax], T_closure
  7592 0000531D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7593 00005321 48C74009[2E530000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0033
  7594 00005329 E9B9010000              	jmp .L_lambda_simple_end_0033
  7595                                  .L_lambda_simple_code_0033:	; lambda-simple body
  7596 0000532E 48837C241003            	cmp qword [rsp + 8 * 2], 3
  7597 00005334 740B                    	je .L_lambda_simple_arity_check_ok_0033
  7598 00005336 FF742410                	push qword [rsp + 8 * 2]
  7599 0000533A 6A03                    	push 3
  7600 0000533C E963150000              	jmp L_error_incorrect_arity_simple
  7601                                  .L_lambda_simple_arity_check_ok_0033:
  7602 00005341 C8000000                	enter 0, 0
  7603                                  	; preparing a non-tail-call
  7604 00005345 488B4530                	mov rax, PARAM(2)	; param ss
  7605 00005349 50                      	push rax
  7606 0000534A 488B0425[CE0C0000]      	mov rax, qword [free_var_56]	; free var null?
  7607 00005352 803805                  	cmp byte [rax], T_undefined
  7608 00005355 0F8463140000            	je L_error_fvar_undefined
  7609 0000535B 50                      	push rax
  7610 0000535C 6A02                    	push 2	; arg count
  7611 0000535E 488B0425[DF0C0000]      	mov rax, qword [free_var_57]	; free var ormap
  7612 00005366 803805                  	cmp byte [rax], T_undefined
  7613 00005369 0F844F140000            	je L_error_fvar_undefined
  7614 0000536F 803804                  	cmp byte [rax], T_closure
  7615 00005372 0F85CA140000            	jne L_error_non_closure
  7616 00005378 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7617 0000537B FF5009                  	call SOB_CLOSURE_CODE(rax)
  7618 0000537E 483D[02000000]          	cmp rax, sob_boolean_false
  7619 00005384 7409                    	je .L_if_else_0010
  7620 00005386 488B4528                	mov rax, PARAM(1)	; param unit
  7621 0000538A E954010000              	jmp .L_if_end_0010
  7622                                  .L_if_else_0010:
  7623                                  	; preparing a tail-call
  7624                                  	; preparing a non-tail-call
  7625                                  	; preparing a non-tail-call
  7626 0000538F 48B8-                   	mov rax, L_constants + 1
  7626 00005391 [0100000000000000] 
  7627 00005399 50                      	push rax
  7628                                  	; preparing a non-tail-call
  7629                                  	; preparing a non-tail-call
  7630 0000539A 488B4530                	mov rax, PARAM(2)	; param ss
  7631 0000539E 50                      	push rax
  7632 0000539F 488B0425[BE0B0000]      	mov rax, qword [free_var_40]	; free var cdr
  7633 000053A7 803805                  	cmp byte [rax], T_undefined
  7634 000053AA 0F840E140000            	je L_error_fvar_undefined
  7635 000053B0 50                      	push rax
  7636 000053B1 6A02                    	push 2	; arg count
  7637 000053B3 488B0425[AC0C0000]      	mov rax, qword [free_var_54]	; free var map
  7638 000053BB 803805                  	cmp byte [rax], T_undefined
  7639 000053BE 0F84FA130000            	je L_error_fvar_undefined
  7640 000053C4 803804                  	cmp byte [rax], T_closure
  7641 000053C7 0F8575140000            	jne L_error_non_closure
  7642 000053CD FF7001                  	push SOB_CLOSURE_ENV(rax)
  7643 000053D0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7644 000053D3 50                      	push rax
  7645 000053D4 488B4528                	mov rax, PARAM(1)	; param unit
  7646 000053D8 50                      	push rax
  7647 000053D9 488B4520                	mov rax, PARAM(0)	; param f
  7648 000053DD 50                      	push rax
  7649 000053DE 6A03                    	push 3	; arg count
  7650 000053E0 488B4510                	mov rax, ENV
  7651 000053E4 488B00                  	mov rax, qword [rax + 8 * 0]
  7652 000053E7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  7653 000053EA 488B00                  	mov rax, qword [rax]
  7654 000053ED 803804                  	cmp byte [rax], T_closure
  7655 000053F0 0F854C140000            	jne L_error_non_closure
  7656 000053F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7657 000053F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7658 000053FC 50                      	push rax
  7659 000053FD 6A02                    	push 2	; arg count
  7660 000053FF 488B0425[CF0B0000]      	mov rax, qword [free_var_41]	; free var cons
  7661 00005407 803805                  	cmp byte [rax], T_undefined
  7662 0000540A 0F84AE130000            	je L_error_fvar_undefined
  7663 00005410 803804                  	cmp byte [rax], T_closure
  7664 00005413 0F8529140000            	jne L_error_non_closure
  7665 00005419 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7666 0000541C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7667 0000541F 50                      	push rax
  7668                                  	; preparing a non-tail-call
  7669 00005420 488B4530                	mov rax, PARAM(2)	; param ss
  7670 00005424 50                      	push rax
  7671 00005425 488B0425[BF0A0000]      	mov rax, qword [free_var_25]	; free var car
  7672 0000542D 803805                  	cmp byte [rax], T_undefined
  7673 00005430 0F8488130000            	je L_error_fvar_undefined
  7674 00005436 50                      	push rax
  7675 00005437 6A02                    	push 2	; arg count
  7676 00005439 488B0425[AC0C0000]      	mov rax, qword [free_var_54]	; free var map
  7677 00005441 803805                  	cmp byte [rax], T_undefined
  7678 00005444 0F8474130000            	je L_error_fvar_undefined
  7679 0000544A 803804                  	cmp byte [rax], T_closure
  7680 0000544D 0F85EF130000            	jne L_error_non_closure
  7681 00005453 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7682 00005456 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7683 00005459 50                      	push rax
  7684 0000545A 6A02                    	push 2	; arg count
  7685 0000545C 488B0425[9E090000]      	mov rax, qword [free_var_8]	; free var append
  7686 00005464 803805                  	cmp byte [rax], T_undefined
  7687 00005467 0F8451130000            	je L_error_fvar_undefined
  7688 0000546D 803804                  	cmp byte [rax], T_closure
  7689 00005470 0F85CC130000            	jne L_error_non_closure
  7690 00005476 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7691 00005479 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7692 0000547C 50                      	push rax
  7693 0000547D 488B4520                	mov rax, PARAM(0)	; param f
  7694 00005481 50                      	push rax
  7695 00005482 6A02                    	push 2	; arg count
  7696 00005484 488B0425[AF090000]      	mov rax, qword [free_var_9]	; free var apply
  7697 0000548C 803805                  	cmp byte [rax], T_undefined
  7698 0000548F 0F8429130000            	je L_error_fvar_undefined
  7699 00005495 803804                  	cmp byte [rax], T_closure
  7700 00005498 0F85A4130000            	jne L_error_non_closure
  7701 0000549E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7702 000054A1 FF7508                  	push qword [rbp + 8 * 1]
  7703                                   ; old ret addr
  7704 000054A4 FF7500                  	push qword [rbp]
  7705                                   ; restore the old rbp
  7706 000054A7 BB02000000              	mov rbx, 2
  7707 000054AC 4883C303                	add rbx, 3
  7708 000054B0 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  7709 000054B4 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  7710 000054B9 4C8D4DF8                	lea r9, [rbp - 8]
  7711 000054BD B906000000              	mov rcx, 6
  7712                                  .L_tc_recycle_frame_loop_0033:
  7713 000054C2 4883F900                	cmp rcx, 0
  7714 000054C6 7413                    	je .L_tc_recycle_frame_done_0033
  7715 000054C8 4D8B11                  	mov r10, qword [r9]
  7716 000054CB 4D8910                  	mov qword [r8], r10
  7717 000054CE 4983E808                	sub r8, 8
  7718 000054D2 4983E908                	sub r9, 8
  7719 000054D6 48FFC9                  	dec rcx
  7720 000054D9 EBE7                    	jmp .L_tc_recycle_frame_loop_0033
  7721                                  .L_tc_recycle_frame_done_0033:
  7722 000054DB 498D6008                	lea rsp, [r8 + 8]
  7723 000054DF 5D                      	pop rbp ; restore the old rbp
  7724 000054E0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7725                                  .L_if_end_0010:
  7726 000054E3 C9                      	leave
  7727 000054E4 C22800                  	ret AND_KILL_FRAME(3)
  7728                                  .L_lambda_simple_end_0033:	; new closure is in rax
  7729 000054E7 50                      	push rax
  7730 000054E8 488B4520                	mov rax, PARAM(0)	; param run
  7731 000054EC 8F00                    	pop qword [rax]
  7732 000054EE 48B8-                   	mov rax, sob_void
  7732 000054F0 [0000000000000000] 
  7733                                  
  7734 000054F8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7735 000054FD E8E9130000              	call malloc
  7736 00005502 50                      	push rax
  7737 00005503 BF08000000              	mov rdi, 8 * 1	; new rib
  7738 00005508 E8DE130000              	call malloc
  7739 0000550D 50                      	push rax
  7740 0000550E BF10000000              	mov rdi, 8 * 2	; extended env
  7741 00005513 E8D3130000              	call malloc
  7742 00005518 488B7D10                	mov rdi, ENV
  7743 0000551C 4831F6                  	 xor rsi, rsi
  7744 0000551F 4831D2                  	 xor rdx, rdx
  7745 00005522 48FFC2                  	inc rdx
  7746                                  .L_lambda_opt_env_loop_0009:	; 
  7747 00005525 4883FE01                	cmp rsi, 1
  7748 00005529 7410                    	je .L_lambda_opt_env_end_0009
  7749 0000552B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7750 0000552F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7751 00005533 48FFC6                  	inc rsi
  7752 00005536 48FFC2                  	inc rdx
  7753 00005539 EBEA                    	jmp .L_lambda_opt_env_loop_0009
  7754                                  .L_lambda_opt_env_end_0009:
  7755 0000553B 5B                      	pop rbx
  7756 0000553C 4831F6                  	xor rsi, rsi
  7757                                  .L_lambda_opt_params_loop_0009:	; copy params
  7758 0000553F 4883FE01                	cmp rsi, 1
  7759 00005543 740E                    	je .L_lambda_opt_params_end_0009
  7760 00005545 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7761 0000554A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7762 0000554E 48FFC6                  	inc rsi
  7763 00005551 EBEC                    	jmp .L_lambda_opt_params_loop_0009
  7764                                  .L_lambda_opt_params_end_0009:
  7765 00005553 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7766 00005556 4889C3                  	mov rbx, rax
  7767 00005559 58                      	pop rax
  7768 0000555A C60004                  	mov byte [rax], T_closure
  7769 0000555D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7770 00005561 48C74009[6E550000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0009
  7771 00005569 E966010000              	jmp .L_lambda_opt_end_0009
  7772                                  .L_lambda_opt_code_0009:
  7773 0000556E 4C8B7C2410              	mov r15, qword [rsp + 8 * 2]
  7774 00005573 4983FF02                	cmp r15, 2
  7775 00005577 7409                    	je .L_lambda_opt_arity_check_exact_0009
  7776 00005579 7F57                    	jg .L_lambda_opt_arity_check_more_0009
  7777 0000557B 6A02                    	push 2
  7778 0000557D E936130000              	jmp L_error_incorrect_arity_opt
  7779                                  .L_lambda_opt_arity_check_exact_0009: ;Exact case
  7780 00005582 4C8B0424                	mov r8, qword [rsp -8 * 0]
  7781 00005586 4C894424F8              	mov qword [rsp -8], r8
  7782 0000558B 4C8B442408              	mov r8, qword [rsp +8]
  7783 00005590 4C890424                	mov qword [rsp +8 * 0], r8
  7784 00005594 4C8B442410              	mov r8, qword [rsp +8 * 2]
  7785 00005599 4C89C1                  	mov rcx, r8
  7786 0000559C 49FFC0                  	inc r8
  7787 0000559F 4C89442408              	mov qword [rsp +8], r8
  7788 000055A4 4889E2                  	mov rdx, rsp
  7789 000055A7 4883C218                	add rdx, 24
  7790                                  .L_lambda_opt_loop_copy_to_new_frame_exact_0009:
  7791 000055AB 4883F900                	cmp rcx, 0
  7792 000055AF 7410                    	je .L_lambda_opt_loop_copy_to_new_frame_exact_end_0009
  7793 000055B1 4C8B02                  	mov r8, qword [rdx]
  7794 000055B4 4C8942F8                	mov qword [rdx - 8], r8
  7795 000055B8 4883C208                	add rdx, 8
  7796 000055BC 48FFC9                  	dec rcx
  7797 000055BF EBEA                    	jmp .L_lambda_opt_loop_copy_to_new_frame_exact_0009
  7798                                  .L_lambda_opt_loop_copy_to_new_frame_exact_end_0009:
  7799 000055C1 48C742F8[01000000]      	mov qword [rdx - 8], sob_nil
  7800 000055C9 4883EC08                	sub rsp, 8
  7801 000055CD E985000000              	jmp .L_lambda_opt_stack_adjusted_0009
  7802                                  .L_lambda_opt_arity_check_more_0009:
  7803 000055D2 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  7804 000055D7 4D89C4                  	mov r12, r8
  7805 000055DA 4C89C1                  	mov rcx, r8
  7806 000055DD 4D8D6802                	lea r13, [r8 + 2] 
  7807 000055E1 4883E902                	sub rcx, 2
  7808 000055E5 4E8D5CC410              	lea r11, qword [rsp + r8 * 8 + 16]
  7809 000055EA 49BE-                   	mov r14, sob_nil
  7809 000055EC [0100000000000000] 
  7810                                  .L_lambda_opt_create_list_of_opt_params_0009:
  7811 000055F4 4883F900                	cmp rcx, 0
  7812 000055F8 7424                    	je .L_lambda_opt_create_list_of_opt_params_end_0009
  7813 000055FA BF11000000              	mov rdi, 17
  7814 000055FF E8E7120000              	call malloc
  7815 00005604 C60021                  	mov byte [rax], T_pair
  7816 00005607 498B1B                  	mov rbx, qword [r11]
  7817 0000560A 48895801                	mov qword [rax +1], rbx
  7818 0000560E 4C897009                	mov qword [rax + 1 + 8], r14
  7819 00005612 4989C6                  	mov r14, rax
  7820 00005615 48FFC9                  	dec rcx
  7821 00005618 4983EB08                	sub r11, 8
  7822 0000561C EBD6                    	jmp .L_lambda_opt_create_list_of_opt_params_0009
  7823                                  .L_lambda_opt_create_list_of_opt_params_end_0009:
  7824 0000561E 4C8D542428              	lea r10, [rsp + 2*8 + 8*3]
  7825 00005623 4D8932                  	mov qword [r10], r14
  7826 00005626 4E8D2CED00000000        	lea r13, [8 * r13]
  7827 0000562E 4901E5                  	add r13, rsp
  7828 00005631 B906000000              	mov rcx, 4 + 2
  7829                                  .L_lambda_opt_stack_shrink_loop_0009:
  7830 00005636 4883F900                	cmp rcx, 0
  7831 0000563A 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0009
  7832 0000563C 4D8B1A                  	mov r11, qword [r10]
  7833 0000563F 4D895D00                	mov qword [r13], r11
  7834 00005643 4983EA08                	sub r10, 8
  7835 00005647 4983ED08                	sub r13, 8
  7836 0000564B 48FFC9                  	dec rcx
  7837 0000564E EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0009
  7838                                  .L_lambda_opt_stack_shrink_loop_exit_0009:
  7839 00005650 4983C508                	add r13, 8
  7840 00005654 4C89EC                  	mov rsp, r13
  7841                                  .L_lambda_opt_stack_adjusted_0009:
  7842 00005657 48C744241003000000      	mov qword [rsp + 8*2], 3
  7843 00005660 C8000000                	enter 0, 0
  7844                                  	; preparing a tail-call
  7845 00005664 488B4530                	mov rax, PARAM(2)	; param ss
  7846 00005668 50                      	push rax
  7847 00005669 488B4528                	mov rax, PARAM(1)	; param unit
  7848 0000566D 50                      	push rax
  7849 0000566E 488B4520                	mov rax, PARAM(0)	; param f
  7850 00005672 50                      	push rax
  7851 00005673 6A03                    	push 3	; arg count
  7852 00005675 488B4510                	mov rax, ENV
  7853 00005679 488B00                  	mov rax, qword [rax + 8 * 0]
  7854 0000567C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  7855 0000567F 488B00                  	mov rax, qword [rax]
  7856 00005682 803804                  	cmp byte [rax], T_closure
  7857 00005685 0F85B7110000            	jne L_error_non_closure
  7858 0000568B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7859 0000568E FF7508                  	push qword [rbp + 8 * 1]
  7860                                   ; old ret addr
  7861 00005691 FF7500                  	push qword [rbp]
  7862                                   ; restore the old rbp
  7863 00005694 BB03000000              	mov rbx, 3
  7864 00005699 4883C303                	add rbx, 3
  7865 0000569D 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  7866 000056A1 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  7867 000056A6 4C8D4DF8                	lea r9, [rbp - 8]
  7868 000056AA B907000000              	mov rcx, 7
  7869                                  .L_tc_recycle_frame_loop_0034:
  7870 000056AF 4883F900                	cmp rcx, 0
  7871 000056B3 7413                    	je .L_tc_recycle_frame_done_0034
  7872 000056B5 4D8B11                  	mov r10, qword [r9]
  7873 000056B8 4D8910                  	mov qword [r8], r10
  7874 000056BB 4983E808                	sub r8, 8
  7875 000056BF 4983E908                	sub r9, 8
  7876 000056C3 48FFC9                  	dec rcx
  7877 000056C6 EBE7                    	jmp .L_tc_recycle_frame_loop_0034
  7878                                  .L_tc_recycle_frame_done_0034:
  7879 000056C8 498D6008                	lea rsp, [r8 + 8]
  7880 000056CC 5D                      	pop rbp ; restore the old rbp
  7881 000056CD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7882 000056D0 C9                      	leave
  7883 000056D1 C22800                  	ret 8 * (2 + 3)
  7884                                  .L_lambda_opt_end_0009:	; new closure is in rax
  7885 000056D4 C9                      	leave
  7886 000056D5 C21800                  	ret AND_KILL_FRAME(1)
  7887                                  .L_lambda_simple_end_0032:	; new closure is in rax
  7888 000056D8 803804                  	cmp byte [rax], T_closure
  7889 000056DB 0F8561110000            	jne L_error_non_closure
  7890 000056E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7891 000056E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7892 000056E7 48890425[020C0000]      	mov qword [free_var_44], rax
  7893 000056EF 48B8-                   	mov rax, sob_void
  7893 000056F1 [0000000000000000] 
  7894                                  
  7895 000056F9 4889C7                  	mov rdi, rax
  7896 000056FC E83F140000              	call print_sexpr_if_not_void
  7897                                  	; preparing a non-tail-call
  7898 00005701 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7899 00005706 E8E0110000              	call malloc
  7900 0000570B 50                      	push rax
  7901 0000570C BF00000000              	mov rdi, 8 * 0	; new rib
  7902 00005711 E8D5110000              	call malloc
  7903 00005716 50                      	push rax
  7904 00005717 BF08000000              	mov rdi, 8 * 1	; extended env
  7905 0000571C E8CA110000              	call malloc
  7906 00005721 488B7D10                	mov rdi, ENV
  7907 00005725 BE00000000              	mov rsi, 0
  7908 0000572A BA01000000              	mov rdx, 1
  7909                                  .L_lambda_simple_env_loop_0034:	; ext_env[i + 1] <-- env[i]
  7910 0000572F 4883FE00                	cmp rsi, 0
  7911 00005733 7410                    	je .L_lambda_simple_env_end_0034
  7912 00005735 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7913 00005739 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7914 0000573D 48FFC6                  	inc rsi
  7915 00005740 48FFC2                  	inc rdx
  7916 00005743 EBEA                    	jmp .L_lambda_simple_env_loop_0034
  7917                                  .L_lambda_simple_env_end_0034:
  7918 00005745 5B                      	pop rbx
  7919 00005746 BE00000000              	mov rsi, 0
  7920                                  .L_lambda_simple_params_loop_0034:	; copy params
  7921 0000574B 4883FE00                	cmp rsi, 0
  7922 0000574F 740E                    	je .L_lambda_simple_params_end_0034
  7923 00005751 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7924 00005756 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7925 0000575A 48FFC6                  	inc rsi
  7926 0000575D EBEC                    	jmp .L_lambda_simple_params_loop_0034
  7927                                  .L_lambda_simple_params_end_0034:
  7928 0000575F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7929 00005762 4889C3                  	mov rbx, rax
  7930 00005765 58                      	pop rax
  7931 00005766 C60004                  	mov byte [rax], T_closure
  7932 00005769 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7933 0000576D 48C74009[7A570000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0034
  7934 00005775 E992000000              	jmp .L_lambda_simple_end_0034
  7935                                  .L_lambda_simple_code_0034:	; lambda-simple body
  7936 0000577A 48837C241000            	cmp qword [rsp + 8 * 2], 0
  7937 00005780 740B                    	je .L_lambda_simple_arity_check_ok_0034
  7938 00005782 FF742410                	push qword [rsp + 8 * 2]
  7939 00005786 6A00                    	push 0
  7940 00005788 E917110000              	jmp L_error_incorrect_arity_simple
  7941                                  .L_lambda_simple_arity_check_ok_0034:
  7942 0000578D C8000000                	enter 0, 0
  7943                                  	; preparing a tail-call
  7944 00005791 48B8-                   	mov rax, L_constants + 2187
  7944 00005793 [8B08000000000000] 
  7945 0000579B 50                      	push rax
  7946 0000579C 48B8-                   	mov rax, L_constants + 2178
  7946 0000579E [8208000000000000] 
  7947 000057A6 50                      	push rax
  7948 000057A7 6A02                    	push 2	; arg count
  7949 000057A9 488B0425[E00B0000]      	mov rax, qword [free_var_42]	; free var error
  7950 000057B1 803805                  	cmp byte [rax], T_undefined
  7951 000057B4 0F8404100000            	je L_error_fvar_undefined
  7952 000057BA 803804                  	cmp byte [rax], T_closure
  7953 000057BD 0F857F100000            	jne L_error_non_closure
  7954 000057C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7955 000057C6 FF7508                  	push qword [rbp + 8 * 1]
  7956                                   ; old ret addr
  7957 000057C9 FF7500                  	push qword [rbp]
  7958                                   ; restore the old rbp
  7959 000057CC BB02000000              	mov rbx, 2
  7960 000057D1 4883C303                	add rbx, 3
  7961 000057D5 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  7962 000057D9 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  7963 000057DE 4C8D4DF8                	lea r9, [rbp - 8]
  7964 000057E2 B906000000              	mov rcx, 6
  7965                                  .L_tc_recycle_frame_loop_0035:
  7966 000057E7 4883F900                	cmp rcx, 0
  7967 000057EB 7413                    	je .L_tc_recycle_frame_done_0035
  7968 000057ED 4D8B11                  	mov r10, qword [r9]
  7969 000057F0 4D8910                  	mov qword [r8], r10
  7970 000057F3 4983E808                	sub r8, 8
  7971 000057F7 4983E908                	sub r9, 8
  7972 000057FB 48FFC9                  	dec rcx
  7973 000057FE EBE7                    	jmp .L_tc_recycle_frame_loop_0035
  7974                                  .L_tc_recycle_frame_done_0035:
  7975 00005800 498D6008                	lea rsp, [r8 + 8]
  7976 00005804 5D                      	pop rbp ; restore the old rbp
  7977 00005805 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7978 00005808 C9                      	leave
  7979 00005809 C21000                  	ret AND_KILL_FRAME(0)
  7980                                  .L_lambda_simple_end_0034:	; new closure is in rax
  7981 0000580C 50                      	push rax
  7982 0000580D 6A01                    	push 1	; arg count
  7983 0000580F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7984 00005814 E8D2100000              	call malloc
  7985 00005819 50                      	push rax
  7986 0000581A BF00000000              	mov rdi, 8 * 0	; new rib
  7987 0000581F E8C7100000              	call malloc
  7988 00005824 50                      	push rax
  7989 00005825 BF08000000              	mov rdi, 8 * 1	; extended env
  7990 0000582A E8BC100000              	call malloc
  7991 0000582F 488B7D10                	mov rdi, ENV
  7992 00005833 BE00000000              	mov rsi, 0
  7993 00005838 BA01000000              	mov rdx, 1
  7994                                  .L_lambda_simple_env_loop_0035:	; ext_env[i + 1] <-- env[i]
  7995 0000583D 4883FE00                	cmp rsi, 0
  7996 00005841 7410                    	je .L_lambda_simple_env_end_0035
  7997 00005843 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7998 00005847 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7999 0000584B 48FFC6                  	inc rsi
  8000 0000584E 48FFC2                  	inc rdx
  8001 00005851 EBEA                    	jmp .L_lambda_simple_env_loop_0035
  8002                                  .L_lambda_simple_env_end_0035:
  8003 00005853 5B                      	pop rbx
  8004 00005854 BE00000000              	mov rsi, 0
  8005                                  .L_lambda_simple_params_loop_0035:	; copy params
  8006 00005859 4883FE00                	cmp rsi, 0
  8007 0000585D 740E                    	je .L_lambda_simple_params_end_0035
  8008 0000585F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8009 00005864 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8010 00005868 48FFC6                  	inc rsi
  8011 0000586B EBEC                    	jmp .L_lambda_simple_params_loop_0035
  8012                                  .L_lambda_simple_params_end_0035:
  8013 0000586D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8014 00005870 4889C3                  	mov rbx, rax
  8015 00005873 58                      	pop rax
  8016 00005874 C60004                  	mov byte [rax], T_closure
  8017 00005877 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8018 0000587B 48C74009[88580000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0035
  8019 00005883 E9050C0000              	jmp .L_lambda_simple_end_0035
  8020                                  .L_lambda_simple_code_0035:	; lambda-simple body
  8021 00005888 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8022 0000588E 740B                    	je .L_lambda_simple_arity_check_ok_0035
  8023 00005890 FF742410                	push qword [rsp + 8 * 2]
  8024 00005894 6A01                    	push 1
  8025 00005896 E909100000              	jmp L_error_incorrect_arity_simple
  8026                                  .L_lambda_simple_arity_check_ok_0035:
  8027 0000589B C8000000                	enter 0, 0
  8028                                  	; preparing a tail-call
  8029 0000589F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8030 000058A4 E842100000              	call malloc
  8031 000058A9 50                      	push rax
  8032 000058AA BF08000000              	mov rdi, 8 * 1	; new rib
  8033 000058AF E837100000              	call malloc
  8034 000058B4 50                      	push rax
  8035 000058B5 BF10000000              	mov rdi, 8 * 2	; extended env
  8036 000058BA E82C100000              	call malloc
  8037 000058BF 488B7D10                	mov rdi, ENV
  8038 000058C3 BE00000000              	mov rsi, 0
  8039 000058C8 BA01000000              	mov rdx, 1
  8040                                  .L_lambda_simple_env_loop_0036:	; ext_env[i + 1] <-- env[i]
  8041 000058CD 4883FE01                	cmp rsi, 1
  8042 000058D1 7410                    	je .L_lambda_simple_env_end_0036
  8043 000058D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8044 000058D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8045 000058DB 48FFC6                  	inc rsi
  8046 000058DE 48FFC2                  	inc rdx
  8047 000058E1 EBEA                    	jmp .L_lambda_simple_env_loop_0036
  8048                                  .L_lambda_simple_env_end_0036:
  8049 000058E3 5B                      	pop rbx
  8050 000058E4 BE00000000              	mov rsi, 0
  8051                                  .L_lambda_simple_params_loop_0036:	; copy params
  8052 000058E9 4883FE01                	cmp rsi, 1
  8053 000058ED 740E                    	je .L_lambda_simple_params_end_0036
  8054 000058EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8055 000058F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8056 000058F8 48FFC6                  	inc rsi
  8057 000058FB EBEC                    	jmp .L_lambda_simple_params_loop_0036
  8058                                  .L_lambda_simple_params_end_0036:
  8059 000058FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8060 00005900 4889C3                  	mov rbx, rax
  8061 00005903 58                      	pop rax
  8062 00005904 C60004                  	mov byte [rax], T_closure
  8063 00005907 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8064 0000590B 48C74009[18590000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0036
  8065 00005913 E9A0080000              	jmp .L_lambda_simple_end_0036
  8066                                  .L_lambda_simple_code_0036:	; lambda-simple body
  8067 00005918 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8068 0000591E 740B                    	je .L_lambda_simple_arity_check_ok_0036
  8069 00005920 FF742410                	push qword [rsp + 8 * 2]
  8070 00005924 6A02                    	push 2
  8071 00005926 E9790F0000              	jmp L_error_incorrect_arity_simple
  8072                                  .L_lambda_simple_arity_check_ok_0036:
  8073 0000592B C8000000                	enter 0, 0
  8074                                  	; preparing a non-tail-call
  8075 0000592F 488B4520                	mov rax, PARAM(0)	; param a
  8076 00005933 50                      	push rax
  8077 00005934 6A01                    	push 1	; arg count
  8078 00005936 488B0425[680C0000]      	mov rax, qword [free_var_50]	; free var integer?
  8079 0000593E 803805                  	cmp byte [rax], T_undefined
  8080 00005941 0F84770E0000            	je L_error_fvar_undefined
  8081 00005947 803804                  	cmp byte [rax], T_closure
  8082 0000594A 0F85F20E0000            	jne L_error_non_closure
  8083 00005950 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8084 00005953 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8085 00005956 483D[02000000]          	cmp rax, sob_boolean_false
  8086 0000595C 0F8487020000            	je .L_if_else_001c
  8087                                  	; preparing a non-tail-call
  8088 00005962 488B4528                	mov rax, PARAM(1)	; param b
  8089 00005966 50                      	push rax
  8090 00005967 6A01                    	push 1	; arg count
  8091 00005969 488B0425[680C0000]      	mov rax, qword [free_var_50]	; free var integer?
  8092 00005971 803805                  	cmp byte [rax], T_undefined
  8093 00005974 0F84440E0000            	je L_error_fvar_undefined
  8094 0000597A 803804                  	cmp byte [rax], T_closure
  8095 0000597D 0F85BF0E0000            	jne L_error_non_closure
  8096 00005983 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8097 00005986 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8098 00005989 483D[02000000]          	cmp rax, sob_boolean_false
  8099 0000598F 7470                    	je .L_if_else_0013
  8100                                  	; preparing a tail-call
  8101 00005991 488B4528                	mov rax, PARAM(1)	; param b
  8102 00005995 50                      	push rax
  8103 00005996 488B4520                	mov rax, PARAM(0)	; param a
  8104 0000599A 50                      	push rax
  8105 0000599B 6A02                    	push 2	; arg count
  8106 0000599D 488B0425[49090000]      	mov rax, qword [free_var_3]	; free var __bin-add-zz
  8107 000059A5 803805                  	cmp byte [rax], T_undefined
  8108 000059A8 0F84100E0000            	je L_error_fvar_undefined
  8109 000059AE 803804                  	cmp byte [rax], T_closure
  8110 000059B1 0F858B0E0000            	jne L_error_non_closure
  8111 000059B7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8112 000059BA FF7508                  	push qword [rbp + 8 * 1]
  8113                                   ; old ret addr
  8114 000059BD FF7500                  	push qword [rbp]
  8115                                   ; restore the old rbp
  8116 000059C0 BB02000000              	mov rbx, 2
  8117 000059C5 4883C303                	add rbx, 3
  8118 000059C9 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  8119 000059CD 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  8120 000059D2 4C8D4DF8                	lea r9, [rbp - 8]
  8121 000059D6 B906000000              	mov rcx, 6
  8122                                  .L_tc_recycle_frame_loop_0037:
  8123 000059DB 4883F900                	cmp rcx, 0
  8124 000059DF 7413                    	je .L_tc_recycle_frame_done_0037
  8125 000059E1 4D8B11                  	mov r10, qword [r9]
  8126 000059E4 4D8910                  	mov qword [r8], r10
  8127 000059E7 4983E808                	sub r8, 8
  8128 000059EB 4983E908                	sub r9, 8
  8129 000059EF 48FFC9                  	dec rcx
  8130 000059F2 EBE7                    	jmp .L_tc_recycle_frame_loop_0037
  8131                                  .L_tc_recycle_frame_done_0037:
  8132 000059F4 498D6008                	lea rsp, [r8 + 8]
  8133 000059F8 5D                      	pop rbp ; restore the old rbp
  8134 000059F9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8135 000059FC E9E3010000              	jmp .L_if_end_0013
  8136                                  .L_if_else_0013:
  8137                                  	; preparing a non-tail-call
  8138 00005A01 488B4528                	mov rax, PARAM(1)	; param b
  8139 00005A05 50                      	push rax
  8140 00005A06 6A01                    	push 1	; arg count
  8141 00005A08 488B0425[240C0000]      	mov rax, qword [free_var_46]	; free var fraction?
  8142 00005A10 803805                  	cmp byte [rax], T_undefined
  8143 00005A13 0F84A50D0000            	je L_error_fvar_undefined
  8144 00005A19 803804                  	cmp byte [rax], T_closure
  8145 00005A1C 0F85200E0000            	jne L_error_non_closure
  8146 00005A22 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8147 00005A25 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8148 00005A28 483D[02000000]          	cmp rax, sob_boolean_false
  8149 00005A2E 0F8493000000            	je .L_if_else_0012
  8150                                  	; preparing a tail-call
  8151 00005A34 488B4528                	mov rax, PARAM(1)	; param b
  8152 00005A38 50                      	push rax
  8153                                  	; preparing a non-tail-call
  8154 00005A39 488B4520                	mov rax, PARAM(0)	; param a
  8155 00005A3D 50                      	push rax
  8156 00005A3E 6A01                    	push 1	; arg count
  8157 00005A40 488B0425[7C090000]      	mov rax, qword [free_var_6]	; free var __integer-to-fraction
  8158 00005A48 803805                  	cmp byte [rax], T_undefined
  8159 00005A4B 0F846D0D0000            	je L_error_fvar_undefined
  8160 00005A51 803804                  	cmp byte [rax], T_closure
  8161 00005A54 0F85E80D0000            	jne L_error_non_closure
  8162 00005A5A FF7001                  	push SOB_CLOSURE_ENV(rax)
  8163 00005A5D FF5009                  	call SOB_CLOSURE_CODE(rax)
  8164 00005A60 50                      	push rax
  8165 00005A61 6A02                    	push 2	; arg count
  8166 00005A63 488B0425[27090000]      	mov rax, qword [free_var_1]	; free var __bin-add-qq
  8167 00005A6B 803805                  	cmp byte [rax], T_undefined
  8168 00005A6E 0F844A0D0000            	je L_error_fvar_undefined
  8169 00005A74 803804                  	cmp byte [rax], T_closure
  8170 00005A77 0F85C50D0000            	jne L_error_non_closure
  8171 00005A7D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8172 00005A80 FF7508                  	push qword [rbp + 8 * 1]
  8173                                   ; old ret addr
  8174 00005A83 FF7500                  	push qword [rbp]
  8175                                   ; restore the old rbp
  8176 00005A86 BB02000000              	mov rbx, 2
  8177 00005A8B 4883C303                	add rbx, 3
  8178 00005A8F 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  8179 00005A93 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  8180 00005A98 4C8D4DF8                	lea r9, [rbp - 8]
  8181 00005A9C B906000000              	mov rcx, 6
  8182                                  .L_tc_recycle_frame_loop_0038:
  8183 00005AA1 4883F900                	cmp rcx, 0
  8184 00005AA5 7413                    	je .L_tc_recycle_frame_done_0038
  8185 00005AA7 4D8B11                  	mov r10, qword [r9]
  8186 00005AAA 4D8910                  	mov qword [r8], r10
  8187 00005AAD 4983E808                	sub r8, 8
  8188 00005AB1 4983E908                	sub r9, 8
  8189 00005AB5 48FFC9                  	dec rcx
  8190 00005AB8 EBE7                    	jmp .L_tc_recycle_frame_loop_0038
  8191                                  .L_tc_recycle_frame_done_0038:
  8192 00005ABA 498D6008                	lea rsp, [r8 + 8]
  8193 00005ABE 5D                      	pop rbp ; restore the old rbp
  8194 00005ABF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8195 00005AC2 E91D010000              	jmp .L_if_end_0012
  8196                                  .L_if_else_0012:
  8197                                  	; preparing a non-tail-call
  8198 00005AC7 488B4528                	mov rax, PARAM(1)	; param b
  8199 00005ACB 50                      	push rax
  8200 00005ACC 6A01                    	push 1	; arg count
  8201 00005ACE 488B0425[120D0000]      	mov rax, qword [free_var_60]	; free var real?
  8202 00005AD6 803805                  	cmp byte [rax], T_undefined
  8203 00005AD9 0F84DF0C0000            	je L_error_fvar_undefined
  8204 00005ADF 803804                  	cmp byte [rax], T_closure
  8205 00005AE2 0F855A0D0000            	jne L_error_non_closure
  8206 00005AE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8207 00005AEB FF5009                  	call SOB_CLOSURE_CODE(rax)
  8208 00005AEE 483D[02000000]          	cmp rax, sob_boolean_false
  8209 00005AF4 0F8490000000            	je .L_if_else_0011
  8210                                  	; preparing a tail-call
  8211 00005AFA 488B4528                	mov rax, PARAM(1)	; param b
  8212 00005AFE 50                      	push rax
  8213                                  	; preparing a non-tail-call
  8214 00005AFF 488B4520                	mov rax, PARAM(0)	; param a
  8215 00005B03 50                      	push rax
  8216 00005B04 6A01                    	push 1	; arg count
  8217 00005B06 488B0425[570C0000]      	mov rax, qword [free_var_49]	; free var integer->real
  8218 00005B0E 803805                  	cmp byte [rax], T_undefined
  8219 00005B11 0F84A70C0000            	je L_error_fvar_undefined
  8220 00005B17 803804                  	cmp byte [rax], T_closure
  8221 00005B1A 0F85220D0000            	jne L_error_non_closure
  8222 00005B20 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8223 00005B23 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8224 00005B26 50                      	push rax
  8225 00005B27 6A02                    	push 2	; arg count
  8226 00005B29 488B0425[38090000]      	mov rax, qword [free_var_2]	; free var __bin-add-rr
  8227 00005B31 803805                  	cmp byte [rax], T_undefined
  8228 00005B34 0F84840C0000            	je L_error_fvar_undefined
  8229 00005B3A 803804                  	cmp byte [rax], T_closure
  8230 00005B3D 0F85FF0C0000            	jne L_error_non_closure
  8231 00005B43 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8232 00005B46 FF7508                  	push qword [rbp + 8 * 1]
  8233                                   ; old ret addr
  8234 00005B49 FF7500                  	push qword [rbp]
  8235                                   ; restore the old rbp
  8236 00005B4C BB02000000              	mov rbx, 2
  8237 00005B51 4883C303                	add rbx, 3
  8238 00005B55 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  8239 00005B59 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  8240 00005B5E 4C8D4DF8                	lea r9, [rbp - 8]
  8241 00005B62 B906000000              	mov rcx, 6
  8242                                  .L_tc_recycle_frame_loop_0039:
  8243 00005B67 4883F900                	cmp rcx, 0
  8244 00005B6B 7413                    	je .L_tc_recycle_frame_done_0039
  8245 00005B6D 4D8B11                  	mov r10, qword [r9]
  8246 00005B70 4D8910                  	mov qword [r8], r10
  8247 00005B73 4983E808                	sub r8, 8
  8248 00005B77 4983E908                	sub r9, 8
  8249 00005B7B 48FFC9                  	dec rcx
  8250 00005B7E EBE7                    	jmp .L_tc_recycle_frame_loop_0039
  8251                                  .L_tc_recycle_frame_done_0039:
  8252 00005B80 498D6008                	lea rsp, [r8 + 8]
  8253 00005B84 5D                      	pop rbp ; restore the old rbp
  8254 00005B85 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8255 00005B88 EB5A                    	jmp .L_if_end_0011
  8256                                  .L_if_else_0011:
  8257                                  	; preparing a tail-call
  8258 00005B8A 6A00                    	push 0	; arg count
  8259 00005B8C 488B4510                	mov rax, ENV
  8260 00005B90 488B00                  	mov rax, qword [rax + 8 * 0]
  8261 00005B93 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  8262 00005B96 803804                  	cmp byte [rax], T_closure
  8263 00005B99 0F85A30C0000            	jne L_error_non_closure
  8264 00005B9F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8265 00005BA2 FF7508                  	push qword [rbp + 8 * 1]
  8266                                   ; old ret addr
  8267 00005BA5 FF7500                  	push qword [rbp]
  8268                                   ; restore the old rbp
  8269 00005BA8 BB00000000              	mov rbx, 0
  8270 00005BAD 4883C303                	add rbx, 3
  8271 00005BB1 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  8272 00005BB5 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  8273 00005BBA 4C8D4DF8                	lea r9, [rbp - 8]
  8274 00005BBE B904000000              	mov rcx, 4
  8275                                  .L_tc_recycle_frame_loop_003a:
  8276 00005BC3 4883F900                	cmp rcx, 0
  8277 00005BC7 7413                    	je .L_tc_recycle_frame_done_003a
  8278 00005BC9 4D8B11                  	mov r10, qword [r9]
  8279 00005BCC 4D8910                  	mov qword [r8], r10
  8280 00005BCF 4983E808                	sub r8, 8
  8281 00005BD3 4983E908                	sub r9, 8
  8282 00005BD7 48FFC9                  	dec rcx
  8283 00005BDA EBE7                    	jmp .L_tc_recycle_frame_loop_003a
  8284                                  .L_tc_recycle_frame_done_003a:
  8285 00005BDC 498D6008                	lea rsp, [r8 + 8]
  8286 00005BE0 5D                      	pop rbp ; restore the old rbp
  8287 00005BE1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8288                                  .L_if_end_0011:
  8289                                  .L_if_end_0012:
  8290                                  .L_if_end_0013:
  8291 00005BE4 E9CB050000              	jmp .L_if_end_001c
  8292                                  .L_if_else_001c:
  8293                                  	; preparing a non-tail-call
  8294 00005BE9 488B4520                	mov rax, PARAM(0)	; param a
  8295 00005BED 50                      	push rax
  8296 00005BEE 6A01                    	push 1	; arg count
  8297 00005BF0 488B0425[240C0000]      	mov rax, qword [free_var_46]	; free var fraction?
  8298 00005BF8 803805                  	cmp byte [rax], T_undefined
  8299 00005BFB 0F84BD0B0000            	je L_error_fvar_undefined
  8300 00005C01 803804                  	cmp byte [rax], T_closure
  8301 00005C04 0F85380C0000            	jne L_error_non_closure
  8302 00005C0A FF7001                  	push SOB_CLOSURE_ENV(rax)
  8303 00005C0D FF5009                  	call SOB_CLOSURE_CODE(rax)
  8304 00005C10 483D[02000000]          	cmp rax, sob_boolean_false
  8305 00005C16 0F8487020000            	je .L_if_else_001b
  8306                                  	; preparing a non-tail-call
  8307 00005C1C 488B4528                	mov rax, PARAM(1)	; param b
  8308 00005C20 50                      	push rax
  8309 00005C21 6A01                    	push 1	; arg count
  8310 00005C23 488B0425[680C0000]      	mov rax, qword [free_var_50]	; free var integer?
  8311 00005C2B 803805                  	cmp byte [rax], T_undefined
  8312 00005C2E 0F848A0B0000            	je L_error_fvar_undefined
  8313 00005C34 803804                  	cmp byte [rax], T_closure
  8314 00005C37 0F85050C0000            	jne L_error_non_closure
  8315 00005C3D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8316 00005C40 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8317 00005C43 483D[02000000]          	cmp rax, sob_boolean_false
  8318 00005C49 0F8493000000            	je .L_if_else_0016
  8319                                  	; preparing a tail-call
  8320                                  	; preparing a non-tail-call
  8321 00005C4F 488B4528                	mov rax, PARAM(1)	; param b
  8322 00005C53 50                      	push rax
  8323 00005C54 6A01                    	push 1	; arg count
  8324 00005C56 488B0425[6B090000]      	mov rax, qword [free_var_5]	; free var __bin_integer_to_fraction
  8325 00005C5E 803805                  	cmp byte [rax], T_undefined
  8326 00005C61 0F84570B0000            	je L_error_fvar_undefined
  8327 00005C67 803804                  	cmp byte [rax], T_closure
  8328 00005C6A 0F85D20B0000            	jne L_error_non_closure
  8329 00005C70 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8330 00005C73 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8331 00005C76 50                      	push rax
  8332 00005C77 488B4520                	mov rax, PARAM(0)	; param a
  8333 00005C7B 50                      	push rax
  8334 00005C7C 6A02                    	push 2	; arg count
  8335 00005C7E 488B0425[27090000]      	mov rax, qword [free_var_1]	; free var __bin-add-qq
  8336 00005C86 803805                  	cmp byte [rax], T_undefined
  8337 00005C89 0F842F0B0000            	je L_error_fvar_undefined
  8338 00005C8F 803804                  	cmp byte [rax], T_closure
  8339 00005C92 0F85AA0B0000            	jne L_error_non_closure
  8340 00005C98 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8341 00005C9B FF7508                  	push qword [rbp + 8 * 1]
  8342                                   ; old ret addr
  8343 00005C9E FF7500                  	push qword [rbp]
  8344                                   ; restore the old rbp
  8345 00005CA1 BB02000000              	mov rbx, 2
  8346 00005CA6 4883C303                	add rbx, 3
  8347 00005CAA 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  8348 00005CAE 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  8349 00005CB3 4C8D4DF8                	lea r9, [rbp - 8]
  8350 00005CB7 B906000000              	mov rcx, 6
  8351                                  .L_tc_recycle_frame_loop_003b:
  8352 00005CBC 4883F900                	cmp rcx, 0
  8353 00005CC0 7413                    	je .L_tc_recycle_frame_done_003b
  8354 00005CC2 4D8B11                  	mov r10, qword [r9]
  8355 00005CC5 4D8910                  	mov qword [r8], r10
  8356 00005CC8 4983E808                	sub r8, 8
  8357 00005CCC 4983E908                	sub r9, 8
  8358 00005CD0 48FFC9                  	dec rcx
  8359 00005CD3 EBE7                    	jmp .L_tc_recycle_frame_loop_003b
  8360                                  .L_tc_recycle_frame_done_003b:
  8361 00005CD5 498D6008                	lea rsp, [r8 + 8]
  8362 00005CD9 5D                      	pop rbp ; restore the old rbp
  8363 00005CDA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8364 00005CDD E9BC010000              	jmp .L_if_end_0016
  8365                                  .L_if_else_0016:
  8366                                  	; preparing a non-tail-call
  8367 00005CE2 488B4528                	mov rax, PARAM(1)	; param b
  8368 00005CE6 50                      	push rax
  8369 00005CE7 6A01                    	push 1	; arg count
  8370 00005CE9 488B0425[240C0000]      	mov rax, qword [free_var_46]	; free var fraction?
  8371 00005CF1 803805                  	cmp byte [rax], T_undefined
  8372 00005CF4 0F84C40A0000            	je L_error_fvar_undefined
  8373 00005CFA 803804                  	cmp byte [rax], T_closure
  8374 00005CFD 0F853F0B0000            	jne L_error_non_closure
  8375 00005D03 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8376 00005D06 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8377 00005D09 483D[02000000]          	cmp rax, sob_boolean_false
  8378 00005D0F 7470                    	je .L_if_else_0015
  8379                                  	; preparing a tail-call
  8380 00005D11 488B4528                	mov rax, PARAM(1)	; param b
  8381 00005D15 50                      	push rax
  8382 00005D16 488B4520                	mov rax, PARAM(0)	; param a
  8383 00005D1A 50                      	push rax
  8384 00005D1B 6A02                    	push 2	; arg count
  8385 00005D1D 488B0425[27090000]      	mov rax, qword [free_var_1]	; free var __bin-add-qq
  8386 00005D25 803805                  	cmp byte [rax], T_undefined
  8387 00005D28 0F84900A0000            	je L_error_fvar_undefined
  8388 00005D2E 803804                  	cmp byte [rax], T_closure
  8389 00005D31 0F850B0B0000            	jne L_error_non_closure
  8390 00005D37 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8391 00005D3A FF7508                  	push qword [rbp + 8 * 1]
  8392                                   ; old ret addr
  8393 00005D3D FF7500                  	push qword [rbp]
  8394                                   ; restore the old rbp
  8395 00005D40 BB02000000              	mov rbx, 2
  8396 00005D45 4883C303                	add rbx, 3
  8397 00005D49 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  8398 00005D4D 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  8399 00005D52 4C8D4DF8                	lea r9, [rbp - 8]
  8400 00005D56 B906000000              	mov rcx, 6
  8401                                  .L_tc_recycle_frame_loop_003c:
  8402 00005D5B 4883F900                	cmp rcx, 0
  8403 00005D5F 7413                    	je .L_tc_recycle_frame_done_003c
  8404 00005D61 4D8B11                  	mov r10, qword [r9]
  8405 00005D64 4D8910                  	mov qword [r8], r10
  8406 00005D67 4983E808                	sub r8, 8
  8407 00005D6B 4983E908                	sub r9, 8
  8408 00005D6F 48FFC9                  	dec rcx
  8409 00005D72 EBE7                    	jmp .L_tc_recycle_frame_loop_003c
  8410                                  .L_tc_recycle_frame_done_003c:
  8411 00005D74 498D6008                	lea rsp, [r8 + 8]
  8412 00005D78 5D                      	pop rbp ; restore the old rbp
  8413 00005D79 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8414 00005D7C E91D010000              	jmp .L_if_end_0015
  8415                                  .L_if_else_0015:
  8416                                  	; preparing a non-tail-call
  8417 00005D81 488B4528                	mov rax, PARAM(1)	; param b
  8418 00005D85 50                      	push rax
  8419 00005D86 6A01                    	push 1	; arg count
  8420 00005D88 488B0425[120D0000]      	mov rax, qword [free_var_60]	; free var real?
  8421 00005D90 803805                  	cmp byte [rax], T_undefined
  8422 00005D93 0F84250A0000            	je L_error_fvar_undefined
  8423 00005D99 803804                  	cmp byte [rax], T_closure
  8424 00005D9C 0F85A00A0000            	jne L_error_non_closure
  8425 00005DA2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8426 00005DA5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8427 00005DA8 483D[02000000]          	cmp rax, sob_boolean_false
  8428 00005DAE 0F8490000000            	je .L_if_else_0014
  8429                                  	; preparing a tail-call
  8430 00005DB4 488B4528                	mov rax, PARAM(1)	; param b
  8431 00005DB8 50                      	push rax
  8432                                  	; preparing a non-tail-call
  8433 00005DB9 488B4520                	mov rax, PARAM(0)	; param a
  8434 00005DBD 50                      	push rax
  8435 00005DBE 6A01                    	push 1	; arg count
  8436 00005DC0 488B0425[130C0000]      	mov rax, qword [free_var_45]	; free var fraction->real
  8437 00005DC8 803805                  	cmp byte [rax], T_undefined
  8438 00005DCB 0F84ED090000            	je L_error_fvar_undefined
  8439 00005DD1 803804                  	cmp byte [rax], T_closure
  8440 00005DD4 0F85680A0000            	jne L_error_non_closure
  8441 00005DDA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8442 00005DDD FF5009                  	call SOB_CLOSURE_CODE(rax)
  8443 00005DE0 50                      	push rax
  8444 00005DE1 6A02                    	push 2	; arg count
  8445 00005DE3 488B0425[38090000]      	mov rax, qword [free_var_2]	; free var __bin-add-rr
  8446 00005DEB 803805                  	cmp byte [rax], T_undefined
  8447 00005DEE 0F84CA090000            	je L_error_fvar_undefined
  8448 00005DF4 803804                  	cmp byte [rax], T_closure
  8449 00005DF7 0F85450A0000            	jne L_error_non_closure
  8450 00005DFD FF7001                  	push SOB_CLOSURE_ENV(rax)
  8451 00005E00 FF7508                  	push qword [rbp + 8 * 1]
  8452                                   ; old ret addr
  8453 00005E03 FF7500                  	push qword [rbp]
  8454                                   ; restore the old rbp
  8455 00005E06 BB02000000              	mov rbx, 2
  8456 00005E0B 4883C303                	add rbx, 3
  8457 00005E0F 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  8458 00005E13 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  8459 00005E18 4C8D4DF8                	lea r9, [rbp - 8]
  8460 00005E1C B906000000              	mov rcx, 6
  8461                                  .L_tc_recycle_frame_loop_003d:
  8462 00005E21 4883F900                	cmp rcx, 0
  8463 00005E25 7413                    	je .L_tc_recycle_frame_done_003d
  8464 00005E27 4D8B11                  	mov r10, qword [r9]
  8465 00005E2A 4D8910                  	mov qword [r8], r10
  8466 00005E2D 4983E808                	sub r8, 8
  8467 00005E31 4983E908                	sub r9, 8
  8468 00005E35 48FFC9                  	dec rcx
  8469 00005E38 EBE7                    	jmp .L_tc_recycle_frame_loop_003d
  8470                                  .L_tc_recycle_frame_done_003d:
  8471 00005E3A 498D6008                	lea rsp, [r8 + 8]
  8472 00005E3E 5D                      	pop rbp ; restore the old rbp
  8473 00005E3F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8474 00005E42 EB5A                    	jmp .L_if_end_0014
  8475                                  .L_if_else_0014:
  8476                                  	; preparing a tail-call
  8477 00005E44 6A00                    	push 0	; arg count
  8478 00005E46 488B4510                	mov rax, ENV
  8479 00005E4A 488B00                  	mov rax, qword [rax + 8 * 0]
  8480 00005E4D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  8481 00005E50 803804                  	cmp byte [rax], T_closure
  8482 00005E53 0F85E9090000            	jne L_error_non_closure
  8483 00005E59 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8484 00005E5C FF7508                  	push qword [rbp + 8 * 1]
  8485                                   ; old ret addr
  8486 00005E5F FF7500                  	push qword [rbp]
  8487                                   ; restore the old rbp
  8488 00005E62 BB00000000              	mov rbx, 0
  8489 00005E67 4883C303                	add rbx, 3
  8490 00005E6B 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  8491 00005E6F 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  8492 00005E74 4C8D4DF8                	lea r9, [rbp - 8]
  8493 00005E78 B904000000              	mov rcx, 4
  8494                                  .L_tc_recycle_frame_loop_003e:
  8495 00005E7D 4883F900                	cmp rcx, 0
  8496 00005E81 7413                    	je .L_tc_recycle_frame_done_003e
  8497 00005E83 4D8B11                  	mov r10, qword [r9]
  8498 00005E86 4D8910                  	mov qword [r8], r10
  8499 00005E89 4983E808                	sub r8, 8
  8500 00005E8D 4983E908                	sub r9, 8
  8501 00005E91 48FFC9                  	dec rcx
  8502 00005E94 EBE7                    	jmp .L_tc_recycle_frame_loop_003e
  8503                                  .L_tc_recycle_frame_done_003e:
  8504 00005E96 498D6008                	lea rsp, [r8 + 8]
  8505 00005E9A 5D                      	pop rbp ; restore the old rbp
  8506 00005E9B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8507                                  .L_if_end_0014:
  8508                                  .L_if_end_0015:
  8509                                  .L_if_end_0016:
  8510 00005E9E E911030000              	jmp .L_if_end_001b
  8511                                  .L_if_else_001b:
  8512                                  	; preparing a non-tail-call
  8513 00005EA3 488B4520                	mov rax, PARAM(0)	; param a
  8514 00005EA7 50                      	push rax
  8515 00005EA8 6A01                    	push 1	; arg count
  8516 00005EAA 488B0425[120D0000]      	mov rax, qword [free_var_60]	; free var real?
  8517 00005EB2 803805                  	cmp byte [rax], T_undefined
  8518 00005EB5 0F8403090000            	je L_error_fvar_undefined
  8519 00005EBB 803804                  	cmp byte [rax], T_closure
  8520 00005EBE 0F857E090000            	jne L_error_non_closure
  8521 00005EC4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8522 00005EC7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8523 00005ECA 483D[02000000]          	cmp rax, sob_boolean_false
  8524 00005ED0 0F8484020000            	je .L_if_else_001a
  8525                                  	; preparing a non-tail-call
  8526 00005ED6 488B4528                	mov rax, PARAM(1)	; param b
  8527 00005EDA 50                      	push rax
  8528 00005EDB 6A01                    	push 1	; arg count
  8529 00005EDD 488B0425[680C0000]      	mov rax, qword [free_var_50]	; free var integer?
  8530 00005EE5 803805                  	cmp byte [rax], T_undefined
  8531 00005EE8 0F84D0080000            	je L_error_fvar_undefined
  8532 00005EEE 803804                  	cmp byte [rax], T_closure
  8533 00005EF1 0F854B090000            	jne L_error_non_closure
  8534 00005EF7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8535 00005EFA FF5009                  	call SOB_CLOSURE_CODE(rax)
  8536 00005EFD 483D[02000000]          	cmp rax, sob_boolean_false
  8537 00005F03 0F8493000000            	je .L_if_else_0019
  8538                                  	; preparing a tail-call
  8539                                  	; preparing a non-tail-call
  8540 00005F09 488B4528                	mov rax, PARAM(1)	; param b
  8541 00005F0D 50                      	push rax
  8542 00005F0E 6A01                    	push 1	; arg count
  8543 00005F10 488B0425[570C0000]      	mov rax, qword [free_var_49]	; free var integer->real
  8544 00005F18 803805                  	cmp byte [rax], T_undefined
  8545 00005F1B 0F849D080000            	je L_error_fvar_undefined
  8546 00005F21 803804                  	cmp byte [rax], T_closure
  8547 00005F24 0F8518090000            	jne L_error_non_closure
  8548 00005F2A FF7001                  	push SOB_CLOSURE_ENV(rax)
  8549 00005F2D FF5009                  	call SOB_CLOSURE_CODE(rax)
  8550 00005F30 50                      	push rax
  8551 00005F31 488B4520                	mov rax, PARAM(0)	; param a
  8552 00005F35 50                      	push rax
  8553 00005F36 6A02                    	push 2	; arg count
  8554 00005F38 488B0425[38090000]      	mov rax, qword [free_var_2]	; free var __bin-add-rr
  8555 00005F40 803805                  	cmp byte [rax], T_undefined
  8556 00005F43 0F8475080000            	je L_error_fvar_undefined
  8557 00005F49 803804                  	cmp byte [rax], T_closure
  8558 00005F4C 0F85F0080000            	jne L_error_non_closure
  8559 00005F52 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8560 00005F55 FF7508                  	push qword [rbp + 8 * 1]
  8561                                   ; old ret addr
  8562 00005F58 FF7500                  	push qword [rbp]
  8563                                   ; restore the old rbp
  8564 00005F5B BB02000000              	mov rbx, 2
  8565 00005F60 4883C303                	add rbx, 3
  8566 00005F64 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  8567 00005F68 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  8568 00005F6D 4C8D4DF8                	lea r9, [rbp - 8]
  8569 00005F71 B906000000              	mov rcx, 6
  8570                                  .L_tc_recycle_frame_loop_003f:
  8571 00005F76 4883F900                	cmp rcx, 0
  8572 00005F7A 7413                    	je .L_tc_recycle_frame_done_003f
  8573 00005F7C 4D8B11                  	mov r10, qword [r9]
  8574 00005F7F 4D8910                  	mov qword [r8], r10
  8575 00005F82 4983E808                	sub r8, 8
  8576 00005F86 4983E908                	sub r9, 8
  8577 00005F8A 48FFC9                  	dec rcx
  8578 00005F8D EBE7                    	jmp .L_tc_recycle_frame_loop_003f
  8579                                  .L_tc_recycle_frame_done_003f:
  8580 00005F8F 498D6008                	lea rsp, [r8 + 8]
  8581 00005F93 5D                      	pop rbp ; restore the old rbp
  8582 00005F94 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8583 00005F97 E9BC010000              	jmp .L_if_end_0019
  8584                                  .L_if_else_0019:
  8585                                  	; preparing a non-tail-call
  8586 00005F9C 488B4528                	mov rax, PARAM(1)	; param b
  8587 00005FA0 50                      	push rax
  8588 00005FA1 6A01                    	push 1	; arg count
  8589 00005FA3 488B0425[240C0000]      	mov rax, qword [free_var_46]	; free var fraction?
  8590 00005FAB 803805                  	cmp byte [rax], T_undefined
  8591 00005FAE 0F840A080000            	je L_error_fvar_undefined
  8592 00005FB4 803804                  	cmp byte [rax], T_closure
  8593 00005FB7 0F8585080000            	jne L_error_non_closure
  8594 00005FBD FF7001                  	push SOB_CLOSURE_ENV(rax)
  8595 00005FC0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8596 00005FC3 483D[02000000]          	cmp rax, sob_boolean_false
  8597 00005FC9 0F8493000000            	je .L_if_else_0018
  8598                                  	; preparing a tail-call
  8599                                  	; preparing a non-tail-call
  8600 00005FCF 488B4528                	mov rax, PARAM(1)	; param b
  8601 00005FD3 50                      	push rax
  8602 00005FD4 6A01                    	push 1	; arg count
  8603 00005FD6 488B0425[130C0000]      	mov rax, qword [free_var_45]	; free var fraction->real
  8604 00005FDE 803805                  	cmp byte [rax], T_undefined
  8605 00005FE1 0F84D7070000            	je L_error_fvar_undefined
  8606 00005FE7 803804                  	cmp byte [rax], T_closure
  8607 00005FEA 0F8552080000            	jne L_error_non_closure
  8608 00005FF0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8609 00005FF3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8610 00005FF6 50                      	push rax
  8611 00005FF7 488B4520                	mov rax, PARAM(0)	; param a
  8612 00005FFB 50                      	push rax
  8613 00005FFC 6A02                    	push 2	; arg count
  8614 00005FFE 488B0425[38090000]      	mov rax, qword [free_var_2]	; free var __bin-add-rr
  8615 00006006 803805                  	cmp byte [rax], T_undefined
  8616 00006009 0F84AF070000            	je L_error_fvar_undefined
  8617 0000600F 803804                  	cmp byte [rax], T_closure
  8618 00006012 0F852A080000            	jne L_error_non_closure
  8619 00006018 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8620 0000601B FF7508                  	push qword [rbp + 8 * 1]
  8621                                   ; old ret addr
  8622 0000601E FF7500                  	push qword [rbp]
  8623                                   ; restore the old rbp
  8624 00006021 BB02000000              	mov rbx, 2
  8625 00006026 4883C303                	add rbx, 3
  8626 0000602A 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  8627 0000602E 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  8628 00006033 4C8D4DF8                	lea r9, [rbp - 8]
  8629 00006037 B906000000              	mov rcx, 6
  8630                                  .L_tc_recycle_frame_loop_0040:
  8631 0000603C 4883F900                	cmp rcx, 0
  8632 00006040 7413                    	je .L_tc_recycle_frame_done_0040
  8633 00006042 4D8B11                  	mov r10, qword [r9]
  8634 00006045 4D8910                  	mov qword [r8], r10
  8635 00006048 4983E808                	sub r8, 8
  8636 0000604C 4983E908                	sub r9, 8
  8637 00006050 48FFC9                  	dec rcx
  8638 00006053 EBE7                    	jmp .L_tc_recycle_frame_loop_0040
  8639                                  .L_tc_recycle_frame_done_0040:
  8640 00006055 498D6008                	lea rsp, [r8 + 8]
  8641 00006059 5D                      	pop rbp ; restore the old rbp
  8642 0000605A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8643 0000605D E9F6000000              	jmp .L_if_end_0018
  8644                                  .L_if_else_0018:
  8645                                  	; preparing a non-tail-call
  8646 00006062 488B4528                	mov rax, PARAM(1)	; param b
  8647 00006066 50                      	push rax
  8648 00006067 6A01                    	push 1	; arg count
  8649 00006069 488B0425[120D0000]      	mov rax, qword [free_var_60]	; free var real?
  8650 00006071 803805                  	cmp byte [rax], T_undefined
  8651 00006074 0F8444070000            	je L_error_fvar_undefined
  8652 0000607A 803804                  	cmp byte [rax], T_closure
  8653 0000607D 0F85BF070000            	jne L_error_non_closure
  8654 00006083 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8655 00006086 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8656 00006089 483D[02000000]          	cmp rax, sob_boolean_false
  8657 0000608F 746D                    	je .L_if_else_0017
  8658                                  	; preparing a tail-call
  8659 00006091 488B4528                	mov rax, PARAM(1)	; param b
  8660 00006095 50                      	push rax
  8661 00006096 488B4520                	mov rax, PARAM(0)	; param a
  8662 0000609A 50                      	push rax
  8663 0000609B 6A02                    	push 2	; arg count
  8664 0000609D 488B0425[38090000]      	mov rax, qword [free_var_2]	; free var __bin-add-rr
  8665 000060A5 803805                  	cmp byte [rax], T_undefined
  8666 000060A8 0F8410070000            	je L_error_fvar_undefined
  8667 000060AE 803804                  	cmp byte [rax], T_closure
  8668 000060B1 0F858B070000            	jne L_error_non_closure
  8669 000060B7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8670 000060BA FF7508                  	push qword [rbp + 8 * 1]
  8671                                   ; old ret addr
  8672 000060BD FF7500                  	push qword [rbp]
  8673                                   ; restore the old rbp
  8674 000060C0 BB02000000              	mov rbx, 2
  8675 000060C5 4883C303                	add rbx, 3
  8676 000060C9 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  8677 000060CD 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  8678 000060D2 4C8D4DF8                	lea r9, [rbp - 8]
  8679 000060D6 B906000000              	mov rcx, 6
  8680                                  .L_tc_recycle_frame_loop_0041:
  8681 000060DB 4883F900                	cmp rcx, 0
  8682 000060DF 7413                    	je .L_tc_recycle_frame_done_0041
  8683 000060E1 4D8B11                  	mov r10, qword [r9]
  8684 000060E4 4D8910                  	mov qword [r8], r10
  8685 000060E7 4983E808                	sub r8, 8
  8686 000060EB 4983E908                	sub r9, 8
  8687 000060EF 48FFC9                  	dec rcx
  8688 000060F2 EBE7                    	jmp .L_tc_recycle_frame_loop_0041
  8689                                  .L_tc_recycle_frame_done_0041:
  8690 000060F4 498D6008                	lea rsp, [r8 + 8]
  8691 000060F8 5D                      	pop rbp ; restore the old rbp
  8692 000060F9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8693 000060FC EB5A                    	jmp .L_if_end_0017
  8694                                  .L_if_else_0017:
  8695                                  	; preparing a tail-call
  8696 000060FE 6A00                    	push 0	; arg count
  8697 00006100 488B4510                	mov rax, ENV
  8698 00006104 488B00                  	mov rax, qword [rax + 8 * 0]
  8699 00006107 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  8700 0000610A 803804                  	cmp byte [rax], T_closure
  8701 0000610D 0F852F070000            	jne L_error_non_closure
  8702 00006113 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8703 00006116 FF7508                  	push qword [rbp + 8 * 1]
  8704                                   ; old ret addr
  8705 00006119 FF7500                  	push qword [rbp]
  8706                                   ; restore the old rbp
  8707 0000611C BB00000000              	mov rbx, 0
  8708 00006121 4883C303                	add rbx, 3
  8709 00006125 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  8710 00006129 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  8711 0000612E 4C8D4DF8                	lea r9, [rbp - 8]
  8712 00006132 B904000000              	mov rcx, 4
  8713                                  .L_tc_recycle_frame_loop_0042:
  8714 00006137 4883F900                	cmp rcx, 0
  8715 0000613B 7413                    	je .L_tc_recycle_frame_done_0042
  8716 0000613D 4D8B11                  	mov r10, qword [r9]
  8717 00006140 4D8910                  	mov qword [r8], r10
  8718 00006143 4983E808                	sub r8, 8
  8719 00006147 4983E908                	sub r9, 8
  8720 0000614B 48FFC9                  	dec rcx
  8721 0000614E EBE7                    	jmp .L_tc_recycle_frame_loop_0042
  8722                                  .L_tc_recycle_frame_done_0042:
  8723 00006150 498D6008                	lea rsp, [r8 + 8]
  8724 00006154 5D                      	pop rbp ; restore the old rbp
  8725 00006155 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8726                                  .L_if_end_0017:
  8727                                  .L_if_end_0018:
  8728                                  .L_if_end_0019:
  8729 00006158 EB5A                    	jmp .L_if_end_001a
  8730                                  .L_if_else_001a:
  8731                                  	; preparing a tail-call
  8732 0000615A 6A00                    	push 0	; arg count
  8733 0000615C 488B4510                	mov rax, ENV
  8734 00006160 488B00                  	mov rax, qword [rax + 8 * 0]
  8735 00006163 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  8736 00006166 803804                  	cmp byte [rax], T_closure
  8737 00006169 0F85D3060000            	jne L_error_non_closure
  8738 0000616F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8739 00006172 FF7508                  	push qword [rbp + 8 * 1]
  8740                                   ; old ret addr
  8741 00006175 FF7500                  	push qword [rbp]
  8742                                   ; restore the old rbp
  8743 00006178 BB00000000              	mov rbx, 0
  8744 0000617D 4883C303                	add rbx, 3
  8745 00006181 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  8746 00006185 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  8747 0000618A 4C8D4DF8                	lea r9, [rbp - 8]
  8748 0000618E B904000000              	mov rcx, 4
  8749                                  .L_tc_recycle_frame_loop_0043:
  8750 00006193 4883F900                	cmp rcx, 0
  8751 00006197 7413                    	je .L_tc_recycle_frame_done_0043
  8752 00006199 4D8B11                  	mov r10, qword [r9]
  8753 0000619C 4D8910                  	mov qword [r8], r10
  8754 0000619F 4983E808                	sub r8, 8
  8755 000061A3 4983E908                	sub r9, 8
  8756 000061A7 48FFC9                  	dec rcx
  8757 000061AA EBE7                    	jmp .L_tc_recycle_frame_loop_0043
  8758                                  .L_tc_recycle_frame_done_0043:
  8759 000061AC 498D6008                	lea rsp, [r8 + 8]
  8760 000061B0 5D                      	pop rbp ; restore the old rbp
  8761 000061B1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8762                                  .L_if_end_001a:
  8763                                  .L_if_end_001b:
  8764                                  .L_if_end_001c:
  8765 000061B4 C9                      	leave
  8766 000061B5 C22000                  	ret AND_KILL_FRAME(2)
  8767                                  .L_lambda_simple_end_0036:	; new closure is in rax
  8768 000061B8 50                      	push rax
  8769 000061B9 6A01                    	push 1	; arg count
  8770 000061BB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8771 000061C0 E826070000              	call malloc
  8772 000061C5 50                      	push rax
  8773 000061C6 BF08000000              	mov rdi, 8 * 1	; new rib
  8774 000061CB E81B070000              	call malloc
  8775 000061D0 50                      	push rax
  8776 000061D1 BF10000000              	mov rdi, 8 * 2	; extended env
  8777 000061D6 E810070000              	call malloc
  8778 000061DB 488B7D10                	mov rdi, ENV
  8779 000061DF BE00000000              	mov rsi, 0
  8780 000061E4 BA01000000              	mov rdx, 1
  8781                                  .L_lambda_simple_env_loop_0037:	; ext_env[i + 1] <-- env[i]
  8782 000061E9 4883FE01                	cmp rsi, 1
  8783 000061ED 7410                    	je .L_lambda_simple_env_end_0037
  8784 000061EF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8785 000061F3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8786 000061F7 48FFC6                  	inc rsi
  8787 000061FA 48FFC2                  	inc rdx
  8788 000061FD EBEA                    	jmp .L_lambda_simple_env_loop_0037
  8789                                  .L_lambda_simple_env_end_0037:
  8790 000061FF 5B                      	pop rbx
  8791 00006200 BE00000000              	mov rsi, 0
  8792                                  .L_lambda_simple_params_loop_0037:	; copy params
  8793 00006205 4883FE01                	cmp rsi, 1
  8794 00006209 740E                    	je .L_lambda_simple_params_end_0037
  8795 0000620B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8796 00006210 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8797 00006214 48FFC6                  	inc rsi
  8798 00006217 EBEC                    	jmp .L_lambda_simple_params_loop_0037
  8799                                  .L_lambda_simple_params_end_0037:
  8800 00006219 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8801 0000621C 4889C3                  	mov rbx, rax
  8802 0000621F 58                      	pop rax
  8803 00006220 C60004                  	mov byte [rax], T_closure
  8804 00006223 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8805 00006227 48C74009[34620000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0037
  8806 0000622F E907020000              	jmp .L_lambda_simple_end_0037
  8807                                  .L_lambda_simple_code_0037:	; lambda-simple body
  8808 00006234 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8809 0000623A 740B                    	je .L_lambda_simple_arity_check_ok_0037
  8810 0000623C FF742410                	push qword [rsp + 8 * 2]
  8811 00006240 6A01                    	push 1
  8812 00006242 E95D060000              	jmp L_error_incorrect_arity_simple
  8813                                  .L_lambda_simple_arity_check_ok_0037:
  8814 00006247 C8000000                	enter 0, 0
  8815 0000624B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8816 00006250 E896060000              	call malloc
  8817 00006255 50                      	push rax
  8818 00006256 BF08000000              	mov rdi, 8 * 1	; new rib
  8819 0000625B E88B060000              	call malloc
  8820 00006260 50                      	push rax
  8821 00006261 BF18000000              	mov rdi, 8 * 3	; extended env
  8822 00006266 E880060000              	call malloc
  8823 0000626B 488B7D10                	mov rdi, ENV
  8824 0000626F 4831F6                  	 xor rsi, rsi
  8825 00006272 4831D2                  	 xor rdx, rdx
  8826 00006275 48FFC2                  	inc rdx
  8827                                  .L_lambda_opt_env_loop_000a:	; 
  8828 00006278 4883FE02                	cmp rsi, 2
  8829 0000627C 7410                    	je .L_lambda_opt_env_end_000a
  8830 0000627E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8831 00006282 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8832 00006286 48FFC6                  	inc rsi
  8833 00006289 48FFC2                  	inc rdx
  8834 0000628C EBEA                    	jmp .L_lambda_opt_env_loop_000a
  8835                                  .L_lambda_opt_env_end_000a:
  8836 0000628E 5B                      	pop rbx
  8837 0000628F 4831F6                  	xor rsi, rsi
  8838                                  .L_lambda_opt_params_loop_000a:	; copy params
  8839 00006292 4883FE01                	cmp rsi, 1
  8840 00006296 740E                    	je .L_lambda_opt_params_end_000a
  8841 00006298 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8842 0000629D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8843 000062A1 48FFC6                  	inc rsi
  8844 000062A4 EBEC                    	jmp .L_lambda_opt_params_loop_000a
  8845                                  .L_lambda_opt_params_end_000a:
  8846 000062A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8847 000062A9 4889C3                  	mov rbx, rax
  8848 000062AC 58                      	pop rax
  8849 000062AD C60004                  	mov byte [rax], T_closure
  8850 000062B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8851 000062B4 48C74009[C1620000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000a
  8852 000062BC E976010000              	jmp .L_lambda_opt_end_000a
  8853                                  .L_lambda_opt_code_000a:
  8854 000062C1 4C8B7C2410              	mov r15, qword [rsp + 8 * 2]
  8855 000062C6 4983FF00                	cmp r15, 0
  8856 000062CA 7409                    	je .L_lambda_opt_arity_check_exact_000a
  8857 000062CC 7F57                    	jg .L_lambda_opt_arity_check_more_000a
  8858 000062CE 6A00                    	push 0
  8859 000062D0 E9E3050000              	jmp L_error_incorrect_arity_opt
  8860                                  .L_lambda_opt_arity_check_exact_000a: ;Exact case
  8861 000062D5 4C8B0424                	mov r8, qword [rsp -8 * 0]
  8862 000062D9 4C894424F8              	mov qword [rsp -8], r8
  8863 000062DE 4C8B442408              	mov r8, qword [rsp +8]
  8864 000062E3 4C890424                	mov qword [rsp +8 * 0], r8
  8865 000062E7 4C8B442410              	mov r8, qword [rsp +8 * 2]
  8866 000062EC 4C89C1                  	mov rcx, r8
  8867 000062EF 49FFC0                  	inc r8
  8868 000062F2 4C89442408              	mov qword [rsp +8], r8
  8869 000062F7 4889E2                  	mov rdx, rsp
  8870 000062FA 4883C218                	add rdx, 24
  8871                                  .L_lambda_opt_loop_copy_to_new_frame_exact_000a:
  8872 000062FE 4883F900                	cmp rcx, 0
  8873 00006302 7410                    	je .L_lambda_opt_loop_copy_to_new_frame_exact_end_000a
  8874 00006304 4C8B02                  	mov r8, qword [rdx]
  8875 00006307 4C8942F8                	mov qword [rdx - 8], r8
  8876 0000630B 4883C208                	add rdx, 8
  8877 0000630F 48FFC9                  	dec rcx
  8878 00006312 EBEA                    	jmp .L_lambda_opt_loop_copy_to_new_frame_exact_000a
  8879                                  .L_lambda_opt_loop_copy_to_new_frame_exact_end_000a:
  8880 00006314 48C742F8[01000000]      	mov qword [rdx - 8], sob_nil
  8881 0000631C 4883EC08                	sub rsp, 8
  8882 00006320 E985000000              	jmp .L_lambda_opt_stack_adjusted_000a
  8883                                  .L_lambda_opt_arity_check_more_000a:
  8884 00006325 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  8885 0000632A 4D89C4                  	mov r12, r8
  8886 0000632D 4C89C1                  	mov rcx, r8
  8887 00006330 4D8D6802                	lea r13, [r8 + 2] 
  8888 00006334 4883E900                	sub rcx, 0
  8889 00006338 4E8D5CC410              	lea r11, qword [rsp + r8 * 8 + 16]
  8890 0000633D 49BE-                   	mov r14, sob_nil
  8890 0000633F [0100000000000000] 
  8891                                  .L_lambda_opt_create_list_of_opt_params_000a:
  8892 00006347 4883F900                	cmp rcx, 0
  8893 0000634B 7424                    	je .L_lambda_opt_create_list_of_opt_params_end_000a
  8894 0000634D BF11000000              	mov rdi, 17
  8895 00006352 E894050000              	call malloc
  8896 00006357 C60021                  	mov byte [rax], T_pair
  8897 0000635A 498B1B                  	mov rbx, qword [r11]
  8898 0000635D 48895801                	mov qword [rax +1], rbx
  8899 00006361 4C897009                	mov qword [rax + 1 + 8], r14
  8900 00006365 4989C6                  	mov r14, rax
  8901 00006368 48FFC9                  	dec rcx
  8902 0000636B 4983EB08                	sub r11, 8
  8903 0000636F EBD6                    	jmp .L_lambda_opt_create_list_of_opt_params_000a
  8904                                  .L_lambda_opt_create_list_of_opt_params_end_000a:
  8905 00006371 4C8D542418              	lea r10, [rsp + 0*8 + 8*3]
  8906 00006376 4D8932                  	mov qword [r10], r14
  8907 00006379 4E8D2CED00000000        	lea r13, [8 * r13]
  8908 00006381 4901E5                  	add r13, rsp
  8909 00006384 B904000000              	mov rcx, 4 + 0
  8910                                  .L_lambda_opt_stack_shrink_loop_000a:
  8911 00006389 4883F900                	cmp rcx, 0
  8912 0000638D 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_000a
  8913 0000638F 4D8B1A                  	mov r11, qword [r10]
  8914 00006392 4D895D00                	mov qword [r13], r11
  8915 00006396 4983EA08                	sub r10, 8
  8916 0000639A 4983ED08                	sub r13, 8
  8917 0000639E 48FFC9                  	dec rcx
  8918 000063A1 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_000a
  8919                                  .L_lambda_opt_stack_shrink_loop_exit_000a:
  8920 000063A3 4983C508                	add r13, 8
  8921 000063A7 4C89EC                  	mov rsp, r13
  8922                                  .L_lambda_opt_stack_adjusted_000a:
  8923 000063AA 48C744241001000000      	mov qword [rsp + 8*2], 1
  8924 000063B3 C8000000                	enter 0, 0
  8925                                  	; preparing a tail-call
  8926 000063B7 488B4520                	mov rax, PARAM(0)	; param s
  8927 000063BB 50                      	push rax
  8928 000063BC 48B8-                   	mov rax, L_constants + 2135
  8928 000063BE [5708000000000000] 
  8929 000063C6 50                      	push rax
  8930 000063C7 488B4510                	mov rax, ENV
  8931 000063CB 488B00                  	mov rax, qword [rax + 8 * 0]
  8932 000063CE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin+
  8933 000063D1 50                      	push rax
  8934 000063D2 6A03                    	push 3	; arg count
  8935 000063D4 488B0425[F10B0000]      	mov rax, qword [free_var_43]	; free var fold-left
  8936 000063DC 803805                  	cmp byte [rax], T_undefined
  8937 000063DF 0F84D9030000            	je L_error_fvar_undefined
  8938 000063E5 803804                  	cmp byte [rax], T_closure
  8939 000063E8 0F8554040000            	jne L_error_non_closure
  8940 000063EE FF7001                  	push SOB_CLOSURE_ENV(rax)
  8941 000063F1 FF7508                  	push qword [rbp + 8 * 1]
  8942                                   ; old ret addr
  8943 000063F4 FF7500                  	push qword [rbp]
  8944                                   ; restore the old rbp
  8945 000063F7 BB03000000              	mov rbx, 3
  8946 000063FC 4883C303                	add rbx, 3
  8947 00006400 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  8948 00006404 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  8949 00006409 4C8D4DF8                	lea r9, [rbp - 8]
  8950 0000640D B907000000              	mov rcx, 7
  8951                                  .L_tc_recycle_frame_loop_0044:
  8952 00006412 4883F900                	cmp rcx, 0
  8953 00006416 7413                    	je .L_tc_recycle_frame_done_0044
  8954 00006418 4D8B11                  	mov r10, qword [r9]
  8955 0000641B 4D8910                  	mov qword [r8], r10
  8956 0000641E 4983E808                	sub r8, 8
  8957 00006422 4983E908                	sub r9, 8
  8958 00006426 48FFC9                  	dec rcx
  8959 00006429 EBE7                    	jmp .L_tc_recycle_frame_loop_0044
  8960                                  .L_tc_recycle_frame_done_0044:
  8961 0000642B 498D6008                	lea rsp, [r8 + 8]
  8962 0000642F 5D                      	pop rbp ; restore the old rbp
  8963 00006430 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8964 00006433 C9                      	leave
  8965 00006434 C21800                  	ret 8 * (2 + 1)
  8966                                  .L_lambda_opt_end_000a:	; new closure is in rax
  8967 00006437 C9                      	leave
  8968 00006438 C21800                  	ret AND_KILL_FRAME(1)
  8969                                  .L_lambda_simple_end_0037:	; new closure is in rax
  8970 0000643B 803804                  	cmp byte [rax], T_closure
  8971 0000643E 0F85FE030000            	jne L_error_non_closure
  8972 00006444 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8973 00006447 FF7508                  	push qword [rbp + 8 * 1]
  8974                                   ; old ret addr
  8975 0000644A FF7500                  	push qword [rbp]
  8976                                   ; restore the old rbp
  8977 0000644D BB01000000              	mov rbx, 1
  8978 00006452 4883C303                	add rbx, 3
  8979 00006456 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  8980 0000645A 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  8981 0000645F 4C8D4DF8                	lea r9, [rbp - 8]
  8982 00006463 B905000000              	mov rcx, 5
  8983                                  .L_tc_recycle_frame_loop_0036:
  8984 00006468 4883F900                	cmp rcx, 0
  8985 0000646C 7413                    	je .L_tc_recycle_frame_done_0036
  8986 0000646E 4D8B11                  	mov r10, qword [r9]
  8987 00006471 4D8910                  	mov qword [r8], r10
  8988 00006474 4983E808                	sub r8, 8
  8989 00006478 4983E908                	sub r9, 8
  8990 0000647C 48FFC9                  	dec rcx
  8991 0000647F EBE7                    	jmp .L_tc_recycle_frame_loop_0036
  8992                                  .L_tc_recycle_frame_done_0036:
  8993 00006481 498D6008                	lea rsp, [r8 + 8]
  8994 00006485 5D                      	pop rbp ; restore the old rbp
  8995 00006486 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8996 00006489 C9                      	leave
  8997 0000648A C21800                  	ret AND_KILL_FRAME(1)
  8998                                  .L_lambda_simple_end_0035:	; new closure is in rax
  8999 0000648D 803804                  	cmp byte [rax], T_closure
  9000 00006490 0F85AC030000            	jne L_error_non_closure
  9001 00006496 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9002 00006499 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9003 0000649C 48890425[16090000]      	mov qword [free_var_0], rax
  9004 000064A4 48B8-                   	mov rax, sob_void
  9004 000064A6 [0000000000000000] 
  9005                                  
  9006 000064AE 4889C7                  	mov rdi, rax
  9007 000064B1 E88A060000              	call print_sexpr_if_not_void
  9008 000064B6 48B8-                   	mov rax, L_constants + 2245
  9008 000064B8 [C508000000000000] 
  9009 000064C0 48890425[350C0000]      	mov qword [free_var_47], rax
  9010 000064C8 48B8-                   	mov rax, sob_void
  9010 000064CA [0000000000000000] 
  9011                                  
  9012 000064D2 4889C7                  	mov rdi, rax
  9013 000064D5 E866060000              	call print_sexpr_if_not_void
  9014 000064DA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9015 000064DF E807040000              	call malloc
  9016 000064E4 50                      	push rax
  9017 000064E5 BF00000000              	mov rdi, 8 * 0	; new rib
  9018 000064EA E8FC030000              	call malloc
  9019 000064EF 50                      	push rax
  9020 000064F0 BF08000000              	mov rdi, 8 * 1	; extended env
  9021 000064F5 E8F1030000              	call malloc
  9022 000064FA 488B7D10                	mov rdi, ENV
  9023 000064FE BE00000000              	mov rsi, 0
  9024 00006503 BA01000000              	mov rdx, 1
  9025                                  .L_lambda_simple_env_loop_0038:	; ext_env[i + 1] <-- env[i]
  9026 00006508 4883FE00                	cmp rsi, 0
  9027 0000650C 7410                    	je .L_lambda_simple_env_end_0038
  9028 0000650E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9029 00006512 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9030 00006516 48FFC6                  	inc rsi
  9031 00006519 48FFC2                  	inc rdx
  9032 0000651C EBEA                    	jmp .L_lambda_simple_env_loop_0038
  9033                                  .L_lambda_simple_env_end_0038:
  9034 0000651E 5B                      	pop rbx
  9035 0000651F BE00000000              	mov rsi, 0
  9036                                  .L_lambda_simple_params_loop_0038:	; copy params
  9037 00006524 4883FE00                	cmp rsi, 0
  9038 00006528 740E                    	je .L_lambda_simple_params_end_0038
  9039 0000652A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9040 0000652F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9041 00006533 48FFC6                  	inc rsi
  9042 00006536 EBEC                    	jmp .L_lambda_simple_params_loop_0038
  9043                                  .L_lambda_simple_params_end_0038:
  9044 00006538 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9045 0000653B 4889C3                  	mov rbx, rax
  9046 0000653E 58                      	pop rax
  9047 0000653F C60004                  	mov byte [rax], T_closure
  9048 00006542 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9049 00006546 48C74009[50650000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0038
  9050 0000654E EB74                    	jmp .L_lambda_simple_end_0038
  9051                                  .L_lambda_simple_code_0038:	; lambda-simple body
  9052 00006550 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9053 00006556 740B                    	je .L_lambda_simple_arity_check_ok_0038
  9054 00006558 FF742410                	push qword [rsp + 8 * 2]
  9055 0000655C 6A02                    	push 2
  9056 0000655E E941030000              	jmp L_error_incorrect_arity_simple
  9057                                  .L_lambda_simple_arity_check_ok_0038:
  9058 00006563 C8000000                	enter 0, 0
  9059                                  	; preparing a tail-call
  9060 00006567 488B4520                	mov rax, PARAM(0)	; param x
  9061 0000656B 50                      	push rax
  9062 0000656C 6A01                    	push 1	; arg count
  9063 0000656E 488B4528                	mov rax, PARAM(1)	; param f
  9064 00006572 803804                  	cmp byte [rax], T_closure
  9065 00006575 0F85C7020000            	jne L_error_non_closure
  9066 0000657B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9067 0000657E FF7508                  	push qword [rbp + 8 * 1]
  9068                                   ; old ret addr
  9069 00006581 FF7500                  	push qword [rbp]
  9070                                   ; restore the old rbp
  9071 00006584 BB01000000              	mov rbx, 1
  9072 00006589 4883C303                	add rbx, 3
  9073 0000658D 4C8B4518                	mov r8, qword [rbp + 8 * 3]
  9074 00006591 4E8D44C518              	lea r8, [rbp + 8 * 3 + 8 * r8]
  9075 00006596 4C8D4DF8                	lea r9, [rbp - 8]
  9076 0000659A B905000000              	mov rcx, 5
  9077                                  .L_tc_recycle_frame_loop_0045:
  9078 0000659F 4883F900                	cmp rcx, 0
  9079 000065A3 7413                    	je .L_tc_recycle_frame_done_0045
  9080 000065A5 4D8B11                  	mov r10, qword [r9]
  9081 000065A8 4D8910                  	mov qword [r8], r10
  9082 000065AB 4983E808                	sub r8, 8
  9083 000065AF 4983E908                	sub r9, 8
  9084 000065B3 48FFC9                  	dec rcx
  9085 000065B6 EBE7                    	jmp .L_tc_recycle_frame_loop_0045
  9086                                  .L_tc_recycle_frame_done_0045:
  9087 000065B8 498D6008                	lea rsp, [r8 + 8]
  9088 000065BC 5D                      	pop rbp ; restore the old rbp
  9089 000065BD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9090 000065C0 C9                      	leave
  9091 000065C1 C22000                  	ret AND_KILL_FRAME(2)
  9092                                  .L_lambda_simple_end_0038:	; new closure is in rax
  9093 000065C4 48890425[340D0000]      	mov qword [free_var_62], rax
  9094 000065CC 48B8-                   	mov rax, sob_void
  9094 000065CE [0000000000000000] 
  9095                                  
  9096 000065D6 4889C7                  	mov rdi, rax
  9097 000065D9 E862050000              	call print_sexpr_if_not_void
  9098 000065DE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9099 000065E3 E803030000              	call malloc
  9100 000065E8 50                      	push rax
  9101 000065E9 BF00000000              	mov rdi, 8 * 0	; new rib
  9102 000065EE E8F8020000              	call malloc
  9103 000065F3 50                      	push rax
  9104 000065F4 BF08000000              	mov rdi, 8 * 1	; extended env
  9105 000065F9 E8ED020000              	call malloc
  9106 000065FE 488B7D10                	mov rdi, ENV
  9107 00006602 BE00000000              	mov rsi, 0
  9108 00006607 BA01000000              	mov rdx, 1
  9109                                  .L_lambda_simple_env_loop_0039:	; ext_env[i + 1] <-- env[i]
  9110 0000660C 4883FE00                	cmp rsi, 0
  9111 00006610 7410                    	je .L_lambda_simple_env_end_0039
  9112 00006612 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9113 00006616 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9114 0000661A 48FFC6                  	inc rsi
  9115 0000661D 48FFC2                  	inc rdx
  9116 00006620 EBEA                    	jmp .L_lambda_simple_env_loop_0039
  9117                                  .L_lambda_simple_env_end_0039:
  9118 00006622 5B                      	pop rbx
  9119 00006623 BE00000000              	mov rsi, 0
  9120                                  .L_lambda_simple_params_loop_0039:	; copy params
  9121 00006628 4883FE00                	cmp rsi, 0
  9122 0000662C 740E                    	je .L_lambda_simple_params_end_0039
  9123 0000662E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9124 00006633 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9125 00006637 48FFC6                  	inc rsi
  9126 0000663A EBEC                    	jmp .L_lambda_simple_params_loop_0039
  9127                                  .L_lambda_simple_params_end_0039:
  9128 0000663C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9129 0000663F 4889C3                  	mov rbx, rax
  9130 00006642 58                      	pop rax
  9131 00006643 C60004                  	mov byte [rax], T_closure
  9132 00006646 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9133 0000664A 48C74009[54660000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0039
  9134 00006652 EB1F                    	jmp .L_lambda_simple_end_0039
  9135                                  .L_lambda_simple_code_0039:	; lambda-simple body
  9136 00006654 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9137 0000665A 740B                    	je .L_lambda_simple_arity_check_ok_0039
  9138 0000665C FF742410                	push qword [rsp + 8 * 2]
  9139 00006660 6A01                    	push 1
  9140 00006662 E93D020000              	jmp L_error_incorrect_arity_simple
  9141                                  .L_lambda_simple_arity_check_ok_0039:
  9142 00006667 C8000000                	enter 0, 0
  9143 0000666B 488B4520                	mov rax, PARAM(0)	; param x
  9144 0000666F C9                      	leave
  9145 00006670 C21800                  	ret AND_KILL_FRAME(1)
  9146                                  .L_lambda_simple_end_0039:	; new closure is in rax
  9147 00006673 48890425[C0090000]      	mov qword [free_var_10], rax
  9148 0000667B 48B8-                   	mov rax, sob_void
  9148 0000667D [0000000000000000] 
  9149                                  
  9150 00006685 4889C7                  	mov rdi, rax
  9151 00006688 E8B3040000              	call print_sexpr_if_not_void
  9152 0000668D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9153 00006692 E854020000              	call malloc
  9154 00006697 50                      	push rax
  9155 00006698 BF00000000              	mov rdi, 8 * 0	; new rib
  9156 0000669D E849020000              	call malloc
  9157 000066A2 50                      	push rax
  9158 000066A3 BF08000000              	mov rdi, 8 * 1	; extended env
  9159 000066A8 E83E020000              	call malloc
  9160 000066AD 488B7D10                	mov rdi, ENV
  9161 000066B1 BE00000000              	mov rsi, 0
  9162 000066B6 BA01000000              	mov rdx, 1
  9163                                  .L_lambda_simple_env_loop_003a:	; ext_env[i + 1] <-- env[i]
  9164 000066BB 4883FE00                	cmp rsi, 0
  9165 000066BF 7410                    	je .L_lambda_simple_env_end_003a
  9166 000066C1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9167 000066C5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9168 000066C9 48FFC6                  	inc rsi
  9169 000066CC 48FFC2                  	inc rdx
  9170 000066CF EBEA                    	jmp .L_lambda_simple_env_loop_003a
  9171                                  .L_lambda_simple_env_end_003a:
  9172 000066D1 5B                      	pop rbx
  9173 000066D2 BE00000000              	mov rsi, 0
  9174                                  .L_lambda_simple_params_loop_003a:	; copy params
  9175 000066D7 4883FE00                	cmp rsi, 0
  9176 000066DB 740E                    	je .L_lambda_simple_params_end_003a
  9177 000066DD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9178 000066E2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9179 000066E6 48FFC6                  	inc rsi
  9180 000066E9 EBEC                    	jmp .L_lambda_simple_params_loop_003a
  9181                                  .L_lambda_simple_params_end_003a:
  9182 000066EB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9183 000066EE 4889C3                  	mov rbx, rax
  9184 000066F1 58                      	pop rax
  9185 000066F2 C60004                  	mov byte [rax], T_closure
  9186 000066F5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9187 000066F9 48C74009[03670000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003a
  9188 00006701 EB2C                    	jmp .L_lambda_simple_end_003a
  9189                                  .L_lambda_simple_code_003a:	; lambda-simple body
  9190 00006703 48837C241000            	cmp qword [rsp + 8 * 2], 0
  9191 00006709 740B                    	je .L_lambda_simple_arity_check_ok_003a
  9192 0000670B FF742410                	push qword [rsp + 8 * 2]
  9193 0000670F 6A00                    	push 0
  9194 00006711 E98E010000              	jmp L_error_incorrect_arity_simple
  9195                                  .L_lambda_simple_arity_check_ok_003a:
  9196 00006716 C8000000                	enter 0, 0
  9197 0000671A 488B0425[350C0000]      	mov rax, qword [free_var_47]	; free var free_var
  9198 00006722 803805                  	cmp byte [rax], T_undefined
  9199 00006725 0F8493000000            	je L_error_fvar_undefined
  9200 0000672B C9                      	leave
  9201 0000672C C21000                  	ret AND_KILL_FRAME(0)
  9202                                  .L_lambda_simple_end_003a:	; new closure is in rax
  9203 0000672F 48890425[460C0000]      	mov qword [free_var_48], rax
  9204 00006737 48B8-                   	mov rax, sob_void
  9204 00006739 [0000000000000000] 
  9205                                  
  9206 00006741 4889C7                  	mov rdi, rax
  9207 00006744 E8F7030000              	call print_sexpr_if_not_void
  9208                                  	; preparing a non-tail-call
  9209 00006749 488B0425[C0090000]      	mov rax, qword [free_var_10]	; free var arg_lambda
  9210 00006751 803805                  	cmp byte [rax], T_undefined
  9211 00006754 7468                    	je L_error_fvar_undefined
  9212 00006756 50                      	push rax
  9213 00006757 48B8-                   	mov rax, L_constants + 2317
  9213 00006759 [0D09000000000000] 
  9214 00006761 50                      	push rax
  9215 00006762 6A02                    	push 2	; arg count
  9216 00006764 488B0425[340D0000]      	mov rax, qword [free_var_62]	; free var tail_lambda
  9217 0000676C 803805                  	cmp byte [rax], T_undefined
  9218 0000676F 744D                    	je L_error_fvar_undefined
  9219 00006771 803804                  	cmp byte [rax], T_closure
  9220 00006774 0F85C8000000            	jne L_error_non_closure
  9221 0000677A FF7001                  	push SOB_CLOSURE_ENV(rax)
  9222 0000677D FF5009                  	call SOB_CLOSURE_CODE(rax)
  9223                                  Lend:
  9224 00006780 4889C7                  	mov rdi, rax
  9225 00006783 E8B8030000              	call print_sexpr_if_not_void
  9226                                  
  9227 00006788 48BF-                           mov rdi, fmt_memory_usage
  9227 0000678A [DD0D000000000000] 
  9228 00006792 488B3425[630E0000]              mov rsi, qword [top_of_memory]
  9229 0000679A 4881EE[00000000]                sub rsi, memory
  9230 000067A1 B800000000                      mov rax, 0
  9231                                          ENTER
    44 000067A6 C8000000            <1>  enter 0, 0
    45 000067AA 4883E4F0            <1>  and rsp, ~15
  9232 000067AE E8(00000000)                    call printf
  9233                                          LEAVE
    49 000067B3 C9                  <1>  leave
  9234 000067B4 B800000000                      mov rax, 0
  9235 000067B9 E8(00000000)                    call exit
  9236                                  
  9237                                  L_error_fvar_undefined:
  9238 000067BE 50                              push rax
  9239 000067BF 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
  9240 000067C7 48BE-                           mov rsi, fmt_undefined_free_var_1
  9240 000067C9 [450D000000000000] 
  9241 000067D1 B800000000                      mov rax, 0
  9242                                          ENTER
    44 000067D6 C8000000            <1>  enter 0, 0
    45 000067DA 4883E4F0            <1>  and rsp, ~15
  9243 000067DE E8(00000000)                    call fprintf
  9244                                          LEAVE
    49 000067E3 C9                  <1>  leave
  9245 000067E4 58                              pop rax
  9246 000067E5 488B4001                        mov rax, qword [rax + 1] ; string
  9247 000067E9 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  9248 000067ED BE01000000                      mov rsi, 1               ; sizeof(char)
  9249 000067F2 488B5001                        mov rdx, qword [rax + 1] ; string-length
  9250 000067F6 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
  9251 000067FE B800000000                      mov rax, 0
  9252                                          ENTER
    44 00006803 C8000000            <1>  enter 0, 0
    45 00006807 4883E4F0            <1>  and rsp, ~15
  9253 0000680B E8(00000000)                    call fwrite
  9254                                          LEAVE
    49 00006810 C9                  <1>  leave
  9255 00006811 488B3C25[00000000]              mov rdi, [stderr]       ; destination
  9256 00006819 48BE-                           mov rsi, fmt_undefined_free_var_2
  9256 0000681B [5C0D000000000000] 
  9257 00006823 B800000000                      mov rax, 0
  9258                                          ENTER
    44 00006828 C8000000            <1>  enter 0, 0
    45 0000682C 4883E4F0            <1>  and rsp, ~15
  9259 00006830 E8(00000000)                    call fprintf
  9260                                          LEAVE
    49 00006835 C9                  <1>  leave
  9261 00006836 48C7C0F6FFFFFF                  mov rax, -10
  9262 0000683D E8(00000000)                    call exit
  9263                                  
  9264                                  L_error_non_closure:
  9265 00006842 488B3C25[00000000]              mov rdi, qword [stderr]
  9266 0000684A 48BE-                           mov rsi, fmt_non_closure
  9266 0000684C [130E000000000000] 
  9267 00006854 B800000000                      mov rax, 0
  9268                                          ENTER
    44 00006859 C8000000            <1>  enter 0, 0
    45 0000685D 4883E4F0            <1>  and rsp, ~15
  9269 00006861 E8(00000000)                    call fprintf
  9270                                          LEAVE
    49 00006866 C9                  <1>  leave
  9271 00006867 48C7C0FEFFFFFF                  mov rax, -2
  9272 0000686E E8(00000000)                    call exit
  9273                                  
  9274                                  L_error_improper_list:
  9275 00006873 488B3C25[00000000]      	mov rdi, qword [stderr]
  9276 0000687B 48BE-                   	mov rsi, fmt_error_improper_list
  9276 0000687D [3B0E000000000000] 
  9277 00006885 B800000000              	mov rax, 0
  9278                                          ENTER
    44 0000688A C8000000            <1>  enter 0, 0
    45 0000688E 4883E4F0            <1>  and rsp, ~15
  9279 00006892 E8(00000000)            	call fprintf
  9280                                          LEAVE
    49 00006897 C9                  <1>  leave
  9281 00006898 48C7C0F9FFFFFF          	mov rax, -7
  9282 0000689F E8(00000000)            	call exit
  9283                                  
  9284                                  L_error_incorrect_arity_simple:
  9285 000068A4 488B3C25[00000000]              mov rdi, qword [stderr]
  9286 000068AC 48BE-                           mov rsi, fmt_incorrect_arity_simple
  9286 000068AE [7E0D000000000000] 
  9287 000068B6 EB12                            jmp L_error_incorrect_arity_common
  9288                                  L_error_incorrect_arity_opt:
  9289 000068B8 488B3C25[00000000]              mov rdi, qword [stderr]
  9290 000068C0 48BE-                           mov rsi, fmt_incorrect_arity_opt
  9290 000068C2 [A90D000000000000] 
  9291                                  L_error_incorrect_arity_common:
  9292 000068CA 5A                              pop rdx
  9293 000068CB 59                              pop rcx
  9294 000068CC B800000000                      mov rax, 0
  9295                                          ENTER
    44 000068D1 C8000000            <1>  enter 0, 0
    45 000068D5 4883E4F0            <1>  and rsp, ~15
  9296 000068D9 E8(00000000)                    call fprintf
  9297                                          LEAVE
    49 000068DE C9                  <1>  leave
  9298 000068DF 48C7C0FAFFFFFF                  mov rax, -6
  9299 000068E6 E8(00000000)                    call exit
  9300                                  
  9301                                  section .data
  9302                                  fmt_undefined_free_var_1:
  9303 00000D45 212121205468652066-             db `!!! The free variable \0`
  9303 00000D4E 726565207661726961-
  9303 00000D57 626C652000         
  9304                                  fmt_undefined_free_var_2:
  9305 00000D5C 207761732075736564-             db ` was used before it was defined.\n\0`
  9305 00000D65 206265666F72652069-
  9305 00000D6E 742077617320646566-
  9305 00000D77 696E65642E0A00     
  9306                                  fmt_incorrect_arity_simple:
  9307 00000D7E 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
  9307 00000D87 74656420256C642061-
  9307 00000D90 7267756D656E74732C-
  9307 00000D99 206275742067697665-
  9307 00000DA2 6E20256C640A00     
  9308                                  fmt_incorrect_arity_opt:
  9309 00000DA9 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
  9309 00000DB2 746564206174206C65-
  9309 00000DBB 61737420256C642061-
  9309 00000DC4 7267756D656E74732C-
  9309 00000DCD 206275742067697665-
  9309 00000DD6 6E20256C640A00     
  9310                                  fmt_memory_usage:
  9311 00000DDD 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
  9311 00000DE6 20256C642062797465-
  9311 00000DEF 73206F662064796E61-
  9311 00000DF8 6D6963616C6C792D61-
  9311 00000E01 6C6C6F636174656420-
  9311 00000E0A 6D656D6F72790A0A00 
  9312                                  fmt_non_closure:
  9313 00000E13 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
  9313 00000E1C 7074696E6720746F20-
  9313 00000E25 6170706C792061206E-
  9313 00000E2E 6F6E2D636C6F737572-
  9313 00000E37 65210A00           
  9314                                  fmt_error_improper_list:
  9315 00000E3B 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
  9315 00000E44 7267756D656E742069-
  9315 00000E4D 73206E6F7420612070-
  9315 00000E56 726F706572206C6973-
  9315 00000E5F 74210A00           
  9316                                  
  9317                                  section .bss
  9318                                  memory:
  9319 00000000 <res 40000000h>         	resb gbytes(1)
  9320                                  
  9321                                  section .data
  9322                                  top_of_memory:
  9323 00000E63 [0000000000000000]              dq memory
  9324                                  
  9325                                  section .text
  9326                                  malloc:
  9327 000068EB 488B0425[630E0000]              mov rax, qword [top_of_memory]
  9328 000068F3 48013C25[630E0000]              add qword [top_of_memory], rdi
  9329 000068FB C3                              ret
  9330                                  
  9331                                  L_code_ptr_return:
  9332 000068FC 48837C241002            	cmp qword [rsp + 8*2], 2
  9333 00006902 0F85E71C0000            	jne L_error_arg_count_2
  9334 00006908 488B4C2418              	mov rcx, qword [rsp + 8*3]
  9335                                  	assert_integer(rcx)
    53 0000690D 803911              <1>  cmp byte [%1], %2
    54 00006910 0F85781D0000        <1>  jne L_error_incorrect_type
  9336 00006916 488B4901                	mov rcx, qword [rcx + 1]
  9337 0000691A 4883F900                	cmp rcx, 0
  9338 0000691E 0F8CFF1B0000            	jl L_error_integer_range
  9339 00006924 488B442420              	mov rax, qword [rsp + 8*4]
  9340                                  .L0:
  9341 00006929 4883F900                        cmp rcx, 0
  9342 0000692D 7409                            je .L1
  9343 0000692F 488B6D00                	mov rbp, qword [rbp]
  9344 00006933 48FFC9                  	dec rcx
  9345 00006936 7FF1                    	jg .L0
  9346                                  .L1:
  9347 00006938 4889EC                  	mov rsp, rbp
  9348 0000693B 5D                      	pop rbp
  9349 0000693C 5B                              pop rbx
  9350 0000693D 488B4C2408                      mov rcx, qword [rsp + 8*1]
  9351 00006942 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
  9352 00006947 FFE3                    	jmp rbx
  9353                                  
  9354                                  L_code_ptr_make_list:
  9355 00006949 C8000000                	enter 0, 0
  9356 0000694D 48837D1801                      cmp COUNT, 1
  9357 00006952 740C                            je .L0
  9358 00006954 48837D1802                      cmp COUNT, 2
  9359 00006959 7411                            je .L1
  9360 0000695B E9C41C0000                      jmp L_error_arg_count_12
  9361                                  .L0:
  9362 00006960 49B9-                           mov r9, sob_void
  9362 00006962 [0000000000000000] 
  9363 0000696A EB04                            jmp .L2
  9364                                  .L1:
  9365 0000696C 4C8B4D28                        mov r9, PARAM(1)
  9366                                  .L2:
  9367 00006970 488B4D20                        mov rcx, PARAM(0)
  9368                                          assert_integer(rcx)
    53 00006974 803911              <1>  cmp byte [%1], %2
    54 00006977 0F85111D0000        <1>  jne L_error_incorrect_type
  9369 0000697D 488B4901                        mov rcx, qword [rcx + 1]
  9370 00006981 4883F900                        cmp rcx, 0
  9371 00006985 0F8CC91B0000                    jl L_error_arg_negative
  9372 0000698B 49B8-                           mov r8, sob_nil
  9372 0000698D [0100000000000000] 
  9373                                  .L3:
  9374 00006995 4883F900                        cmp rcx, 0
  9375 00006999 7E1D                            jle .L4
  9376 0000699B BF11000000                      mov rdi, 1 + 8 + 8
  9377 000069A0 E846FFFFFF                      call malloc
  9378 000069A5 C60021                          mov byte [rax], T_pair
  9379 000069A8 4C894801                        mov qword [rax + 1], r9
  9380 000069AC 4C894009                        mov qword [rax + 1 + 8], r8
  9381 000069B0 4989C0                          mov r8, rax
  9382 000069B3 48FFC9                          dec rcx
  9383 000069B6 EBDD                            jmp .L3
  9384                                  .L4:
  9385 000069B8 4C89C0                          mov rax, r8
  9386 000069BB 48837D1802                      cmp COUNT, 2
  9387 000069C0 7404                            je .L5
  9388 000069C2 C9                              leave
  9389 000069C3 C21800                          ret AND_KILL_FRAME(1)
  9390                                  .L5:
  9391 000069C6 C9                      	leave
  9392 000069C7 C22000                  	ret AND_KILL_FRAME(2)
  9393                                  
  9394                                  L_code_ptr_is_primitive:
  9395 000069CA C8000000                	enter 0, 0
  9396 000069CE 48837D1801              	cmp COUNT, 1
  9397 000069D3 0F85E11B0000            	jne L_error_arg_count_1
  9398 000069D9 488B4520                	mov rax, PARAM(0)
  9399                                  	assert_closure(rax)
    53 000069DD 803804              <1>  cmp byte [%1], %2
    54 000069E0 0F85A81C0000        <1>  jne L_error_incorrect_type
  9400 000069E6 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
  9401 000069EB 750C                    	jne .L_false
  9402 000069ED 48B8-                   	mov rax, sob_boolean_true
  9402 000069EF [0300000000000000] 
  9403 000069F7 EB0A                    	jmp .L_end
  9404                                  .L_false:
  9405 000069F9 48B8-                   	mov rax, sob_boolean_false
  9405 000069FB [0200000000000000] 
  9406                                  .L_end:
  9407 00006A03 C9                      	leave
  9408 00006A04 C21800                  	ret AND_KILL_FRAME(1)
  9409                                  
  9410                                  L_code_ptr_length:
  9411 00006A07 C8000000                	enter 0, 0
  9412 00006A0B 48837D1801              	cmp COUNT, 1
  9413 00006A10 0F85A41B0000            	jne L_error_arg_count_1
  9414 00006A16 488B5D20                	mov rbx, PARAM(0)
  9415 00006A1A BF00000000              	mov rdi, 0
  9416                                  .L:
  9417 00006A1F 803B01                  	cmp byte [rbx], T_nil
  9418 00006A22 7412                    	je .L_end
  9419                                  	assert_pair(rbx)
    53 00006A24 803B21              <1>  cmp byte [%1], %2
    54 00006A27 0F85611C0000        <1>  jne L_error_incorrect_type
  9420 00006A2D 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
  9421 00006A31 48FFC7                  	inc rdi
  9422 00006A34 EBE9                    	jmp .L
  9423                                  .L_end:
  9424 00006A36 E8CE1A0000              	call make_integer
  9425 00006A3B C9                      	leave
  9426 00006A3C C21800                  	ret AND_KILL_FRAME(1)
  9427                                  
  9428                                  L_code_ptr_break:
  9429 00006A3F 48837C241000                    cmp qword [rsp + 8 * 2], 0
  9430 00006A45 0F853A1B0000                    jne L_error_arg_count_0
  9431 00006A4B CC                              int3
  9432 00006A4C 48B8-                           mov rax, sob_void
  9432 00006A4E [0000000000000000] 
  9433 00006A56 C21000                          ret AND_KILL_FRAME(0)        
  9434                                  
  9435                                  L_code_ptr_frame:
  9436 00006A59 C8000000                        enter 0, 0
  9437 00006A5D 48837D1800                      cmp COUNT, 0
  9438 00006A62 0F851D1B0000                    jne L_error_arg_count_0
  9439                                  
  9440 00006A68 48BF-                           mov rdi, fmt_frame
  9440 00006A6A [6B0E000000000000] 
  9441 00006A72 488B7500                        mov rsi, qword [rbp]    ; old rbp
  9442 00006A76 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
  9443 00006A7A 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
  9444 00006A7E 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
  9445 00006A82 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
  9446 00006A86 6A00                            push 0
  9447 00006A88 4151                            push r9
  9448 00006A8A 4150                            push r8                   ; we'll use it when printing the params
  9449 00006A8C B800000000                      mov rax, 0
  9450                                          
  9451                                          ENTER
    44 00006A91 C8000000            <1>  enter 0, 0
    45 00006A95 4883E4F0            <1>  and rsp, ~15
  9452 00006A99 E8(00000000)                    call printf
  9453                                          LEAVE
    49 00006A9E C9                  <1>  leave
  9454                                  
  9455                                  .L:
  9456 00006A9F 488B0C24                        mov rcx, qword [rsp]
  9457 00006AA3 4883F900                        cmp rcx, 0
  9458 00006AA7 7467                            je .L_out
  9459 00006AA9 48BF-                           mov rdi, fmt_frame_param_prefix
  9459 00006AAB [A40E000000000000] 
  9460 00006AB3 488B742410                      mov rsi, qword [rsp + 8*2]
  9461 00006AB8 B800000000                      mov rax, 0
  9462                                          
  9463                                          ENTER
    44 00006ABD C8000000            <1>  enter 0, 0
    45 00006AC1 4883E4F0            <1>  and rsp, ~15
  9464 00006AC5 E8(00000000)                    call printf
  9465                                          LEAVE
    49 00006ACA C9                  <1>  leave
  9466                                  
  9467 00006ACB 488B0C24                        mov rcx, qword [rsp]
  9468 00006ACF 48FFC9                          dec rcx
  9469 00006AD2 48890C24                        mov qword [rsp], rcx    ; dec arg count
  9470 00006AD6 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
  9471 00006ADB 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
  9472 00006AE0 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
  9473 00006AE4 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
  9474 00006AE9 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
  9475 00006AEC E87B000000                      call print_sexpr
  9476 00006AF1 48BF-                           mov rdi, fmt_newline
  9476 00006AF3 [D00E000000000000] 
  9477 00006AFB B800000000                      mov rax, 0
  9478                                          ENTER
    44 00006B00 C8000000            <1>  enter 0, 0
    45 00006B04 4883E4F0            <1>  and rsp, ~15
  9479 00006B08 E8(00000000)                    call printf
  9480                                          LEAVE
    49 00006B0D C9                  <1>  leave
  9481 00006B0E EB8F                            jmp .L
  9482                                  .L_out:
  9483 00006B10 48BF-                           mov rdi, fmt_frame_continue
  9483 00006B12 [B50E000000000000] 
  9484 00006B1A B800000000                      mov rax, 0
  9485                                          ENTER
    44 00006B1F C8000000            <1>  enter 0, 0
    45 00006B23 4883E4F0            <1>  and rsp, ~15
  9486 00006B27 E8(00000000)                    call printf
  9487 00006B2C E8(00000000)                    call getchar
  9488                                          LEAVE
    49 00006B31 C9                  <1>  leave
  9489                                          
  9490 00006B32 48B8-                           mov rax, sob_void
  9490 00006B34 [0000000000000000] 
  9491 00006B3C C9                              leave
  9492 00006B3D C21000                          ret AND_KILL_FRAME(0)
  9493                                          
  9494                                  print_sexpr_if_not_void:
  9495 00006B40 4881FF[00000000]        	cmp rdi, sob_void
  9496 00006B47 7422                    	je .done
  9497 00006B49 E81E000000              	call print_sexpr
  9498 00006B4E 48BF-                   	mov rdi, fmt_newline
  9498 00006B50 [D00E000000000000] 
  9499 00006B58 B800000000              	mov rax, 0
  9500                                  	ENTER
    44 00006B5D C8000000            <1>  enter 0, 0
    45 00006B61 4883E4F0            <1>  and rsp, ~15
  9501 00006B65 E8(00000000)            	call printf
  9502                                  	LEAVE
    49 00006B6A C9                  <1>  leave
  9503                                  .done:
  9504 00006B6B C3                      	ret
  9505                                  
  9506                                  section .data
  9507                                  fmt_frame:
  9508 00000E6B 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
  9508 00000E74 207265742061646472-
  9508 00000E7D 203D2025703B206C65-
  9508 00000E86 7820656E76203D2025-
  9508 00000E8F 703B20706172616D20-
  9508 00000E98 636F756E74203D2025-
  9508 00000EA1 640A00             
  9509                                  fmt_frame_param_prefix:
  9510 00000EA4 3D3D5B706172616D20-             db `==[param %d]==> \0`
  9510 00000EAD 25645D3D3D3E2000   
  9511                                  fmt_frame_continue:
  9512 00000EB5 486974203C456E7465-             db `Hit <Enter> to continue...\0`
  9512 00000EBE 723E20746F20636F6E-
  9512 00000EC7 74696E75652E2E2E00 
  9513                                  fmt_newline:
  9514 00000ED0 0A00                    	db `\n\0`
  9515                                  fmt_void:
  9516 00000ED2 233C766F69643E00        	db `#<void>\0`
  9517                                  fmt_nil:
  9518 00000EDA 282900                  	db `()\0`
  9519                                  fmt_boolean_false:
  9520 00000EDD 236600                  	db `#f\0`
  9521                                  fmt_boolean_true:
  9522 00000EE0 237400                  	db `#t\0`
  9523                                  fmt_char_backslash:
  9524 00000EE3 235C5C00                	db `#\\\\\0`
  9525                                  fmt_char_dquote:
  9526 00000EE7 235C2200                	db `#\\"\0`
  9527                                  fmt_char_simple:
  9528 00000EEB 235C256300              	db `#\\%c\0`
  9529                                  fmt_char_null:
  9530 00000EF0 235C6E756C00            	db `#\\nul\0`
  9531                                  fmt_char_bell:
  9532 00000EF6 235C62656C6C00          	db `#\\bell\0`
  9533                                  fmt_char_backspace:
  9534 00000EFD 235C6261636B737061-     	db `#\\backspace\0`
  9534 00000F06 636500             
  9535                                  fmt_char_tab:
  9536 00000F09 235C74616200            	db `#\\tab\0`
  9537                                  fmt_char_newline:
  9538 00000F0F 235C6E65776C696E65-     	db `#\\newline\0`
  9538 00000F18 00                 
  9539                                  fmt_char_formfeed:
  9540 00000F19 235C7061676500          	db `#\\page\0`
  9541                                  fmt_char_return:
  9542 00000F20 235C72657475726E00      	db `#\\return\0`
  9543                                  fmt_char_escape:
  9544 00000F29 235C65736300            	db `#\\esc\0`
  9545                                  fmt_char_space:
  9546 00000F2F 235C737061636500        	db `#\\space\0`
  9547                                  fmt_char_hex:
  9548 00000F37 235C782530325800        	db `#\\x%02X\0`
  9549                                  fmt_gensym:
  9550 00000F3F 47256C6400                      db `G%ld\0`
  9551                                  fmt_closure:
  9552 00000F44 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  9552 00000F4D 206174203078253038-
  9552 00000F56 5820656E763D307825-
  9552 00000F5F 30385820636F64653D-
  9552 00000F68 3078253038583E00   
  9553                                  fmt_lparen:
  9554 00000F70 2800                    	db `(\0`
  9555                                  fmt_dotted_pair:
  9556 00000F72 202E2000                	db ` . \0`
  9557                                  fmt_rparen:
  9558 00000F76 2900                    	db `)\0`
  9559                                  fmt_space:
  9560 00000F78 2000                    	db ` \0`
  9561                                  fmt_empty_vector:
  9562 00000F7A 23282900                	db `#()\0`
  9563                                  fmt_vector:
  9564 00000F7E 232800                  	db `#(\0`
  9565                                  fmt_real:
  9566 00000F81 256600                  	db `%f\0`
  9567                                  fmt_fraction:
  9568 00000F84 256C642F256C6400        	db `%ld/%ld\0`
  9569                                  fmt_zero:
  9570 00000F8C 3000                    	db `0\0`
  9571                                  fmt_int:
  9572 00000F8E 256C6400                	db `%ld\0`
  9573                                  fmt_unknown_scheme_object_error:
  9574 00000F92 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
  9574 00000F9B 6F723A20556E6B6E6F-
  9574 00000FA4 776E20536368656D65-
  9574 00000FAD 2D6F626A6563742028-
  9574 00000FB6 525454492030782530-
  9574 00000FBF 32582920           
  9575 00000FC3 617420616464726573-     	db `at address 0x%08X\n\n\0`
  9575 00000FCC 73203078253038580A-
  9575 00000FD5 0A00               
  9576                                  fmt_dquote:
  9577 00000FD7 2200                    	db `\"\0`
  9578                                  fmt_string_char:
  9579 00000FD9 256300                          db `%c\0`
  9580                                  fmt_string_char_7:
  9581 00000FDC 5C6100                          db `\\a\0`
  9582                                  fmt_string_char_8:
  9583 00000FDF 5C6200                          db `\\b\0`
  9584                                  fmt_string_char_9:
  9585 00000FE2 5C7400                          db `\\t\0`
  9586                                  fmt_string_char_10:
  9587 00000FE5 5C6E00                          db `\\n\0`
  9588                                  fmt_string_char_11:
  9589 00000FE8 5C7600                          db `\\v\0`
  9590                                  fmt_string_char_12:
  9591 00000FEB 5C6600                          db `\\f\0`
  9592                                  fmt_string_char_13:
  9593 00000FEE 5C7200                          db `\\r\0`
  9594                                  fmt_string_char_34:
  9595 00000FF1 5C2200                          db `\\"\0`
  9596                                  fmt_string_char_92:
  9597 00000FF4 5C5C00                          db `\\\\\0`
  9598                                  fmt_string_char_hex:
  9599 00000FF7 5C7825583B00                    db `\\x%X;\0`
  9600                                  
  9601                                  section .text
  9602                                  
  9603                                  print_sexpr:
  9604 00006B6C C8000000                	enter 0, 0
  9605 00006B70 8A07                    	mov al, byte [rdi]
  9606 00006B72 3C00                    	cmp al, T_void
  9607 00006B74 7465                    	je .Lvoid
  9608 00006B76 3C01                    	cmp al, T_nil
  9609 00006B78 7470                    	je .Lnil
  9610 00006B7A 3C09                    	cmp al, T_boolean_false
  9611 00006B7C 747B                    	je .Lboolean_false
  9612 00006B7E 3C0A                    	cmp al, T_boolean_true
  9613 00006B80 0F8482000000            	je .Lboolean_true
  9614 00006B86 3C02                    	cmp al, T_char
  9615 00006B88 0F8489000000            	je .Lchar
  9616 00006B8E 3C41                    	cmp al, T_interned_symbol
  9617 00006B90 0F84CB010000            	je .Linterned_symbol
  9618 00006B96 3C42                            cmp al, T_uninterned_symbol
  9619 00006B98 0F84EF010000                    je .Luninterned_symbol
  9620 00006B9E 3C21                    	cmp al, T_pair
  9621 00006BA0 0F84FA010000            	je .Lpair
  9622 00006BA6 3C22                    	cmp al, T_vector
  9623 00006BA8 0F84C3020000            	je .Lvector
  9624 00006BAE 3C04                    	cmp al, T_closure
  9625 00006BB0 0F8491010000            	je .Lclosure
  9626 00006BB6 3C13                    	cmp al, T_real
  9627 00006BB8 0F8454030000            	je .Lreal
  9628 00006BBE 3C12                    	cmp al, T_fraction
  9629 00006BC0 0F847A030000            	je .Lfraction
  9630 00006BC6 3C11                    	cmp al, T_integer
  9631 00006BC8 0F84B3030000            	je .Linteger
  9632 00006BCE 3C03                    	cmp al, T_string
  9633 00006BD0 0F84BE030000            	je .Lstring
  9634                                  
  9635 00006BD6 E9F6040000              	jmp .Lunknown_sexpr_type
  9636                                  
  9637                                  .Lvoid:
  9638 00006BDB 48BF-                   	mov rdi, fmt_void
  9638 00006BDD [D20E000000000000] 
  9639 00006BE5 E91A050000              	jmp .Lemit
  9640                                  
  9641                                  .Lnil:
  9642 00006BEA 48BF-                   	mov rdi, fmt_nil
  9642 00006BEC [DA0E000000000000] 
  9643 00006BF4 E90B050000              	jmp .Lemit
  9644                                  
  9645                                  .Lboolean_false:
  9646 00006BF9 48BF-                   	mov rdi, fmt_boolean_false
  9646 00006BFB [DD0E000000000000] 
  9647 00006C03 E9FC040000              	jmp .Lemit
  9648                                  
  9649                                  .Lboolean_true:
  9650 00006C08 48BF-                   	mov rdi, fmt_boolean_true
  9650 00006C0A [E00E000000000000] 
  9651 00006C12 E9ED040000              	jmp .Lemit
  9652                                  
  9653                                  .Lchar:
  9654 00006C17 8A4701                  	mov al, byte [rdi + 1]
  9655 00006C1A 3C20                    	cmp al, ' '
  9656 00006C1C 7E28                    	jle .Lchar_whitespace
  9657 00006C1E 3C5C                    	cmp al, 92 		; backslash
  9658 00006C20 0F847C000000            	je .Lchar_backslash
  9659 00006C26 3C22                    	cmp al, '"'
  9660 00006C28 0F8483000000            	je .Lchar_dquote
  9661 00006C2E 4825FF000000            	and rax, 255
  9662 00006C34 48BF-                   	mov rdi, fmt_char_simple
  9662 00006C36 [EB0E000000000000] 
  9663 00006C3E 4889C6                  	mov rsi, rax
  9664 00006C41 E9BE040000              	jmp .Lemit
  9665                                  
  9666                                  .Lchar_whitespace:
  9667 00006C46 3C00                    	cmp al, 0
  9668 00006C48 7476                    	je .Lchar_null
  9669 00006C4A 3C07                    	cmp al, 7
  9670 00006C4C 0F847D000000            	je .Lchar_bell
  9671 00006C52 3C08                    	cmp al, 8
  9672 00006C54 0F8484000000            	je .Lchar_backspace
  9673 00006C5A 3C09                    	cmp al, 9
  9674 00006C5C 0F848B000000            	je .Lchar_tab
  9675 00006C62 3C0A                    	cmp al, 10
  9676 00006C64 0F8492000000            	je .Lchar_newline
  9677 00006C6A 3C0C                    	cmp al, 12
  9678 00006C6C 0F8499000000            	je .Lchar_formfeed
  9679 00006C72 3C0D                    	cmp al, 13
  9680 00006C74 0F84A0000000            	je .Lchar_return
  9681 00006C7A 3C1B                    	cmp al, 27
  9682 00006C7C 0F84A7000000            	je .Lchar_escape
  9683 00006C82 4825FF000000            	and rax, 255
  9684 00006C88 3C20                    	cmp al, ' '
  9685 00006C8A 0F84A8000000            	je .Lchar_space
  9686 00006C90 48BF-                   	mov rdi, fmt_char_hex
  9686 00006C92 [370F000000000000] 
  9687 00006C9A 4889C6                  	mov rsi, rax
  9688 00006C9D E962040000              	jmp .Lemit	
  9689                                  
  9690                                  .Lchar_backslash:
  9691 00006CA2 48BF-                   	mov rdi, fmt_char_backslash
  9691 00006CA4 [E30E000000000000] 
  9692 00006CAC E953040000              	jmp .Lemit
  9693                                  
  9694                                  .Lchar_dquote:
  9695 00006CB1 48BF-                   	mov rdi, fmt_char_dquote
  9695 00006CB3 [E70E000000000000] 
  9696 00006CBB E944040000              	jmp .Lemit
  9697                                  
  9698                                  .Lchar_null:
  9699 00006CC0 48BF-                   	mov rdi, fmt_char_null
  9699 00006CC2 [F00E000000000000] 
  9700 00006CCA E935040000              	jmp .Lemit
  9701                                  
  9702                                  .Lchar_bell:
  9703 00006CCF 48BF-                   	mov rdi, fmt_char_bell
  9703 00006CD1 [F60E000000000000] 
  9704 00006CD9 E926040000              	jmp .Lemit
  9705                                  
  9706                                  .Lchar_backspace:
  9707 00006CDE 48BF-                   	mov rdi, fmt_char_backspace
  9707 00006CE0 [FD0E000000000000] 
  9708 00006CE8 E917040000              	jmp .Lemit
  9709                                  
  9710                                  .Lchar_tab:
  9711 00006CED 48BF-                   	mov rdi, fmt_char_tab
  9711 00006CEF [090F000000000000] 
  9712 00006CF7 E908040000              	jmp .Lemit
  9713                                  
  9714                                  .Lchar_newline:
  9715 00006CFC 48BF-                   	mov rdi, fmt_char_newline
  9715 00006CFE [0F0F000000000000] 
  9716 00006D06 E9F9030000              	jmp .Lemit
  9717                                  
  9718                                  .Lchar_formfeed:
  9719 00006D0B 48BF-                   	mov rdi, fmt_char_formfeed
  9719 00006D0D [190F000000000000] 
  9720 00006D15 E9EA030000              	jmp .Lemit
  9721                                  
  9722                                  .Lchar_return:
  9723 00006D1A 48BF-                   	mov rdi, fmt_char_return
  9723 00006D1C [200F000000000000] 
  9724 00006D24 E9DB030000              	jmp .Lemit
  9725                                  
  9726                                  .Lchar_escape:
  9727 00006D29 48BF-                   	mov rdi, fmt_char_escape
  9727 00006D2B [290F000000000000] 
  9728 00006D33 E9CC030000              	jmp .Lemit
  9729                                  
  9730                                  .Lchar_space:
  9731 00006D38 48BF-                   	mov rdi, fmt_char_space
  9731 00006D3A [2F0F000000000000] 
  9732 00006D42 E9BD030000              	jmp .Lemit
  9733                                  
  9734                                  .Lclosure:
  9735 00006D47 4889FE                  	mov rsi, qword rdi
  9736 00006D4A 48BF-                   	mov rdi, fmt_closure
  9736 00006D4C [440F000000000000] 
  9737 00006D54 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  9738 00006D58 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  9739 00006D5C E9A3030000              	jmp .Lemit
  9740                                  
  9741                                  .Linterned_symbol:
  9742 00006D61 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  9743 00006D65 BE01000000              	mov rsi, 1		 ; size = 1 byte
  9744 00006D6A 488B5701                	mov rdx, qword [rdi + 1] ; length
  9745 00006D6E 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  9746 00006D72 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  9747                                  	ENTER
    44 00006D7A C8000000            <1>  enter 0, 0
    45 00006D7E 4883E4F0            <1>  and rsp, ~15
  9748 00006D82 E8(00000000)            	call fwrite
  9749                                  	LEAVE
    49 00006D87 C9                  <1>  leave
  9750 00006D88 E98C030000              	jmp .Lend
  9751                                  
  9752                                  .Luninterned_symbol:
  9753 00006D8D 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  9754 00006D91 48BF-                           mov rdi, fmt_gensym
  9754 00006D93 [3F0F000000000000] 
  9755 00006D9B E964030000                      jmp .Lemit
  9756                                  	
  9757                                  .Lpair:
  9758 00006DA0 57                      	push rdi
  9759 00006DA1 48BF-                   	mov rdi, fmt_lparen
  9759 00006DA3 [700F000000000000] 
  9760 00006DAB B800000000              	mov rax, 0
  9761                                          ENTER
    44 00006DB0 C8000000            <1>  enter 0, 0
    45 00006DB4 4883E4F0            <1>  and rsp, ~15
  9762 00006DB8 E8(00000000)            	call printf
  9763                                          LEAVE
    49 00006DBD C9                  <1>  leave
  9764 00006DBE 488B3C24                	mov rdi, qword [rsp] 	; pair
  9765 00006DC2 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  9766 00006DC6 E8A1FDFFFF              	call print_sexpr
  9767 00006DCB 5F                      	pop rdi 		; pair
  9768 00006DCC 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  9769                                  .Lcdr:
  9770 00006DD0 8A07                    	mov al, byte [rdi]
  9771 00006DD2 3C01                    	cmp al, T_nil
  9772 00006DD4 7447                    	je .Lcdr_nil
  9773 00006DD6 3C21                    	cmp al, T_pair
  9774 00006DD8 7462                    	je .Lcdr_pair
  9775 00006DDA 57                      	push rdi
  9776 00006DDB 48BF-                   	mov rdi, fmt_dotted_pair
  9776 00006DDD [720F000000000000] 
  9777 00006DE5 B800000000              	mov rax, 0
  9778                                          ENTER
    44 00006DEA C8000000            <1>  enter 0, 0
    45 00006DEE 4883E4F0            <1>  and rsp, ~15
  9779 00006DF2 E8(00000000)            	call printf
  9780                                          LEAVE
    49 00006DF7 C9                  <1>  leave
  9781 00006DF8 5F                      	pop rdi
  9782 00006DF9 E86EFDFFFF              	call print_sexpr
  9783 00006DFE 48BF-                   	mov rdi, fmt_rparen
  9783 00006E00 [760F000000000000] 
  9784 00006E08 B800000000              	mov rax, 0
  9785                                          ENTER
    44 00006E0D C8000000            <1>  enter 0, 0
    45 00006E11 4883E4F0            <1>  and rsp, ~15
  9786 00006E15 E8(00000000)            	call printf
  9787                                          LEAVE
    49 00006E1A C9                  <1>  leave
  9788 00006E1B C9                      	leave
  9789 00006E1C C3                      	ret
  9790                                  
  9791                                  .Lcdr_nil:
  9792 00006E1D 48BF-                   	mov rdi, fmt_rparen
  9792 00006E1F [760F000000000000] 
  9793 00006E27 B800000000              	mov rax, 0
  9794                                          ENTER
    44 00006E2C C8000000            <1>  enter 0, 0
    45 00006E30 4883E4F0            <1>  and rsp, ~15
  9795 00006E34 E8(00000000)            	call printf
  9796                                          LEAVE
    49 00006E39 C9                  <1>  leave
  9797 00006E3A C9                      	leave
  9798 00006E3B C3                      	ret
  9799                                  
  9800                                  .Lcdr_pair:
  9801 00006E3C 57                      	push rdi
  9802 00006E3D 48BF-                   	mov rdi, fmt_space
  9802 00006E3F [780F000000000000] 
  9803 00006E47 B800000000              	mov rax, 0
  9804                                          ENTER
    44 00006E4C C8000000            <1>  enter 0, 0
    45 00006E50 4883E4F0            <1>  and rsp, ~15
  9805 00006E54 E8(00000000)            	call printf
  9806                                          LEAVE
    49 00006E59 C9                  <1>  leave
  9807 00006E5A 488B3C24                	mov rdi, qword [rsp]
  9808 00006E5E 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  9809 00006E62 E805FDFFFF              	call print_sexpr
  9810 00006E67 5F                      	pop rdi
  9811 00006E68 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  9812 00006E6C E95FFFFFFF              	jmp .Lcdr
  9813                                  
  9814                                  .Lvector:
  9815 00006E71 488B4701                	mov rax, qword [rdi + 1] ; length
  9816 00006E75 4883F800                	cmp rax, 0
  9817 00006E79 0F8484000000            	je .Lvector_empty
  9818 00006E7F 57                      	push rdi
  9819 00006E80 48BF-                   	mov rdi, fmt_vector
  9819 00006E82 [7E0F000000000000] 
  9820 00006E8A B800000000              	mov rax, 0
  9821                                          ENTER
    44 00006E8F C8000000            <1>  enter 0, 0
    45 00006E93 4883E4F0            <1>  and rsp, ~15
  9822 00006E97 E8(00000000)            	call printf
  9823                                          LEAVE
    49 00006E9C C9                  <1>  leave
  9824 00006E9D 488B3C24                	mov rdi, qword [rsp]
  9825 00006EA1 FF7701                  	push qword [rdi + 1]
  9826 00006EA4 6A01                    	push 1
  9827 00006EA6 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  9828 00006EAA E8BDFCFFFF              	call print_sexpr
  9829                                  .Lvector_loop:
  9830                                  	; [rsp] index
  9831                                  	; [rsp + 8*1] limit
  9832                                  	; [rsp + 8*2] vector
  9833 00006EAF 488B0424                	mov rax, qword [rsp]
  9834 00006EB3 483B442408              	cmp rax, qword [rsp + 8*1]
  9835 00006EB8 7436                    	je .Lvector_end
  9836 00006EBA 48BF-                   	mov rdi, fmt_space
  9836 00006EBC [780F000000000000] 
  9837 00006EC4 B800000000              	mov rax, 0
  9838                                          ENTER
    44 00006EC9 C8000000            <1>  enter 0, 0
    45 00006ECD 4883E4F0            <1>  and rsp, ~15
  9839 00006ED1 E8(00000000)            	call printf
  9840                                          LEAVE
    49 00006ED6 C9                  <1>  leave
  9841 00006ED7 488B0424                	mov rax, qword [rsp]
  9842 00006EDB 488B5C2410              	mov rbx, qword [rsp + 8*2]
  9843 00006EE0 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  9844 00006EE5 E882FCFFFF              	call print_sexpr
  9845 00006EEA 48FF0424                	inc qword [rsp]
  9846 00006EEE EBBF                    	jmp .Lvector_loop
  9847                                  
  9848                                  .Lvector_end:
  9849 00006EF0 4883C418                	add rsp, 8*3
  9850 00006EF4 48BF-                   	mov rdi, fmt_rparen
  9850 00006EF6 [760F000000000000] 
  9851 00006EFE E901020000              	jmp .Lemit	
  9852                                  
  9853                                  .Lvector_empty:
  9854 00006F03 48BF-                   	mov rdi, fmt_empty_vector
  9854 00006F05 [7A0F000000000000] 
  9855 00006F0D E9F2010000              	jmp .Lemit
  9856                                  
  9857                                  .Lreal:
  9858 00006F12 FF7701                  	push qword [rdi + 1]
  9859 00006F15 F20F100424              	movsd xmm0, qword [rsp]
  9860 00006F1A 4883C408                	add rsp, 8*1
  9861 00006F1E 48BF-                   	mov rdi, fmt_real
  9861 00006F20 [810F000000000000] 
  9862 00006F28 B801000000              	mov rax, 1
  9863                                  	ENTER
    44 00006F2D C8000000            <1>  enter 0, 0
    45 00006F31 4883E4F0            <1>  and rsp, ~15
  9864 00006F35 E8(00000000)            	call printf
  9865                                  	LEAVE
    49 00006F3A C9                  <1>  leave
  9866 00006F3B E9D9010000              	jmp .Lend
  9867                                  
  9868                                  .Lfraction:
  9869 00006F40 488B7701                	mov rsi, qword [rdi + 1]
  9870 00006F44 488B5709                	mov rdx, qword [rdi + 1 + 8]
  9871 00006F48 4883FE00                	cmp rsi, 0
  9872 00006F4C 7415                    	je .Lrat_zero
  9873 00006F4E 4883FA01                	cmp rdx, 1
  9874 00006F52 741E                    	je .Lrat_int
  9875 00006F54 48BF-                   	mov rdi, fmt_fraction
  9875 00006F56 [840F000000000000] 
  9876 00006F5E E9A1010000              	jmp .Lemit
  9877                                  
  9878                                  .Lrat_zero:
  9879 00006F63 48BF-                   	mov rdi, fmt_zero
  9879 00006F65 [8C0F000000000000] 
  9880 00006F6D E992010000              	jmp .Lemit
  9881                                  
  9882                                  .Lrat_int:
  9883 00006F72 48BF-                   	mov rdi, fmt_int
  9883 00006F74 [8E0F000000000000] 
  9884 00006F7C E983010000              	jmp .Lemit
  9885                                  
  9886                                  .Linteger:
  9887 00006F81 488B7701                	mov rsi, qword [rdi + 1]
  9888 00006F85 48BF-                   	mov rdi, fmt_int
  9888 00006F87 [8E0F000000000000] 
  9889 00006F8F E970010000              	jmp .Lemit
  9890                                  
  9891                                  .Lstring:
  9892 00006F94 488D4709                	lea rax, [rdi + 1 + 8]
  9893 00006F98 50                      	push rax
  9894 00006F99 FF7701                  	push qword [rdi + 1]
  9895 00006F9C 48BF-                   	mov rdi, fmt_dquote
  9895 00006F9E [D70F000000000000] 
  9896 00006FA6 B800000000              	mov rax, 0
  9897                                  	ENTER
    44 00006FAB C8000000            <1>  enter 0, 0
    45 00006FAF 4883E4F0            <1>  and rsp, ~15
  9898 00006FB3 E8(00000000)            	call printf
  9899                                  	LEAVE
    49 00006FB8 C9                  <1>  leave
  9900                                  .Lstring_loop:
  9901                                  	; qword [rsp]: limit
  9902                                  	; qword [rsp + 8*1]: char *
  9903 00006FB9 48833C2400              	cmp qword [rsp], 0
  9904 00006FBE 0F84FD000000            	je .Lstring_end
  9905 00006FC4 488B442408              	mov rax, qword [rsp + 8*1]
  9906 00006FC9 8A00                    	mov al, byte [rax]
  9907 00006FCB 4825FF000000            	and rax, 255
  9908 00006FD1 3C07                    	cmp al, 7
  9909 00006FD3 7468                            je .Lstring_char_7
  9910 00006FD5 3C08                            cmp al, 8
  9911 00006FD7 7470                            je .Lstring_char_8
  9912 00006FD9 3C09                            cmp al, 9
  9913 00006FDB 7478                            je .Lstring_char_9
  9914 00006FDD 3C0A                            cmp al, 10
  9915 00006FDF 0F847C000000                    je .Lstring_char_10
  9916 00006FE5 3C0B                            cmp al, 11
  9917 00006FE7 0F8480000000                    je .Lstring_char_11
  9918 00006FED 3C0C                            cmp al, 12
  9919 00006FEF 0F8484000000                    je .Lstring_char_12
  9920 00006FF5 3C0D                            cmp al, 13
  9921 00006FF7 0F8488000000                    je .Lstring_char_13
  9922 00006FFD 3C22                            cmp al, 34
  9923 00006FFF 0F848C000000                    je .Lstring_char_34
  9924 00007005 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  9926 00007007 3C20                            cmp al, ' '
  9927 00007009 0F8CA0000000                    jl .Lstring_char_hex
  9928 0000700F 48BF-                           mov rdi, fmt_string_char
  9928 00007011 [D90F000000000000] 
  9929 00007019 4889C6                          mov rsi, rax
  9930                                  .Lstring_char_emit:
  9931 0000701C B800000000                      mov rax, 0
  9932                                          ENTER
    44 00007021 C8000000            <1>  enter 0, 0
    45 00007025 4883E4F0            <1>  and rsp, ~15
  9933 00007029 E8(00000000)                    call printf
  9934                                          LEAVE
    49 0000702E C9                  <1>  leave
  9935 0000702F 48FF0C24                        dec qword [rsp]
  9936 00007033 48FF442408                      inc qword [rsp + 8*1]
  9937 00007038 E97CFFFFFF                      jmp .Lstring_loop
  9938                                  
  9939                                  .Lstring_char_7:
  9940 0000703D 48BF-                           mov rdi, fmt_string_char_7
  9940 0000703F [DC0F000000000000] 
  9941 00007047 EBD3                            jmp .Lstring_char_emit
  9942                                  
  9943                                  .Lstring_char_8:
  9944 00007049 48BF-                           mov rdi, fmt_string_char_8
  9944 0000704B [DF0F000000000000] 
  9945 00007053 EBC7                            jmp .Lstring_char_emit
  9946                                          
  9947                                  .Lstring_char_9:
  9948 00007055 48BF-                           mov rdi, fmt_string_char_9
  9948 00007057 [E20F000000000000] 
  9949 0000705F EBBB                            jmp .Lstring_char_emit
  9950                                  
  9951                                  .Lstring_char_10:
  9952 00007061 48BF-                           mov rdi, fmt_string_char_10
  9952 00007063 [E50F000000000000] 
  9953 0000706B EBAF                            jmp .Lstring_char_emit
  9954                                  
  9955                                  .Lstring_char_11:
  9956 0000706D 48BF-                           mov rdi, fmt_string_char_11
  9956 0000706F [E80F000000000000] 
  9957 00007077 EBA3                            jmp .Lstring_char_emit
  9958                                  
  9959                                  .Lstring_char_12:
  9960 00007079 48BF-                           mov rdi, fmt_string_char_12
  9960 0000707B [EB0F000000000000] 
  9961 00007083 EB97                            jmp .Lstring_char_emit
  9962                                  
  9963                                  .Lstring_char_13:
  9964 00007085 48BF-                           mov rdi, fmt_string_char_13
  9964 00007087 [EE0F000000000000] 
  9965 0000708F EB8B                            jmp .Lstring_char_emit
  9966                                  
  9967                                  .Lstring_char_34:
  9968 00007091 48BF-                           mov rdi, fmt_string_char_34
  9968 00007093 [F10F000000000000] 
  9969 0000709B E97CFFFFFF                      jmp .Lstring_char_emit
  9970                                  
  9971                                  .Lstring_char_92:
  9972 000070A0 48BF-                           mov rdi, fmt_string_char_92
  9972 000070A2 [F40F000000000000] 
  9973 000070AA E96DFFFFFF                      jmp .Lstring_char_emit
  9974                                  
  9975                                  .Lstring_char_hex:
  9976 000070AF 48BF-                           mov rdi, fmt_string_char_hex
  9976 000070B1 [F70F000000000000] 
  9977 000070B9 4889C6                          mov rsi, rax
  9978 000070BC E95BFFFFFF                      jmp .Lstring_char_emit        
  9979                                  
  9980                                  .Lstring_end:
  9981 000070C1 4883C410                	add rsp, 8 * 2
  9982 000070C5 48BF-                   	mov rdi, fmt_dquote
  9982 000070C7 [D70F000000000000] 
  9983 000070CF EB33                    	jmp .Lemit
  9984                                  
  9985                                  .Lunknown_sexpr_type:
  9986 000070D1 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  9986 000070D3 [920F000000000000] 
  9987 000070DB 4825FF000000            	and rax, 255
  9988 000070E1 4889C2                  	mov rdx, rax
  9989 000070E4 4889F9                  	mov rcx, rdi
  9990 000070E7 488B3C25[00000000]      	mov rdi, qword [stderr]
  9991 000070EF B800000000              	mov rax, 0
  9992                                          ENTER
    44 000070F4 C8000000            <1>  enter 0, 0
    45 000070F8 4883E4F0            <1>  and rsp, ~15
  9993 000070FC E8(00000000)            	call fprintf
  9994                                          LEAVE
    49 00007101 C9                  <1>  leave
  9995 00007102 C9                              leave
  9996 00007103 C3                              ret
  9997                                  
  9998                                  .Lemit:
  9999 00007104 B800000000              	mov rax, 0
 10000                                          ENTER
    44 00007109 C8000000            <1>  enter 0, 0
    45 0000710D 4883E4F0            <1>  and rsp, ~15
 10001 00007111 E8(00000000)            	call printf
 10002                                          LEAVE
    49 00007116 C9                  <1>  leave
 10003 00007117 EB00                    	jmp .Lend
 10004                                  
 10005                                  .Lend:
 10006                                  	LEAVE
    49 00007119 C9                  <1>  leave
 10007 0000711A C3                      	ret
 10008                                  
 10009                                  ;;; rdi: address of free variable
 10010                                  ;;; rsi: address of code-pointer
 10011                                  bind_primitive:
 10012 0000711B C8000000                        enter 0, 0
 10013 0000711F 57                              push rdi
 10014 00007120 BF11000000                      mov rdi, (1 + 8 + 8)
 10015 00007125 E8C1F7FFFF                      call malloc
 10016 0000712A 5F                              pop rdi
 10017 0000712B C60004                          mov byte [rax], T_closure
 10018 0000712E 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
 10019 00007136 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
 10020 0000713A 488907                          mov qword [rdi], rax
 10021 0000713D 48B8-                           mov rax, sob_void
 10021 0000713F [0000000000000000] 
 10022 00007147 C9                              leave
 10023 00007148 C3                              ret
 10024                                  
 10025                                  L_code_ptr_ash:
 10026 00007149 C8000000                        enter 0, 0
 10027 0000714D 48837D1802                      cmp COUNT, 2
 10028 00007152 0F8597140000                    jne L_error_arg_count_2
 10029 00007158 488B7D20                        mov rdi, PARAM(0)
 10030                                          assert_integer(rdi)
    53 0000715C 803F11              <1>  cmp byte [%1], %2
    54 0000715F 0F8529150000        <1>  jne L_error_incorrect_type
 10031 00007165 488B4D28                        mov rcx, PARAM(1)
 10032                                          assert_integer(rcx)
    53 00007169 803911              <1>  cmp byte [%1], %2
    54 0000716C 0F851C150000        <1>  jne L_error_incorrect_type
 10033 00007172 488B7F01                        mov rdi, qword [rdi + 1]
 10034 00007176 488B4901                        mov rcx, qword [rcx + 1]
 10035 0000717A 4883F900                        cmp rcx, 0
 10036 0000717E 7C0F                            jl .L_negative
 10037                                  .L_loop_positive:
 10038 00007180 4883F900                        cmp rcx, 0
 10039 00007184 741B                            je .L_exit
 10040 00007186 48D3E7                          sal rdi, cl
 10041 00007189 48C1E908                        shr rcx, 8
 10042 0000718D EBF1                            jmp .L_loop_positive
 10043                                  .L_negative:
 10044 0000718F 48F7D9                          neg rcx
 10045                                  .L_loop_negative:
 10046 00007192 4883F900                        cmp rcx, 0
 10047 00007196 7409                            je .L_exit
 10048 00007198 48D3FF                          sar rdi, cl
 10049 0000719B 48C1E908                        shr rcx, 8
 10050 0000719F EBF1                            jmp .L_loop_negative
 10051                                  .L_exit:
 10052 000071A1 E863130000                      call make_integer
 10053 000071A6 C9                              leave
 10054 000071A7 C22000                          ret AND_KILL_FRAME(2)
 10055                                  
 10056                                  L_code_ptr_logand:
 10057 000071AA C8000000                        enter 0, 0
 10058 000071AE 48837D1802                      cmp COUNT, 2
 10059 000071B3 0F8536140000                    jne L_error_arg_count_2
 10060 000071B9 4C8B4520                        mov r8, PARAM(0)
 10061                                          assert_integer(r8)
    53 000071BD 41803811            <1>  cmp byte [%1], %2
    54 000071C1 0F85C7140000        <1>  jne L_error_incorrect_type
 10062 000071C7 4C8B4D28                        mov r9, PARAM(1)
 10063                                          assert_integer(r9)
    53 000071CB 41803911            <1>  cmp byte [%1], %2
    54 000071CF 0F85B9140000        <1>  jne L_error_incorrect_type
 10064 000071D5 498B7801                        mov rdi, qword [r8 + 1]
 10065 000071D9 49237901                        and rdi, qword [r9 + 1]
 10066 000071DD E827130000                      call make_integer
 10067 000071E2 C9                              leave
 10068 000071E3 C22000                          ret AND_KILL_FRAME(2)
 10069                                  
 10070                                  L_code_ptr_logor:
 10071 000071E6 C8000000                        enter 0, 0
 10072 000071EA 48837D1802                      cmp COUNT, 2
 10073 000071EF 0F85FA130000                    jne L_error_arg_count_2
 10074 000071F5 4C8B4520                        mov r8, PARAM(0)
 10075                                          assert_integer(r8)
    53 000071F9 41803811            <1>  cmp byte [%1], %2
    54 000071FD 0F858B140000        <1>  jne L_error_incorrect_type
 10076 00007203 4C8B4D28                        mov r9, PARAM(1)
 10077                                          assert_integer(r9)
    53 00007207 41803911            <1>  cmp byte [%1], %2
    54 0000720B 0F857D140000        <1>  jne L_error_incorrect_type
 10078 00007211 498B7801                        mov rdi, qword [r8 + 1]
 10079 00007215 490B7901                        or rdi, qword [r9 + 1]
 10080 00007219 E8EB120000                      call make_integer
 10081 0000721E C9                              leave
 10082 0000721F C22000                          ret AND_KILL_FRAME(2)
 10083                                  
 10084                                  L_code_ptr_logxor:
 10085 00007222 C8000000                        enter 0, 0
 10086 00007226 48837D1802                      cmp COUNT, 2
 10087 0000722B 0F85BE130000                    jne L_error_arg_count_2
 10088 00007231 4C8B4520                        mov r8, PARAM(0)
 10089                                          assert_integer(r8)
    53 00007235 41803811            <1>  cmp byte [%1], %2
    54 00007239 0F854F140000        <1>  jne L_error_incorrect_type
 10090 0000723F 4C8B4D28                        mov r9, PARAM(1)
 10091                                          assert_integer(r9)
    53 00007243 41803911            <1>  cmp byte [%1], %2
    54 00007247 0F8541140000        <1>  jne L_error_incorrect_type
 10092 0000724D 498B7801                        mov rdi, qword [r8 + 1]
 10093 00007251 49337901                        xor rdi, qword [r9 + 1]
 10094 00007255 E8AF120000                      call make_integer
 10095                                          LEAVE
    49 0000725A C9                  <1>  leave
 10096 0000725B C22000                          ret AND_KILL_FRAME(2)
 10097                                  
 10098                                  L_code_ptr_lognot:
 10099 0000725E C8000000                        enter 0, 0
 10100 00007262 48837D1801                      cmp COUNT, 1
 10101 00007267 0F854D130000                    jne L_error_arg_count_1
 10102 0000726D 4C8B4520                        mov r8, PARAM(0)
 10103                                          assert_integer(r8)
    53 00007271 41803811            <1>  cmp byte [%1], %2
    54 00007275 0F8513140000        <1>  jne L_error_incorrect_type
 10104 0000727B 498B7801                        mov rdi, qword [r8 + 1]
 10105 0000727F 48F7D7                          not rdi
 10106 00007282 E882120000                      call make_integer
 10107 00007287 C9                              leave
 10108 00007288 C21800                          ret AND_KILL_FRAME(1)
 10109                                  
 10110                                  ;;; fill in for final project!
 10111                                  L_code_ptr_bin_apply:
 10112 0000728B 4989E8                  mov r8, rbp
 10113 0000728E FF7500                  push  qword [rbp]
 10114 00007291 4889E5                  mov rbp, rsp
 10115                                  
 10116                                  ;calc args
 10117 00007294 4C8B4D28                mov r9, PARAM(1) ; save for later start of the params
 10118 00007298 4D89CA                  mov r10, r9 
 10119 0000729B B900000000              mov rcx, 0 ;args count
 10120                                  
 10121                                  .L_args_loop:
 10122 000072A0 4981FA[01000000]        cmp r10, sob_nil
 10123 000072A7 7413                    je .L_args_end
 10124                                  assert_pair(r10)
    53 000072A9 41803A21            <1>  cmp byte [%1], %2
    54 000072AD 0F85DB130000        <1>  jne L_error_incorrect_type
 10125 000072B3 4D8B5209                mov r10, SOB_PAIR_CDR(r10)
 10126 000072B7 48FFC1                  inc rcx
 10127 000072BA EBE4                    jmp .L_args_loop
 10128                                  
 10129                                  .L_args_end:
 10130                                  ;set place in the stack
 10131 000072BC 4C8D14CDE8FFFFFF        lea r10, [8*(rcx -3)]
 10132 000072C4 4C29D4                  sub rsp, r10
 10133                                  
 10134                                  ;save ret afddress
 10135 000072C7 4C8B5508                mov r10, RET_ADDR
 10136 000072CB 4C891424                mov qword [rsp], r10
 10137                                  
 10138                                  ;save lexical env
 10139 000072CF 488B7520                mov rsi, PARAM(0)
 10140                                  assert_closure(rsi)
    53 000072D3 803E04              <1>  cmp byte [%1], %2
    54 000072D6 0F85B2130000        <1>  jne L_error_incorrect_type
 10141 000072DC 4C8B5601                mov r10, SOB_CLOSURE_ENV(rsi)
 10142 000072E0 4C89542408              mov qword [rsp + 8], r10
 10143                                  
 10144                                  ;save argc
 10145 000072E5 48894C2410              mov qword [rsp + 2*8], rcx
 10146                                  
 10147                                  ;save params
 10148 000072EA 4C8D542418              lea r10, [rsp + 3*8]
 10149 000072EF 4D89CB                  mov r11, r9
 10150                                  .L_params_loop:
 10151 000072F2 4981FB[01000000]                cmp r11, sob_nil
 10152 000072F9 7411                            je .L_params_end
 10153 000072FB 4D8B6301                        mov r12, SOB_PAIR_CAR(r11)
 10154 000072FF 4D8922                          mov qword [r10], r12
 10155 00007302 4D8B5B09                        mov r11, SOB_PAIR_CDR(r11)
 10156 00007306 4983C208                        add r10, 8
 10157 0000730A EBE6                            jmp .L_params_loop
 10158                                  .L_params_end:
 10159 0000730C 4C89C5                          mov rbp, r8
 10160 0000730F FF6609                          jmp SOB_CLOSURE_CODE(rsi)
 10161                                  
 10162                                  L_code_ptr_is_null:
 10163 00007312 C8000000                        enter 0, 0
 10164 00007316 48837D1801                      cmp COUNT, 1
 10165 0000731B 0F8599120000                    jne L_error_arg_count_1
 10166 00007321 488B4520                        mov rax, PARAM(0)
 10167 00007325 803801                          cmp byte [rax], T_nil
 10168 00007328 750C                            jne .L_false
 10169 0000732A 48B8-                           mov rax, sob_boolean_true
 10169 0000732C [0300000000000000] 
 10170 00007334 EB0A                            jmp .L_end
 10171                                  .L_false:
 10172 00007336 48B8-                           mov rax, sob_boolean_false
 10172 00007338 [0200000000000000] 
 10173                                  .L_end:
 10174 00007340 C9                              leave
 10175 00007341 C21800                          ret AND_KILL_FRAME(1)
 10176                                  
 10177                                  L_code_ptr_is_pair:
 10178 00007344 C8000000                        enter 0, 0
 10179 00007348 48837D1801                      cmp COUNT, 1
 10180 0000734D 0F8567120000                    jne L_error_arg_count_1
 10181 00007353 488B4520                        mov rax, PARAM(0)
 10182 00007357 803821                          cmp byte [rax], T_pair
 10183 0000735A 750C                            jne .L_false
 10184 0000735C 48B8-                           mov rax, sob_boolean_true
 10184 0000735E [0300000000000000] 
 10185 00007366 EB0A                            jmp .L_end
 10186                                  .L_false:
 10187 00007368 48B8-                           mov rax, sob_boolean_false
 10187 0000736A [0200000000000000] 
 10188                                  .L_end:
 10189 00007372 C9                              leave
 10190 00007373 C21800                          ret AND_KILL_FRAME(1)
 10191                                          
 10192                                  L_code_ptr_is_void:
 10193 00007376 C8000000                        enter 0, 0
 10194 0000737A 48837D1801                      cmp COUNT, 1
 10195 0000737F 0F8535120000                    jne L_error_arg_count_1
 10196 00007385 488B4520                        mov rax, PARAM(0)
 10197 00007389 803800                          cmp byte [rax], T_void
 10198 0000738C 750C                            jne .L_false
 10199 0000738E 48B8-                           mov rax, sob_boolean_true
 10199 00007390 [0300000000000000] 
 10200 00007398 EB0A                            jmp .L_end
 10201                                  .L_false:
 10202 0000739A 48B8-                           mov rax, sob_boolean_false
 10202 0000739C [0200000000000000] 
 10203                                  .L_end:
 10204 000073A4 C9                              leave
 10205 000073A5 C21800                          ret AND_KILL_FRAME(1)
 10206                                  
 10207                                  L_code_ptr_is_char:
 10208 000073A8 C8000000                        enter 0, 0
 10209 000073AC 48837D1801                      cmp COUNT, 1
 10210 000073B1 0F8503120000                    jne L_error_arg_count_1
 10211 000073B7 488B4520                        mov rax, PARAM(0)
 10212 000073BB 803802                          cmp byte [rax], T_char
 10213 000073BE 750C                            jne .L_false
 10214 000073C0 48B8-                           mov rax, sob_boolean_true
 10214 000073C2 [0300000000000000] 
 10215 000073CA EB0A                            jmp .L_end
 10216                                  .L_false:
 10217 000073CC 48B8-                           mov rax, sob_boolean_false
 10217 000073CE [0200000000000000] 
 10218                                  .L_end:
 10219 000073D6 C9                              leave
 10220 000073D7 C21800                          ret AND_KILL_FRAME(1)
 10221                                  
 10222                                  L_code_ptr_is_string:
 10223 000073DA C8000000                        enter 0, 0
 10224 000073DE 48837D1801                      cmp COUNT, 1
 10225 000073E3 0F85D1110000                    jne L_error_arg_count_1
 10226 000073E9 488B4520                        mov rax, PARAM(0)
 10227 000073ED 803803                          cmp byte [rax], T_string
 10228 000073F0 750C                            jne .L_false
 10229 000073F2 48B8-                           mov rax, sob_boolean_true
 10229 000073F4 [0300000000000000] 
 10230 000073FC EB0A                            jmp .L_end
 10231                                  .L_false:
 10232 000073FE 48B8-                           mov rax, sob_boolean_false
 10232 00007400 [0200000000000000] 
 10233                                  .L_end:
 10234 00007408 C9                              leave
 10235 00007409 C21800                          ret AND_KILL_FRAME(1)
 10236                                  
 10237                                  L_code_ptr_is_symbol:
 10238 0000740C C8000000                        enter 0, 0
 10239 00007410 48837D1801                      cmp COUNT, 1
 10240 00007415 0F859F110000                    jne L_error_arg_count_1
 10241 0000741B 4C8B4520                        mov r8, PARAM(0)
 10242 0000741F 41802040                        and byte [r8], T_symbol
 10243 00007423 740C                            jz .L_false
 10244 00007425 48B8-                           mov rax, sob_boolean_true
 10244 00007427 [0300000000000000] 
 10245 0000742F EB0A                            jmp .L_exit
 10246                                  .L_false:
 10247 00007431 48B8-                           mov rax, sob_boolean_false
 10247 00007433 [0200000000000000] 
 10248                                  .L_exit:
 10249 0000743B C9                              leave
 10250 0000743C C21800                          ret AND_KILL_FRAME(1)
 10251                                  
 10252                                  L_code_ptr_is_uninterned_symbol:
 10253 0000743F C8000000                        enter 0, 0
 10254 00007443 48837D1801                      cmp COUNT, 1
 10255 00007448 0F856C110000                    jne L_error_arg_count_1
 10256 0000744E 4C8B4520                        mov r8, PARAM(0)
 10257 00007452 41803842                        cmp byte [r8], T_uninterned_symbol
 10258 00007456 750C                            jne .L_false
 10259 00007458 48B8-                           mov rax, sob_boolean_true
 10259 0000745A [0300000000000000] 
 10260 00007462 EB0A                            jmp .L_exit
 10261                                  .L_false:
 10262 00007464 48B8-                           mov rax, sob_boolean_false
 10262 00007466 [0200000000000000] 
 10263                                  .L_exit:
 10264 0000746E C9                              leave
 10265 0000746F C21800                          ret AND_KILL_FRAME(1)
 10266                                  
 10267                                  L_code_ptr_is_interned_symbol:
 10268 00007472 C8000000                        enter 0, 0
 10269 00007476 48837D1801                      cmp COUNT, 1
 10270 0000747B 0F8539110000                    jne L_error_arg_count_1
 10271 00007481 488B4520                        mov rax, PARAM(0)
 10272 00007485 803841                          cmp byte [rax], T_interned_symbol
 10273 00007488 750C                            jne .L_false
 10274 0000748A 48B8-                           mov rax, sob_boolean_true
 10274 0000748C [0300000000000000] 
 10275 00007494 EB0A                            jmp .L_end
 10276                                  .L_false:
 10277 00007496 48B8-                           mov rax, sob_boolean_false
 10277 00007498 [0200000000000000] 
 10278                                  .L_end:
 10279 000074A0 C9                              leave
 10280 000074A1 C21800                          ret AND_KILL_FRAME(1)
 10281                                  
 10282                                  L_code_ptr_gensym:
 10283 000074A4 C8000000                        enter 0, 0
 10284 000074A8 48837D1800                      cmp COUNT, 0
 10285 000074AD 0F85D2100000                    jne L_error_arg_count_0
 10286 000074B3 48FF0425[FD0F0000]              inc qword [gensym_count]
 10287 000074BB BF09000000                      mov rdi, (1 + 8)
 10288 000074C0 E826F4FFFF                      call malloc
 10289 000074C5 C60042                          mov byte [rax], T_uninterned_symbol
 10290 000074C8 488B0C25[FD0F0000]              mov rcx, qword [gensym_count]
 10291 000074D0 48894801                        mov qword [rax + 1], rcx
 10292 000074D4 C9                              leave
 10293 000074D5 C21000                          ret AND_KILL_FRAME(0)
 10294                                  
 10295                                  L_code_ptr_is_vector:
 10296 000074D8 C8000000                        enter 0, 0
 10297 000074DC 48837D1801                      cmp COUNT, 1
 10298 000074E1 0F85D3100000                    jne L_error_arg_count_1
 10299 000074E7 488B4520                        mov rax, PARAM(0)
 10300 000074EB 803822                          cmp byte [rax], T_vector
 10301 000074EE 750C                            jne .L_false
 10302 000074F0 48B8-                           mov rax, sob_boolean_true
 10302 000074F2 [0300000000000000] 
 10303 000074FA EB0A                            jmp .L_end
 10304                                  .L_false:
 10305 000074FC 48B8-                           mov rax, sob_boolean_false
 10305 000074FE [0200000000000000] 
 10306                                  .L_end:
 10307 00007506 C9                              leave
 10308 00007507 C21800                          ret AND_KILL_FRAME(1)
 10309                                  
 10310                                  L_code_ptr_is_closure:
 10311 0000750A C8000000                        enter 0, 0
 10312 0000750E 48837D1801                      cmp COUNT, 1
 10313 00007513 0F85A1100000                    jne L_error_arg_count_1
 10314 00007519 488B4520                        mov rax, PARAM(0)
 10315 0000751D 803804                          cmp byte [rax], T_closure
 10316 00007520 750C                            jne .L_false
 10317 00007522 48B8-                           mov rax, sob_boolean_true
 10317 00007524 [0300000000000000] 
 10318 0000752C EB0A                            jmp .L_end
 10319                                  .L_false:
 10320 0000752E 48B8-                           mov rax, sob_boolean_false
 10320 00007530 [0200000000000000] 
 10321                                  .L_end:
 10322 00007538 C9                              leave
 10323 00007539 C21800                          ret AND_KILL_FRAME(1)
 10324                                  
 10325                                  L_code_ptr_is_real:
 10326 0000753C C8000000                        enter 0, 0
 10327 00007540 48837D1801                      cmp COUNT, 1
 10328 00007545 0F856F100000                    jne L_error_arg_count_1
 10329 0000754B 488B4520                        mov rax, PARAM(0)
 10330 0000754F 803813                          cmp byte [rax], T_real
 10331 00007552 750C                            jne .L_false
 10332 00007554 48B8-                           mov rax, sob_boolean_true
 10332 00007556 [0300000000000000] 
 10333 0000755E EB0A                            jmp .L_end
 10334                                  .L_false:
 10335 00007560 48B8-                           mov rax, sob_boolean_false
 10335 00007562 [0200000000000000] 
 10336                                  .L_end:
 10337 0000756A C9                              leave
 10338 0000756B C21800                          ret AND_KILL_FRAME(1)
 10339                                  
 10340                                  L_code_ptr_is_fraction:
 10341 0000756E C8000000                        enter 0, 0
 10342 00007572 48837D1801                      cmp COUNT, 1
 10343 00007577 0F853D100000                    jne L_error_arg_count_1
 10344 0000757D 488B4520                        mov rax, PARAM(0)
 10345 00007581 803812                          cmp byte [rax], T_fraction
 10346 00007584 750C                            jne .L_false
 10347 00007586 48B8-                           mov rax, sob_boolean_true
 10347 00007588 [0300000000000000] 
 10348 00007590 EB0A                            jmp .L_end
 10349                                  .L_false:
 10350 00007592 48B8-                           mov rax, sob_boolean_false
 10350 00007594 [0200000000000000] 
 10351                                  .L_end:
 10352 0000759C C9                              leave
 10353 0000759D C21800                          ret AND_KILL_FRAME(1)
 10354                                  
 10355                                  L_code_ptr_is_boolean:
 10356 000075A0 C8000000                        enter 0, 0
 10357 000075A4 48837D1801                      cmp COUNT, 1
 10358 000075A9 0F850B100000                    jne L_error_arg_count_1
 10359 000075AF 488B4520                        mov rax, PARAM(0)
 10360 000075B3 8A18                            mov bl, byte [rax]
 10361 000075B5 80E308                          and bl, T_boolean
 10362 000075B8 740C                            je .L_false
 10363 000075BA 48B8-                           mov rax, sob_boolean_true
 10363 000075BC [0300000000000000] 
 10364 000075C4 EB0A                            jmp .L_end
 10365                                  .L_false:
 10366 000075C6 48B8-                           mov rax, sob_boolean_false
 10366 000075C8 [0200000000000000] 
 10367                                  .L_end:
 10368 000075D0 C9                              leave
 10369 000075D1 C21800                          ret AND_KILL_FRAME(1)
 10370                                          
 10371                                  L_code_ptr_is_boolean_false:
 10372 000075D4 C8000000                        enter 0, 0
 10373 000075D8 48837D1801                      cmp COUNT, 1
 10374 000075DD 0F85D70F0000                    jne L_error_arg_count_1
 10375 000075E3 488B4520                        mov rax, PARAM(0)
 10376 000075E7 8A18                            mov bl, byte [rax]
 10377 000075E9 80FB09                          cmp bl, T_boolean_false
 10378 000075EC 750C                            jne .L_false
 10379 000075EE 48B8-                           mov rax, sob_boolean_true
 10379 000075F0 [0300000000000000] 
 10380 000075F8 EB0A                            jmp .L_end
 10381                                  .L_false:
 10382 000075FA 48B8-                           mov rax, sob_boolean_false
 10382 000075FC [0200000000000000] 
 10383                                  .L_end:
 10384 00007604 C9                              leave
 10385 00007605 C21800                          ret AND_KILL_FRAME(1)
 10386                                  
 10387                                  L_code_ptr_is_boolean_true:
 10388 00007608 C8000000                        enter 0, 0
 10389 0000760C 48837D1801                      cmp COUNT, 1
 10390 00007611 0F85A30F0000                    jne L_error_arg_count_1
 10391 00007617 488B4520                        mov rax, PARAM(0)
 10392 0000761B 8A18                            mov bl, byte [rax]
 10393 0000761D 80FB0A                          cmp bl, T_boolean_true
 10394 00007620 750C                            jne .L_false
 10395 00007622 48B8-                           mov rax, sob_boolean_true
 10395 00007624 [0300000000000000] 
 10396 0000762C EB0A                            jmp .L_end
 10397                                  .L_false:
 10398 0000762E 48B8-                           mov rax, sob_boolean_false
 10398 00007630 [0200000000000000] 
 10399                                  .L_end:
 10400 00007638 C9                              leave
 10401 00007639 C21800                          ret AND_KILL_FRAME(1)
 10402                                  
 10403                                  L_code_ptr_is_number:
 10404 0000763C C8000000                        enter 0, 0
 10405 00007640 48837D1801                      cmp COUNT, 1
 10406 00007645 0F856F0F0000                    jne L_error_arg_count_1
 10407 0000764B 488B4520                        mov rax, PARAM(0)
 10408 0000764F 8A18                            mov bl, byte [rax]
 10409 00007651 80E310                          and bl, T_number
 10410 00007654 740C                            jz .L_false
 10411 00007656 48B8-                           mov rax, sob_boolean_true
 10411 00007658 [0300000000000000] 
 10412 00007660 EB0A                            jmp .L_end
 10413                                  .L_false:
 10414 00007662 48B8-                           mov rax, sob_boolean_false
 10414 00007664 [0200000000000000] 
 10415                                  .L_end:
 10416 0000766C C9                              leave
 10417 0000766D C21800                          ret AND_KILL_FRAME(1)
 10418                                          
 10419                                  L_code_ptr_is_collection:
 10420 00007670 C8000000                        enter 0, 0
 10421 00007674 48837D1801                      cmp COUNT, 1
 10422 00007679 0F853B0F0000                    jne L_error_arg_count_1
 10423 0000767F 488B4520                        mov rax, PARAM(0)
 10424 00007683 8A18                            mov bl, byte [rax]
 10425 00007685 80E320                          and bl, T_collection
 10426 00007688 740C                            je .L_false
 10427 0000768A 48B8-                           mov rax, sob_boolean_true
 10427 0000768C [0300000000000000] 
 10428 00007694 EB0A                            jmp .L_end
 10429                                  .L_false:
 10430 00007696 48B8-                           mov rax, sob_boolean_false
 10430 00007698 [0200000000000000] 
 10431                                  .L_end:
 10432 000076A0 C9                              leave
 10433 000076A1 C21800                          ret AND_KILL_FRAME(1)
 10434                                  
 10435                                  L_code_ptr_cons:
 10436 000076A4 C8000000                        enter 0, 0
 10437 000076A8 48837D1802                      cmp COUNT, 2
 10438 000076AD 0F853C0F0000                    jne L_error_arg_count_2
 10439 000076B3 BF11000000                      mov rdi, (1 + 8 + 8)
 10440 000076B8 E82EF2FFFF                      call malloc
 10441 000076BD C60021                          mov byte [rax], T_pair
 10442 000076C0 488B5D20                        mov rbx, PARAM(0)
 10443 000076C4 48895801                        mov SOB_PAIR_CAR(rax), rbx
 10444 000076C8 488B5D28                        mov rbx, PARAM(1)
 10445 000076CC 48895809                        mov SOB_PAIR_CDR(rax), rbx
 10446 000076D0 C9                              leave
 10447 000076D1 C22000                          ret AND_KILL_FRAME(2)
 10448                                  
 10449                                  L_code_ptr_display_sexpr:
 10450 000076D4 C8000000                        enter 0, 0
 10451 000076D8 48837D1801                      cmp COUNT, 1
 10452 000076DD 0F85D70E0000                    jne L_error_arg_count_1
 10453 000076E3 488B7D20                        mov rdi, PARAM(0)
 10454 000076E7 E880F4FFFF                      call print_sexpr
 10455 000076EC 48B8-                           mov rax, sob_void
 10455 000076EE [0000000000000000] 
 10456 000076F6 C9                              leave
 10457 000076F7 C21800                          ret AND_KILL_FRAME(1)
 10458                                  
 10459                                  L_code_ptr_write_char:
 10460 000076FA C8000000                        enter 0, 0
 10461 000076FE 48837D1801                      cmp COUNT, 1
 10462 00007703 0F85B10E0000                    jne L_error_arg_count_1
 10463 00007709 488B4520                        mov rax, PARAM(0)
 10464                                          assert_char(rax)
    53 0000770D 803802              <1>  cmp byte [%1], %2
    54 00007710 0F85780F0000        <1>  jne L_error_incorrect_type
 10465 00007716 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 10466 00007719 4825FF000000                    and rax, 255
 10467 0000771F 48BF-                           mov rdi, fmt_char
 10467 00007721 [0510000000000000] 
 10468 00007729 4889C6                          mov rsi, rax
 10469 0000772C B800000000                      mov rax, 0
 10470                                          ENTER
    44 00007731 C8000000            <1>  enter 0, 0
    45 00007735 4883E4F0            <1>  and rsp, ~15
 10471 00007739 E8(00000000)                    call printf
 10472                                          LEAVE
    49 0000773E C9                  <1>  leave
 10473 0000773F 48B8-                           mov rax, sob_void
 10473 00007741 [0000000000000000] 
 10474 00007749 C9                              leave
 10475 0000774A C21800                          ret AND_KILL_FRAME(1)
 10476                                  
 10477                                  L_code_ptr_car:
 10478 0000774D C8000000                        enter 0, 0
 10479 00007751 48837D1801                      cmp COUNT, 1
 10480 00007756 0F855E0E0000                    jne L_error_arg_count_1
 10481 0000775C 488B4520                        mov rax, PARAM(0)
 10482                                          assert_pair(rax)
    53 00007760 803821              <1>  cmp byte [%1], %2
    54 00007763 0F85250F0000        <1>  jne L_error_incorrect_type
 10483 00007769 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 10484 0000776D C9                              leave
 10485 0000776E C21800                          ret AND_KILL_FRAME(1)
 10486                                          
 10487                                  L_code_ptr_cdr:
 10488 00007771 C8000000                        enter 0, 0
 10489 00007775 48837D1801                      cmp COUNT, 1
 10490 0000777A 0F853A0E0000                    jne L_error_arg_count_1
 10491 00007780 488B4520                        mov rax, PARAM(0)
 10492                                          assert_pair(rax)
    53 00007784 803821              <1>  cmp byte [%1], %2
    54 00007787 0F85010F0000        <1>  jne L_error_incorrect_type
 10493 0000778D 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 10494 00007791 C9                              leave
 10495 00007792 C21800                          ret AND_KILL_FRAME(1)
 10496                                          
 10497                                  L_code_ptr_string_length:
 10498 00007795 C8000000                        enter 0, 0
 10499 00007799 48837D1801                      cmp COUNT, 1
 10500 0000779E 0F85160E0000                    jne L_error_arg_count_1
 10501 000077A4 488B4520                        mov rax, PARAM(0)
 10502                                          assert_string(rax)
    53 000077A8 803803              <1>  cmp byte [%1], %2
    54 000077AB 0F85DD0E0000        <1>  jne L_error_incorrect_type
 10503 000077B1 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 10504 000077B5 E84F0D0000                      call make_integer
 10505 000077BA C9                              leave
 10506 000077BB C21800                          ret AND_KILL_FRAME(1)
 10507                                  
 10508                                  L_code_ptr_vector_length:
 10509 000077BE C8000000                        enter 0, 0
 10510 000077C2 48837D1801                      cmp COUNT, 1
 10511 000077C7 0F85ED0D0000                    jne L_error_arg_count_1
 10512 000077CD 488B4520                        mov rax, PARAM(0)
 10513                                          assert_vector(rax)
    53 000077D1 803822              <1>  cmp byte [%1], %2
    54 000077D4 0F85B40E0000        <1>  jne L_error_incorrect_type
 10514 000077DA 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 10515 000077DE E8260D0000                      call make_integer
 10516 000077E3 C9                              leave
 10517 000077E4 C21800                          ret AND_KILL_FRAME(1)
 10518                                  
 10519                                  L_code_ptr_real_to_integer:
 10520 000077E7 C8000000                        enter 0, 0
 10521 000077EB 48837D1801                      cmp COUNT, 1
 10522 000077F0 0F85C40D0000                    jne L_error_arg_count_1
 10523 000077F6 488B5D20                        mov rbx, PARAM(0)
 10524                                          assert_real(rbx)
    53 000077FA 803B13              <1>  cmp byte [%1], %2
    54 000077FD 0F858B0E0000        <1>  jne L_error_incorrect_type
 10525 00007803 F20F104301                      movsd xmm0, qword [rbx + 1]
 10526 00007808 F2480F2CF8                      cvttsd2si rdi, xmm0
 10527 0000780D E8F70C0000                      call make_integer
 10528 00007812 C9                              leave
 10529 00007813 C21800                          ret AND_KILL_FRAME(1)
 10530                                  
 10531                                  L_code_ptr_exit:
 10532 00007816 C8000000                        enter 0, 0
 10533 0000781A 48837D1800                      cmp COUNT, 0
 10534 0000781F 0F85600D0000                    jne L_error_arg_count_0
 10535 00007825 B800000000                      mov rax, 0
 10536 0000782A E8(00000000)                    call exit
 10537                                  
 10538                                  L_code_ptr_integer_to_real:
 10539 0000782F C8000000                        enter 0, 0
 10540 00007833 48837D1801                      cmp COUNT, 1
 10541 00007838 0F857C0D0000                    jne L_error_arg_count_1
 10542 0000783E 488B4520                        mov rax, PARAM(0)
 10543                                          assert_integer(rax)
    53 00007842 803811              <1>  cmp byte [%1], %2
    54 00007845 0F85430E0000        <1>  jne L_error_incorrect_type
 10544 0000784B FF7001                          push qword [rax + 1]
 10545 0000784E F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 10546 00007854 E8980C0000                      call make_real
 10547 00007859 C9                              leave
 10548 0000785A C21800                          ret AND_KILL_FRAME(1)
 10549                                  
 10550                                  L_code_ptr_fraction_to_real:
 10551 0000785D C8000000                        enter 0, 0
 10552 00007861 48837D1801                      cmp COUNT, 1
 10553 00007866 0F854E0D0000                    jne L_error_arg_count_1
 10554 0000786C 488B4520                        mov rax, PARAM(0)
 10555                                          assert_fraction(rax)
    53 00007870 803812              <1>  cmp byte [%1], %2
    54 00007873 0F85150E0000        <1>  jne L_error_incorrect_type
 10556 00007879 FF7001                          push qword [rax + 1]
 10557 0000787C F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 10558 00007882 FF7009                          push qword [rax + 1 + 8]
 10559 00007885 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 10560 0000788B F20F5EC1                        divsd xmm0, xmm1
 10561 0000788F E85D0C0000                      call make_real
 10562 00007894 C9                              leave
 10563 00007895 C21800                          ret AND_KILL_FRAME(1)
 10564                                  
 10565                                  L_code_ptr_char_to_integer:
 10566 00007898 C8000000                        enter 0, 0
 10567 0000789C 48837D1801                      cmp COUNT, 1
 10568 000078A1 0F85130D0000                    jne L_error_arg_count_1
 10569 000078A7 488B4520                        mov rax, PARAM(0)
 10570                                          assert_char(rax)
    53 000078AB 803802              <1>  cmp byte [%1], %2
    54 000078AE 0F85DA0D0000        <1>  jne L_error_incorrect_type
 10571 000078B4 8A4001                          mov al, byte [rax + 1]
 10572 000078B7 4825FF000000                    and rax, 255
 10573 000078BD 4889C7                          mov rdi, rax
 10574 000078C0 E8440C0000                      call make_integer
 10575 000078C5 C9                              leave
 10576 000078C6 C21800                          ret AND_KILL_FRAME(1)
 10577                                  
 10578                                  L_code_ptr_integer_to_fraction:
 10579 000078C9 C8000000                        enter 0, 0
 10580 000078CD 48837D1801                      cmp COUNT, 1
 10581 000078D2 0F85E20C0000                    jne L_error_arg_count_1
 10582 000078D8 4C8B4520                        mov r8, PARAM(0)
 10583                                          assert_integer(r8)
    53 000078DC 41803811            <1>  cmp byte [%1], %2
    54 000078E0 0F85A80D0000        <1>  jne L_error_incorrect_type
 10584 000078E6 BF11000000                      mov rdi, (1 + 8 + 8)
 10585 000078EB E8FBEFFFFF                      call malloc
 10586 000078F0 498B5801                        mov rbx, qword [r8 + 1]
 10587 000078F4 C60012                          mov byte [rax], T_fraction
 10588 000078F7 48895801                        mov qword [rax + 1], rbx
 10589 000078FB 48C7400901000000                mov qword [rax + 1 + 8], 1
 10590 00007903 C9                              leave
 10591 00007904 C21800                          ret AND_KILL_FRAME(1)
 10592                                  
 10593                                  L_code_ptr_integer_to_char:
 10594 00007907 C8000000                        enter 0, 0
 10595 0000790B 48837D1801                      cmp COUNT, 1
 10596 00007910 0F85A40C0000                    jne L_error_arg_count_1
 10597 00007916 488B4520                        mov rax, PARAM(0)
 10598                                          assert_integer(rax)
    53 0000791A 803811              <1>  cmp byte [%1], %2
    54 0000791D 0F856B0D0000        <1>  jne L_error_incorrect_type
 10599 00007923 488B5801                        mov rbx, qword [rax + 1]
 10600 00007927 4883FB00                        cmp rbx, 0
 10601 0000792B 0F8EF20B0000                    jle L_error_integer_range
 10602 00007931 4881FB00010000                  cmp rbx, 256
 10603 00007938 0F8DE50B0000                    jge L_error_integer_range
 10604 0000793E BF02000000                      mov rdi, (1 + 1)
 10605 00007943 E8A3EFFFFF                      call malloc
 10606 00007948 C60002                          mov byte [rax], T_char
 10607 0000794B 885801                          mov byte [rax + 1], bl
 10608 0000794E C9                              leave
 10609 0000794F C21800                          ret AND_KILL_FRAME(1)
 10610                                  
 10611                                  L_code_ptr_trng:
 10612 00007952 C8000000                        enter 0, 0
 10613 00007956 48837D1800                      cmp COUNT, 0
 10614 0000795B 0F85240C0000                    jne L_error_arg_count_0
 10615 00007961 480FC7F7                        rdrand rdi
 10616 00007965 48D1EF                          shr rdi, 1
 10617 00007968 E89C0B0000                      call make_integer
 10618 0000796D C9                              leave
 10619 0000796E C21000                          ret AND_KILL_FRAME(0)
 10620                                  
 10621                                  L_code_ptr_is_zero:
 10622 00007971 C8000000                        enter 0, 0
 10623 00007975 48837D1801                      cmp COUNT, 1
 10624 0000797A 0F853A0C0000                    jne L_error_arg_count_1
 10625 00007980 488B4520                        mov rax, PARAM(0)
 10626 00007984 803811                          cmp byte [rax], T_integer
 10627 00007987 740F                            je .L_integer
 10628 00007989 803812                          cmp byte [rax], T_fraction
 10629 0000798C 7413                            je .L_fraction
 10630 0000798E 803813                          cmp byte [rax], T_real
 10631 00007991 7417                            je .L_real
 10632 00007993 E9F60C0000                      jmp L_error_incorrect_type
 10633                                  .L_integer:
 10634 00007998 4883780100                      cmp qword [rax + 1], 0
 10635 0000799D 7429                            je .L_zero
 10636 0000799F EB1B                            jmp .L_not_zero
 10637                                  .L_fraction:
 10638 000079A1 4883780100                      cmp qword [rax + 1], 0
 10639 000079A6 7420                            je .L_zero
 10640 000079A8 EB12                            jmp .L_not_zero
 10641                                  .L_real:
 10642 000079AA 660FEFC0                        pxor xmm0, xmm0
 10643 000079AE FF7001                          push qword [rax + 1]
 10644 000079B1 F20F100C24                      movsd xmm1, qword [rsp]
 10645 000079B6 660F2EC1                        ucomisd xmm0, xmm1
 10646 000079BA 740C                            je .L_zero
 10647                                  .L_not_zero:
 10648 000079BC 48B8-                           mov rax, sob_boolean_false
 10648 000079BE [0200000000000000] 
 10649 000079C6 EB0A                            jmp .L_end
 10650                                  .L_zero:
 10651 000079C8 48B8-                           mov rax, sob_boolean_true
 10651 000079CA [0300000000000000] 
 10652                                  .L_end:
 10653 000079D2 C9                              leave
 10654 000079D3 C21800                          ret AND_KILL_FRAME(1)
 10655                                  
 10656                                  L_code_ptr_is_integer:
 10657 000079D6 C8000000                        enter 0, 0
 10658 000079DA 48837D1801                      cmp COUNT, 1
 10659 000079DF 0F85D50B0000                    jne L_error_arg_count_1
 10660 000079E5 488B4520                        mov rax, PARAM(0)
 10661 000079E9 803811                          cmp byte [rax], T_integer
 10662 000079EC 750C                            jne .L_false
 10663 000079EE 48B8-                           mov rax, sob_boolean_true
 10663 000079F0 [0300000000000000] 
 10664 000079F8 EB0A                            jmp .L_exit
 10665                                  .L_false:
 10666 000079FA 48B8-                           mov rax, sob_boolean_false
 10666 000079FC [0200000000000000] 
 10667                                  .L_exit:
 10668 00007A04 C9                              leave
 10669 00007A05 C21800                          ret AND_KILL_FRAME(1)
 10670                                  
 10671                                  L_code_ptr_raw_bin_add_rr:
 10672 00007A08 C8000000                        enter 0, 0
 10673 00007A0C 48837D1802                      cmp COUNT, 2
 10674 00007A11 0F85D80B0000                    jne L_error_arg_count_2
 10675 00007A17 488B5D20                        mov rbx, PARAM(0)
 10676                                          assert_real(rbx)
    53 00007A1B 803B13              <1>  cmp byte [%1], %2
    54 00007A1E 0F856A0C0000        <1>  jne L_error_incorrect_type
 10677 00007A24 488B4D28                        mov rcx, PARAM(1)
 10678                                          assert_real(rcx)
    53 00007A28 803913              <1>  cmp byte [%1], %2
    54 00007A2B 0F855D0C0000        <1>  jne L_error_incorrect_type
 10679 00007A31 F20F104301                      movsd xmm0, qword [rbx + 1]
 10680 00007A36 F20F104901                      movsd xmm1, qword [rcx + 1]
 10681 00007A3B F20F58C1                        addsd xmm0, xmm1
 10682 00007A3F E8AD0A0000                      call make_real
 10683 00007A44 C9                              leave
 10684 00007A45 C22000                          ret AND_KILL_FRAME(2)
 10685                                  
 10686                                  L_code_ptr_raw_bin_sub_rr:
 10687 00007A48 C8000000                        enter 0, 0
 10688 00007A4C 48837D1802                      cmp COUNT, 2
 10689 00007A51 0F85980B0000                    jne L_error_arg_count_2
 10690 00007A57 488B5D20                        mov rbx, PARAM(0)
 10691                                          assert_real(rbx)
    53 00007A5B 803B13              <1>  cmp byte [%1], %2
    54 00007A5E 0F852A0C0000        <1>  jne L_error_incorrect_type
 10692 00007A64 488B4D28                        mov rcx, PARAM(1)
 10693                                          assert_real(rcx)
    53 00007A68 803913              <1>  cmp byte [%1], %2
    54 00007A6B 0F851D0C0000        <1>  jne L_error_incorrect_type
 10694 00007A71 F20F104301                      movsd xmm0, qword [rbx + 1]
 10695 00007A76 F20F104901                      movsd xmm1, qword [rcx + 1]
 10696 00007A7B F20F5CC1                        subsd xmm0, xmm1
 10697 00007A7F E86D0A0000                      call make_real
 10698 00007A84 C9                              leave
 10699 00007A85 C22000                          ret AND_KILL_FRAME(2)
 10700                                  
 10701                                  L_code_ptr_raw_bin_mul_rr:
 10702 00007A88 C8000000                        enter 0, 0
 10703 00007A8C 48837D1802                      cmp COUNT, 2
 10704 00007A91 0F85580B0000                    jne L_error_arg_count_2
 10705 00007A97 488B5D20                        mov rbx, PARAM(0)
 10706                                          assert_real(rbx)
    53 00007A9B 803B13              <1>  cmp byte [%1], %2
    54 00007A9E 0F85EA0B0000        <1>  jne L_error_incorrect_type
 10707 00007AA4 488B4D28                        mov rcx, PARAM(1)
 10708                                          assert_real(rcx)
    53 00007AA8 803913              <1>  cmp byte [%1], %2
    54 00007AAB 0F85DD0B0000        <1>  jne L_error_incorrect_type
 10709 00007AB1 F20F104301                      movsd xmm0, qword [rbx + 1]
 10710 00007AB6 F20F104901                      movsd xmm1, qword [rcx + 1]
 10711 00007ABB F20F59C1                        mulsd xmm0, xmm1
 10712 00007ABF E82D0A0000                      call make_real
 10713 00007AC4 C9                              leave
 10714 00007AC5 C22000                          ret AND_KILL_FRAME(2)
 10715                                  
 10716                                  L_code_ptr_raw_bin_div_rr:
 10717 00007AC8 C8000000                        enter 0, 0
 10718 00007ACC 48837D1802                      cmp COUNT, 2
 10719 00007AD1 0F85180B0000                    jne L_error_arg_count_2
 10720 00007AD7 488B5D20                        mov rbx, PARAM(0)
 10721                                          assert_real(rbx)
    53 00007ADB 803B13              <1>  cmp byte [%1], %2
    54 00007ADE 0F85AA0B0000        <1>  jne L_error_incorrect_type
 10722 00007AE4 488B4D28                        mov rcx, PARAM(1)
 10723                                          assert_real(rcx)
    53 00007AE8 803913              <1>  cmp byte [%1], %2
    54 00007AEB 0F859D0B0000        <1>  jne L_error_incorrect_type
 10724 00007AF1 F20F104301                      movsd xmm0, qword [rbx + 1]
 10725 00007AF6 F20F104901                      movsd xmm1, qword [rcx + 1]
 10726 00007AFB 660FEFD2                        pxor xmm2, xmm2
 10727 00007AFF 660F2ECA                        ucomisd xmm1, xmm2
 10728 00007B03 0F84B60B0000                    je L_error_division_by_zero
 10729 00007B09 F20F5EC1                        divsd xmm0, xmm1
 10730 00007B0D E8DF090000                      call make_real
 10731 00007B12 C9                              leave
 10732 00007B13 C22000                          ret AND_KILL_FRAME(2)
 10733                                  
 10734                                  L_code_ptr_raw_bin_add_zz:
 10735 00007B16 C8000000                	enter 0, 0
 10736 00007B1A 48837D1802              	cmp COUNT, 2
 10737 00007B1F 0F85CA0A0000            	jne L_error_arg_count_2
 10738 00007B25 4C8B4520                	mov r8, PARAM(0)
 10739                                  	assert_integer(r8)
    53 00007B29 41803811            <1>  cmp byte [%1], %2
    54 00007B2D 0F855B0B0000        <1>  jne L_error_incorrect_type
 10740 00007B33 4C8B4D28                	mov r9, PARAM(1)
 10741                                  	assert_integer(r9)
    53 00007B37 41803911            <1>  cmp byte [%1], %2
    54 00007B3B 0F854D0B0000        <1>  jne L_error_incorrect_type
 10742 00007B41 498B7801                	mov rdi, qword [r8 + 1]
 10743 00007B45 49037901                	add rdi, qword [r9 + 1]
 10744 00007B49 E8BB090000              	call make_integer
 10745 00007B4E C9                      	leave
 10746 00007B4F C22000                  	ret AND_KILL_FRAME(2)
 10747                                  
 10748                                  L_code_ptr_raw_bin_add_qq:
 10749 00007B52 C8000000                        enter 0, 0
 10750 00007B56 48837D1802                      cmp COUNT, 2
 10751 00007B5B 0F858E0A0000                    jne L_error_arg_count_2
 10752 00007B61 4C8B4520                        mov r8, PARAM(0)
 10753                                          assert_fraction(r8)
    53 00007B65 41803812            <1>  cmp byte [%1], %2
    54 00007B69 0F851F0B0000        <1>  jne L_error_incorrect_type
 10754 00007B6F 4C8B4D28                        mov r9, PARAM(1)
 10755                                          assert_fraction(r9)
    53 00007B73 41803912            <1>  cmp byte [%1], %2
    54 00007B77 0F85110B0000        <1>  jne L_error_incorrect_type
 10756 00007B7D 498B4001                        mov rax, qword [r8 + 1] ; num1
 10757 00007B81 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 10758 00007B85 4899                            cqo
 10759 00007B87 48F7EB                          imul rbx
 10760 00007B8A 4889C6                          mov rsi, rax
 10761 00007B8D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10762 00007B91 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 10763 00007B95 4899                            cqo
 10764 00007B97 48F7EB                          imul rbx
 10765 00007B9A 4801C6                          add rsi, rax
 10766 00007B9D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10767 00007BA1 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 10768 00007BA5 4899                            cqo
 10769 00007BA7 48F7EB                          imul rbx
 10770 00007BAA 4889C7                          mov rdi, rax
 10771 00007BAD E8DE010000                      call normalize_fraction
 10772 00007BB2 C9                              leave
 10773 00007BB3 C22000                          ret AND_KILL_FRAME(2)
 10774                                  
 10775                                  L_code_ptr_raw_bin_sub_zz:
 10776 00007BB6 C8000000                	enter 0, 0
 10777 00007BBA 48837D1802              	cmp COUNT, 2
 10778 00007BBF 0F852A0A0000            	jne L_error_arg_count_2
 10779 00007BC5 4C8B4520                	mov r8, PARAM(0)
 10780                                  	assert_integer(r8)
    53 00007BC9 41803811            <1>  cmp byte [%1], %2
    54 00007BCD 0F85BB0A0000        <1>  jne L_error_incorrect_type
 10781 00007BD3 4C8B4D28                	mov r9, PARAM(1)
 10782                                  	assert_integer(r9)
    53 00007BD7 41803911            <1>  cmp byte [%1], %2
    54 00007BDB 0F85AD0A0000        <1>  jne L_error_incorrect_type
 10783 00007BE1 498B7801                	mov rdi, qword [r8 + 1]
 10784 00007BE5 492B7901                	sub rdi, qword [r9 + 1]
 10785 00007BE9 E81B090000              	call make_integer
 10786 00007BEE C9                      	leave
 10787 00007BEF C22000                  	ret AND_KILL_FRAME(2)
 10788                                  
 10789                                  L_code_ptr_raw_bin_sub_qq:
 10790 00007BF2 C8000000                        enter 0, 0
 10791 00007BF6 48837D1802                      cmp COUNT, 2
 10792 00007BFB 0F85EE090000                    jne L_error_arg_count_2
 10793 00007C01 4C8B4520                        mov r8, PARAM(0)
 10794                                          assert_fraction(r8)
    53 00007C05 41803812            <1>  cmp byte [%1], %2
    54 00007C09 0F857F0A0000        <1>  jne L_error_incorrect_type
 10795 00007C0F 4C8B4D28                        mov r9, PARAM(1)
 10796                                          assert_fraction(r9)
    53 00007C13 41803912            <1>  cmp byte [%1], %2
    54 00007C17 0F85710A0000        <1>  jne L_error_incorrect_type
 10797 00007C1D 498B4001                        mov rax, qword [r8 + 1] ; num1
 10798 00007C21 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 10799 00007C25 4899                            cqo
 10800 00007C27 48F7EB                          imul rbx
 10801 00007C2A 4889C6                          mov rsi, rax
 10802 00007C2D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10803 00007C31 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 10804 00007C35 4899                            cqo
 10805 00007C37 48F7EB                          imul rbx
 10806 00007C3A 4829C6                          sub rsi, rax
 10807 00007C3D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10808 00007C41 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 10809 00007C45 4899                            cqo
 10810 00007C47 48F7EB                          imul rbx
 10811 00007C4A 4889C7                          mov rdi, rax
 10812 00007C4D E83E010000                      call normalize_fraction
 10813 00007C52 C9                              leave
 10814 00007C53 C22000                          ret AND_KILL_FRAME(2)
 10815                                  
 10816                                  L_code_ptr_raw_bin_mul_zz:
 10817 00007C56 C8000000                	enter 0, 0
 10818 00007C5A 48837D1802              	cmp COUNT, 2
 10819 00007C5F 0F858A090000            	jne L_error_arg_count_2
 10820 00007C65 4C8B4520                	mov r8, PARAM(0)
 10821                                  	assert_integer(r8)
    53 00007C69 41803811            <1>  cmp byte [%1], %2
    54 00007C6D 0F851B0A0000        <1>  jne L_error_incorrect_type
 10822 00007C73 4C8B4D28                	mov r9, PARAM(1)
 10823                                  	assert_integer(r9)
    53 00007C77 41803911            <1>  cmp byte [%1], %2
    54 00007C7B 0F850D0A0000        <1>  jne L_error_incorrect_type
 10824 00007C81 4899                    	cqo
 10825 00007C83 498B4001                	mov rax, qword [r8 + 1]
 10826 00007C87 49F76101                	mul qword [r9 + 1]
 10827 00007C8B 4889C7                  	mov rdi, rax
 10828 00007C8E E876080000              	call make_integer
 10829 00007C93 C9                      	leave
 10830 00007C94 C22000                  	ret AND_KILL_FRAME(2)
 10831                                  
 10832                                  L_code_ptr_raw_bin_mul_qq:
 10833 00007C97 C8000000                        enter 0, 0
 10834 00007C9B 48837D1802                      cmp COUNT, 2
 10835 00007CA0 0F8549090000                    jne L_error_arg_count_2
 10836 00007CA6 4C8B4520                        mov r8, PARAM(0)
 10837                                          assert_fraction(r8)
    53 00007CAA 41803812            <1>  cmp byte [%1], %2
    54 00007CAE 0F85DA090000        <1>  jne L_error_incorrect_type
 10838 00007CB4 4C8B4D28                        mov r9, PARAM(1)
 10839                                          assert_fraction(r9)
    53 00007CB8 41803912            <1>  cmp byte [%1], %2
    54 00007CBC 0F85CC090000        <1>  jne L_error_incorrect_type
 10840 00007CC2 498B4001                        mov rax, qword [r8 + 1] ; num1
 10841 00007CC6 498B5901                        mov rbx, qword [r9 + 1] ; num2
 10842 00007CCA 4899                            cqo
 10843 00007CCC 48F7EB                          imul rbx
 10844 00007CCF 4889C6                          mov rsi, rax
 10845 00007CD2 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10846 00007CD6 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 10847 00007CDA 4899                            cqo
 10848 00007CDC 48F7EB                          imul rbx
 10849 00007CDF 4889C7                          mov rdi, rax
 10850 00007CE2 E8A9000000                      call normalize_fraction
 10851 00007CE7 C9                              leave
 10852 00007CE8 C22000                          ret AND_KILL_FRAME(2)
 10853                                          
 10854                                  L_code_ptr_raw_bin_div_zz:
 10855 00007CEB C8000000                	enter 0, 0
 10856 00007CEF 48837D1802              	cmp COUNT, 2
 10857 00007CF4 0F85F5080000            	jne L_error_arg_count_2
 10858 00007CFA 4C8B4520                	mov r8, PARAM(0)
 10859                                  	assert_integer(r8)
    53 00007CFE 41803811            <1>  cmp byte [%1], %2
    54 00007D02 0F8586090000        <1>  jne L_error_incorrect_type
 10860 00007D08 4C8B4D28                	mov r9, PARAM(1)
 10861                                  	assert_integer(r9)
    53 00007D0C 41803911            <1>  cmp byte [%1], %2
    54 00007D10 0F8578090000        <1>  jne L_error_incorrect_type
 10862 00007D16 498B7901                	mov rdi, qword [r9 + 1]
 10863 00007D1A 4883FF00                	cmp rdi, 0
 10864 00007D1E 0F849B090000            	je L_error_division_by_zero
 10865 00007D24 498B7001                	mov rsi, qword [r8 + 1]
 10866 00007D28 E863000000              	call normalize_fraction
 10867 00007D2D C9                      	leave
 10868 00007D2E C22000                  	ret AND_KILL_FRAME(2)
 10869                                  
 10870                                  L_code_ptr_raw_bin_div_qq:
 10871 00007D31 C8000000                        enter 0, 0
 10872 00007D35 48837D1802                      cmp COUNT, 2
 10873 00007D3A 0F85AF080000                    jne L_error_arg_count_2
 10874 00007D40 4C8B4520                        mov r8, PARAM(0)
 10875                                          assert_fraction(r8)
    53 00007D44 41803812            <1>  cmp byte [%1], %2
    54 00007D48 0F8540090000        <1>  jne L_error_incorrect_type
 10876 00007D4E 4C8B4D28                        mov r9, PARAM(1)
 10877                                          assert_fraction(r9)
    53 00007D52 41803912            <1>  cmp byte [%1], %2
    54 00007D56 0F8532090000        <1>  jne L_error_incorrect_type
 10878 00007D5C 4983790100                      cmp qword [r9 + 1], 0
 10879 00007D61 0F8458090000                    je L_error_division_by_zero
 10880 00007D67 498B4001                        mov rax, qword [r8 + 1] ; num1
 10881 00007D6B 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 10882 00007D6F 4899                            cqo
 10883 00007D71 48F7EB                          imul rbx
 10884 00007D74 4889C6                          mov rsi, rax
 10885 00007D77 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10886 00007D7B 498B5901                        mov rbx, qword [r9 + 1] ; num2
 10887 00007D7F 4899                            cqo
 10888 00007D81 48F7EB                          imul rbx
 10889 00007D84 4889C7                          mov rdi, rax
 10890 00007D87 E804000000                      call normalize_fraction
 10891 00007D8C C9                              leave
 10892 00007D8D C22000                          ret AND_KILL_FRAME(2)
 10893                                          
 10894                                  normalize_fraction:
 10895 00007D90 56                              push rsi
 10896 00007D91 57                              push rdi
 10897 00007D92 E859000000                      call gcd
 10898 00007D97 4889C3                          mov rbx, rax
 10899 00007D9A 58                              pop rax
 10900 00007D9B 4899                            cqo
 10901 00007D9D 48F7FB                          idiv rbx
 10902 00007DA0 4989C0                          mov r8, rax
 10903 00007DA3 58                              pop rax
 10904 00007DA4 4899                            cqo
 10905 00007DA6 48F7FB                          idiv rbx
 10906 00007DA9 4989C1                          mov r9, rax
 10907 00007DAC 4983F900                        cmp r9, 0
 10908 00007DB0 741C                            je .L_zero
 10909 00007DB2 4983F801                        cmp r8, 1
 10910 00007DB6 7421                            je .L_int
 10911 00007DB8 BF11000000                      mov rdi, (1 + 8 + 8)
 10912 00007DBD E829EBFFFF                      call malloc
 10913 00007DC2 C60012                          mov byte [rax], T_fraction
 10914 00007DC5 4C894801                        mov qword [rax + 1], r9
 10915 00007DC9 4C894009                        mov qword [rax + 1 + 8], r8
 10916 00007DCD C3                              ret
 10917                                  .L_zero:
 10918 00007DCE BF00000000                      mov rdi, 0
 10919 00007DD3 E831070000                      call make_integer
 10920 00007DD8 C3                              ret
 10921                                  .L_int:
 10922 00007DD9 4C89CF                          mov rdi, r9
 10923 00007DDC E828070000                      call make_integer
 10924 00007DE1 C3                              ret
 10925                                  
 10926                                  iabs:
 10927 00007DE2 4889F8                          mov rax, rdi
 10928 00007DE5 4883F800                        cmp rax, 0
 10929 00007DE9 7C01                            jl .Lneg
 10930 00007DEB C3                              ret
 10931                                  .Lneg:
 10932 00007DEC 48F7D8                          neg rax
 10933 00007DEF C3                              ret
 10934                                  
 10935                                  gcd:
 10936 00007DF0 E8EDFFFFFF                      call iabs
 10937 00007DF5 4889C3                          mov rbx, rax
 10938 00007DF8 4889F7                          mov rdi, rsi
 10939 00007DFB E8E2FFFFFF                      call iabs
 10940 00007E00 4883F800                        cmp rax, 0
 10941 00007E04 7502                            jne .L0
 10942 00007E06 4893                            xchg rax, rbx
 10943                                  .L0:
 10944 00007E08 4883FB00                        cmp rbx, 0
 10945 00007E0C 740C                            je .L1
 10946 00007E0E 4899                            cqo
 10947 00007E10 48F7F3                          div rbx
 10948 00007E13 4889D0                          mov rax, rdx
 10949 00007E16 4893                            xchg rax, rbx
 10950 00007E18 EBEE                            jmp .L0
 10951                                  .L1:
 10952 00007E1A C3                              ret
 10953                                  
 10954                                  L_code_ptr_error:
 10955 00007E1B C8000000                        enter 0, 0
 10956 00007E1F 48837D1802                      cmp COUNT, 2
 10957 00007E24 0F85C5070000                    jne L_error_arg_count_2
 10958 00007E2A 488B7520                        mov rsi, PARAM(0)
 10959                                          assert_interned_symbol(rsi)
    53 00007E2E 803E41              <1>  cmp byte [%1], %2
    54 00007E31 0F8557080000        <1>  jne L_error_incorrect_type
 10960 00007E37 488B7528                        mov rsi, PARAM(1)
 10961                                          assert_string(rsi)
    53 00007E3B 803E03              <1>  cmp byte [%1], %2
    54 00007E3E 0F854A080000        <1>  jne L_error_incorrect_type
 10962 00007E44 48BF-                           mov rdi, fmt_scheme_error_part_1
 10962 00007E46 [6311000000000000] 
 10963 00007E4E B800000000                      mov rax, 0
 10964                                          ENTER
    44 00007E53 C8000000            <1>  enter 0, 0
    45 00007E57 4883E4F0            <1>  and rsp, ~15
 10965 00007E5B E8(00000000)                    call printf
 10966                                          LEAVE
    49 00007E60 C9                  <1>  leave
 10967 00007E61 488B7D20                        mov rdi, PARAM(0)
 10968 00007E65 E802EDFFFF                      call print_sexpr
 10969 00007E6A 48BF-                           mov rdi, fmt_scheme_error_part_2
 10969 00007E6C [7711000000000000] 
 10970 00007E74 B800000000                      mov rax, 0
 10971                                          ENTER
    44 00007E79 C8000000            <1>  enter 0, 0
    45 00007E7D 4883E4F0            <1>  and rsp, ~15
 10972 00007E81 E8(00000000)                    call printf
 10973                                          LEAVE
    49 00007E86 C9                  <1>  leave
 10974 00007E87 488B4528                        mov rax, PARAM(1)       ; sob_string
 10975 00007E8B BE01000000                      mov rsi, 1              ; size = 1 byte
 10976 00007E90 488B5001                        mov rdx, qword [rax + 1] ; length
 10977 00007E94 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 10978 00007E98 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 10979                                  	ENTER
    44 00007EA0 C8000000            <1>  enter 0, 0
    45 00007EA4 4883E4F0            <1>  and rsp, ~15
 10980 00007EA8 E8(00000000)                    call fwrite
 10981                                  	LEAVE
    49 00007EAD C9                  <1>  leave
 10982 00007EAE 48BF-                           mov rdi, fmt_scheme_error_part_3
 10982 00007EB0 [B911000000000000] 
 10983 00007EB8 B800000000                      mov rax, 0
 10984                                          ENTER
    44 00007EBD C8000000            <1>  enter 0, 0
    45 00007EC1 4883E4F0            <1>  and rsp, ~15
 10985 00007EC5 E8(00000000)                    call printf
 10986                                          LEAVE
    49 00007ECA C9                  <1>  leave
 10987 00007ECB 48C7C0F7FFFFFF                  mov rax, -9
 10988 00007ED2 E8(00000000)                    call exit
 10989                                  
 10990                                  L_code_ptr_raw_less_than_rr:
 10991 00007ED7 C8000000                        enter 0, 0
 10992 00007EDB 48837D1802                      cmp COUNT, 2
 10993 00007EE0 0F8509070000                    jne L_error_arg_count_2
 10994 00007EE6 488B7520                        mov rsi, PARAM(0)
 10995                                          assert_real(rsi)
    53 00007EEA 803E13              <1>  cmp byte [%1], %2
    54 00007EED 0F859B070000        <1>  jne L_error_incorrect_type
 10996 00007EF3 488B7D28                        mov rdi, PARAM(1)
 10997                                          assert_real(rdi)
    53 00007EF7 803F13              <1>  cmp byte [%1], %2
    54 00007EFA 0F858E070000        <1>  jne L_error_incorrect_type
 10998 00007F00 F20F104601                      movsd xmm0, qword [rsi + 1]
 10999 00007F05 F20F104F01                      movsd xmm1, qword [rdi + 1]
 11000 00007F0A 660F2FC1                        comisd xmm0, xmm1
 11001 00007F0E 730C                            jae .L_false
 11002 00007F10 48B8-                           mov rax, sob_boolean_true
 11002 00007F12 [0300000000000000] 
 11003 00007F1A EB0A                            jmp .L_exit
 11004                                  .L_false:
 11005 00007F1C 48B8-                           mov rax, sob_boolean_false
 11005 00007F1E [0200000000000000] 
 11006                                  .L_exit:
 11007 00007F26 C9                              leave
 11008 00007F27 C22000                          ret AND_KILL_FRAME(2)
 11009                                          
 11010                                  L_code_ptr_raw_less_than_zz:
 11011 00007F2A C8000000                	enter 0, 0
 11012 00007F2E 48837D1802              	cmp COUNT, 2
 11013 00007F33 0F85B6060000            	jne L_error_arg_count_2
 11014 00007F39 4C8B4520                	mov r8, PARAM(0)
 11015                                  	assert_integer(r8)
    53 00007F3D 41803811            <1>  cmp byte [%1], %2
    54 00007F41 0F8547070000        <1>  jne L_error_incorrect_type
 11016 00007F47 4C8B4D28                	mov r9, PARAM(1)
 11017                                  	assert_integer(r9)
    53 00007F4B 41803911            <1>  cmp byte [%1], %2
    54 00007F4F 0F8539070000        <1>  jne L_error_incorrect_type
 11018 00007F55 498B7801                	mov rdi, qword [r8 + 1]
 11019 00007F59 493B7901                	cmp rdi, qword [r9 + 1]
 11020 00007F5D 7D0C                    	jge .L_false
 11021 00007F5F 48B8-                   	mov rax, sob_boolean_true
 11021 00007F61 [0300000000000000] 
 11022 00007F69 EB0A                    	jmp .L_exit
 11023                                  .L_false:
 11024 00007F6B 48B8-                   	mov rax, sob_boolean_false
 11024 00007F6D [0200000000000000] 
 11025                                  .L_exit:
 11026 00007F75 C9                      	leave
 11027 00007F76 C22000                  	ret AND_KILL_FRAME(2)
 11028                                  
 11029                                  L_code_ptr_raw_less_than_qq:
 11030 00007F79 C8000000                        enter 0, 0
 11031 00007F7D 48837D1802                      cmp COUNT, 2
 11032 00007F82 0F8567060000                    jne L_error_arg_count_2
 11033 00007F88 488B7520                        mov rsi, PARAM(0)
 11034                                          assert_fraction(rsi)
    53 00007F8C 803E12              <1>  cmp byte [%1], %2
    54 00007F8F 0F85F9060000        <1>  jne L_error_incorrect_type
 11035 00007F95 488B7D28                        mov rdi, PARAM(1)
 11036                                          assert_fraction(rdi)
    53 00007F99 803F12              <1>  cmp byte [%1], %2
    54 00007F9C 0F85EC060000        <1>  jne L_error_incorrect_type
 11037 00007FA2 488B4601                        mov rax, qword [rsi + 1] ; num1
 11038 00007FA6 4899                            cqo
 11039 00007FA8 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 11040 00007FAC 4889C1                          mov rcx, rax
 11041 00007FAF 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 11042 00007FB3 4899                            cqo
 11043 00007FB5 48F76F01                        imul qword [rdi + 1]          ; num2
 11044 00007FB9 4829C1                          sub rcx, rax
 11045 00007FBC 7D0C                            jge .L_false
 11046 00007FBE 48B8-                           mov rax, sob_boolean_true
 11046 00007FC0 [0300000000000000] 
 11047 00007FC8 EB0A                            jmp .L_exit
 11048                                  .L_false:
 11049 00007FCA 48B8-                           mov rax, sob_boolean_false
 11049 00007FCC [0200000000000000] 
 11050                                  .L_exit:
 11051 00007FD4 C9                              leave
 11052 00007FD5 C22000                          ret AND_KILL_FRAME(2)
 11053                                  
 11054                                  L_code_ptr_raw_equal_rr:
 11055 00007FD8 C8000000                        enter 0, 0
 11056 00007FDC 48837D1802                      cmp COUNT, 2
 11057 00007FE1 0F8508060000                    jne L_error_arg_count_2
 11058 00007FE7 488B7520                        mov rsi, PARAM(0)
 11059                                          assert_real(rsi)
    53 00007FEB 803E13              <1>  cmp byte [%1], %2
    54 00007FEE 0F859A060000        <1>  jne L_error_incorrect_type
 11060 00007FF4 488B7D28                        mov rdi, PARAM(1)
 11061                                          assert_real(rdi)
    53 00007FF8 803F13              <1>  cmp byte [%1], %2
    54 00007FFB 0F858D060000        <1>  jne L_error_incorrect_type
 11062 00008001 F20F104601                      movsd xmm0, qword [rsi + 1]
 11063 00008006 F20F104F01                      movsd xmm1, qword [rdi + 1]
 11064 0000800B 660F2FC1                        comisd xmm0, xmm1
 11065 0000800F 750C                            jne .L_false
 11066 00008011 48B8-                           mov rax, sob_boolean_true
 11066 00008013 [0300000000000000] 
 11067 0000801B EB0A                            jmp .L_exit
 11068                                  .L_false:
 11069 0000801D 48B8-                           mov rax, sob_boolean_false
 11069 0000801F [0200000000000000] 
 11070                                  .L_exit:
 11071 00008027 C9                              leave
 11072 00008028 C22000                          ret AND_KILL_FRAME(2)
 11073                                          
 11074                                  L_code_ptr_raw_equal_zz:
 11075 0000802B C8000000                	enter 0, 0
 11076 0000802F 48837D1802              	cmp COUNT, 2
 11077 00008034 0F85B5050000            	jne L_error_arg_count_2
 11078 0000803A 4C8B4520                	mov r8, PARAM(0)
 11079                                  	assert_integer(r8)
    53 0000803E 41803811            <1>  cmp byte [%1], %2
    54 00008042 0F8546060000        <1>  jne L_error_incorrect_type
 11080 00008048 4C8B4D28                	mov r9, PARAM(1)
 11081                                  	assert_integer(r9)
    53 0000804C 41803911            <1>  cmp byte [%1], %2
    54 00008050 0F8538060000        <1>  jne L_error_incorrect_type
 11082 00008056 498B7801                	mov rdi, qword [r8 + 1]
 11083 0000805A 493B7901                	cmp rdi, qword [r9 + 1]
 11084 0000805E 750C                    	jne .L_false
 11085 00008060 48B8-                   	mov rax, sob_boolean_true
 11085 00008062 [0300000000000000] 
 11086 0000806A EB0A                    	jmp .L_exit
 11087                                  .L_false:
 11088 0000806C 48B8-                   	mov rax, sob_boolean_false
 11088 0000806E [0200000000000000] 
 11089                                  .L_exit:
 11090 00008076 C9                      	leave
 11091 00008077 C22000                  	ret AND_KILL_FRAME(2)
 11092                                  
 11093                                  L_code_ptr_raw_equal_qq:
 11094 0000807A C8000000                        enter 0, 0
 11095 0000807E 48837D1802                      cmp COUNT, 2
 11096 00008083 0F8566050000                    jne L_error_arg_count_2
 11097 00008089 488B7520                        mov rsi, PARAM(0)
 11098                                          assert_fraction(rsi)
    53 0000808D 803E12              <1>  cmp byte [%1], %2
    54 00008090 0F85F8050000        <1>  jne L_error_incorrect_type
 11099 00008096 488B7D28                        mov rdi, PARAM(1)
 11100                                          assert_fraction(rdi)
    53 0000809A 803F12              <1>  cmp byte [%1], %2
    54 0000809D 0F85EB050000        <1>  jne L_error_incorrect_type
 11101 000080A3 488B4601                        mov rax, qword [rsi + 1] ; num1
 11102 000080A7 4899                            cqo
 11103 000080A9 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 11104 000080AD 4889C1                          mov rcx, rax
 11105 000080B0 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 11106 000080B4 4899                            cqo
 11107 000080B6 48F76F01                        imul qword [rdi + 1]          ; num2
 11108 000080BA 4829C1                          sub rcx, rax
 11109 000080BD 750C                            jne .L_false
 11110 000080BF 48B8-                           mov rax, sob_boolean_true
 11110 000080C1 [0300000000000000] 
 11111 000080C9 EB0A                            jmp .L_exit
 11112                                  .L_false:
 11113 000080CB 48B8-                           mov rax, sob_boolean_false
 11113 000080CD [0200000000000000] 
 11114                                  .L_exit:
 11115 000080D5 C9                              leave
 11116 000080D6 C22000                          ret AND_KILL_FRAME(2)
 11117                                  
 11118                                  L_code_ptr_quotient:
 11119 000080D9 C8000000                        enter 0, 0
 11120 000080DD 48837D1802                      cmp COUNT, 2
 11121 000080E2 0F8507050000                    jne L_error_arg_count_2
 11122 000080E8 488B7520                        mov rsi, PARAM(0)
 11123                                          assert_integer(rsi)
    53 000080EC 803E11              <1>  cmp byte [%1], %2
    54 000080EF 0F8599050000        <1>  jne L_error_incorrect_type
 11124 000080F5 488B7D28                        mov rdi, PARAM(1)
 11125                                          assert_integer(rdi)
    53 000080F9 803F11              <1>  cmp byte [%1], %2
    54 000080FC 0F858C050000        <1>  jne L_error_incorrect_type
 11126 00008102 488B4601                        mov rax, qword [rsi + 1]
 11127 00008106 488B5F01                        mov rbx, qword [rdi + 1]
 11128 0000810A 4883FB00                        cmp rbx, 0
 11129 0000810E 0F84AB050000                    je L_error_division_by_zero
 11130 00008114 4899                            cqo
 11131 00008116 48F7FB                          idiv rbx
 11132 00008119 4889C7                          mov rdi, rax
 11133 0000811C E8E8030000                      call make_integer
 11134 00008121 C9                              leave
 11135 00008122 C22000                          ret AND_KILL_FRAME(2)
 11136                                          
 11137                                  L_code_ptr_remainder:
 11138 00008125 C8000000                        enter 0, 0
 11139 00008129 48837D1802                      cmp COUNT, 2
 11140 0000812E 0F85BB040000                    jne L_error_arg_count_2
 11141 00008134 488B7520                        mov rsi, PARAM(0)
 11142                                          assert_integer(rsi)
    53 00008138 803E11              <1>  cmp byte [%1], %2
    54 0000813B 0F854D050000        <1>  jne L_error_incorrect_type
 11143 00008141 488B7D28                        mov rdi, PARAM(1)
 11144                                          assert_integer(rdi)
    53 00008145 803F11              <1>  cmp byte [%1], %2
    54 00008148 0F8540050000        <1>  jne L_error_incorrect_type
 11145 0000814E 488B4601                        mov rax, qword [rsi + 1]
 11146 00008152 488B5F01                        mov rbx, qword [rdi + 1]
 11147 00008156 4883FB00                        cmp rbx, 0
 11148 0000815A 0F845F050000                    je L_error_division_by_zero
 11149 00008160 4899                            cqo
 11150 00008162 48F7FB                          idiv rbx
 11151 00008165 4889D7                          mov rdi, rdx
 11152 00008168 E89C030000                      call make_integer
 11153 0000816D C9                              leave
 11154 0000816E C22000                          ret AND_KILL_FRAME(2)
 11155                                  
 11156                                  L_code_ptr_set_car:
 11157 00008171 C8000000                        enter 0, 0
 11158 00008175 48837D1802                      cmp COUNT, 2
 11159 0000817A 0F856F040000                    jne L_error_arg_count_2
 11160 00008180 488B4520                        mov rax, PARAM(0)
 11161                                          assert_pair(rax)
    53 00008184 803821              <1>  cmp byte [%1], %2
    54 00008187 0F8501050000        <1>  jne L_error_incorrect_type
 11162 0000818D 488B5D28                        mov rbx, PARAM(1)
 11163 00008191 48895801                        mov SOB_PAIR_CAR(rax), rbx
 11164 00008195 48B8-                           mov rax, sob_void
 11164 00008197 [0000000000000000] 
 11165 0000819F C9                              leave
 11166 000081A0 C22000                          ret AND_KILL_FRAME(2)
 11167                                  
 11168                                  L_code_ptr_set_cdr:
 11169 000081A3 C8000000                        enter 0, 0
 11170 000081A7 48837D1802                      cmp COUNT, 2
 11171 000081AC 0F853D040000                    jne L_error_arg_count_2
 11172 000081B2 488B4520                        mov rax, PARAM(0)
 11173                                          assert_pair(rax)
    53 000081B6 803821              <1>  cmp byte [%1], %2
    54 000081B9 0F85CF040000        <1>  jne L_error_incorrect_type
 11174 000081BF 488B5D28                        mov rbx, PARAM(1)
 11175 000081C3 48895809                        mov SOB_PAIR_CDR(rax), rbx
 11176 000081C7 48B8-                           mov rax, sob_void
 11176 000081C9 [0000000000000000] 
 11177 000081D1 C9                              leave
 11178 000081D2 C22000                          ret AND_KILL_FRAME(2)
 11179                                  
 11180                                  L_code_ptr_string_ref:
 11181 000081D5 C8000000                        enter 0, 0
 11182 000081D9 48837D1802                      cmp COUNT, 2
 11183 000081DE 0F850B040000                    jne L_error_arg_count_2
 11184 000081E4 488B7D20                        mov rdi, PARAM(0)
 11185                                          assert_string(rdi)
    53 000081E8 803F03              <1>  cmp byte [%1], %2
    54 000081EB 0F859D040000        <1>  jne L_error_incorrect_type
 11186 000081F1 488B7528                        mov rsi, PARAM(1)
 11187                                          assert_integer(rsi)
    53 000081F5 803E11              <1>  cmp byte [%1], %2
    54 000081F8 0F8590040000        <1>  jne L_error_incorrect_type
 11188 000081FE 488B5701                        mov rdx, qword [rdi + 1]
 11189 00008202 488B4E01                        mov rcx, qword [rsi + 1]
 11190 00008206 4839D1                          cmp rcx, rdx
 11191 00008209 0F8D14030000                    jge L_error_integer_range
 11192 0000820F 4883F900                        cmp rcx, 0
 11193 00008213 0F8C0A030000                    jl L_error_integer_range
 11194 00008219 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 11195 0000821D BF02000000                      mov rdi, 2
 11196 00008222 E8C4E6FFFF                      call malloc
 11197 00008227 C60002                          mov byte [rax], T_char
 11198 0000822A 885801                          mov byte [rax + 1], bl
 11199 0000822D C9                              leave
 11200 0000822E C22000                          ret AND_KILL_FRAME(2)
 11201                                  
 11202                                  L_code_ptr_vector_ref:
 11203 00008231 C8000000                        enter 0, 0
 11204 00008235 48837D1802                      cmp COUNT, 2
 11205 0000823A 0F85AF030000                    jne L_error_arg_count_2
 11206 00008240 488B7D20                        mov rdi, PARAM(0)
 11207                                          assert_vector(rdi)
    53 00008244 803F22              <1>  cmp byte [%1], %2
    54 00008247 0F8541040000        <1>  jne L_error_incorrect_type
 11208 0000824D 488B7528                        mov rsi, PARAM(1)
 11209                                          assert_integer(rsi)
    53 00008251 803E11              <1>  cmp byte [%1], %2
    54 00008254 0F8534040000        <1>  jne L_error_incorrect_type
 11210 0000825A 488B5701                        mov rdx, qword [rdi + 1]
 11211 0000825E 488B4E01                        mov rcx, qword [rsi + 1]
 11212 00008262 4839D1                          cmp rcx, rdx
 11213 00008265 0F8DB8020000                    jge L_error_integer_range
 11214 0000826B 4883F900                        cmp rcx, 0
 11215 0000826F 0F8CAE020000                    jl L_error_integer_range
 11216 00008275 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 11217 0000827A C9                              leave
 11218 0000827B C22000                          ret AND_KILL_FRAME(2)
 11219                                  
 11220                                  L_code_ptr_vector_set:
 11221 0000827E C8000000                        enter 0, 0
 11222 00008282 48837D1803                      cmp COUNT, 3
 11223 00008287 0F85CC030000                    jne L_error_arg_count_3
 11224 0000828D 488B7D20                        mov rdi, PARAM(0)
 11225                                          assert_vector(rdi)
    53 00008291 803F22              <1>  cmp byte [%1], %2
    54 00008294 0F85F4030000        <1>  jne L_error_incorrect_type
 11226 0000829A 488B7528                        mov rsi, PARAM(1)
 11227                                          assert_integer(rsi)
    53 0000829E 803E11              <1>  cmp byte [%1], %2
    54 000082A1 0F85E7030000        <1>  jne L_error_incorrect_type
 11228 000082A7 488B5701                        mov rdx, qword [rdi + 1]
 11229 000082AB 488B4E01                        mov rcx, qword [rsi + 1]
 11230 000082AF 4839D1                          cmp rcx, rdx
 11231 000082B2 0F8D6B020000                    jge L_error_integer_range
 11232 000082B8 4883F900                        cmp rcx, 0
 11233 000082BC 0F8C61020000                    jl L_error_integer_range
 11234 000082C2 488B4530                        mov rax, PARAM(2)
 11235 000082C6 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 11236 000082CB 48B8-                           mov rax, sob_void
 11236 000082CD [0000000000000000] 
 11237 000082D5 C9                              leave
 11238 000082D6 C22800                          ret AND_KILL_FRAME(3)
 11239                                  
 11240                                  L_code_ptr_string_set:
 11241 000082D9 C8000000                        enter 0, 0
 11242 000082DD 48837D1803                      cmp COUNT, 3
 11243 000082E2 0F8571030000                    jne L_error_arg_count_3
 11244 000082E8 488B7D20                        mov rdi, PARAM(0)
 11245                                          assert_string(rdi)
    53 000082EC 803F03              <1>  cmp byte [%1], %2
    54 000082EF 0F8599030000        <1>  jne L_error_incorrect_type
 11246 000082F5 488B7528                        mov rsi, PARAM(1)
 11247                                          assert_integer(rsi)
    53 000082F9 803E11              <1>  cmp byte [%1], %2
    54 000082FC 0F858C030000        <1>  jne L_error_incorrect_type
 11248 00008302 488B5701                        mov rdx, qword [rdi + 1]
 11249 00008306 488B4E01                        mov rcx, qword [rsi + 1]
 11250 0000830A 4839D1                          cmp rcx, rdx
 11251 0000830D 0F8D10020000                    jge L_error_integer_range
 11252 00008313 4883F900                        cmp rcx, 0
 11253 00008317 0F8C06020000                    jl L_error_integer_range
 11254 0000831D 488B4530                        mov rax, PARAM(2)
 11255                                          assert_char(rax)
    53 00008321 803802              <1>  cmp byte [%1], %2
    54 00008324 0F8564030000        <1>  jne L_error_incorrect_type
 11256 0000832A 8A4001                          mov al, byte [rax + 1]
 11257 0000832D 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 11258 00008331 48B8-                           mov rax, sob_void
 11258 00008333 [0000000000000000] 
 11259 0000833B C9                              leave
 11260 0000833C C22800                          ret AND_KILL_FRAME(3)
 11261                                  
 11262                                  L_code_ptr_make_vector:
 11263 0000833F C8000000                        enter 0, 0
 11264 00008343 48837D1802                      cmp COUNT, 2
 11265 00008348 0F85A1020000                    jne L_error_arg_count_2
 11266 0000834E 488B4D20                        mov rcx, PARAM(0)
 11267                                          assert_integer(rcx)
    53 00008352 803911              <1>  cmp byte [%1], %2
    54 00008355 0F8533030000        <1>  jne L_error_incorrect_type
 11268 0000835B 488B4901                        mov rcx, qword [rcx + 1]
 11269 0000835F 4883F900                        cmp rcx, 0
 11270 00008363 0F8CBA010000                    jl L_error_integer_range
 11271 00008369 488B5528                        mov rdx, PARAM(1)
 11272 0000836D 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 11273 00008375 E871E5FFFF                      call malloc
 11274 0000837A C60022                          mov byte [rax], T_vector
 11275 0000837D 48894801                        mov qword [rax + 1], rcx
 11276 00008381 41B800000000                    mov r8, 0
 11277                                  .L0:
 11278 00008387 4939C8                          cmp r8, rcx
 11279 0000838A 740A                            je .L1
 11280 0000838C 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 11281 00008391 49FFC0                          inc r8
 11282 00008394 EBF1                            jmp .L0
 11283                                  .L1:
 11284 00008396 C9                              leave
 11285 00008397 C22000                          ret AND_KILL_FRAME(2)
 11286                                          
 11287                                  L_code_ptr_make_string:
 11288 0000839A C8000000                        enter 0, 0
 11289 0000839E 48837D1802                      cmp COUNT, 2
 11290 000083A3 0F8546020000                    jne L_error_arg_count_2
 11291 000083A9 488B4D20                        mov rcx, PARAM(0)
 11292                                          assert_integer(rcx)
    53 000083AD 803911              <1>  cmp byte [%1], %2
    54 000083B0 0F85D8020000        <1>  jne L_error_incorrect_type
 11293 000083B6 488B4901                        mov rcx, qword [rcx + 1]
 11294 000083BA 4883F900                        cmp rcx, 0
 11295 000083BE 0F8C5F010000                    jl L_error_integer_range
 11296 000083C4 488B5528                        mov rdx, PARAM(1)
 11297                                          assert_char(rdx)
    53 000083C8 803A02              <1>  cmp byte [%1], %2
    54 000083CB 0F85BD020000        <1>  jne L_error_incorrect_type
 11298 000083D1 8A5201                          mov dl, byte [rdx + 1]
 11299 000083D4 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 11300 000083D8 E80EE5FFFF                      call malloc
 11301 000083DD C60003                          mov byte [rax], T_string
 11302 000083E0 48894801                        mov qword [rax + 1], rcx
 11303 000083E4 41B800000000                    mov r8, 0
 11304                                  .L0:
 11305 000083EA 4939C8                          cmp r8, rcx
 11306 000083ED 740A                            je .L1
 11307 000083EF 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 11308 000083F4 49FFC0                          inc r8
 11309 000083F7 EBF1                            jmp .L0
 11310                                  .L1:
 11311 000083F9 C9                              leave
 11312 000083FA C22000                          ret AND_KILL_FRAME(2)
 11313                                  
 11314                                  L_code_ptr_numerator:
 11315 000083FD C8000000                        enter 0, 0
 11316 00008401 48837D1801                      cmp COUNT, 1
 11317 00008406 0F85AE010000                    jne L_error_arg_count_1
 11318 0000840C 488B4520                        mov rax, PARAM(0)
 11319                                          assert_fraction(rax)
    53 00008410 803812              <1>  cmp byte [%1], %2
    54 00008413 0F8575020000        <1>  jne L_error_incorrect_type
 11320 00008419 488B7801                        mov rdi, qword [rax + 1]
 11321 0000841D E8E7000000                      call make_integer
 11322 00008422 C9                              leave
 11323 00008423 C21800                          ret AND_KILL_FRAME(1)
 11324                                          
 11325                                  L_code_ptr_denominator:
 11326 00008426 C8000000                        enter 0, 0
 11327 0000842A 48837D1801                      cmp COUNT, 1
 11328 0000842F 0F8585010000                    jne L_error_arg_count_1
 11329 00008435 488B4520                        mov rax, PARAM(0)
 11330                                          assert_fraction(rax)
    53 00008439 803812              <1>  cmp byte [%1], %2
    54 0000843C 0F854C020000        <1>  jne L_error_incorrect_type
 11331 00008442 488B7809                        mov rdi, qword [rax + 1 + 8]
 11332 00008446 E8BE000000                      call make_integer
 11333 0000844B C9                              leave
 11334 0000844C C21800                          ret AND_KILL_FRAME(1)
 11335                                  
 11336                                  L_code_ptr_is_eq:
 11337 0000844F C8000000                	enter 0, 0
 11338 00008453 48837D1802              	cmp COUNT, 2
 11339 00008458 0F8591010000            	jne L_error_arg_count_2
 11340 0000845E 488B7D20                	mov rdi, PARAM(0)
 11341 00008462 488B7528                	mov rsi, PARAM(1)
 11342 00008466 4839F7                  	cmp rdi, rsi
 11343 00008469 746C                    	je .L_eq_true
 11344 0000846B 8A17                    	mov dl, byte [rdi]
 11345 0000846D 3A16                    	cmp dl, byte [rsi]
 11346 0000846F 7572                    	jne .L_eq_false
 11347 00008471 80FA02                  	cmp dl, T_char
 11348 00008474 7459                    	je .L_char
 11349 00008476 80FA41                  	cmp dl, T_interned_symbol
 11350 00008479 7440                    	je .L_interned_symbol
 11351 0000847B 80FA42                          cmp dl, T_uninterned_symbol
 11352 0000847E 7443                            je .L_uninterned_symbol
 11353 00008480 80FA13                  	cmp dl, T_real
 11354 00008483 742E                    	je .L_real
 11355 00008485 80FA12                  	cmp dl, T_fraction
 11356 00008488 7413                    	je .L_fraction
 11357 0000848A 80FA11                          cmp dl, T_integer
 11358 0000848D 7402                            je .L_integer
 11359 0000848F EB52                    	jmp .L_eq_false
 11360                                  .L_integer:
 11361 00008491 488B4601                        mov rax, qword [rsi + 1]
 11362 00008495 483B4701                        cmp rax, qword [rdi + 1]
 11363 00008499 7548                            jne .L_eq_false
 11364 0000849B EB3A                            jmp .L_eq_true
 11365                                  .L_fraction:
 11366 0000849D 488B4601                	mov rax, qword [rsi + 1]
 11367 000084A1 483B4701                	cmp rax, qword [rdi + 1]
 11368 000084A5 753C                    	jne .L_eq_false
 11369 000084A7 488B4609                	mov rax, qword [rsi + 1 + 8]
 11370 000084AB 483B4709                	cmp rax, qword [rdi + 1 + 8]
 11371 000084AF 7532                    	jne .L_eq_false
 11372 000084B1 EB24                    	jmp .L_eq_true
 11373                                  .L_real:
 11374 000084B3 488B4601                	mov rax, qword [rsi + 1]
 11375 000084B7 483B4701                	cmp rax, qword [rdi + 1]
 11376                                  .L_interned_symbol:
 11377                                  	; never reached, because interned_symbols are static!
 11378                                  	; but I'm keeping it in case, I'll ever change
 11379                                  	; the implementation
 11380 000084BB 488B4601                	mov rax, qword [rsi + 1]
 11381 000084BF 483B4701                	cmp rax, qword [rdi + 1]
 11382                                  .L_uninterned_symbol:
 11383 000084C3 4C8B4701                        mov r8, qword [rdi + 1]
 11384 000084C7 4C3B4601                        cmp r8, qword [rsi + 1]
 11385 000084CB 7516                            jne .L_eq_false
 11386 000084CD EB08                            jmp .L_eq_true
 11387                                  .L_char:
 11388 000084CF 8A5E01                  	mov bl, byte [rsi + 1]
 11389 000084D2 3A5F01                  	cmp bl, byte [rdi + 1]
 11390 000084D5 750C                    	jne .L_eq_false
 11391                                  .L_eq_true:
 11392 000084D7 48B8-                   	mov rax, sob_boolean_true
 11392 000084D9 [0300000000000000] 
 11393 000084E1 EB0A                    	jmp .L_eq_exit
 11394                                  .L_eq_false:
 11395 000084E3 48B8-                   	mov rax, sob_boolean_false
 11395 000084E5 [0200000000000000] 
 11396                                  .L_eq_exit:
 11397 000084ED C9                      	leave
 11398 000084EE C22000                  	ret AND_KILL_FRAME(2)
 11399                                  
 11400                                  make_real:
 11401 000084F1 C8000000                        enter 0, 0
 11402 000084F5 BF09000000                      mov rdi, (1 + 8)
 11403 000084FA E8ECE3FFFF                      call malloc
 11404 000084FF C60013                          mov byte [rax], T_real
 11405 00008502 F20F114001                      movsd qword [rax + 1], xmm0
 11406 00008507 C9                              leave 
 11407 00008508 C3                              ret
 11408                                          
 11409                                  make_integer:
 11410 00008509 C8000000                        enter 0, 0
 11411 0000850D 4889FE                          mov rsi, rdi
 11412 00008510 BF09000000                      mov rdi, (1 + 8)
 11413 00008515 E8D1E3FFFF                      call malloc
 11414 0000851A C60011                          mov byte [rax], T_integer
 11415 0000851D 48897001                        mov qword [rax + 1], rsi
 11416 00008521 C9                              leave
 11417 00008522 C3                              ret
 11418                                          
 11419                                  L_error_integer_range:
 11420 00008523 488B3C25[00000000]              mov rdi, qword [stderr]
 11421 0000852B 48BE-                           mov rsi, fmt_integer_range
 11421 0000852D [3011000000000000] 
 11422 00008535 B800000000                      mov rax, 0
 11423                                          ENTER
    44 0000853A C8000000            <1>  enter 0, 0
    45 0000853E 4883E4F0            <1>  and rsp, ~15
 11424 00008542 E8(00000000)                    call fprintf
 11425                                          LEAVE
    49 00008547 C9                  <1>  leave
 11426 00008548 48C7C0FBFFFFFF                  mov rax, -5
 11427 0000854F E8(00000000)                    call exit
 11428                                  
 11429                                  L_error_arg_negative:
 11430 00008554 488B3C25[00000000]              mov rdi, qword [stderr]
 11431 0000855C 48BE-                           mov rsi, fmt_arg_negative
 11431 0000855E [0810000000000000] 
 11432 00008566 B800000000                      mov rax, 0
 11433                                          ENTER
    44 0000856B C8000000            <1>  enter 0, 0
    45 0000856F 4883E4F0            <1>  and rsp, ~15
 11434 00008573 E8(00000000)                    call fprintf
 11435                                          LEAVE
    49 00008578 C9                  <1>  leave
 11436 00008579 48C7C0FDFFFFFF                  mov rax, -3
 11437 00008580 E8(00000000)                    call exit
 11438                                  
 11439                                  L_error_arg_count_0:
 11440 00008585 488B3C25[00000000]              mov rdi, qword [stderr]
 11441 0000858D 48BE-                           mov rsi, fmt_arg_count_0
 11441 0000858F [2E10000000000000] 
 11442 00008597 488B5518                        mov rdx, COUNT
 11443 0000859B B800000000                      mov rax, 0
 11444                                          ENTER
    44 000085A0 C8000000            <1>  enter 0, 0
    45 000085A4 4883E4F0            <1>  and rsp, ~15
 11445 000085A8 E8(00000000)                    call fprintf
 11446                                          LEAVE
    49 000085AD C9                  <1>  leave
 11447 000085AE 48C7C0FDFFFFFF                  mov rax, -3
 11448 000085B5 E8(00000000)                    call exit
 11449                                  
 11450                                  L_error_arg_count_1:
 11451 000085BA 488B3C25[00000000]              mov rdi, qword [stderr]
 11452 000085C2 48BE-                           mov rsi, fmt_arg_count_1
 11452 000085C4 [5610000000000000] 
 11453 000085CC 488B5518                        mov rdx, COUNT
 11454 000085D0 B800000000                      mov rax, 0
 11455                                          ENTER
    44 000085D5 C8000000            <1>  enter 0, 0
    45 000085D9 4883E4F0            <1>  and rsp, ~15
 11456 000085DD E8(00000000)                    call fprintf
 11457                                          LEAVE
    49 000085E2 C9                  <1>  leave
 11458 000085E3 48C7C0FDFFFFFF                  mov rax, -3
 11459 000085EA E8(00000000)                    call exit
 11460                                  
 11461                                  L_error_arg_count_2:
 11462 000085EF 488B3C25[00000000]              mov rdi, qword [stderr]
 11463 000085F7 48BE-                           mov rsi, fmt_arg_count_2
 11463 000085F9 [BC10000000000000] 
 11464 00008601 488B5518                        mov rdx, COUNT
 11465 00008605 B800000000                      mov rax, 0
 11466                                          ENTER
    44 0000860A C8000000            <1>  enter 0, 0
    45 0000860E 4883E4F0            <1>  and rsp, ~15
 11467 00008612 E8(00000000)                    call fprintf
 11468                                          LEAVE
    49 00008617 C9                  <1>  leave
 11469 00008618 48C7C0FDFFFFFF                  mov rax, -3
 11470 0000861F E8(00000000)                    call exit
 11471                                  
 11472                                  L_error_arg_count_12:
 11473 00008624 488B3C25[00000000]              mov rdi, qword [stderr]
 11474 0000862C 48BE-                           mov rsi, fmt_arg_count_12
 11474 0000862E [7C10000000000000] 
 11475 00008636 488B5518                        mov rdx, COUNT
 11476 0000863A B800000000                      mov rax, 0
 11477                                          ENTER
    44 0000863F C8000000            <1>  enter 0, 0
    45 00008643 4883E4F0            <1>  and rsp, ~15
 11478 00008647 E8(00000000)                    call fprintf
 11479                                          LEAVE
    49 0000864C C9                  <1>  leave
 11480 0000864D 48C7C0FDFFFFFF                  mov rax, -3
 11481 00008654 E8(00000000)                    call exit
 11482                                  
 11483                                  L_error_arg_count_3:
 11484 00008659 488B3C25[00000000]              mov rdi, qword [stderr]
 11485 00008661 48BE-                           mov rsi, fmt_arg_count_3
 11485 00008663 [E310000000000000] 
 11486 0000866B 488B5518                        mov rdx, COUNT
 11487 0000866F B800000000                      mov rax, 0
 11488                                          ENTER
    44 00008674 C8000000            <1>  enter 0, 0
    45 00008678 4883E4F0            <1>  and rsp, ~15
 11489 0000867C E8(00000000)                    call fprintf
 11490                                          LEAVE
    49 00008681 C9                  <1>  leave
 11491 00008682 48C7C0FDFFFFFF                  mov rax, -3
 11492 00008689 E8(00000000)                    call exit
 11493                                          
 11494                                  L_error_incorrect_type:
 11495 0000868E 488B3C25[00000000]              mov rdi, qword [stderr]
 11496 00008696 48BE-                           mov rsi, fmt_type
 11496 00008698 [0C11000000000000] 
 11497 000086A0 B800000000                      mov rax, 0
 11498                                          ENTER
    44 000086A5 C8000000            <1>  enter 0, 0
    45 000086A9 4883E4F0            <1>  and rsp, ~15
 11499 000086AD E8(00000000)                    call fprintf
 11500                                          LEAVE
    49 000086B2 C9                  <1>  leave
 11501 000086B3 48C7C0FCFFFFFF                  mov rax, -4
 11502 000086BA E8(00000000)                    call exit
 11503                                  
 11504                                  L_error_division_by_zero:
 11505 000086BF 488B3C25[00000000]              mov rdi, qword [stderr]
 11506 000086C7 48BE-                           mov rsi, fmt_division_by_zero
 11506 000086C9 [4D11000000000000] 
 11507 000086D1 B800000000                      mov rax, 0
 11508                                          ENTER
    44 000086D6 C8000000            <1>  enter 0, 0
    45 000086DA 4883E4F0            <1>  and rsp, ~15
 11509 000086DE E8(00000000)                    call fprintf
 11510                                          LEAVE
    49 000086E3 C9                  <1>  leave
 11511 000086E4 48C7C0F8FFFFFF                  mov rax, -8
 11512 000086EB E8(00000000)                    call exit
 11513                                  
 11514                                  section .data
 11515                                  gensym_count:
 11516 00000FFD 0000000000000000                dq 0
 11517                                  fmt_char:
 11518 00001005 256300                          db `%c\0`
 11519                                  fmt_arg_negative:
 11520 00001008 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
 11520 00001011 7267756D656E742063-
 11520 0000101A 616E6E6F7420626520-
 11520 00001023 6E656761746976652E-
 11520 0000102C 0A00               
 11521                                  fmt_arg_count_0:
 11522 0000102E 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 11522 00001037 74696E67207A65726F-
 11522 00001040 20617267756D656E74-
 11522 00001049 732E20466F756E6420-
 11522 00001052 25640A00           
 11523                                  fmt_arg_count_1:
 11524 00001056 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 11524 0000105F 74696E67206F6E6520-
 11524 00001068 617267756D656E742E-
 11524 00001071 20466F756E64202564-
 11524 0000107A 0A00               
 11525                                  fmt_arg_count_12:
 11526 0000107C 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 11526 00001085 74696E67206F6E6520-
 11526 0000108E 726571756972656420-
 11526 00001097 616E64206F6E65206F-
 11526 000010A0 7074696F6E616C2061-
 11526 000010A9 7267756D656E742E20-
 11526 000010B2 466F756E642025640A-
 11526 000010BB 00                 
 11527                                  fmt_arg_count_2:
 11528 000010BC 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 11528 000010C5 74696E672074776F20-
 11528 000010CE 617267756D656E7473-
 11528 000010D7 2E20466F756E642025-
 11528 000010E0 640A00             
 11529                                  fmt_arg_count_3:
 11530 000010E3 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 11530 000010EC 74696E672074687265-
 11530 000010F5 6520617267756D656E-
 11530 000010FE 74732E20466F756E64-
 11530 00001107 2025640A00         
 11531                                  fmt_type:
 11532 0000110C 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 11532 00001115 696F6E207061737365-
 11532 0000111E 6420696E636F727265-
 11532 00001127 637420747970650A00 
 11533                                  fmt_integer_range:
 11534 00001130 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 11534 00001139 7265637420696E7465-
 11534 00001142 6765722072616E6765-
 11534 0000114B 0A00               
 11535                                  fmt_division_by_zero:
 11536 0000114D 212121204469766973-             db `!!! Division by zero\n\0`
 11536 00001156 696F6E206279207A65-
 11536 0000115F 726F0A00           
 11537                                  fmt_scheme_error_part_1:
 11538 00001163 0A2121212054686520-             db `\n!!! The procedure \0`
 11538 0000116C 70726F636564757265-
 11538 00001175 2000               
 11539                                  fmt_scheme_error_part_2:
 11540 00001177 2061736B656420746F-             db ` asked to terminate the program\n`
 11540 00001180 207465726D696E6174-
 11540 00001189 65207468652070726F-
 11540 00001192 6772616D0A         
 11541 00001197 202020207769746820-             db `    with the following message:\n\n\0`
 11541 000011A0 74686520666F6C6C6F-
 11541 000011A9 77696E67206D657373-
 11541 000011B2 6167653A0A0A00     
 11542                                  fmt_scheme_error_part_3:
 11543 000011B9 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 11543 000011C2 210A0A00           
